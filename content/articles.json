[{"id":"c46d5fad-d9cb-4862-b19f-3e5cc256f05c","slug":"dependency-injection-kontra-typescript","title":"Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description":"Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za pomocą kontenerów IoC (Inversion of Control), które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","createdAt":"2024-06-20T00:00:00.000Z"},{"id":"defad3f0-f88a-4c83-bfc5-4fb6ba2a2233","slug":"obserwatorium-czyli-wzorzec-projektowy-obserwatora","title":"Obserwatorium, czyli wzorzec projektowy obserwatora","description":"Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.","createdAt":"2024-06-20T00:00:00.000Z"},{"id":"87d76960-23ff-414a-9729-f1c51a6639a6","slug":"signalizacja-czyli-koncept-signals-w-typescript","title":"Signalizacja, czyli koncept Signals w Typescript","description":"Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.","createdAt":"2024-06-20T00:00:00.000Z"}]