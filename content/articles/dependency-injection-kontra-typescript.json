{"id":"84111c84-9172-4f19-8e61-24757f8f6550","slug":"dependency-injection-kontra-typescript","content":"<p>Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami.</p>\n<p>W TypeScript, DI można zaimplementować na kilka sposobów, w tym za pomocą kontenerów IoC (Inversion of Control), które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.</p>\n<h2>Spis Treści</h2>\n<ol>\n<li>Podstawy Dependency Injection</li>\n<li>Prosty przykład DI</li>\n<li>Wstrzykiwanie zależności za pomocą kontenera IoC</li>\n<li>Korzystanie z dekoratorów do wstrzykiwania zależności</li>\n</ol>\n<h2>1. Podstawy Dependency Injection</h2>\n<p>W Dependency Injection chodzi o przekazywanie zależności do obiektu zamiast tworzenia ich bezpośrednio wewnątrz obiektu. Dzięki temu można łatwo wymieniać zależności, co ułatwia testowanie i modyfikowanie kodu.</p>\n<h2>2. Prosty przykład DI</h2>\n<p>Rozważmy prosty przykład, w którym klasa <code>UserService</code> potrzebuje instancji <code>UserRepository</code>:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">userRepository: UserRepository</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span> = userRepository;\n  }\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> userRepository = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserRepository</span>();\n<span class=\"hljs-keyword\">const</span> userService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserService</span>(userRepository);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// Output: User 1</span>\n</code></pre>\n<p>W powyższym przykładzie <code>UserRepository</code> jest wstrzykiwany do <code>UserService</code> przez konstruktor.</p>\n<h2>3. Wstrzykiwanie zależności za pomocą kontenera IoC</h2>\n<p>Aby lepiej zarządzać zależnościami, możemy użyć kontenera IoC. Przykład poniżej pokazuje, jak można to zrobić przy użyciu prostego kontenera DI:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IoCContainer</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">dependencies</span>: <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n\n  register&#x3C;T>(<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">dependency</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dependencies</span>.<span class=\"hljs-title function_\">set</span>(key, dependency);\n  }\n\n  resolve&#x3C;T>(<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>): T {\n    <span class=\"hljs-keyword\">const</span> dependency = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dependencies</span>.<span class=\"hljs-title function_\">get</span>(key);\n    <span class=\"hljs-keyword\">if</span> (!dependency) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`Dependency not found: <span class=\"hljs-subst\">${key}</span>`</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> dependency;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">userRepository: UserRepository</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span> = userRepository;\n  }\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IoCContainer</span>();\ncontainer.<span class=\"hljs-title function_\">register</span>(<span class=\"hljs-string\">\"UserRepository\"</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserRepository</span>());\n\n<span class=\"hljs-keyword\">const</span> userRepository = container.<span class=\"hljs-property\">resolve</span>&#x3C;<span class=\"hljs-title class_\">UserRepository</span>>(<span class=\"hljs-string\">\"UserRepository\"</span>);\n<span class=\"hljs-keyword\">const</span> userService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserService</span>(userRepository);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// Output: User 1</span>\n</code></pre>\n<p>W tym przykładzie używamy kontenera IoC do rejestrowania i rozwiązywania zależności.</p>\n<h2>4. Korzystanie z dekoratorów do wstrzykiwania zależności</h2>\n<p>TypeScript pozwala na używanie dekoratorów, które mogą ułatwić wstrzykiwanie zależności. Przykład poniżej pokazuje, jak można to zrobić:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Injectable</span>(<span class=\"hljs-params\">target: <span class=\"hljs-built_in\">any</span></span>) {\n  <span class=\"hljs-comment\">// Rejestracja klasy jako zależności</span>\n  <span class=\"hljs-title class_\">IoCContainer</span>.<span class=\"hljs-title function_\">getInstance</span>().<span class=\"hljs-title function_\">register</span>(target.<span class=\"hljs-property\">name</span>, target);\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IoCContainer</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-attr\">instance</span>: <span class=\"hljs-title class_\">IoCContainer</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">dependencies</span>: <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {}\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getInstance</span>(): <span class=\"hljs-title class_\">IoCContainer</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">IoCContainer</span>.<span class=\"hljs-property\">instance</span>) {\n      <span class=\"hljs-title class_\">IoCContainer</span>.<span class=\"hljs-property\">instance</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IoCContainer</span>();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">IoCContainer</span>.<span class=\"hljs-property\">instance</span>;\n  }\n\n  register&#x3C;T>(<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">dependency</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dependencies</span>.<span class=\"hljs-title function_\">set</span>(key, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">dependency</span>());\n  }\n\n  resolve&#x3C;T>(<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>): T {\n    <span class=\"hljs-keyword\">const</span> dependency = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dependencies</span>.<span class=\"hljs-title function_\">get</span>(key);\n    <span class=\"hljs-keyword\">if</span> (!dependency) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`Dependency not found: <span class=\"hljs-subst\">${key}</span>`</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> dependency;\n  }\n}\n\n<span class=\"hljs-meta\">@Injectable</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-meta\">@Injectable</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span> =\n      <span class=\"hljs-title class_\">IoCContainer</span>.<span class=\"hljs-title function_\">getInstance</span>().<span class=\"hljs-property\">resolve</span>&#x3C;<span class=\"hljs-title class_\">UserRepository</span>>(<span class=\"hljs-string\">\"UserRepository\"</span>);\n  }\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> userService =\n  <span class=\"hljs-title class_\">IoCContainer</span>.<span class=\"hljs-title function_\">getInstance</span>().<span class=\"hljs-property\">resolve</span>&#x3C;<span class=\"hljs-title class_\">UserService</span>>(<span class=\"hljs-string\">\"UserService\"</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// Output: User 1</span>\n</code></pre>\n<p>W tym przykładzie używamy dekoratorów, aby rejestrować klasy jako zależności w kontenerze IoC i automatycznie wstrzykiwać je w klasach, które ich potrzebują.</p>\n<h2>Podsumowanie</h2>\n<p>Dependency Injection w TypeScript to potężna technika, która może znacznie ułatwić zarządzanie zależnościami i poprawić testowalność oraz modularność kodu. Przedstawione powyżej przykłady pokazują różne podejścia do implementacji DI, w tym bezpośrednie wstrzykiwanie przez konstruktor, korzystanie z kontenerów IoC oraz używanie dekoratorów. Dzięki tym technikom można tworzyć bardziej elastyczne i łatwe w utrzymaniu aplikacje.</p>","title":"Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description":"Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za pomocą kontenerów IoC (Inversion of Control), które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","keywords":["typescript","wzorce","javascript"],"categories":["typescript","wzorce"],"createdAt":"2024-06-20T00:00:00.000Z"}