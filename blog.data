[{"_1":2},"article-list",{"_3":4},"data",{"_5":6,"_22":81,"_82":-7},"articles",[7,34,50,61,71],{"_8":9,"_10":11,"_12":13,"_22":23,"_24":25,"_26":27,"_28":29,"_30":31,"_32":33},"title","Framework na 80 linii, czyli implementacja Signal API od zera","description","Dowiedz się, jak zaimplementować minimalistyczny system reaktywny (Signal API) w JavaScript/TypeScript w mniej niż 80 liniach kodu. Praktyczny przewodnik krok po kroku.","keywords",[14,15,16,17,18,19,20,21],"signal","reactive","javascript","typescript","frontend","framework","architektura","blog","categories",[17],"createdAt",["D",1750550400000],"id","ed01d120-f371-4ea4-a1a7-e2b01c043131","slug","framework-na-80-linii-czyli-implementacja-signal-api-od-zera","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/framework-na-80-linii-czyli-implementacja-signal-api-od-zera.md",{"_8":35,"_10":36,"_12":37,"_22":43,"_24":46,"_26":47,"_28":48,"_30":31,"_32":49},"Proste deployowanie przy użyciu GitHub Actions","Dowiedz się, jak wdrożyć dowolną aplikację za pomocą GitHub Actions w prosty i automatyczny sposób.",[38,39,40,41,42,21],"react","github actions","deployment","CI/CD","automatyzacja",[44,45],"devops","ci",["D",1741996800000],"8f5b62b4-d466-43a6-b9fb-a498fcf51019","deployment-github-actions","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/deployment-github-actions.md",{"_8":51,"_10":52,"_12":53,"_22":55,"_24":57,"_26":58,"_28":59,"_30":31,"_32":60},"Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.",[17,54,16,21],"wzorce projektowe",[17,56],"wzorce-projektowe",["D",1718841600000],"7dc39d9c-ba58-4ba7-bdb3-80e89f99e2db","dependency-injection-kontra-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md",{"_8":62,"_10":63,"_12":64,"_22":66,"_24":67,"_26":68,"_28":69,"_30":31,"_32":70},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[17,54,65,21],"programowanie",[17,56],["D",1718841600000],"9e5fa98a-ad45-4d24-a321-5526f324a553","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_8":72,"_10":73,"_12":74,"_22":76,"_24":77,"_26":78,"_28":79,"_30":31,"_32":80},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[17,54,75,21],"signals",[17,56],["D",1718841600000],"ffc736c0-1e82-4239-82b0-1d7804486685","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md",[17,56,44,45],"category"]
