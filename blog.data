[{"_1":2},"article-list",{"_3":4},"data",{"_5":6,"_22":82,"_83":-7},"articles",[7,35,51,62,72],{"_8":9,"_10":11,"_12":13,"_22":23,"_24":25,"_26":27,"_28":29,"_30":31,"_32":33,"_34":-7},"title","Framework na 70 linii, czyli implementacja Signal API od zera","description","Dowiedz się, jak zaimplementować minimalistyczny system reaktywny (Signal API) w JavaScript/TypeScript w mniej niż 70 liniach kodu. Praktyczny przewodnik krok po kroku.","keywords",[14,15,16,17,18,19,20,21],"signal","reactive","javascript","typescript","frontend","framework","architektura","blog","categories",[17],"createdAt",["D",1750550400000],"id","295f1e0d-bfb1-4259-9de6-a98c773642a8","slug","framework-na-70-linii-czyli-implementacja-signal-api-od-zera","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/framework-na-70-linii-czyli-implementacja-signal-api-od-zera.md","quiz",{"_8":36,"_10":37,"_12":38,"_22":44,"_24":47,"_26":48,"_28":49,"_30":31,"_32":50,"_34":-7},"Proste deployowanie przy użyciu GitHub Actions","Dowiedz się, jak wdrożyć dowolną aplikację za pomocą GitHub Actions w prosty i automatyczny sposób.",[39,40,41,42,43,21],"react","github actions","deployment","CI/CD","automatyzacja",[45,46],"devops","ci",["D",1741996800000],"de2fdcd6-fef7-4564-ac7b-62ac37c1623a","deployment-github-actions","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/deployment-github-actions.md",{"_8":52,"_10":53,"_12":54,"_22":56,"_24":58,"_26":59,"_28":60,"_30":31,"_32":61,"_34":-7},"Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.",[17,55,16,21],"wzorce projektowe",[17,57],"wzorce-projektowe",["D",1718841600000],"a2cc007f-a16b-484e-a27c-c67564616ded","dependency-injection-kontra-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md",{"_8":63,"_10":64,"_12":65,"_22":67,"_24":68,"_26":69,"_28":70,"_30":31,"_32":71,"_34":-7},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[17,55,66,21],"programowanie",[17,57],["D",1718841600000],"28b4f0d4-7dba-4866-bf22-e6fe303ba9cf","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_8":73,"_10":74,"_12":75,"_22":77,"_24":78,"_26":79,"_28":80,"_30":31,"_32":81,"_34":-7},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[17,55,76,21],"signals",[17,57],["D",1718841600000],"8e6a4bb3-aaa6-4607-94a2-6d74ee3993de","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md",[17,57,45,46],"category"]
