[{"_1":2,"_4":5},"root",{"_3":-5},"data","article-list",{"_3":6},{"_7":8,"_19":50,"_51":-7},"articles",[9,30,40],{"_10":11,"_12":13,"_14":15,"_19":20,"_21":22,"_23":24,"_25":26,"_27":-7,"_28":29},"title","Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","keywords",[16,17,18],"typescript","wzorce","javascript","categories",[16,17],"createdAt",["D",1718841600000],"id","a17184f1-7a7a-4c5d-b925-2cca1355293c","slug","dependency-injection-kontra-typescript","content","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.mdx",{"_10":31,"_12":32,"_14":33,"_19":35,"_21":36,"_23":37,"_25":38,"_27":-7,"_28":39},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[16,17,34],"programowanie",[16,17],["D",1718841600000],"8d774592-ad24-421e-9880-c468a7692ea5","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.mdx",{"_10":41,"_12":42,"_14":43,"_19":45,"_21":46,"_23":47,"_25":48,"_27":-7,"_28":49},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[16,17,44],"signals",[16,17],["D",1718841600000],"7af45a95-7be9-462f-b4ba-483e5db2158d","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.mdx",[16,17],"category"]
