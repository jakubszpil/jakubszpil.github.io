[{"_1":2},"article-list",{"_3":4},"data",{"_5":6,"_43":44,"_49":-7},"articles",[7,20,27,33,38],{"_8":9,"_10":11,"_12":13,"_14":15,"_16":17,"_18":19},"title","Framework na 70 linii, czyli implementacja Signal API od zera","description","Dowiedz się, jak zaimplementować minimalistyczny system reaktywny (Signal API) w JavaScript/TypeScript w mniej niż 70 liniach kodu. Praktyczny przewodnik krok po kroku.","createdAt","2025-06-22T00:00:00.000Z","id","5161416e-9b28-47a0-97a5-eff144c060db","slug","framework-na-70-linii-czyli-implementacja-signal-api-od-zera","readingTime","3 minuty",{"_8":21,"_10":22,"_12":23,"_14":24,"_16":25,"_18":26},"Proste deployowanie przy użyciu GitHub Actions","Dowiedz się, jak wdrożyć dowolną aplikację za pomocą GitHub Actions w prosty i automatyczny sposób.","2025-03-15T00:00:00.000Z","c9fba4c0-3666-43bd-b57b-6f55b34be4ab","deployment-github-actions","2 minuty",{"_8":28,"_10":29,"_12":30,"_14":31,"_16":32,"_18":19},"Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","2024-06-20T00:00:00.000Z","df266c19-52f1-4fbf-9c54-6b15216b7144","dependency-injection-kontra-typescript",{"_8":34,"_10":35,"_12":30,"_14":36,"_16":37,"_18":19},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.","7f4926d9-dac6-427a-bba2-2c447de2e1b3","obserwatorium-czyli-wzorzec-projektowy-obserwatora",{"_8":39,"_10":40,"_12":30,"_14":41,"_16":42,"_18":26},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.","0c0af6dd-129b-4dc1-abe5-eb8640de093d","signalizacja-czyli-koncept-signals-w-typescript","categories",[45,46,47,48],"typescript","wzorce-projektowe","devops","ci","category"]
