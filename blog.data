[{"_1":2},"article-list",{"_3":4},"data",{"_5":6,"_7":8,"_9":-7},"articles",["P",6],"categories",["P",8],"category"]
P6:[[11,36,48,58],{"_12":13,"_14":15,"_16":17,"_7":23,"_26":27,"_28":29,"_30":31,"_32":33,"_34":35},"title","Proste deployowanie przy użyciu GitHub Actions","description","Dowiedz się, jak wdrożyć dowolną aplikację za pomocą GitHub Actions w prosty i automatyczny sposób.","keywords",[18,19,20,21,22],"react","github actions","deployment","CI/CD","automatyzacja",[24,25],"devops","ci","createdAt",["D",1741996800000],"id","94fb07ad-6d67-400f-9487-4914ecc34214","slug","deployment-github-actions","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/deployment-github-actions.md",{"_12":37,"_14":38,"_16":39,"_7":43,"_26":44,"_28":45,"_30":46,"_32":33,"_34":47},"Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.",[40,41,42],"typescript","wzorce","javascript",[40,41],["D",1718841600000],"cc925245-ea20-4dc8-a4af-da7cf7186a02","dependency-injection-kontra-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md",{"_12":49,"_14":50,"_16":51,"_7":53,"_26":54,"_28":55,"_30":56,"_32":33,"_34":57},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[40,41,52],"programowanie",[40,41],["D",1718841600000],"4001b8df-5875-4efc-8bd6-cb6681cbf915","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_12":59,"_14":60,"_16":61,"_7":63,"_26":64,"_28":65,"_30":66,"_32":33,"_34":67},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[40,41,62],"signals",[40,41],["D",1718841600000],"d124dbea-6ee3-4c8e-99f2-e990c0ad2f23","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md"]
P8:[[40,41,24,25]]
