[{"_1":2},"article-list",{"_3":4},"data",{"_5":6,"_22":87,"_88":-7},"articles",[7,37,55,67,77],{"_8":9,"_10":11,"_12":13,"_22":23,"_24":25,"_26":27,"_28":29,"_30":31,"_32":33,"_34":-7,"_35":36},"title","Framework na 70 linii, czyli implementacja Signal API od zera","description","Dowiedz się, jak zaimplementować minimalistyczny system reaktywny (Signal API) w JavaScript/TypeScript w mniej niż 70 liniach kodu. Praktyczny przewodnik krok po kroku.","keywords",[14,15,16,17,18,19,20,21],"signal","reactive","javascript","typescript","frontend","framework","architektura","blog","categories",[17],"createdAt","2025-06-22T00:00:00.000Z","id","23cc1f76-02e4-49b6-939a-f86f95e95e04","slug","framework-na-70-linii-czyli-implementacja-signal-api-od-zera","content","<p>Dowiedz się, jak zbudować własny, minimalistyczny system reaktywny inspirowany Signal API – od koncepcji po gotowy kod. Ten artykuł przeprowadzi Cię krok po kroku przez założenia architektury, implementację, przykłady użycia i pomysły na dalszy rozwój. 🚦</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-signal-api\">Czym jest Signal API?</a></li>\n<li><a href=\"#po-co-nam-sygna%C5%82y\">Po co nam sygnały?</a></li>\n<li><a href=\"#podstawowe-za%C5%82o%C5%BCenia-architektury\">Podstawowe założenia architektury</a></li>\n<li><a href=\"#implementacja-signal-api\">Implementacja Signal API</a></li>\n<li><a href=\"#prosty-przyk%C5%82ad-u%C5%BCycia\">Prosty przykład użycia</a></li>\n<li><a href=\"#co-dalej-inspiracje-i-rozwijanie-w%C5%82asnego-frameworka\">Co dalej? Inspiracje i rozwijanie własnego frameworka</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-signal-api\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-signal-api\">>></a>Czym jest Signal API?</h2>\n<p><strong>Signal API</strong> to nowoczesny sposób zarządzania stanem i propagowania zmian w aplikacjach frontendowych. Sygnał (Signal) to po prostu wartość, która jest obserwowalna – każda zmiana tej wartości automatycznie powiadamia powiązane fragmenty kodu, które mogą na nią zareagować (np. przerysować UI). Dzięki temu nie musisz ręcznie pilnować subskrypcji i aktualizacji — system robi to za Ciebie w sposób wydajny i przewidywalny.</p>\n<hr>\n<h2 id=\"po-co-nam-sygnały\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#po-co-nam-sygnały\">>></a>Po co nam sygnały?</h2>\n<ul>\n<li>Eliminują ręczną obsługę subskrypcji i odświeżania 🔄</li>\n<li>Upraszczają zarządzanie stanem i zależnościami w aplikacji</li>\n<li>Pozwalają na budowę bardzo wydajnych i przewidywalnych interfejsów</li>\n<li>Zwiększają czytelność i modularność kodu</li>\n</ul>\n<p>Mechanika sygnałów leży u podstaw takich rozwiązań jak SolidJS Signals, Preact Signals czy system reaktywności w Vue.js.</p>\n<hr>\n<h2 id=\"podstawowe-założenia-architektury\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-założenia-architektury\">>></a>Podstawowe założenia architektury</h2>\n<ol>\n<li><strong>Signal</strong>: funkcja przechowująca wartość i listę „tasków” (efektów) zależnych od tej wartości.</li>\n<li><strong>effect</strong>: funkcja, która wykona zadanie reagując automatycznie na zmiany sygnału.</li>\n<li><strong>computed</strong>: sygnał zależny, obliczany na podstawie innych sygnałów.</li>\n<li><strong>Task i AbortSignal</strong>: pozwalają bezpiecznie anulować zadania, gdy są już niepotrzebne.</li>\n</ol>\n<p>Cel: zachować prostotę implementacji i zrozumienie działania reaktywności od podstaw.</p>\n<hr>\n<h2 id=\"implementacja-signal-api\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#implementacja-signal-api\">>></a>Implementacja Signal API</h2>\n<p>Poniżej znajdziesz kompletny kod minimalistycznego Signal API – całość w TypeScript, gotowa do użycia i dalszej rozbudowy! 🛠️</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Task</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">abortSignal</span>: <span class=\"hljs-title class_\">AbortSignal</span></span>) =></span> <span class=\"hljs-built_in\">void</span>;\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;T> = <span class=\"hljs-function\">() =></span> T;\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WritableSignal</span>&#x3C;T> = <span class=\"hljs-title class_\">Signal</span>&#x3C;T> &#x26; {\n  <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-built_in\">void</span>;\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">fn</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">value</span>: T</span>) =></span> T): <span class=\"hljs-built_in\">void</span>;\n};\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">currentTask</span>: <span class=\"hljs-title class_\">Task</span> | <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">currentAbortController</span>: <span class=\"hljs-title class_\">AbortController</span> | <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">runTask</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">Task</span></span>) {\n  <span class=\"hljs-keyword\">if</span> (currentAbortController) currentAbortController.<span class=\"hljs-title function_\">abort</span>();\n  currentAbortController = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AbortController</span>();\n  <span class=\"hljs-title function_\">task</span>(currentAbortController.<span class=\"hljs-property\">signal</span>);\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">Task</span></span>): <span class=\"hljs-built_in\">void</span> {\n  currentTask = task;\n  <span class=\"hljs-title function_\">runTask</span>(task);\n  currentTask = <span class=\"hljs-literal\">null</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> signal&#x3C;T>(<span class=\"hljs-attr\">setupOrValue</span>: T | (<span class=\"hljs-function\">() =></span> T)): <span class=\"hljs-title class_\">WritableSignal</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">tasks</span>: <span class=\"hljs-title class_\">Set</span>&#x3C;<span class=\"hljs-title class_\">Task</span>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">value</span>: T;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">valueSnapshot</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">previousValueSnapshot</span>: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">callSetupOrValue</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (setupOrValue <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Function</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">setupOrValue</span>();\n    <span class=\"hljs-keyword\">return</span> setupOrValue;\n  }\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getValue</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> currentValue = <span class=\"hljs-title function_\">callSetupOrValue</span>();\n    <span class=\"hljs-keyword\">const</span> currentValueSnapshot = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(currentValue);\n\n    <span class=\"hljs-keyword\">if</span> (currentValueSnapshot !== previousValueSnapshot) {\n      previousValueSnapshot = currentValueSnapshot;\n      value = currentValue;\n      valueSnapshot = currentValueSnapshot;\n    }\n\n    <span class=\"hljs-keyword\">return</span> value;\n  }\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">signal</span>: <span class=\"hljs-title class_\">WritableSignal</span>&#x3C;T> = <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">if</span> (currentTask) tasks.<span class=\"hljs-title function_\">add</span>(currentTask);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">getValue</span>();\n  };\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">updateValue</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">payload</span>: T</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-keyword\">const</span> payloadSnapshot = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(payload);\n    <span class=\"hljs-keyword\">if</span> (valueSnapshot === payloadSnapshot) <span class=\"hljs-keyword\">return</span>;\n    value = payload;\n    valueSnapshot = payloadSnapshot;\n    tasks.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">task</span>) =></span> <span class=\"hljs-title function_\">runTask</span>(task));\n  }\n\n  signal.<span class=\"hljs-property\">set</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =></span> <span class=\"hljs-title function_\">updateValue</span>(value);\n\n  signal.<span class=\"hljs-property\">update</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">setter</span>) =></span> <span class=\"hljs-title function_\">updateValue</span>(<span class=\"hljs-title function_\">setter</span>(<span class=\"hljs-title function_\">getValue</span>()));\n\n  <span class=\"hljs-keyword\">return</span> signal;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> computed = &#x3C;T>(<span class=\"hljs-attr\">setup</span>: <span class=\"hljs-function\">() =></span> T): <span class=\"hljs-title class_\">Signal</span>&#x3C;T> => setup;\n</code></pre>\n<hr>\n<h2 id=\"prosty-przykład-użycia\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#prosty-przykład-użycia\">>></a>Prosty przykład użycia</h2>\n<p>Zobacz, jak można wykorzystać własny system sygnałów w praktyce: 👇</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { signal, effect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./lib\"</span>;\n\n<span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Wartość licznika:\"</span>, <span class=\"hljs-title function_\">count</span>());\n});\n\ncount.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Wartość licznika: 1</span>\ncount.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> v + <span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// Wartość licznika: 6</span>\n</code></pre>\n<h3 id=\"signal-z-obiektem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#signal-z-obiektem\">>>></a>signal z obiektem</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { signal, effect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./lib\"</span>;\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">State</span> {\n  <span class=\"hljs-attr\">users</span>: <span class=\"hljs-title class_\">Array</span>&#x3C;<span class=\"hljs-title class_\">User</span>>;\n}\n\n<span class=\"hljs-keyword\">const</span> state = signal&#x3C;<span class=\"hljs-title class_\">State</span>>({\n  <span class=\"hljs-attr\">users</span>: [],\n});\n\n<span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Wartość stanu aplikacji: \"</span>, <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(<span class=\"hljs-title function_\">state</span>()));\n});\n\nstate.<span class=\"hljs-title function_\">set</span>({ <span class=\"hljs-attr\">users</span>: [{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Kuba\"</span> }] }); <span class=\"hljs-comment\">// Wartość stanu aplikacji:  {\"users\":[{\"id\":1,\"name\":\"Kuba\"}]}</span>\n\nstate.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> ({\n  ...prev,\n  <span class=\"hljs-attr\">users</span>: [...prev.<span class=\"hljs-property\">users</span>, { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Ola\"</span> }],\n})); <span class=\"hljs-comment\">// Wartość stanu aplikacji:  {\"users\":[{\"id\":1,\"name\":\"Kuba\"},{\"id\":2,\"name\":\"Ola\"}]}</span>\n</code></pre>\n<h3 id=\"computed\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#computed\">>>></a>computed</h3>\n<p>Obliczanie wartości zależnej od innych sygnałów jest bardzo proste i pozwala na deklaratywność podobną do nowoczesnych frameworków:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { signal, effect, computed } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./lib\"</span>;\n\n<span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">const</span> sum = <span class=\"hljs-title function_\">computed</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">a</span>() + <span class=\"hljs-title function_\">b</span>());\n\n<span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Suma:\"</span>, <span class=\"hljs-title function_\">sum</span>());\n});\n\na.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// Suma: 13</span>\nb.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">20</span>); <span class=\"hljs-comment\">// Suma: 30</span>\n</code></pre>\n<hr>\n<h2 id=\"co-dalej-inspiracje-i-rozwijanie-własnego-frameworka\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-dalej-inspiracje-i-rozwijanie-własnego-frameworka\">>></a>Co dalej? Inspiracje i rozwijanie własnego frameworka</h2>\n<ul>\n<li>Dodaj obsługę efektów czyszczących (cleanup) i anulowanie subskrypcji</li>\n<li>Przenieś sygnały bezpośrednio na poziom UI (np. automatyczna aktualizacja DOM)</li>\n<li>Zintegruj z React, Vue lub własnym mini-frameworkiem</li>\n<li>Zainspiruj się kodem SolidJS, Preact Signals i systemem reaktywnym Vue</li>\n<li>Przetestuj własne pomysły na optymalizację i rozbudowę systemu</li>\n</ul>\n<blockquote>\n<p>Minimalizm daje moc! Dzięki prostej implementacji możesz zrozumieć, jak działają sygnały pod maską i stworzyć swój własny system reaktywności dostosowany do potrzeb. 💡</p>\n</blockquote>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/framework-na-70-linii-czyli-implementacja-signal-api-od-zera.md","quiz","readingTime","3 minuty",{"_8":38,"_10":39,"_12":40,"_22":46,"_24":49,"_26":50,"_28":51,"_30":52,"_32":53,"_34":-7,"_35":54},"Proste deployowanie przy użyciu GitHub Actions","Dowiedz się, jak wdrożyć dowolną aplikację za pomocą GitHub Actions w prosty i automatyczny sposób.",[41,42,43,44,45,21],"react","github actions","deployment","CI/CD","automatyzacja",[47,48],"devops","ci","2025-03-15T00:00:00.000Z","35e3f734-6a49-4603-95ef-633c3a2f03d4","deployment-github-actions","<p>GitHub Actions to potężne narzędzie do automatyzacji procesów CI/CD. W tym artykule na przykładzie aplikacji React pokażę, jak w prosty sposób skonfigurować automatyczne wdrażanie na GitHub Pages z wykorzystaniem GitHub Actions.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#wprowadzenie\">Wprowadzenie</a></li>\n<li><a href=\"#wymagania-wst%C4%99pne\">Wymagania wstępne</a></li>\n<li><a href=\"#tworzenie-aplikacji-react\">Tworzenie aplikacji React</a></li>\n<li><a href=\"#konfiguracja-workflow-github-actions\">Konfiguracja workflow GitHub Actions</a>\n<ul>\n<li><a href=\"#przyk%C5%82adowy-plik-deployyml\">Przykładowy plik deploy.yml</a></li>\n<li><a href=\"#om%C3%B3wienie-krok%C3%B3w-workflow\">Omówienie kroków workflow</a></li>\n</ul>\n</li>\n<li><a href=\"#konfiguracja-github-pages\">Konfiguracja GitHub Pages</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n<li><a href=\"#bonus-pe%C5%82ny-przyk%C5%82ad-w-repozytorium\">Bonus: Pełny przykład w repozytorium</a></li>\n</ol>\n<hr>\n<h2 id=\"wprowadzenie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wprowadzenie\">>></a>Wprowadzenie</h2>\n<p>GitHub Actions umożliwia automatyzację procesów związanych z budowaniem, testowaniem i wdrażaniem aplikacji. Dzięki temu możesz wdrażać swoją aplikację na GitHub Pages lub inny hosting jednym commitem – bez ręcznego wykonywania deployu.</p>\n<hr>\n<h2 id=\"wymagania-wstępne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wymagania-wstępne\">>></a>Wymagania wstępne</h2>\n<p>Przed rozpoczęciem upewnij się, że posiadasz:</p>\n<ul>\n<li>Konto na GitHubie,</li>\n<li>Zainstalowany Node.js oraz npm,</li>\n<li>Aplikację React utworzoną przez <code>create-react-app</code> lub <code>create-react-router</code> (w przykładzie użyto tego drugiego).</li>\n</ul>\n<hr>\n<h2 id=\"tworzenie-aplikacji-react\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tworzenie-aplikacji-react\">>></a>Tworzenie aplikacji React</h2>\n<p>Nie masz jeszcze projektu? Oto jak szybko utworzyć aplikację React:</p>\n<pre><code class=\"hljs language-sh\">npx create-react-router@latest my-app\n<span class=\"hljs-built_in\">cd</span> my-app\ngit init\ngit remote add origin https://github.com/twoj-user/twoj-repo.git\n</code></pre>\n<blockquote>\n<p><strong>Uwaga:</strong> Zmień <code>twoj-user</code> i <code>twoj-repo</code> na nazwę swojego użytkownika i repozytorium na GitHubie.</p>\n</blockquote>\n<hr>\n<h2 id=\"konfiguracja-workflow-github-actions\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#konfiguracja-workflow-github-actions\">>></a>Konfiguracja workflow GitHub Actions</h2>\n<p>Aby wdrożyć aplikację na GitHub Pages automatycznie, utwórz w repozytorium folder <code>.github/workflows</code>, a w nim plik <code>deploy.yml</code>.</p>\n<h3 id=\"przykładowy-plik-deployyml\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykładowy-plik-deployyml\">>>></a>Przykładowy plik deploy.yml</h3>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">React</span> <span class=\"hljs-string\">App</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">GitHub</span> <span class=\"hljs-string\">Pages</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">pull_request:</span>\n  <span class=\"hljs-attr\">push:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span>\n\n<span class=\"hljs-attr\">permissions:</span>\n  <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">write</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build-and-deploy:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span> <span class=\"hljs-string\">repo</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v4</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Install</span> <span class=\"hljs-string\">dependencies</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span> <span class=\"hljs-string\">project</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">build</span>\n\n      <span class=\"hljs-comment\"># - name: Test project</span>\n      <span class=\"hljs-comment\">#   run: npm run test</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">GitHub</span> <span class=\"hljs-string\">Pages</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">JamesIves/github-pages-deploy-action@v4</span>\n        <span class=\"hljs-attr\">if:</span> <span class=\"hljs-string\">github.ref</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">'refs/heads/main'</span> <span class=\"hljs-string\">&#x26;&#x26;</span> <span class=\"hljs-string\">github.event_name</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">'push'</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">gh-pages</span>\n          <span class=\"hljs-attr\">folder:</span> <span class=\"hljs-string\">build</span>\n</code></pre>\n<h3 id=\"omówienie-kroków-workflow\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#omówienie-kroków-workflow\">>>></a>Omówienie kroków workflow</h3>\n<ul>\n<li><strong>Trigger</strong>: Workflow uruchamia się na każdy <code>push</code> do brancha <code>main</code> oraz przy <code>pull_request</code>.</li>\n<li><strong>Uprawnienia</strong>: <code>permissions: contents: write</code> jest niezbędne do wykonania zapisu na branchu z GitHub Pages.</li>\n<li><strong>Kroki:</strong>\n<ol>\n<li><strong>Checkout repo</strong> – pobranie kodu źródłowego.</li>\n<li><strong>Install dependencies</strong> – instalacja zależności npm.</li>\n<li><strong>Build project</strong> – budowanie aplikacji produkcyjnej.</li>\n<li><em>(Opcjonalnie)</em> <strong>Test project</strong> – uruchomienie testów jednostkowych.</li>\n<li><strong>Deploy to GitHub Pages</strong> – automatyczny deploy do gałęzi <code>gh-pages</code> przy użyciu <a href=\"https://github.com/JamesIves/github-pages-deploy-action\">JamesIves/github-pages-deploy-action</a>.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"konfiguracja-github-pages\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#konfiguracja-github-pages\">>></a>Konfiguracja GitHub Pages</h2>\n<p>Aby GitHub Pages korzystało ze zdeployowanej aplikacji:</p>\n<ol>\n<li>Wejdź w ustawienia repozytorium: <strong>Settings</strong> → <strong>Pages</strong>.</li>\n<li>W sekcji <strong>Build and deployment</strong> ustaw <strong>Source</strong> na <code>GitHub Actions</code>.</li>\n<li>Zapisz zmiany. Od teraz każda zmiana na branchu <code>main</code> uruchomi automatyczny deploy.</li>\n</ol>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>GitHub Actions pozwala w pełni zautomatyzować proces wdrażania aplikacji React na GitHub Pages. Wystarczy commit na branchu <code>main</code>, a całość zostanie zbudowana i opublikowana bez Twojej ingerencji.</p>\n<hr>\n<h2 id=\"bonus-pełny-przykład-w-repozytorium\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#bonus-pełny-przykład-w-repozytorium\">>></a>Bonus: Pełny przykład w repozytorium</h2>\n<p>Chcesz zobaczyć kompletną konfigurację w praktyce?<br>\n<a href=\"https://github.com/jakubszpil/jakubszpil.github.io/blob/main/.github/workflows/deploy.yml\">Zajrzyj tutaj</a></p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/deployment-github-actions.md","2 minuty",{"_8":56,"_10":57,"_12":58,"_22":60,"_24":62,"_26":63,"_28":64,"_30":65,"_32":66,"_34":-7,"_35":36},"Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.",[17,59,16,21],"wzorce projektowe",[17,61],"wzorce-projektowe","2024-06-20T00:00:00.000Z","b69f391b-66ad-4d94-a7f3-36dd7409ed9e","dependency-injection-kontra-typescript","<p>Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Pozwala on na oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności oraz ułatwia zarządzanie zależnościami w projekcie. 🔗</p>\n<p>W TypeScript DI można zaimplementować na różne sposoby, m.in. za pomocą funkcji wstrzykujących, kontenerów IoC oraz dekoratorów. Poniżej znajdziesz szczegółowe omówienie praktycznych sposobów implementacji DI w TypeScript wraz z przykładami i wskazówkami.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-dependency-injection\">Czym jest Dependency Injection?</a></li>\n<li><a href=\"#zalety-stosowania-di\">Zalety stosowania DI</a></li>\n<li><a href=\"#podstawowy-przyk%C5%82ad-dependency-injection\">Podstawowy przykład Dependency Injection</a></li>\n<li><a href=\"#wstrzykiwanie-zale%C5%BCno%C5%9Bci-przy-pomocy-funkcji\">Wstrzykiwanie zależności przy pomocy funkcji</a></li>\n<li><a href=\"#kontener-ioc-i-automatyzacja-di\">Kontener IoC i automatyzacja DI</a></li>\n<li><a href=\"#testowanie-z-wykorzystaniem-di\">Testowanie z wykorzystaniem DI</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-dependency-injection\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-dependency-injection\">>></a>Czym jest Dependency Injection?</h2>\n<p><strong>Dependency Injection</strong> polega na przekazywaniu obiektów zależnych (tzw. zależności) do obiektu zamiast tworzenia ich bezpośrednio w jego wnętrzu. Dzięki temu możemy łatwo podmieniać zależności – np. na ich mocki podczas testowania – bez zmian w logice biznesowej.</p>\n<p>DI zwiększa elastyczność kodu, ułatwia jego testowanie oraz pozwala na lepszą separację odpowiedzialności. Dzięki temu Twój kod staje się bardziej modularny, przejrzysty i łatwy w utrzymaniu. 💡</p>\n<hr>\n<h2 id=\"zalety-stosowania-di\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zalety-stosowania-di\">>></a>Zalety stosowania DI</h2>\n<ul>\n<li><strong>Łatwiejsze testowanie</strong> – zależności można zamieniać na mocki lub stuby w testach jednostkowych.</li>\n<li><strong>Lepsza modularność</strong> – klasy nie są silnie powiązane z konkretnymi implementacjami.</li>\n<li><strong>Łatwiejsze zarządzanie zależnościami</strong> – zmiany w zależnościach nie wymagają modyfikacji całego kodu.</li>\n<li><strong>Wspieranie zasad SOLID</strong> – zwłaszcza zasady odwrócenia zależności (Dependency Inversion Principle).</li>\n<li><strong>Zwiększona elastyczność</strong> – łatwo rozszerzać i modyfikować funkcjonalność bez naruszania istniejących klas.</li>\n</ul>\n<hr>\n<h2 id=\"podstawowy-przykład-dependency-injection\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowy-przykład-dependency-injection\">>></a>Podstawowy przykład Dependency Injection</h2>\n<p>Rozważmy prosty scenariusz, w którym klasa <code>UserService</code> korzysta z <code>UserRepository</code>:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span> = userRepository;\n  }\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> userRepository = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserRepository</span>();\n<span class=\"hljs-keyword\">const</span> userService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserService</span>(userRepository);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nW tym przykładzie <code>UserRepository</code> jest wstrzykiwany do <code>UserService</code> poprzez konstruktor. Dzięki temu możemy łatwo podmienić repozytorium np. w testach jednostkowych lub zamienić na inną implementację.</p>\n<hr>\n<h2 id=\"wstrzykiwanie-zależności-przy-pomocy-funkcji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wstrzykiwanie-zależności-przy-pomocy-funkcji\">>></a>Wstrzykiwanie zależności przy pomocy funkcji</h2>\n<p>W większych aplikacjach zarządzanie zależnościami ręcznie może być uciążliwe. Możemy zastosować funkcję <code>inject</code>, która będzie przechowywać i dostarczać instancje klas (prosta wersja kontenera IoC):</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">dependencies</span>: <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n\n<span class=\"hljs-keyword\">function</span> inject&#x3C;T>(<span class=\"hljs-attr\">dependency</span>: <span class=\"hljs-title function_\">new</span> () => T): T {\n  <span class=\"hljs-keyword\">if</span> (dependencies.<span class=\"hljs-title function_\">has</span>(dependency.<span class=\"hljs-property\">name</span>)) {\n    <span class=\"hljs-keyword\">return</span> dependencies.<span class=\"hljs-title function_\">get</span>(dependency.<span class=\"hljs-property\">name</span>);\n  }\n  <span class=\"hljs-keyword\">const</span> dep = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">dependency</span>();\n  dependencies.<span class=\"hljs-title function_\">set</span>(dependency.<span class=\"hljs-property\">name</span>, dep);\n  <span class=\"hljs-keyword\">return</span> dep;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">protected</span> userRepository = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">UserRepository</span>);\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExtendedUserService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">UserService</span> {}\n\n<span class=\"hljs-keyword\">const</span> extendedUserService = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">ExtendedUserService</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(extendedUserService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p><strong>Wyjaśnienie:</strong></p>\n<ul>\n<li>Funkcja <code>inject</code> rejestruje i przechowuje instancje klas, zapewniając singleton dla każdej z nich.</li>\n<li>Nie musisz przekazywać zależności przez konstruktor – są pobierane automatycznie.</li>\n<li>Klasy można łatwo rozszerzać, a zależności są zarządzane centralnie – to duże ułatwienie w dużych projektach. 🛠️</li>\n</ul>\n<hr>\n<h2 id=\"kontener-ioc-i-automatyzacja-di\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#kontener-ioc-i-automatyzacja-di\">>></a>Kontener IoC i automatyzacja DI</h2>\n<p>W rozbudowanych projektach warto rozważyć użycie gotowych rozwiązań, np. <a href=\"https://inversify.io/\">InversifyJS</a>, które pozwalają korzystać z dekoratorów i automatycznie rozwiązywać zależności.</p>\n<p>Przykład z użyciem InversifyJS:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"reflect-metadata\"</span>;\n<span class=\"hljs-keyword\">import</span> { injectable, inject, <span class=\"hljs-title class_\">Container</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"inversify\"</span>;\n\n<span class=\"hljs-meta\">@injectable</span>()\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-meta\">@injectable</span>()\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@inject</span>(UserRepository) <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span></span>) {}\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Container</span>();\ncontainer.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-title class_\">UserRepository</span>).<span class=\"hljs-title function_\">toSelf</span>();\ncontainer.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-title class_\">UserService</span>).<span class=\"hljs-title function_\">toSelf</span>();\n\n<span class=\"hljs-keyword\">const</span> userService = container.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">UserService</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p><strong>Zalety takiego podejścia:</strong></p>\n<ul>\n<li>Automatyczna rejestracja i rozwiązywanie zależności.</li>\n<li>Wsparcie dla różnych zakresów życia obiektu (singleton, transient).</li>\n<li>Możliwość wstrzykiwania zależności przez dekoratory.</li>\n<li>Łatwiejsze zarządzanie rozbudowaną strukturą aplikacji.</li>\n</ul>\n<hr>\n<h2 id=\"testowanie-z-wykorzystaniem-di\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#testowanie-z-wykorzystaniem-di\">>></a>Testowanie z wykorzystaniem DI</h2>\n<p>Dzięki zastosowaniu DI możemy łatwo podmieniać implementacje zależności, np. na mocki lub stuby podczas testów jednostkowych:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MockUserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Mock User\"</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> mockRepo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MockUserRepository</span>();\n<span class=\"hljs-keyword\">const</span> userService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserService</span>(mockRepo);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// Mock User</span>\n</code></pre>\n<p><strong>Korzyści:</strong></p>\n<ul>\n<li>Testy są niezależne od rzeczywistej implementacji zależności.</li>\n<li>Można łatwo symulować różne scenariusze i przypadki brzegowe.</li>\n<li>Utrzymanie i rozwijanie testów staje się prostsze.</li>\n</ul>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Dependency Injection w TypeScript to potężny sposób na zwiększenie elastyczności, testowalności i modularności kodu. Najprostsze podejście to ręczne wstrzykiwanie zależności przez konstruktor, jednak w miarę wzrostu projektu warto pomyśleć o własnym kontenerze IoC lub sięgnąć po gotowe biblioteki jak InversifyJS. DI pozwala na lepszą separację odpowiedzialności i sprawia, że kod jest łatwiejszy w utrzymaniu i testowaniu.</p>\n<hr>\n<p><strong>Dalsza lektura:</strong> 📚</p>\n<ul>\n<li><a href=\"https://github.com/inversify/InversifyJS\">InversifyJS Documentation</a></li>\n<li><a href=\"https://angular.dev/guide/di\">Dependency Injection w TypeScript – Angular</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/SOLID\">SOLID Principles</a></li>\n</ul>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md",{"_8":68,"_10":69,"_12":70,"_22":72,"_24":62,"_26":73,"_28":74,"_30":75,"_32":76,"_34":-7,"_35":36},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[17,59,71,21],"programowanie",[17,61],"dca84f38-a596-497e-b72d-0b3d5f575024","obserwatorium-czyli-wzorzec-projektowy-obserwatora","<p>Wzorzec projektowy Obserwator (ang. Observer) to jeden z kluczowych wzorców, szczególnie przydatny w programowaniu reaktywnym oraz w aplikacjach wymagających reagowania na zmiany stanu. TypeScript pozwala na typowaną implementację tego wzorca, co zwiększa bezpieczeństwo i czytelność kodu.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-wzorzec-obserwatora\">Czym jest Wzorzec Obserwatora?</a></li>\n<li><a href=\"#korzy%C5%9Bci-z-u%C5%BCywania-wzorca-obserwatora\">Korzyści z używania Wzorca Obserwatora</a></li>\n<li><a href=\"#prosta-implementacja-wzorca-obserwatora\">Prosta implementacja wzorca Obserwatora</a></li>\n<li><a href=\"#rozbudowana-implementacja-generics\">Rozbudowana implementacja generics</a></li>\n<li><a href=\"#przyk%C5%82ad-praktyczny--monitorowanie-temperatury\">Przykład praktyczny — monitorowanie temperatury</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-wzorzec-obserwatora\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-wzorzec-obserwatora\">>></a>Czym jest Wzorzec Obserwatora?</h2>\n<p>Wzorzec Obserwatora polega na tym, że obiekt zwany obserwowanym (Subject) zarządza listą swoich obserwatorów (Observers) i automatycznie powiadamia ich o zmianach swojego stanu. Mechanizm ten realizowany jest dzięki metodom do subskrybowania, odsubskrybowania i powiadamiania.</p>\n<hr>\n<h2 id=\"korzyści-z-używania-wzorca-obserwatora\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#korzyści-z-używania-wzorca-obserwatora\">>></a>Korzyści z używania Wzorca Obserwatora</h2>\n<ul>\n<li><strong>Reaktywność</strong> – automatyczne powiadamianie obserwatorów o zmianach.</li>\n<li><strong>Luźne powiązania</strong> – obserwatorzy nie muszą znać szczegółów implementacji obiektu obserwowanego.</li>\n<li><strong>Elastyczność</strong> – łatwość dodawania nowych obserwatorów bez modyfikacji istniejącego kodu.</li>\n</ul>\n<hr>\n<h2 id=\"prosta-implementacja-wzorca-obserwatora\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#prosta-implementacja-wzorca-obserwatora\">>></a>Prosta implementacja wzorca Obserwatora</h2>\n<p>Poniżej znajdziesz bazową implementację wzorca Obserwatora w TypeScript:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Interfejs obserwatora</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Klasa obserwowana</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Subject</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>[] = [];\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs</span>) =></span> obs !== observer);\n  }\n\n  <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer</span>) =></span> observer.<span class=\"hljs-title function_\">update</span>(message));\n  }\n}\n\n<span class=\"hljs-comment\">// Implementacja obserwatora</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConcreteObserver</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span> received message: <span class=\"hljs-subst\">${message}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie wzorca Obserwatora</span>\n<span class=\"hljs-keyword\">const</span> subject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Subject</span>();\n\n<span class=\"hljs-keyword\">const</span> observer1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcreteObserver</span>(<span class=\"hljs-string\">\"Observer 1\"</span>);\n<span class=\"hljs-keyword\">const</span> observer2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcreteObserver</span>(<span class=\"hljs-string\">\"Observer 2\"</span>);\n\nsubject.<span class=\"hljs-title function_\">subscribe</span>(observer1);\nsubject.<span class=\"hljs-title function_\">subscribe</span>(observer2);\n\nsubject.<span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-string\">\"Hello, Observers!\"</span>);\n\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Observer 1 received message: Hello, Observers!</span>\n<span class=\"hljs-comment\">// Observer 2 received message: Hello, Observers!</span>\n</code></pre>\n<p><strong>Opis:</strong><br>\n<code>Subject</code> zarządza listą obserwatorów i powiadamia ich o zmianach. Każdy obserwator implementuje interfejs <code>Observer</code> z metodą <code>update</code>.</p>\n<hr>\n<h2 id=\"rozbudowana-implementacja-generics\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#rozbudowana-implementacja-generics\">>></a>Rozbudowana implementacja generics</h2>\n<p>W bardziej zaawansowanych przypadkach warto użyć typów generycznych, co pozwala przekazywać różne typy danych:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Interfejs obserwatora z typem generycznym</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;T> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: T): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Klasa obserwowana z typem generycznym</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Subject</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;T>[] = [];\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs</span>) =></span> obs !== observer);\n  }\n\n  <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-attr\">data</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer</span>) =></span> observer.<span class=\"hljs-title function_\">update</span>(data));\n  }\n}\n\n<span class=\"hljs-comment\">// Implementacja obserwatora</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConcreteObserver</span>&#x3C;T> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;T> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span> received data:`</span>, data);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie z typem generycznym</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> userSubject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Subject</span>&#x3C;<span class=\"hljs-title class_\">User</span>>();\n\n<span class=\"hljs-keyword\">const</span> userObserver1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcreteObserver</span>&#x3C;<span class=\"hljs-title class_\">User</span>>(<span class=\"hljs-string\">\"User Observer 1\"</span>);\n<span class=\"hljs-keyword\">const</span> userObserver2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcreteObserver</span>&#x3C;<span class=\"hljs-title class_\">User</span>>(<span class=\"hljs-string\">\"User Observer 2\"</span>);\n\nuserSubject.<span class=\"hljs-title function_\">subscribe</span>(userObserver1);\nuserSubject.<span class=\"hljs-title function_\">subscribe</span>(userObserver2);\n\nuserSubject.<span class=\"hljs-title function_\">notify</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> });\n\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// User Observer 1 received data: { name: 'Alice', age: 30 }</span>\n<span class=\"hljs-comment\">// User Observer 2 received data: { name: 'Alice', age: 30 }</span>\n</code></pre>\n<p><strong>Opis:</strong><br>\nDzięki zastosowaniu typów generycznych, wzorzec staje się bardziej elastyczny i bezpieczny typowo. Możesz przekazywać dowolne typy danych bez utraty ich struktury.</p>\n<hr>\n<h2 id=\"przykład-praktyczny--monitorowanie-temperatury\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykład-praktyczny--monitorowanie-temperatury\">>></a>Przykład praktyczny – monitorowanie temperatury</h2>\n<p>Aby zobaczyć praktyczne zastosowanie, oto przykład aplikacji monitorującej zmiany temperatury:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Interfejs obserwatora</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;T> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: T): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Klasa obserwowana</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TemperatureSensor</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>>[] = [];\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">temperature</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs</span>) =></span> obs !== observer);\n  }\n\n  <span class=\"hljs-title function_\">setTemperature</span>(<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Setting temperature to <span class=\"hljs-subst\">${temp}</span>`</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">temperature</span> = temp;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">notify</span>(temp);\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer</span>) =></span> observer.<span class=\"hljs-title function_\">update</span>(temp));\n  }\n}\n\n<span class=\"hljs-comment\">// Implementacje obserwatorów</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TemperatureDisplay</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Temperature Display: <span class=\"hljs-subst\">${temp}</span>°C`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TemperatureLogger</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Logging temperature: <span class=\"hljs-subst\">${temp}</span>°C`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie wzorca Obserwatora</span>\n<span class=\"hljs-keyword\">const</span> sensor = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TemperatureSensor</span>();\n<span class=\"hljs-keyword\">const</span> display = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TemperatureDisplay</span>();\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TemperatureLogger</span>();\n\nsensor.<span class=\"hljs-title function_\">subscribe</span>(display);\nsensor.<span class=\"hljs-title function_\">subscribe</span>(logger);\n\nsensor.<span class=\"hljs-title function_\">setTemperature</span>(<span class=\"hljs-number\">25</span>); <span class=\"hljs-comment\">// Output: Setting temperature to 25</span>\n<span class=\"hljs-comment\">//         Temperature Display: 25°C</span>\n<span class=\"hljs-comment\">//         Logging temperature: 25°C</span>\n\nsensor.<span class=\"hljs-title function_\">setTemperature</span>(<span class=\"hljs-number\">30</span>); <span class=\"hljs-comment\">// Output: Setting temperature to 30</span>\n<span class=\"hljs-comment\">//         Temperature Display: 30°C</span>\n<span class=\"hljs-comment\">//         Logging temperature: 30°C</span>\n</code></pre>\n<p><strong>Opis:</strong><br>\n<code>TemperatureSensor</code> pełni rolę obserwowanego, powiadamiając obserwatorów (<code>TemperatureDisplay</code>, <code>TemperatureLogger</code>) o zmianach temperatury. Wzorzec ten świetnie nadaje się do aplikacji monitorujących różne parametry w czasie rzeczywistym.</p>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Wzorzec Obserwatora to potężne narzędzie, które pozwala reagować na zmiany stanu w sposób luźno powiązany i elastyczny. W TypeScript dzięki silnemu typowaniu implementacja staje się jeszcze bezpieczniejsza i bardziej czytelna. Pokazane powyżej przykłady prezentują zarówno podstawową, jak i zaawansowaną wersję, która wykorzystuje typy generyczne. Zachęcam do eksperymentowania z tym wzorcem w swoich projektach – pozwala on na znacząco lepsze zarządzanie zależnościami i reaktywnością aplikacji.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_8":78,"_10":79,"_12":80,"_22":82,"_24":62,"_26":83,"_28":84,"_30":85,"_32":86,"_34":-7,"_35":54},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[17,59,81,21],"signals",[17,61],"326e8a2c-670d-49de-a86a-a0fe270d76dd","signalizacja-czyli-koncept-signals-w-typescript","<p>Signal to koncepcja znana z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzanie stanem aplikacji. Dzięki silnemu typowaniu TypeScript, sygnały można zaimplementować w sposób bezpieczny, czytelny i efektywny.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-signal\">Czym jest Signal?</a></li>\n<li><a href=\"#korzy%C5%9Bci-z-u%C5%BCywania-signal\">Korzyści z używania Signal</a></li>\n<li><a href=\"#prosta-implementacja-signal-w-typescript\">Prosta implementacja Signal w TypeScript</a></li>\n<li><a href=\"#zaawansowana-implementacja-signal-z-typowaniem\">Zaawansowana implementacja Signal z typowaniem</a></li>\n<li><a href=\"#praktyczne-zastosowania-sygna%C5%82%C3%B3w\">Praktyczne zastosowania sygnałów</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-signal\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-signal\">>></a>Czym jest Signal?</h2>\n<p><strong>Signal</strong> (sygnał) to obiekt reprezentujący strumień danych, który może być obserwowany i reagować na ich zmiany. Sygnały świetnie sprawdzają się w aplikacjach frontendowych, gdzie mogą służyć do reagowania na:</p>\n<ul>\n<li>zdarzenia użytkownika,</li>\n<li>zmiany stanu aplikacji,</li>\n<li>asynchroniczne operacje (np. żądania sieciowe).</li>\n</ul>\n<hr>\n<h2 id=\"korzyści-z-używania-signal\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#korzyści-z-używania-signal\">>></a>Korzyści z używania Signal</h2>\n<ul>\n<li><strong>Reaktywność:</strong> Automatyczne reagowanie na zmiany danych w aplikacji.</li>\n<li><strong>Czytelność:</strong> Eliminacja złożonych zależności i ręcznego zarządzania stanem.</li>\n<li><strong>Modularność:</strong> Oddzielenie logiki zarządzania stanem od komponentów, co ułatwia rozwój i utrzymanie kodu.</li>\n</ul>\n<hr>\n<h2 id=\"prosta-implementacja-signal-w-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#prosta-implementacja-signal-w-typescript\">>></a>Prosta implementacja Signal w TypeScript</h2>\n<p>Poniższy przykład przedstawia bazową implementację sygnału:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Listener</span>&#x3C;T> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">value</span>: T</span>) =></span> <span class=\"hljs-built_in\">void</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">listeners</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>[] = [];\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">push</span>(listener);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">l</span>) =></span> l !== listener);\n  }\n\n  <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">listener</span>) =></span> <span class=\"hljs-title function_\">listener</span>(value));\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie sygnału</span>\n<span class=\"hljs-keyword\">const</span> numberSignal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;<span class=\"hljs-built_in\">number</span>>();\n\nnumberSignal.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Received value: <span class=\"hljs-subst\">${value}</span>`</span>);\n});\n\nnumberSignal.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-number\">42</span>); <span class=\"hljs-comment\">// Output: Received value: 42</span>\n</code></pre>\n<p><strong>Opis:</strong><br>\nKlasa <code>Signal</code> pozwala na subskrybowanie funkcji-odbiorców, ich usuwanie oraz emitowanie wartości do wszystkich subskrybentów.</p>\n<hr>\n<h2 id=\"zaawansowana-implementacja-signal-z-typowaniem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zaawansowana-implementacja-signal-z-typowaniem\">>></a>Zaawansowana implementacja Signal z typowaniem</h2>\n<p>W większych aplikacjach warto zastosować typy generyczne i kolekcje, które zapobiegają wielokrotnemu dodawaniu tego samego subskrybenta:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Listener</span>&#x3C;T> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">value</span>: T</span>) =></span> <span class=\"hljs-built_in\">void</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">listeners</span>: <span class=\"hljs-title class_\">Set</span>&#x3C;<span class=\"hljs-title class_\">Listener</span>&#x3C;T>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">add</span>(listener);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">delete</span>(listener);\n  }\n\n  <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> listener <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>) {\n      <span class=\"hljs-title function_\">listener</span>(value);\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie sygnału z typem generycznym</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> userSignal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;<span class=\"hljs-title class_\">User</span>>();\n\nuserSignal.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">user</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`User: <span class=\"hljs-subst\">${user.name}</span>, Age: <span class=\"hljs-subst\">${user.age}</span>`</span>);\n});\n\nuserSignal.<span class=\"hljs-title function_\">emit</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John Doe\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> }); <span class=\"hljs-comment\">// Output: User: John Doe, Age: 30</span>\n</code></pre>\n<p><strong>Opis:</strong><br>\nDzięki użyciu <code>Set</code>, każdy subskrybent pojawia się tylko raz. Typy generyczne umożliwiają tworzenie sygnałów dla różnych typów danych.</p>\n<hr>\n<h2 id=\"praktyczne-zastosowania-sygnałów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#praktyczne-zastosowania-sygnałów\">>></a>Praktyczne zastosowania sygnałów</h2>\n<p>Sygnały są szeroko stosowane m.in. w:</p>\n<ul>\n<li>zarządzaniu stanem komponentów w frameworkach frontendowych (np. Angular Signals, SolidJS Signals),</li>\n<li>reagowaniu na zmiany danych w czasie rzeczywistym (np. WebSocket, API),</li>\n<li>obsłudze zdarzeń pomiędzy niezależnymi modułami (np. event bus).</li>\n</ul>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Sygnał do powiadamiania o zmianie zalogowanego użytkownika</span>\n<span class=\"hljs-keyword\">const</span> authSignal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;<span class=\"hljs-title class_\">User</span> | <span class=\"hljs-literal\">null</span>>();\n\nauthSignal.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">user</span>) =></span> {\n  <span class=\"hljs-keyword\">if</span> (user) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Zalogowano użytkownika:\"</span>, user.<span class=\"hljs-property\">name</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Wylogowano użytkownika\"</span>);\n  }\n});\n\n<span class=\"hljs-comment\">// Logowanie użytkownika</span>\nauthSignal.<span class=\"hljs-title function_\">emit</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Anna\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span> });\n<span class=\"hljs-comment\">// Wylogowanie użytkownika</span>\nauthSignal.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-literal\">null</span>);\n</code></pre>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Signal w TypeScript to skuteczny sposób na budowę reaktywnych aplikacji i automatyczne reagowanie na zmiany stanu. Silne typowanie pozwala uniknąć wielu błędów i sprawia, że kod jest zrozumiały oraz łatwy w utrzymaniu. Implementując sygnały, możesz znacząco uprościć zarządzanie stanem i poprawić architekturę swoich aplikacji.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md",[17,61,47,48],"category"]
