[{"_1":2,"_4":5},"root",{"_3":-5},"data","article-list",{"_3":6},{"_7":8,"_19":53,"_54":-7},"articles",[9,31,42],{"_10":11,"_12":13,"_14":15,"_19":20,"_21":22,"_23":24,"_25":26,"_27":28,"_29":30},"title","Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","keywords",[16,17,18],"typescript","wzorce","javascript","categories",[16,17],"createdAt",["D",1718841600000],"id","e3c6f6af-8167-4c82-a2d3-b5e860f757a9","slug","dependency-injection-kontra-typescript","content","<p>Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami.</p>\n<p>W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#spis-treści\">#</a>Spis Treści</h2>\n<ol>\n<li>Podstawy Dependency Injection</li>\n<li>Prosty przykład DI</li>\n<li>Wstrzykiwanie zależności za pomocą funkcji wstrzykującej</li>\n</ol>\n<h2 id=\"1-podstawy-dependency-injection\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#1-podstawy-dependency-injection\">#</a>1. Podstawy Dependency Injection</h2>\n<p>W Dependency Injection chodzi o przekazywanie zależności do obiektu zamiast tworzenia ich bezpośrednio wewnątrz obiektu. Dzięki temu można łatwo wymieniać zależności, co ułatwia testowanie i modyfikowanie kodu.</p>\n<h2 id=\"2-prosty-przykład-di\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#2-prosty-przykład-di\">#</a>2. Prosty przykład DI</h2>\n<p>Rozważmy prosty przykład, w którym klasa <code>UserService</code> potrzebuje instancji <code>UserRepository</code>:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span> = userRepository;\n  }\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> userRepository = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserRepository</span>();\n<span class=\"hljs-keyword\">const</span> userService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserService</span>(userRepository);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p>W powyższym przykładzie <code>UserRepository</code> jest wstrzykiwany do <code>UserService</code> przez konstruktor.</p>\n<h2 id=\"3-wstrzykiwanie-zależności-za-pomocą-funkcji-wstrzykującej\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#3-wstrzykiwanie-zależności-za-pomocą-funkcji-wstrzykującej\">#</a>3. Wstrzykiwanie zależności za pomocą funkcji wstrzykującej</h2>\n<p>Aby lepiej zarządzać zależnościami, możemy użyć kontenera IoC. Przykład poniżej pokazuje, jak można to zrobić przy użyciu prostego kontenera DI:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">dependencies</span>: <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n\n<span class=\"hljs-keyword\">function</span> inject&#x3C;T>(<span class=\"hljs-attr\">dependency</span>: <span class=\"hljs-title function_\">new</span> () => T): T {\n  <span class=\"hljs-keyword\">if</span> (dependencies.<span class=\"hljs-title function_\">has</span>(dependency.<span class=\"hljs-property\">name</span>)) {\n    <span class=\"hljs-keyword\">const</span> dep = dependencies.<span class=\"hljs-title function_\">get</span>(dependency.<span class=\"hljs-property\">name</span>);\n    <span class=\"hljs-keyword\">if</span> (dep) {\n      <span class=\"hljs-keyword\">return</span> dep;\n    }\n  }\n\n  <span class=\"hljs-keyword\">const</span> dep = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">dependency</span>();\n  dependencies.<span class=\"hljs-title function_\">set</span>(dependency.<span class=\"hljs-property\">name</span>, dep);\n  <span class=\"hljs-keyword\">return</span> dependencies.<span class=\"hljs-title function_\">get</span>(dependency.<span class=\"hljs-property\">name</span>);\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">protected</span> userRepository = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">UserRepository</span>);\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExtendedUserService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">UserService</span> {}\n\n<span class=\"hljs-keyword\">const</span> extendedUserService = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">ExtendedUserService</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(extendedUserService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p>W tym przykładzie używamy funkcji do rejestrowania i rozwiązywania zależności.\nFunkcja inject przyjmuje, jako generyczny argument, zależność, którą na podstawie statycznej nazwy zapisuje i przechowuje, dzięki czemu potem mamy dostęp do wspólnej instancji tej zależności.\nTakie podejście pozwala na łatwe rozszerzanie klas, nie potrzebujemy pamiętać o zależnościach w konstruktorze klasy</p>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#podsumowanie\">#</a>Podsumowanie</h2>\n<p>Dependency Injection w TypeScript to potężna technika, która może znacznie ułatwić zarządzanie zależnościami i poprawić testowalność oraz modularność kodu. Przedstawione powyżej przykłady pokazują różne podejścia do implementacji DI, w tym bezpośrednie wstrzykiwanie przez konstruktor, korzystanie z funkcji wstrzykujących, używanie dekoratorów. Dzięki tym technikom można tworzyć bardziej elastyczne i łatwe w utrzymaniu aplikacje.</p>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/content//dependency-injection-kontra-typescript.mdx",{"_10":32,"_12":33,"_14":34,"_19":36,"_21":37,"_23":38,"_25":39,"_27":40,"_29":41},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[16,17,35],"programowanie",[16,17],["D",1718841600000],"f2ff87e4-71fc-42fe-a5c9-9e5c3ecfd069","obserwatorium-czyli-wzorzec-projektowy-obserwatora","<p>Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.</p>\n<h2 id=\"czym-jest-wzorzec-obserwatora\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#czym-jest-wzorzec-obserwatora\">#</a>Czym jest Wzorzec Obserwatora?</h2>\n<p>Wzorzec Obserwatora polega na tym, że obiekt (obserwowany) zarządza listą zależnych obiektów (obserwatorów) i automatycznie powiadamia ich o zmianach swojego stanu. Jest to realizowane za pomocą metod do subskrybowania, odsubskrybowania oraz powiadamiania obserwatorów.</p>\n<h2 id=\"korzyści-z-używania-wzorca-obserwatora\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#korzyści-z-używania-wzorca-obserwatora\">#</a>Korzyści z używania Wzorca Obserwatora</h2>\n<ol>\n<li><strong>Reaktywność:</strong> Automatyczne powiadamianie obserwatorów o zmianach stanu.</li>\n<li><strong>Luźne Powiązania:</strong> Obserwatorzy nie muszą znać szczegółów implementacji obiektu, który obserwują.</li>\n<li><strong>Elastyczność:</strong> Łatwość dodawania nowych obserwatorów bez zmiany istniejącego kodu.</li>\n</ol>\n<h2 id=\"implementacja-wzorca-obserwatora-w-typescript\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#implementacja-wzorca-obserwatora-w-typescript\">#</a>Implementacja Wzorca Obserwatora w TypeScript</h2>\n<h3 id=\"przykład-1-prosta-implementacja\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-1-prosta-implementacja\">#</a>Przykład 1: Prosta Implementacja</h3>\n<p>Poniżej znajduje się prosta implementacja wzorca Obserwatora w TypeScript:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Interfejs obserwatora</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Klasa obserwowana</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Subject</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>[] = [];\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs</span>) =></span> obs !== observer);\n  }\n\n  <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer</span>) =></span> observer.<span class=\"hljs-title function_\">update</span>(message));\n  }\n}\n\n<span class=\"hljs-comment\">// Implementacja obserwatora</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConcreteObserver</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span> received message: <span class=\"hljs-subst\">${message}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie wzorca Obserwatora</span>\n<span class=\"hljs-keyword\">const</span> subject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Subject</span>();\n\n<span class=\"hljs-keyword\">const</span> observer1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcreteObserver</span>(<span class=\"hljs-string\">\"Observer 1\"</span>);\n<span class=\"hljs-keyword\">const</span> observer2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcreteObserver</span>(<span class=\"hljs-string\">\"Observer 2\"</span>);\n\nsubject.<span class=\"hljs-title function_\">subscribe</span>(observer1);\nsubject.<span class=\"hljs-title function_\">subscribe</span>(observer2);\n\nsubject.<span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-string\">\"Hello, Observers!\"</span>);\n\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Observer 1 received message: Hello, Observers!</span>\n<span class=\"hljs-comment\">// Observer 2 received message: Hello, Observers!</span>\n</code></pre>\n<p>W tym przykładzie <code>Subject</code> zarządza listą obserwatorów i powiadamia ich za pomocą metody <code>notify</code>. Obserwatorzy implementują interfejs <code>Observer</code>, który definiuje metodę <code>update</code>.</p>\n<h3 id=\"przykład-2-rozbudowana-implementacja-z-typowaniem\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-2-rozbudowana-implementacja-z-typowaniem\">#</a>Przykład 2: Rozbudowana Implementacja z Typowaniem</h3>\n<p>W bardziej zaawansowanej wersji możemy użyć typów generycznych do zarządzania różnymi typami danych:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Interfejs obserwatora z typem generycznym</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;T> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: T): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Klasa obserwowana z typem generycznym</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Subject</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;T>[] = [];\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs</span>) =></span> obs !== observer);\n  }\n\n  <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-attr\">data</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer</span>) =></span> observer.<span class=\"hljs-title function_\">update</span>(data));\n  }\n}\n\n<span class=\"hljs-comment\">// Implementacja obserwatora</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConcreteObserver</span>&#x3C;T> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;T> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span> received data:`</span>, data);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie wzorca Obserwatora z typem generycznym</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> userSubject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Subject</span>&#x3C;<span class=\"hljs-title class_\">User</span>>();\n\n<span class=\"hljs-keyword\">const</span> userObserver1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcreteObserver</span>&#x3C;<span class=\"hljs-title class_\">User</span>>(<span class=\"hljs-string\">\"User Observer 1\"</span>);\n<span class=\"hljs-keyword\">const</span> userObserver2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcreteObserver</span>&#x3C;<span class=\"hljs-title class_\">User</span>>(<span class=\"hljs-string\">\"User Observer 2\"</span>);\n\nuserSubject.<span class=\"hljs-title function_\">subscribe</span>(userObserver1);\nuserSubject.<span class=\"hljs-title function_\">subscribe</span>(userObserver2);\n\nuserSubject.<span class=\"hljs-title function_\">notify</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> });\n\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// User Observer 1 received data: { name: 'Alice', age: 30 }</span>\n<span class=\"hljs-comment\">// User Observer 2 received data: { name: 'Alice', age: 30 }</span>\n</code></pre>\n<p>W tej wersji <code>Subject</code> i <code>Observer</code> są typowane generycznie, co pozwala na bardziej elastyczne i bezpieczne przekazywanie danych.</p>\n<h2 id=\"zakończenie\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zakończenie\">#</a>Zakończenie</h2>\n<p>Wzorzec Obserwatora w TypeScript jest potężnym narzędziem, które pozwala na łatwe zarządzanie zmianami stanu i reaktywnością aplikacji. Dzięki silnemu typowaniu w TypeScript, implementacja tego wzorca jest jeszcze bardziej bezpieczna i czytelna. Implementując ten wzorzec, można znacząco poprawić strukturę i elastyczność kodu, co jest szczególnie ważne w dużych i złożonych aplikacjach. Dzięki temu wzorcowi, komponenty mogą komunikować się ze sobą w sposób luźno powiązany, co ułatwia ich testowanie, modyfikowanie i rozbudowę.</p>\n<p>Wzorzec Obserwatora w TypeScript można łatwo zaimplementować na różne sposoby, dostosowując go do specyficznych potrzeb projektu. W powyższych przykładach pokazaliśmy zarówno podstawową implementację, jak i bardziej zaawansowaną wersję z typami generycznymi. Zachęcam do eksperymentowania z tym wzorcem w swoich projektach, aby lepiej zrozumieć jego potencjał i korzyści.</p>\n<h3 id=\"przykładowy-projekt-z-wykorzystaniem-wzorca-obserwatora\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykładowy-projekt-z-wykorzystaniem-wzorca-obserwatora\">#</a>Przykładowy Projekt z Wykorzystaniem Wzorca Obserwatora</h3>\n<p>Aby zobaczyć, jak wzorzec Obserwatora może być użyty w bardziej realistycznym scenariuszu, rozważmy prostą aplikację monitorującą zmiany temperatury:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Interfejs obserwatora</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;T> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: T): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Klasa obserwowana</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TemperatureSensor</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>>[] = [];\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">temperature</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs</span>) =></span> obs !== observer);\n  }\n\n  <span class=\"hljs-title function_\">setTemperature</span>(<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Setting temperature to <span class=\"hljs-subst\">${temp}</span>`</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">temperature</span> = temp;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">notify</span>(temp);\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer</span>) =></span> observer.<span class=\"hljs-title function_\">update</span>(temp));\n  }\n}\n\n<span class=\"hljs-comment\">// Implementacja obserwatora</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TemperatureDisplay</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Temperature Display: <span class=\"hljs-subst\">${temp}</span>°C`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TemperatureLogger</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Logging temperature: <span class=\"hljs-subst\">${temp}</span>°C`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie wzorca Obserwatora</span>\n<span class=\"hljs-keyword\">const</span> sensor = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TemperatureSensor</span>();\n<span class=\"hljs-keyword\">const</span> display = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TemperatureDisplay</span>();\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TemperatureLogger</span>();\n\nsensor.<span class=\"hljs-title function_\">subscribe</span>(display);\nsensor.<span class=\"hljs-title function_\">subscribe</span>(logger);\n\nsensor.<span class=\"hljs-title function_\">setTemperature</span>(<span class=\"hljs-number\">25</span>); <span class=\"hljs-comment\">// Output: Setting temperature to 25</span>\n<span class=\"hljs-comment\">//         Temperature Display: 25°C</span>\n<span class=\"hljs-comment\">//         Logging temperature: 25°C</span>\n\nsensor.<span class=\"hljs-title function_\">setTemperature</span>(<span class=\"hljs-number\">30</span>); <span class=\"hljs-comment\">// Output: Setting temperature to 30</span>\n<span class=\"hljs-comment\">//         Temperature Display: 30°C</span>\n<span class=\"hljs-comment\">//         Logging temperature: 30°C</span>\n</code></pre>\n<p>W tym przykładzie <code>TemperatureSensor</code> pełni rolę obiektu obserwowanego, który powiadamia swoich obserwatorów (<code>TemperatureDisplay</code> i <code>TemperatureLogger</code>) o zmianach temperatury. W praktycznym scenariuszu można by zastosować ten wzorzec do monitorowania różnych parametrów i reagowania na zmiany w czasie rzeczywistym.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/content//obserwatorium-czyli-wzorzec-projektowy-obserwatora.mdx",{"_10":43,"_12":44,"_14":45,"_19":47,"_21":48,"_23":49,"_25":50,"_27":51,"_29":52},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[16,17,46],"signals",[16,17],["D",1718841600000],"48f5bf1d-ab8e-42d1-9d23-477a38e075ce","signalizacja-czyli-koncept-signals-w-typescript","<p>Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.</p>\n<h2 id=\"czym-jest-signal\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#czym-jest-signal\">#</a>Czym jest Signal?</h2>\n<p>Signal (sygnał) jest obiektem, który reprezentuje strumień danych, który może być obserwowany i reagować na zmiany tych danych. W kontekście frontendu, sygnały mogą być używane do reagowania na zdarzenia użytkownika, zmiany stanu aplikacji, czy asynchroniczne operacje, takie jak żądania sieciowe.</p>\n<h2 id=\"korzyści-z-używania-signal\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#korzyści-z-używania-signal\">#</a>Korzyści z używania Signal</h2>\n<ol>\n<li><strong>Reaktywność:</strong> Umożliwiają budowanie aplikacji, które automatycznie reagują na zmiany danych.</li>\n<li><strong>Czytelność:</strong> Poprawiają czytelność kodu poprzez eliminację złożonych zależności i ręcznego zarządzania stanem.</li>\n<li><strong>Modularność:</strong> Ułatwiają zarządzanie stanem w skomplikowanych aplikacjach poprzez oddzielenie logiki zarządzania stanem od komponentów.</li>\n</ol>\n<h2 id=\"implementacja-signal-w-typescript\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#implementacja-signal-w-typescript\">#</a>Implementacja Signal w TypeScript</h2>\n<h3 id=\"przykład-1-prosty-signal\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-1-prosty-signal\">#</a>Przykład 1: Prosty Signal</h3>\n<p>Poniżej przedstawiono prostą implementację sygnału w TypeScript:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Listener</span>&#x3C;T> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">value</span>: T</span>) =></span> <span class=\"hljs-built_in\">void</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">listeners</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>[] = [];\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">push</span>(listener);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">l</span>) =></span> l !== listener);\n  }\n\n  <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">listener</span>) =></span> <span class=\"hljs-title function_\">listener</span>(value));\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie sygnału</span>\n<span class=\"hljs-keyword\">const</span> numberSignal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;<span class=\"hljs-built_in\">number</span>>();\n\nnumberSignal.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Received value: <span class=\"hljs-subst\">${value}</span>`</span>);\n});\n\nnumberSignal.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-number\">42</span>); <span class=\"hljs-comment\">// Output: Received value: 42</span>\n</code></pre>\n<p>W tym przykładzie zdefiniowano klasę <code>Signal</code>, która umożliwia subskrybowanie, usuwanie subskrypcji oraz emitowanie wartości do wszystkich subskrybentów.</p>\n<h3 id=\"przykład-2-zaawansowany-signal-z-typowaniem\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-2-zaawansowany-signal-z-typowaniem\">#</a>Przykład 2: Zaawansowany Signal z Typowaniem</h3>\n<p>Poniższy przykład przedstawia bardziej zaawansowaną implementację sygnału z wykorzystaniem typów generycznych:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Listener</span>&#x3C;T> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">value</span>: T</span>) =></span> <span class=\"hljs-built_in\">void</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">listeners</span>: <span class=\"hljs-title class_\">Set</span>&#x3C;<span class=\"hljs-title class_\">Listener</span>&#x3C;T>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">add</span>(listener);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">delete</span>(listener);\n  }\n\n  <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> listener <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>) {\n      <span class=\"hljs-title function_\">listener</span>(value);\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie sygnału z typem generycznym</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> userSignal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;<span class=\"hljs-title class_\">User</span>>();\n\nuserSignal.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">user</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`User: <span class=\"hljs-subst\">${user.name}</span>, Age: <span class=\"hljs-subst\">${user.age}</span>`</span>);\n});\n\nuserSignal.<span class=\"hljs-title function_\">emit</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John Doe\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> }); <span class=\"hljs-comment\">// Output: User: John Doe, Age: 30</span>\n</code></pre>\n<p>W tym przykładzie <code>Signal</code> używa <code>Set</code> do przechowywania subskrybentów, co zapobiega wielokrotnemu dodawaniu tego samego subskrybenta. Zastosowanie typów generycznych pozwala na tworzenie sygnałów obsługujących dowolne typy danych.</p>\n<h2 id=\"zakończenie\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zakończenie\">#</a>Zakończenie</h2>\n<p>Signal w TypeScript to potężne narzędzie do budowania reaktywnych aplikacji, które mogą automatycznie reagować na zmiany stanu. Dzięki silnemu typowaniu TypeScript, implementacja sygnałów jest bezpieczna i efektywna, co przyczynia się do tworzenia bardziej zrozumiałych i łatwiejszych w utrzymaniu kodów. Implementując sygnały, możemy znacząco uprościć zarządzanie stanem w naszych aplikacjach i poprawić ich architekturę.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/content//signalizacja-czyli-koncept-signals-w-typescript.mdx",[16,17],"category"]
