[{"_1":2},"article-list",{"_3":4},"data",{"_5":6,"_19":66,"_67":-7},"articles",[7,33,46,56],{"_8":9,"_10":11,"_12":13,"_19":20,"_23":24,"_25":26,"_27":28,"_29":30,"_31":32},"title","Proste deployowanie przy użyciu GitHub Actions","description","Dowiedz się, jak wdrożyć dowolną aplikację za pomocą GitHub Actions w prosty i automatyczny sposób.","keywords",[14,15,16,17,18],"react","github actions","deployment","CI/CD","automatyzacja","categories",[21,22],"devops","ci","createdAt",["D",1741996800000],"id","0053f7ac-78ad-45d8-b139-a07000359eff","slug","deployment-github-actions","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/deployment-github-actions.md",{"_8":34,"_10":35,"_12":36,"_19":40,"_23":42,"_25":43,"_27":44,"_29":30,"_31":45},"Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.",[37,38,39],"typescript","wzorce projektowe","javascript",[37,41],"wzorce-projektowe",["D",1718841600000],"8dd40b13-7d1e-44aa-8199-86aff6cc2cf1","dependency-injection-kontra-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md",{"_8":47,"_10":48,"_12":49,"_19":51,"_23":52,"_25":53,"_27":54,"_29":30,"_31":55},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[37,38,50],"programowanie",[37,41],["D",1718841600000],"4d8699c2-6529-4959-8142-129096ef59cc","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_8":57,"_10":58,"_12":59,"_19":61,"_23":62,"_25":63,"_27":64,"_29":30,"_31":65},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[37,38,60],"signals",[37,41],["D",1718841600000],"4a0c33ad-bf4c-4682-a2f1-1f763141f152","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md",[37,41,21,22],"category"]
