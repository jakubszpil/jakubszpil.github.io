[{"_1":2,"_4":5},"root",{"_3":-5},"data","course-list-with-category",{"_3":6},{"_7":8,"_9":10,"_15":16},"category","javascript","categories",[11,12,8,13,14],"wprowadzenie","html","css","seo","courses",[17,39],{"_18":19,"_20":21,"_22":23,"_9":28,"_29":30,"_31":32,"_33":34,"_35":36,"_37":38},"title","Renesans w JS, czyli nowoczesny JavaScript","description","JavaScript jest językiem programowania, który jest powszechnie stosowany do tworzenia dynamicznych i interaktywnych stron internetowych. W ciągu ostatnich lat JavaScript znacznie ewoluował, wprowadzając nowe funkcje i poprawiając istniejące mechanizmy. W tym kursie omówimy najważniejsze elementy nowoczesnego JavaScript, w tym ES6 i nowsze.","keywords",[8,24,11,25,26,27],"kurs","przewodnik","web","frontend",[11,8],"createdAt",["D",1719705600000],"id","51fb8a23-1a8d-444b-8ad5-2622752410ec","slug","nowoczesny-javascript","content","<p>JavaScript jest językiem programowania, który jest powszechnie stosowany do tworzenia dynamicznych i interaktywnych stron internetowych. W ciągu ostatnich lat JavaScript znacznie ewoluował, wprowadzając nowe funkcje i poprawiając istniejące mechanizmy. W tym kursie omówimy najważniejsze elementy nowoczesnego JavaScript, w tym ES6 i nowsze.</p>\n<h2 id=\"zmienne-let-i-const\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zmienne-let-i-const\">#</a>Zmienne: <code>let</code> i <code>const</code></h2>\n<p>W nowoczesnym JavaScript zmienne są definiowane za pomocą <code>let</code> i <code>const</code> zamiast <code>var</code>.</p>\n<ul>\n<li><code>let</code> pozwala na deklarację zmiennych, które mogą być zmieniane.</li>\n<li><code>const</code> pozwala na deklarację zmiennych, które są stałe i nie mogą być zmieniane.</li>\n</ul>\n<h3 id=\"przykłady\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykłady\">#</a>Przykłady:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> zmienna = <span class=\"hljs-string\">\"To jest zmienna\"</span>;\nzmienna = <span class=\"hljs-string\">\"Zmieniona wartość\"</span>;\n\n<span class=\"hljs-keyword\">const</span> stala = <span class=\"hljs-string\">\"To jest stała\"</span>;\n<span class=\"hljs-comment\">// stala = 'Zmieniona wartość'; // Spowoduje błąd</span>\n</code></pre>\n<h2 id=\"funkcje-strzałkowe\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#funkcje-strzałkowe\">#</a>Funkcje strzałkowe</h2>\n<p>Funkcje strzałkowe to skrócony zapis funkcji, który również pozwala na lepsze zrozumienie kontekstu <code>this</code>.</p>\n<h3 id=\"przykład\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład\">#</a>Przykład:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Standardowa funkcja</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n\n<span class=\"hljs-comment\">// Funkcja strzałkowa</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dodaj</span> = (<span class=\"hljs-params\">a, b</span>) => a + b;\n</code></pre>\n<h2 id=\"szablony-stringów-template-literals\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#szablony-stringów-template-literals\">#</a>Szablony stringów (Template Literals)</h2>\n<p>Szablony stringów umożliwiają interpolację zmiennych i wyrażenia w łańcuchach znaków za pomocą backticków (<code>`</code>).</p>\n<h3 id=\"przykład-1\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-1\">#</a>Przykład:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">\"Jan\"</span>;\n<span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${name}</span>! Jak się masz?`</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting); <span class=\"hljs-comment\">// \"Cześć, Jan! Jak się masz?\"</span>\n</code></pre>\n<h2 id=\"destrukturyzacja\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#destrukturyzacja\">#</a>Destrukturyzacja</h2>\n<p>Destrukturyzacja pozwala na wyodrębnienie wartości z tablic lub obiektów i przypisanie ich do zmiennych.</p>\n<h3 id=\"przykład-z-tablicą\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-z-tablicą\">#</a>Przykład z tablicą:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> liczby = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> [jeden, dwa, trzy] = liczby;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(jeden, dwa, trzy); <span class=\"hljs-comment\">// 1 2 3</span>\n</code></pre>\n<h3 id=\"przykład-z-obiektem\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-z-obiektem\">#</a>Przykład z obiektem:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> osoba = { <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span> };\n<span class=\"hljs-keyword\">const</span> { imie, wiek } = osoba;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(imie, wiek); <span class=\"hljs-comment\">// Jan 30</span>\n</code></pre>\n<h2 id=\"spread-operator-\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#spread-operator-\">#</a>Spread operator (<code>...</code>)</h2>\n<p>Spread operator pozwala na rozwinięcie elementów tablicy lub obiektu.</p>\n<h3 id=\"przykład-z-tablicą-1\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-z-tablicą-1\">#</a>Przykład z tablicą:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> liczby = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> wiecejLiczb = [...liczby, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wiecejLiczb); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6]</span>\n</code></pre>\n<h3 id=\"przykład-z-obiektem-1\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-z-obiektem-1\">#</a>Przykład z obiektem:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> osoba = { <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span> };\n<span class=\"hljs-keyword\">const</span> nowaOsoba = { ...osoba, <span class=\"hljs-attr\">miasto</span>: <span class=\"hljs-string\">\"Warszawa\"</span> };\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(nowaOsoba); <span class=\"hljs-comment\">// { imie: 'Jan', wiek: 30, miasto: 'Warszawa' }</span>\n</code></pre>\n<h2 id=\"promisy\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#promisy\">#</a>Promisy</h2>\n<p>Promisy są używane do obsługi operacji asynchronicznych.</p>\n<h3 id=\"przykład-2\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-2\">#</a>Przykład:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> obietnica = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> sukces = <span class=\"hljs-literal\">true</span>;\n\n  <span class=\"hljs-keyword\">if</span> (sukces) {\n    <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">\"Operacja zakończona sukcesem!\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-string\">\"Operacja zakończona niepowodzeniem.\"</span>);\n  }\n});\n\nobietnica\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error));\n</code></pre>\n<h2 id=\"asyncawait\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#asyncawait\">#</a>Async/Await</h2>\n<p>Async/Await to składnia, która upraszcza pracę z promisami i sprawia, że kod asynchroniczny wygląda jak kod synchroniczny.</p>\n<h3 id=\"przykład-3\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-3\">#</a>Przykład:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">asyncFunction</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> obietnica;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);\n  }\n};\n\n<span class=\"hljs-title function_\">asyncFunction</span>();\n</code></pre>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadania-do-wykonania\">#</a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadanie-1\">#</a>Zadanie 1</h3>\n<p>Napisz funkcję strzałkową, która przyjmuje dwa argumenty i zwraca ich sumę.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dodaj</span> = (<span class=\"hljs-params\">a, b</span>) => a + b;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// 5</span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-2\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadanie-2\">#</a>Zadanie 2</h3>\n<p>Utwórz obiekt reprezentujący samochód, z atrybutami <code>marka</code>, <code>model</code> i <code>rok</code>. Następnie użyj destrukturyzacji, aby wyodrębnić te wartości i wyświetlić je w konsoli.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> samochod = { <span class=\"hljs-attr\">marka</span>: <span class=\"hljs-string\">\"Toyota\"</span>, <span class=\"hljs-attr\">model</span>: <span class=\"hljs-string\">\"Corolla\"</span>, <span class=\"hljs-attr\">rok</span>: <span class=\"hljs-number\">2020</span> };\n<span class=\"hljs-keyword\">const</span> { marka, model, rok } = samochod;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(marka, model, rok); <span class=\"hljs-comment\">// Toyota Corolla 2020</span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-3\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadanie-3\">#</a>Zadanie 3</h3>\n<p>Stwórz tablicę liczb od 1 do 5. Następnie użyj operatora spread, aby dodać liczby 6 i 7 do tej tablicy.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> liczby = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n<span class=\"hljs-keyword\">const</span> wiecejLiczb = [...liczby, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>];\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wiecejLiczb); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7]</span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-4\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadanie-4\">#</a>Zadanie 4</h3>\n<p>Napisz funkcję asynchroniczną, która używa promisów do symulacji opóźnienia (np. za pomocą <code>setTimeout</code>). Funkcja powinna zwracać wynik po 2 sekundach.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">delay</span> = (<span class=\"hljs-params\">ms</span>) => <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =></span> <span class=\"hljs-built_in\">setTimeout</span>(resolve, ms));\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">asyncFunction</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Czekam 2 sekundy...\"</span>);\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">2000</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"2 sekundy minęły!\"</span>);\n};\n\n<span class=\"hljs-title function_\">asyncFunction</span>();\n</code></pre>\n</details>\n<p>To tyle na temat podstaw nowoczesnego JavaScript! Zachęcam do dalszego eksperymentowania i zgłębiania tego tematu, aby tworzyć bardziej zaawansowane i interaktywne aplikacje.</p>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/content//nowoczesny-javascript.mdx",{"_18":40,"_20":41,"_22":42,"_9":43,"_29":44,"_31":45,"_33":46,"_35":47,"_37":48},"Wprowadzenie do JavaScript","JavaScript jest językiem programowania, który jest powszechnie stosowany do tworzenia dynamicznych i interaktywnych stron internetowych. W tym kursie omówimy podstawy JavaScript, w tym zmienne, typy danych, operatory, struktury kontrolne, funkcje oraz obiekty.",[8,24,11,25,26,27],[11,8],["D",1719705600000],"5c7ca66f-f7d4-415d-85dc-b54b2f357f50","wprowadzenie-do-javascript","<p>JavaScript jest językiem programowania, który jest powszechnie stosowany do tworzenia dynamicznych i interaktywnych stron internetowych. W tym kursie omówimy podstawy JavaScript, w tym zmienne, typy danych, operatory, struktury kontrolne, funkcje oraz obiekty.</p>\n<h2 id=\"zmienne\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zmienne\">#</a>Zmienne</h2>\n<p>Zmienne w JavaScript mogą być deklarowane za pomocą <code>var</code>, <code>let</code> i <code>const</code>.</p>\n<h3 id=\"przykłady\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykłady\">#</a>Przykłady:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Deklaracja zmiennej za pomocą var</span>\n<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">// Deklaracja zmiennej za pomocą let</span>\n<span class=\"hljs-keyword\">const</span> z = <span class=\"hljs-number\">15</span>; <span class=\"hljs-comment\">// Deklaracja stałej za pomocą const</span>\n</code></pre>\n<h2 id=\"typy-danych\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#typy-danych\">#</a>Typy danych</h2>\n<p>JavaScript obsługuje różne typy danych, w tym liczby, łańcuchy znaków (string), boolean, obiekty i tablice.</p>\n<h3 id=\"przykłady-1\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykłady-1\">#</a>Przykłady:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> liczba = <span class=\"hljs-number\">42</span>; <span class=\"hljs-comment\">// Typ danych: Number</span>\n<span class=\"hljs-keyword\">let</span> tekst = <span class=\"hljs-string\">\"Hello, World!\"</span>; <span class=\"hljs-comment\">// Typ danych: String</span>\n<span class=\"hljs-keyword\">let</span> prawda = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Typ danych: Boolean</span>\n<span class=\"hljs-keyword\">let</span> obiekt = { <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span> }; <span class=\"hljs-comment\">// Typ danych: Object</span>\n<span class=\"hljs-keyword\">let</span> tablica = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]; <span class=\"hljs-comment\">// Typ danych: Array</span>\n</code></pre>\n<h2 id=\"operatory\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#operatory\">#</a>Operatory</h2>\n<p>Operatory w JavaScript obejmują arytmetyczne, porównania, logiczne i przypisania.</p>\n<h3 id=\"przykłady-2\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykłady-2\">#</a>Przykłady:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Operatory arytmetyczne</span>\n<span class=\"hljs-keyword\">let</span> suma = <span class=\"hljs-number\">10</span> + <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Dodawanie</span>\n<span class=\"hljs-keyword\">let</span> roznica = <span class=\"hljs-number\">10</span> - <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Odejmowanie</span>\n<span class=\"hljs-keyword\">let</span> iloczyn = <span class=\"hljs-number\">10</span> * <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Mnożenie</span>\n<span class=\"hljs-keyword\">let</span> iloraz = <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Dzielenie</span>\n\n<span class=\"hljs-comment\">// Operatory porównania</span>\n<span class=\"hljs-keyword\">let</span> rowne = <span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">// Porównanie wartości</span>\n<span class=\"hljs-keyword\">let</span> identyczne = <span class=\"hljs-number\">10</span> === <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">// Porównanie wartości i typu</span>\n<span class=\"hljs-keyword\">let</span> nierowne = <span class=\"hljs-number\">10</span> != <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Nierówność</span>\n\n<span class=\"hljs-comment\">// Operatory logiczne</span>\n<span class=\"hljs-keyword\">let</span> iOperator = <span class=\"hljs-literal\">true</span> &#x26;&#x26; <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// Operator logiczny AND</span>\n<span class=\"hljs-keyword\">let</span> lubOperator = <span class=\"hljs-literal\">true</span> || <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// Operator logiczny OR</span>\n<span class=\"hljs-keyword\">let</span> nieOperator = !<span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Operator logiczny NOT</span>\n\n<span class=\"hljs-comment\">// Operatory przypisania</span>\n<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">10</span>;\na += <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Dodanie i przypisanie</span>\na -= <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Odejmowanie i przypisanie</span>\n</code></pre>\n<h2 id=\"struktury-kontrolne\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#struktury-kontrolne\">#</a>Struktury kontrolne</h2>\n<h3 id=\"instrukcja-warunkowa-if\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#instrukcja-warunkowa-if\">#</a>Instrukcja warunkowa <code>if</code></h3>\n<p>Instrukcja <code>if</code> służy do wykonywania kodu warunkowo.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> wiek = <span class=\"hljs-number\">18</span>;\n\n<span class=\"hljs-keyword\">if</span> (wiek >= <span class=\"hljs-number\">18</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Jesteś pełnoletni\"</span>);\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Jesteś niepełnoletni\"</span>);\n}\n</code></pre>\n<h3 id=\"pętla-for\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#pętla-for\">#</a>Pętla <code>for</code></h3>\n<p>Pętla <code>for</code> służy do wykonywania kodu wielokrotnie.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">5</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i);\n}\n</code></pre>\n<h3 id=\"pętla-while\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#pętla-while\">#</a>Pętla <code>while</code></h3>\n<p>Pętla <code>while</code> służy do wykonywania kodu, dopóki warunek jest prawdziwy.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-keyword\">while</span> (i &#x3C; <span class=\"hljs-number\">5</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i);\n  i++;\n}\n</code></pre>\n<h2 id=\"funkcje\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#funkcje\">#</a>Funkcje</h2>\n<p>Funkcje pozwalają na grupowanie kodu, który może być wykonywany wielokrotnie.</p>\n<h3 id=\"deklaracja-funkcji\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#deklaracja-funkcji\">#</a>Deklaracja funkcji</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n\n<span class=\"hljs-keyword\">let</span> wynik = <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wynik); <span class=\"hljs-comment\">// 15</span>\n</code></pre>\n<h3 id=\"funkcje-strzałkowe\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#funkcje-strzałkowe\">#</a>Funkcje strzałkowe</h3>\n<p>Funkcje strzałkowe to krótszy zapis funkcji.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dodaj</span> = (<span class=\"hljs-params\">a, b</span>) => a + b;\n<span class=\"hljs-keyword\">let</span> wynik = <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wynik); <span class=\"hljs-comment\">// 15</span>\n</code></pre>\n<h2 id=\"obiekty\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#obiekty\">#</a>Obiekty</h2>\n<p>Obiekty pozwalają na grupowanie powiązanych wartości i funkcji.</p>\n<h3 id=\"tworzenie-obiektu\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#tworzenie-obiektu\">#</a>Tworzenie obiektu</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> osoba = {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>,\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span>,\n  <span class=\"hljs-attr\">przedstawSie</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, mam na imię <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.imie}</span> i mam <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.wiek}</span> lat.`</span>;\n  },\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(osoba.<span class=\"hljs-title function_\">przedstawSie</span>()); <span class=\"hljs-comment\">// Cześć, mam na imię Jan i mam 30 lat.</span>\n</code></pre>\n<h2 id=\"tablice\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#tablice\">#</a>Tablice</h2>\n<p>Tablice to struktury danych, które przechowują listę elementów.</p>\n<h3 id=\"tworzenie-i-manipulacja-tablicami\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#tworzenie-i-manipulacja-tablicami\">#</a>Tworzenie i manipulacja tablicami</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> liczby = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby[<span class=\"hljs-number\">0</span>]); <span class=\"hljs-comment\">// 1</span>\n\nliczby.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// Dodanie elementu na końcu tablicy</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6]</span>\n\nliczby.<span class=\"hljs-title function_\">pop</span>(); <span class=\"hljs-comment\">// Usunięcie ostatniego elementu z tablicy</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadania-do-wykonania\">#</a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadanie-1\">#</a>Zadanie 1</h3>\n<p>Napisz funkcję, która przyjmuje dwie liczby jako argumenty i zwraca ich iloczyn.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">iloczyn</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a * b;\n}\n\n<span class=\"hljs-keyword\">let</span> wynik = <span class=\"hljs-title function_\">iloczyn</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wynik); <span class=\"hljs-comment\">// 50</span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-2\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadanie-2\">#</a>Zadanie 2</h3>\n<p>Utwórz obiekt reprezentujący książkę z atrybutami <code>tytul</code>, <code>autor</code> i <code>rok</code>. Następnie dodaj metodę, która zwraca opis książki.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> ksiazka = {\n  <span class=\"hljs-attr\">tytul</span>: <span class=\"hljs-string\">\"W pustyni i w puszczy\"</span>,\n  <span class=\"hljs-attr\">autor</span>: <span class=\"hljs-string\">\"Henryk Sienkiewicz\"</span>,\n  <span class=\"hljs-attr\">rok</span>: <span class=\"hljs-number\">1911</span>,\n  <span class=\"hljs-attr\">opis</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.tytul}</span> to książka napisana przez <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.autor}</span> w roku <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.rok}</span>.`</span>;\n  },\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ksiazka.<span class=\"hljs-title function_\">opis</span>()); <span class=\"hljs-comment\">// W pustyni i w puszczy to książka napisana przez Henryk Sienkiewicz w roku 1911.</span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-3\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadanie-3\">#</a>Zadanie 3</h3>\n<p>Napisz funkcję, która przyjmuje tablicę liczb i zwraca największą liczbę z tej tablicy.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">znajdzNajwieksza</span>(<span class=\"hljs-params\">tablica</span>) {\n  <span class=\"hljs-keyword\">let</span> najwieksza = tablica[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &#x3C; tablica.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (tablica[i] > najwieksza) {\n      najwieksza = tablica[i];\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> najwieksza;\n}\n\n<span class=\"hljs-keyword\">let</span> liczby = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">znajdzNajwieksza</span>(liczby)); <span class=\"hljs-comment\">// 5</span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-4\" class=\"scroll-mt-20\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadanie-4\">#</a>Zadanie 4</h3>\n<p>Utwórz tablicę, która zawiera kilka imion. Następnie użyj pętli <code>for</code>, aby wyświetlić każde imię w konsoli.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> imiona = [<span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-string\">\"Anna\"</span>, <span class=\"hljs-string\">\"Krzysztof\"</span>, <span class=\"hljs-string\">\"Maria\"</span>];\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; imiona.<span class=\"hljs-property\">length</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(imiona[i]);\n}\n<span class=\"hljs-comment\">// Jan</span>\n<span class=\"hljs-comment\">// Anna</span>\n<span class=\"hljs-comment\">// Krzysztof</span>\n<span class=\"hljs-comment\">// Maria</span>\n</code></pre>\n</details>\n<p>To tyle na temat podstaw JavaScript! Zachęcam do dalszego eksperymentowania i zgłębiania tego tematu, aby tworzyć bardziej zaawansowane i interaktywne aplikacje.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/content//wprowadzenie-do-javascript.mdx"]
