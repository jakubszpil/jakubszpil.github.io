[{"_1":2},"course-list-with-category",{"_3":4},"data",{"_5":6,"_7":8,"_21":22},"category","react","categories",[9,10,11,12,13,14,15,16,6,17,18,19,20],"wprowadzenie","bazy-danych","html","sql","typescript","javascript","css","terminal","wzorce-projektowe","git","devops","seo","courses",[23],{"_24":25,"_26":27,"_28":29,"_7":37,"_38":39,"_40":41,"_92":93,"_94":95,"_96":97,"_98":99,"_100":101},"title","Pierwsze kroki z TypeScript w React – praktyczne podstawy","description","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.","keywords",[13,6,30,31,32,33,34,35,36],"frontend","nauka","komponenty","props","state","kurs","learning",[13,6],"createdAt",["D",1750550400000],"quiz",{"_24":42,"_43":44},"Quiz: TypeScript w React – podstawy","questions",[45,58,67,75,84],{"_46":47,"_48":49,"_54":55,"_56":57},"question","<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>","options",[50,51,52,53],"Generuje automatycznie dokumentację komponentów.","Eliminuje konieczność używania npm.","Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Zamienia kod na czysty CSS.","answer",2,"explanation","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_46":59,"_48":60,"_54":65,"_56":66},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[61,62,63,64],"let count = useState(0);","const [count, setCount] = useState<number>(0);","const [count, setCount] = useState(0: number);","const [count, setCount] = useState<string>(0);",1,"Poprawna składnia to useState<number>(0).",{"_46":68,"_48":69,"_54":55,"_56":74},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[70,71,72,73],"Tylko poprzez klasę.","Wyłącznie przez any.","Przez interface lub type i przekazać go do propsów funkcji.","Nie trzeba typować propsów w TS.","Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_46":76,"_48":77,"_54":82,"_56":83},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[78,79,80,81],"const ref = useRef<HTMLButtonElement>(null);","const ref = useRef(null);","const ref = useRef<Button>(null);","const ref = useRef<HTMLDivElement>(null);",0,"Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_46":85,"_48":86,"_54":55,"_56":91},"<p>Co wyświetli poniższy komponent?</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n<p>Jeśli wywołasz <code>&#x3C;Welcome name=\"Ala\" /></code></p>",[87,88,89,90],"Witaj, Ala!","Błąd kompilacji","Cześć, Ala!","undefined","Komponent wyświetli 'Cześć, Ala!'.","id","88823ed6-957b-4e9b-b928-cde20fa5f4ab","slug","pierwsze-kroki-z-typescript-w-react","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/pierwsze-kroki-z-typescript-w-react.md","readingTime","4 minuty"]
