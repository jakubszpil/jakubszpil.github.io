[{"_1":2},"course-list-with-category",{"_3":4},"data",{"_5":6,"_7":8,"_20":21},"category","react","categories",[9,10,11,12,13,14,15,6,16,17,18,19],"wprowadzenie","bazy-danych","html","sql","typescript","javascript","css","wzorce-projektowe","git","devops","seo","courses",[22],{"_23":24,"_25":26,"_27":28,"_7":36,"_37":38,"_39":40,"_91":92,"_93":94,"_95":96,"_97":98},"title","Pierwsze kroki z TypeScript w React – praktyczne podstawy","description","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.","keywords",[13,6,29,30,31,32,33,34,35],"frontend","nauka","komponenty","props","state","kurs","learning",[13,6],"createdAt",["D",1750550400000],"quiz",{"_23":41,"_42":43},"Quiz: TypeScript w React – podstawy","questions",[44,57,66,75,83],{"_45":46,"_47":48,"_53":54,"_55":56},"question","<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>","options",[49,50,51,52],"Generuje automatycznie dokumentację komponentów.","Zamienia kod na czysty CSS.","Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Eliminuje konieczność używania npm.","answer",2,"explanation","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_45":58,"_47":59,"_53":64,"_55":65},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[60,61,62,63],"const [count, setCount] = useState(0: number);","const [count, setCount] = useState<string>(0);","let count = useState(0);","const [count, setCount] = useState<number>(0);",3,"Poprawna składnia to useState<number>(0).",{"_45":67,"_47":68,"_53":73,"_55":74},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[69,70,71,72],"Wyłącznie przez any.","Przez interface lub type i przekazać go do propsów funkcji.","Nie trzeba typować propsów w TS.","Tylko poprzez klasę.",1,"Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_45":76,"_47":77,"_53":54,"_55":82},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[78,79,80,81],"const ref = useRef<HTMLDivElement>(null);","const ref = useRef(null);","const ref = useRef<HTMLButtonElement>(null);","const ref = useRef<Button>(null);","Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_45":84,"_47":85,"_53":54,"_55":90},"<p>Co wyświetli poniższy komponent?</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n<p>Jeśli wywołasz <code>&#x3C;Welcome name=\"Ala\" /></code></p>",[86,87,88,89],"Błąd kompilacji","undefined","Cześć, Ala!","Witaj, Ala!","Komponent wyświetli 'Cześć, Ala!'.","id","1cf7cb0c-0fe2-4141-9ced-a381e9efaa96","slug","pierwsze-kroki-z-typescript-w-react","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/pierwsze-kroki-z-typescript-w-react.md"]
