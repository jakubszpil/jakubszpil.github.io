[{"_1":2},"course-list-with-category",{"_3":4},"data",{"_5":6,"_7":8,"_18":19},"category","react","categories",[9,10,11,12,13,6,14,15,16,17],"wprowadzenie","html","typescript","javascript","css","wzorce-projektowe","git","devops","seo","courses",[20],{"_21":22,"_23":24,"_25":26,"_7":34,"_35":36,"_37":38,"_90":91,"_92":93,"_94":95,"_96":97},"title","Pierwsze kroki z TypeScript w React – praktyczne podstawy","description","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.","keywords",[11,6,27,28,29,30,31,32,33],"frontend","nauka","komponenty","props","state","kurs","learning",[11,6],"createdAt",["D",1750550400000],"quiz",{"_21":39,"_40":41},"Quiz: TypeScript w React – podstawy","questions",[42,55,64,73,81],{"_43":44,"_45":46,"_51":52,"_53":54},"question","<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>","options",[47,48,49,50],"Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Generuje automatycznie dokumentację komponentów.","Zamienia kod na czysty CSS.","Eliminuje konieczność używania npm.","answer",0,"explanation","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_43":56,"_45":57,"_51":62,"_53":63},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[58,59,60,61],"const [count, setCount] = useState(0: number);","let count = useState(0);","const [count, setCount] = useState<string>(0);","const [count, setCount] = useState<number>(0);",3,"Poprawna składnia to useState<number>(0).",{"_43":65,"_45":66,"_51":71,"_53":72},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[67,68,69,70],"Nie trzeba typować propsów w TS.","Przez interface lub type i przekazać go do propsów funkcji.","Tylko poprzez klasę.","Wyłącznie przez any.",1,"Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_43":74,"_45":75,"_51":62,"_53":80},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[76,77,78,79],"const ref = useRef(null);","const ref = useRef<Button>(null);","const ref = useRef<HTMLDivElement>(null);","const ref = useRef<HTMLButtonElement>(null);","Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_43":82,"_45":83,"_51":88,"_53":89},"<p>Co wyświetli poniższy komponent?</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n<p>Jeśli wywołasz <code>&#x3C;Welcome name=\"Ala\" /></code></p>",[84,85,86,87],"Witaj, Ala!","undefined","Cześć, Ala!","Błąd kompilacji",2,"Komponent wyświetli 'Cześć, Ala!'.","id","59608483-def5-498c-bd96-ed0afbae310e","slug","pierwsze-kroki-z-typescript-w-react","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/pierwsze-kroki-z-typescript-w-react.md"]
