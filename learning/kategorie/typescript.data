[{"_1":2},"course-list-with-category",{"_3":4},"data",{"_5":6,"_7":8,"_21":22},"category","typescript","categories",[9,10,11,12,6,13,14,15,16,17,18,19,20],"wprowadzenie","bazy-danych","html","sql","javascript","css","terminal","react","wzorce-projektowe","git","devops","seo","courses",[23,100,158],{"_24":25,"_26":27,"_28":29,"_7":34,"_35":36,"_37":38,"_90":91,"_92":93,"_94":95,"_96":97,"_98":99},"title","Wprowadzenie do TypeScript","description","Dowiedz się czym jest TypeScript, jak zacząć z niego korzystać i dlaczego warto go używać w swoich projektach. Przystępny przewodnik dla początkujących z przykładami i praktycznymi wskazówkami.","keywords",[6,13,30,31,32,33],"programowanie","frontend","typowanie","learning",[9,6],"createdAt",["D",1750636800000],"quiz",{"_24":39,"_40":41},"Quiz: Podstawy TypeScript","questions",[42,55,64,73,81],{"_43":44,"_45":46,"_51":52,"_53":54},"question","<p>Czym jest TypeScript?</p>","options",[47,48,49,50],"Rozszerzeniem JavaScriptu o typowanie statyczne","Językiem bazującym na Pythonie","Systemem szablonów HTML","Frameworkiem CSS","answer",0,"explanation","TypeScript rozszerza JavaScript o typowanie statyczne i inne narzędzia dla programistów.",{"_43":56,"_45":57,"_51":62,"_53":63},"<p>Jakie rozszerzenie mają pliki natywne TypeScript?</p>",[58,59,60,61],".js",".ts",".json",".cts",1,"Standardowe pliki TypeScript mają rozszerzenie `.ts`. Natomiast w React używamy też `.tsx`.",{"_43":65,"_45":66,"_51":71,"_53":72},"<p>Które z poniższych typowań zmiennej jest poprawne w TypeScript?</p>",[67,68,69,70],"var liczba: num = 10;","let liczba: 10 = number;","let liczba = number 10;","let liczba: number = 10;",3,"Poprawna składnia to let liczba: number = 10;",{"_43":74,"_45":75,"_51":52,"_53":80},"<p>Czym różni się TypeScript od JavaScript?</p>",[76,77,78,79],"TypeScript ma statyczne typowanie, JavaScript nie","JavaScript nie pozwala na funkcje","TypeScript działa tylko w przeglądarce","TypeScript nie obsługuje klas","Najważniejsza różnica to typowanie statyczne i kompilacja do JS.",{"_43":82,"_45":83,"_51":88,"_53":89},"<p>Jak zainstalować TypeScript globalnie przez npm?</p>",[84,85,86,87],"npm get typescript","npm install typescript","npm install -g typescript","npm add global typescript",2,"Polecenie npm install -g typescript instaluje TypeScript globalnie.","id","a94eaa63-326e-4908-87f6-c5b82b320656","slug","wprowadzenie-do-typescript","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-typescript.md","readingTime","6 minut",{"_24":101,"_26":102,"_28":103,"_7":109,"_35":110,"_37":111,"_90":154,"_92":155,"_94":95,"_96":156,"_98":157},"Pierwsze kroki z TypeScript w React – praktyczne podstawy","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.",[6,16,31,104,105,106,107,108,33],"nauka","komponenty","props","state","kurs",[6,16],["D",1750550400000],{"_24":112,"_40":113},"Quiz: TypeScript w React – podstawy",[114,122,130,138,146],{"_43":115,"_45":116,"_51":88,"_53":121},"<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>",[117,118,119,120],"Zamienia kod na czysty CSS.","Eliminuje konieczność używania npm.","Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Generuje automatycznie dokumentację komponentów.","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_43":123,"_45":124,"_51":71,"_53":129},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[125,126,127,128],"let count = useState(0);","const [count, setCount] = useState<string>(0);","const [count, setCount] = useState(0: number);","const [count, setCount] = useState<number>(0);","Poprawna składnia to useState<number>(0).",{"_43":131,"_45":132,"_51":88,"_53":137},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[133,134,135,136],"Nie trzeba typować propsów w TS.","Wyłącznie przez any.","Przez interface lub type i przekazać go do propsów funkcji.","Tylko poprzez klasę.","Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_43":139,"_45":140,"_51":88,"_53":145},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[141,142,143,144],"const ref = useRef<Button>(null);","const ref = useRef(null);","const ref = useRef<HTMLButtonElement>(null);","const ref = useRef<HTMLDivElement>(null);","Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_43":147,"_45":148,"_51":62,"_53":153},"<p>Co wyświetli poniższy komponent?</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n<p>Jeśli wywołasz <code>&#x3C;Welcome name=\"Ala\" /></code></p>",[149,150,151,152],"Witaj, Ala!","Cześć, Ala!","Błąd kompilacji","undefined","Komponent wyświetli 'Cześć, Ala!'.","8b40c939-4aa8-408d-887f-1de41c1804c2","pierwsze-kroki-z-typescript-w-react","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/pierwsze-kroki-z-typescript-w-react.md","4 minuty",{"_24":159,"_26":160,"_28":161,"_7":164,"_35":165,"_37":166,"_90":204,"_92":17,"_94":95,"_96":205,"_98":99},"Wzorce projektowe w praktyce","Kompleksowy przewodnik po wzorcach projektowych — od podstaw po praktyczne przykłady w kontekście frontendu i backendu.",[162,30,6,13,31,163,108,33],"wzorce projektowe","backend",[17,6],["D",1750550400000],{"_24":167,"_40":168},"Quiz: Wzorce projektowe",[169,177,185,191,199],{"_43":170,"_45":171,"_51":88,"_53":176},"<p>Do której grupy należy wzorzec Singleton?</p>",[172,173,174,175],"Strukturalne","Behawioralne","Kreacyjne","Funkcyjne","Singleton to wzorzec kreacyjny – dotyczy sposobu tworzenia obiektów.",{"_43":178,"_45":179,"_51":71,"_53":184},"<p>Który wzorzec umożliwia zamianę jednego interfejsu na inny, by umożliwić współpracę niekompatybilnych klas?</p>",[180,181,182,183],"Observer","Builder","Facade","Adapter","Adapter tłumaczy jeden interfejs na inny.",{"_43":186,"_45":187,"_51":71,"_53":190},"<p>Który wzorzec pozwala powiadamiać wiele obiektów o zmianie stanu bez ścisłego powiązania?</p>",[188,189,182,180],"Factory","Strategy","Observer służy do powiadamiania wielu obiektów o zmianie stanu.",{"_43":192,"_45":193,"_51":52,"_53":198},"<p>Co umożliwia wzorzec Strategy?</p>",[194,195,196,197],"Dynamiczną zmianę algorytmu działania programu","Tworzenie jednej instancji klasy","Uproszczenie złożonego interfejsu","Budowanie złożonych obiektów krok po kroku","Strategy pozwala dynamicznie zmieniać algorytm działania programu.",{"_43":200,"_45":201,"_51":71,"_53":203},"<p>Który wzorzec stosujesz, by uprościć korzystanie z kilku skomplikowanych systemów przez jeden prosty interfejs?</p>",[181,183,202,182],"Singleton","Facade upraszcza złożone systemy przez prosty interfejs.","1bf18867-6d16-4d66-ba28-0b0d9d1585c4","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wzorce-projektowe.md"]
