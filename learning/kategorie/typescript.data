[{"_1":2},"course-list-with-category",{"_3":4},"data",{"_5":6,"_7":8,"_18":19},"category","typescript","categories",[9,10,6,11,12,13,14,15,16,17],"wprowadzenie","html","javascript","css","react","wzorce-projektowe","git","devops","seo","courses",[20,93,150],{"_21":22,"_23":24,"_25":26,"_7":31,"_32":33,"_34":35,"_85":86,"_87":88,"_89":90,"_91":92},"title","Wprowadzenie do TypeScript","description","Dowiedz się czym jest TypeScript, jak zacząć z niego korzystać i dlaczego warto go używać w swoich projektach. Przystępny przewodnik dla początkujących z przykładami i praktycznymi wskazówkami.","keywords",[6,11,27,28,29,30],"programowanie","frontend","typowanie","learning",[9,6],"createdAt",["D",1750636800000],"quiz",{"_21":36,"_37":38},"Quiz: Podstawy TypeScript","questions",[39,52,60,69,77],{"_40":41,"_42":43,"_48":49,"_50":51},"question","<p>Czym jest TypeScript?</p>","options",[44,45,46,47],"Rozszerzeniem JavaScriptu o typowanie statyczne","Systemem szablonów HTML","Frameworkiem CSS","Językiem bazującym na Pythonie","answer",0,"explanation","TypeScript rozszerza JavaScript o typowanie statyczne i inne narzędzia dla programistów.",{"_40":53,"_42":54,"_48":49,"_50":59},"<p>Jakie rozszerzenie mają pliki natywne TypeScript?</p>",[55,56,57,58],".ts",".js",".json",".cts","Standardowe pliki TypeScript mają rozszerzenie `.ts`. Natomiast w React używamy też `.tsx`.",{"_40":61,"_42":62,"_48":67,"_50":68},"<p>Które z poniższych typowań zmiennej jest poprawne w TypeScript?</p>",[63,64,65,66],"var liczba: num = 10;","let liczba: number = 10;","let liczba = number 10;","let liczba: 10 = number;",1,"Poprawna składnia to let liczba: number = 10;",{"_40":70,"_42":71,"_48":67,"_50":76},"<p>Czym różni się TypeScript od JavaScript?</p>",[72,73,74,75],"JavaScript nie pozwala na funkcje","TypeScript ma statyczne typowanie, JavaScript nie","TypeScript działa tylko w przeglądarce","TypeScript nie obsługuje klas","Najważniejsza różnica to typowanie statyczne i kompilacja do JS.",{"_40":78,"_42":79,"_48":67,"_50":84},"<p>Jak zainstalować TypeScript globalnie przez npm?</p>",[80,81,82,83],"npm add global typescript","npm install -g typescript","npm install typescript","npm get typescript","Polecenie npm install -g typescript instaluje TypeScript globalnie.","id","42a5f3a8-5a36-4e71-bafe-eedeb54e6936","slug","wprowadzenie-do-typescript","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-typescript.md",{"_21":94,"_23":95,"_25":96,"_7":102,"_32":103,"_34":104,"_85":147,"_87":148,"_89":90,"_91":149},"Pierwsze kroki z TypeScript w React – praktyczne podstawy","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.",[6,13,28,97,98,99,100,101,30],"nauka","komponenty","props","state","kurs",[6,13],["D",1750550400000],{"_21":105,"_37":106},"Quiz: TypeScript w React – podstawy",[107,115,123,131,139],{"_40":108,"_42":109,"_48":49,"_50":114},"<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>",[110,111,112,113],"Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Zamienia kod na czysty CSS.","Generuje automatycznie dokumentację komponentów.","Eliminuje konieczność używania npm.","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_40":116,"_42":117,"_48":67,"_50":122},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[118,119,120,121],"let count = useState(0);","const [count, setCount] = useState<number>(0);","const [count, setCount] = useState(0: number);","const [count, setCount] = useState<string>(0);","Poprawna składnia to useState<number>(0).",{"_40":124,"_42":125,"_48":67,"_50":130},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[126,127,128,129],"Wyłącznie przez any.","Przez interface lub type i przekazać go do propsów funkcji.","Nie trzeba typować propsów w TS.","Tylko poprzez klasę.","Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_40":132,"_42":133,"_48":67,"_50":138},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[134,135,136,137],"const ref = useRef<HTMLDivElement>(null);","const ref = useRef<HTMLButtonElement>(null);","const ref = useRef<Button>(null);","const ref = useRef(null);","Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_40":140,"_42":141,"_48":67,"_50":146},"<p>Co wyświetli poniższy komponent?</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n<p>Jeśli wywołasz <code>&#x3C;Welcome name=\"Ala\" /></code></p>",[142,143,144,145],"undefined","Cześć, Ala!","Błąd kompilacji","Witaj, Ala!","Komponent wyświetli 'Cześć, Ala!'.","57aec610-cfc2-47ae-b724-52c591cfae3f","pierwsze-kroki-z-typescript-w-react","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/pierwsze-kroki-z-typescript-w-react.md",{"_21":151,"_23":152,"_25":153,"_7":156,"_32":157,"_34":158,"_85":197,"_87":14,"_89":90,"_91":198},"Wzorce projektowe w praktyce","Kompleksowy przewodnik po wzorcach projektowych — od podstaw po praktyczne przykłady w kontekście frontendu i backendu.",[154,27,6,11,28,155,101,30],"wzorce projektowe","backend",[14,6],["D",1750550400000],{"_21":159,"_37":160},"Quiz: Wzorce projektowe",[161,170,178,184,192],{"_40":162,"_42":163,"_48":168,"_50":169},"<p>Do której grupy należy wzorzec Singleton?</p>",[164,165,166,167],"Funkcyjne","Strukturalne","Kreacyjne","Behawioralne",2,"Singleton to wzorzec kreacyjny – dotyczy sposobu tworzenia obiektów.",{"_40":171,"_42":172,"_48":49,"_50":177},"<p>Który wzorzec umożliwia zamianę jednego interfejsu na inny, by umożliwić współpracę niekompatybilnych klas?</p>",[173,174,175,176],"Adapter","Observer","Facade","Builder","Adapter tłumaczy jeden interfejs na inny.",{"_40":179,"_42":180,"_48":49,"_50":183},"<p>Który wzorzec pozwala powiadamiać wiele obiektów o zmianie stanu bez ścisłego powiązania?</p>",[174,181,182,175],"Factory","Strategy","Observer służy do powiadamiania wielu obiektów o zmianie stanu.",{"_40":185,"_42":186,"_48":49,"_50":191},"<p>Co umożliwia wzorzec Strategy?</p>",[187,188,189,190],"Dynamiczną zmianę algorytmu działania programu","Tworzenie jednej instancji klasy","Uproszczenie złożonego interfejsu","Budowanie złożonych obiektów krok po kroku","Strategy pozwala dynamicznie zmieniać algorytm działania programu.",{"_40":193,"_42":194,"_48":168,"_50":196},"<p>Który wzorzec stosujesz, by uprościć korzystanie z kilku skomplikowanych systemów przez jeden prosty interfejs?</p>",[176,173,175,195],"Singleton","Facade upraszcza złożone systemy przez prosty interfejs.","9e133932-35c6-45b4-82e0-da28eda35e28","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wzorce-projektowe.md"]
