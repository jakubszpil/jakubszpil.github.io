[{"_1":2},"course-list-with-category",{"_3":4},"data",{"_5":6,"_7":8,"_20":21},"category","typescript","categories",[9,10,11,12,6,13,14,15,16,17,18,19],"wprowadzenie","bazy-danych","html","sql","javascript","css","react","wzorce-projektowe","git","devops","seo","courses",[22,98,156],{"_23":24,"_25":26,"_27":28,"_7":33,"_34":35,"_36":37,"_88":89,"_90":91,"_92":93,"_94":95,"_96":97},"title","Wprowadzenie do TypeScript","description","Dowiedz się czym jest TypeScript, jak zacząć z niego korzystać i dlaczego warto go używać w swoich projektach. Przystępny przewodnik dla początkujących z przykładami i praktycznymi wskazówkami.","keywords",[6,13,29,30,31,32],"programowanie","frontend","typowanie","learning",[9,6],"createdAt",["D",1750636800000],"quiz",{"_23":38,"_39":40},"Quiz: Podstawy TypeScript","questions",[41,54,63,72,80],{"_42":43,"_44":45,"_50":51,"_52":53},"question","<p>Czym jest TypeScript?</p>","options",[46,47,48,49],"Rozszerzeniem JavaScriptu o typowanie statyczne","Językiem bazującym na Pythonie","Frameworkiem CSS","Systemem szablonów HTML","answer",0,"explanation","TypeScript rozszerza JavaScript o typowanie statyczne i inne narzędzia dla programistów.",{"_42":55,"_44":56,"_50":61,"_52":62},"<p>Jakie rozszerzenie mają pliki natywne TypeScript?</p>",[57,58,59,60],".json",".ts",".cts",".js",1,"Standardowe pliki TypeScript mają rozszerzenie `.ts`. Natomiast w React używamy też `.tsx`.",{"_42":64,"_44":65,"_50":70,"_52":71},"<p>Które z poniższych typowań zmiennej jest poprawne w TypeScript?</p>",[66,67,68,69],"var liczba: num = 10;","let liczba = number 10;","let liczba: 10 = number;","let liczba: number = 10;",3,"Poprawna składnia to let liczba: number = 10;",{"_42":73,"_44":74,"_50":51,"_52":79},"<p>Czym różni się TypeScript od JavaScript?</p>",[75,76,77,78],"TypeScript ma statyczne typowanie, JavaScript nie","TypeScript działa tylko w przeglądarce","JavaScript nie pozwala na funkcje","TypeScript nie obsługuje klas","Najważniejsza różnica to typowanie statyczne i kompilacja do JS.",{"_42":81,"_44":82,"_50":61,"_52":87},"<p>Jak zainstalować TypeScript globalnie przez npm?</p>",[83,84,85,86],"npm add global typescript","npm install -g typescript","npm get typescript","npm install typescript","Polecenie npm install -g typescript instaluje TypeScript globalnie.","id","52e69de5-0b45-4ba1-8666-0dd841acb64c","slug","wprowadzenie-do-typescript","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-typescript.md","readingTime","6 minut",{"_23":99,"_25":100,"_27":101,"_7":107,"_34":108,"_36":109,"_88":152,"_90":153,"_92":93,"_94":154,"_96":155},"Pierwsze kroki z TypeScript w React – praktyczne podstawy","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.",[6,15,30,102,103,104,105,106,32],"nauka","komponenty","props","state","kurs",[6,15],["D",1750550400000],{"_23":110,"_39":111},"Quiz: TypeScript w React – podstawy",[112,120,128,136,144],{"_42":113,"_44":114,"_50":61,"_52":119},"<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>",[115,116,117,118],"Generuje automatycznie dokumentację komponentów.","Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Eliminuje konieczność używania npm.","Zamienia kod na czysty CSS.","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_42":121,"_44":122,"_50":70,"_52":127},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[123,124,125,126],"let count = useState(0);","const [count, setCount] = useState<string>(0);","const [count, setCount] = useState(0: number);","const [count, setCount] = useState<number>(0);","Poprawna składnia to useState<number>(0).",{"_42":129,"_44":130,"_50":70,"_52":135},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[131,132,133,134],"Nie trzeba typować propsów w TS.","Wyłącznie przez any.","Tylko poprzez klasę.","Przez interface lub type i przekazać go do propsów funkcji.","Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_42":137,"_44":138,"_50":70,"_52":143},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[139,140,141,142],"const ref = useRef(null);","const ref = useRef<Button>(null);","const ref = useRef<HTMLDivElement>(null);","const ref = useRef<HTMLButtonElement>(null);","Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_42":145,"_44":146,"_50":61,"_52":151},"<p>Co wyświetli poniższy komponent?</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n<p>Jeśli wywołasz <code>&#x3C;Welcome name=\"Ala\" /></code></p>",[147,148,149,150],"Witaj, Ala!","Cześć, Ala!","Błąd kompilacji","undefined","Komponent wyświetli 'Cześć, Ala!'.","be3ff9c7-7a30-4e21-8a70-ec9109eb39f4","pierwsze-kroki-z-typescript-w-react","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/pierwsze-kroki-z-typescript-w-react.md","4 minuty",{"_23":157,"_25":158,"_27":159,"_7":162,"_34":163,"_36":164,"_88":203,"_90":16,"_92":93,"_94":204,"_96":97},"Wzorce projektowe w praktyce","Kompleksowy przewodnik po wzorcach projektowych — od podstaw po praktyczne przykłady w kontekście frontendu i backendu.",[160,29,6,13,30,161,106,32],"wzorce projektowe","backend",[16,6],["D",1750550400000],{"_23":165,"_39":166},"Quiz: Wzorce projektowe",[167,175,184,190,198],{"_42":168,"_44":169,"_50":61,"_52":174},"<p>Do której grupy należy wzorzec Singleton?</p>",[170,171,172,173],"Strukturalne","Kreacyjne","Behawioralne","Funkcyjne","Singleton to wzorzec kreacyjny – dotyczy sposobu tworzenia obiektów.",{"_42":176,"_44":177,"_50":182,"_52":183},"<p>Który wzorzec umożliwia zamianę jednego interfejsu na inny, by umożliwić współpracę niekompatybilnych klas?</p>",[178,179,180,181],"Builder","Observer","Adapter","Facade",2,"Adapter tłumaczy jeden interfejs na inny.",{"_42":185,"_44":186,"_50":70,"_52":189},"<p>Który wzorzec pozwala powiadamiać wiele obiektów o zmianie stanu bez ścisłego powiązania?</p>",[187,188,181,179],"Factory","Strategy","Observer służy do powiadamiania wielu obiektów o zmianie stanu.",{"_42":191,"_44":192,"_50":61,"_52":197},"<p>Co umożliwia wzorzec Strategy?</p>",[193,194,195,196],"Tworzenie jednej instancji klasy","Dynamiczną zmianę algorytmu działania programu","Budowanie złożonych obiektów krok po kroku","Uproszczenie złożonego interfejsu","Strategy pozwala dynamicznie zmieniać algorytm działania programu.",{"_42":199,"_44":200,"_50":182,"_52":202},"<p>Który wzorzec stosujesz, by uprościć korzystanie z kilku skomplikowanych systemów przez jeden prosty interfejs?</p>",[201,180,181,178],"Singleton","Facade upraszcza złożone systemy przez prosty interfejs.","859e6166-4198-428f-9a49-2f12d7f07295","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wzorce-projektowe.md"]
