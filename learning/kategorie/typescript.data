[{"_1":2},"course-list-with-category",{"_3":4},"data",{"_5":6,"_7":8,"_20":21},"category","typescript","categories",[9,10,11,12,6,13,14,15,16,17,18,19],"wprowadzenie","bazy-danych","html","sql","javascript","css","react","wzorce-projektowe","git","devops","seo","courses",[22,96,154],{"_23":24,"_25":26,"_27":28,"_7":33,"_34":35,"_36":37,"_88":89,"_90":91,"_92":93,"_94":95},"title","Wprowadzenie do TypeScript","description","Dowiedz się czym jest TypeScript, jak zacząć z niego korzystać i dlaczego warto go używać w swoich projektach. Przystępny przewodnik dla początkujących z przykładami i praktycznymi wskazówkami.","keywords",[6,13,29,30,31,32],"programowanie","frontend","typowanie","learning",[9,6],"createdAt",["D",1750636800000],"quiz",{"_23":38,"_39":40},"Quiz: Podstawy TypeScript","questions",[41,54,62,71,79],{"_42":43,"_44":45,"_50":51,"_52":53},"question","<p>Czym jest TypeScript?</p>","options",[46,47,48,49],"Systemem szablonów HTML","Frameworkiem CSS","Językiem bazującym na Pythonie","Rozszerzeniem JavaScriptu o typowanie statyczne","answer",3,"explanation","TypeScript rozszerza JavaScript o typowanie statyczne i inne narzędzia dla programistów.",{"_42":55,"_44":56,"_50":51,"_52":61},"<p>Jakie rozszerzenie mają pliki natywne TypeScript?</p>",[57,58,59,60],".cts",".json",".js",".ts","Standardowe pliki TypeScript mają rozszerzenie `.ts`. Natomiast w React używamy też `.tsx`.",{"_42":63,"_44":64,"_50":69,"_52":70},"<p>Które z poniższych typowań zmiennej jest poprawne w TypeScript?</p>",[65,66,67,68],"var liczba: num = 10;","let liczba = number 10;","let liczba: number = 10;","let liczba: 10 = number;",2,"Poprawna składnia to let liczba: number = 10;",{"_42":72,"_44":73,"_50":69,"_52":78},"<p>Czym różni się TypeScript od JavaScript?</p>",[74,75,76,77],"TypeScript działa tylko w przeglądarce","JavaScript nie pozwala na funkcje","TypeScript ma statyczne typowanie, JavaScript nie","TypeScript nie obsługuje klas","Najważniejsza różnica to typowanie statyczne i kompilacja do JS.",{"_42":80,"_44":81,"_50":86,"_52":87},"<p>Jak zainstalować TypeScript globalnie przez npm?</p>",[82,83,84,85],"npm get typescript","npm install -g typescript","npm install typescript","npm add global typescript",1,"Polecenie npm install -g typescript instaluje TypeScript globalnie.","id","d9c3e5bb-71bc-4935-9ff7-53b3ee5dc4d5","slug","wprowadzenie-do-typescript","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-typescript.md",{"_23":97,"_25":98,"_27":99,"_7":105,"_34":106,"_36":107,"_88":151,"_90":152,"_92":93,"_94":153},"Pierwsze kroki z TypeScript w React – praktyczne podstawy","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.",[6,15,30,100,101,102,103,104,32],"nauka","komponenty","props","state","kurs",[6,15],["D",1750550400000],{"_23":108,"_39":109},"Quiz: TypeScript w React – podstawy",[110,118,126,134,143],{"_42":111,"_44":112,"_50":86,"_52":117},"<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>",[113,114,115,116],"Zamienia kod na czysty CSS.","Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Eliminuje konieczność używania npm.","Generuje automatycznie dokumentację komponentów.","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_42":119,"_44":120,"_50":86,"_52":125},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[121,122,123,124],"const [count, setCount] = useState<string>(0);","const [count, setCount] = useState<number>(0);","const [count, setCount] = useState(0: number);","let count = useState(0);","Poprawna składnia to useState<number>(0).",{"_42":127,"_44":128,"_50":86,"_52":133},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[129,130,131,132],"Wyłącznie przez any.","Przez interface lub type i przekazać go do propsów funkcji.","Nie trzeba typować propsów w TS.","Tylko poprzez klasę.","Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_42":135,"_44":136,"_50":141,"_52":142},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[137,138,139,140],"const ref = useRef<HTMLButtonElement>(null);","const ref = useRef<HTMLDivElement>(null);","const ref = useRef<Button>(null);","const ref = useRef(null);",0,"Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_42":144,"_44":145,"_50":141,"_52":150},"<p>Co wyświetli poniższy komponent?</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n<p>Jeśli wywołasz <code>&#x3C;Welcome name=\"Ala\" /></code></p>",[146,147,148,149],"Cześć, Ala!","Witaj, Ala!","undefined","Błąd kompilacji","Komponent wyświetli 'Cześć, Ala!'.","08e10c26-7ad2-4934-80ab-856b870a0a4a","pierwsze-kroki-z-typescript-w-react","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/pierwsze-kroki-z-typescript-w-react.md",{"_23":155,"_25":156,"_27":157,"_7":160,"_34":161,"_36":162,"_88":200,"_90":16,"_92":93,"_94":201},"Wzorce projektowe w praktyce","Kompleksowy przewodnik po wzorcach projektowych — od podstaw po praktyczne przykłady w kontekście frontendu i backendu.",[158,29,6,13,30,159,104,32],"wzorce projektowe","backend",[16,6],["D",1750550400000],{"_23":163,"_39":164},"Quiz: Wzorce projektowe",[165,173,181,187,195],{"_42":166,"_44":167,"_50":69,"_52":172},"<p>Do której grupy należy wzorzec Singleton?</p>",[168,169,170,171],"Strukturalne","Behawioralne","Kreacyjne","Funkcyjne","Singleton to wzorzec kreacyjny – dotyczy sposobu tworzenia obiektów.",{"_42":174,"_44":175,"_50":86,"_52":180},"<p>Który wzorzec umożliwia zamianę jednego interfejsu na inny, by umożliwić współpracę niekompatybilnych klas?</p>",[176,177,178,179],"Builder","Adapter","Facade","Observer","Adapter tłumaczy jeden interfejs na inny.",{"_42":182,"_44":183,"_50":69,"_52":186},"<p>Który wzorzec pozwala powiadamiać wiele obiektów o zmianie stanu bez ścisłego powiązania?</p>",[184,185,179,178],"Factory","Strategy","Observer służy do powiadamiania wielu obiektów o zmianie stanu.",{"_42":188,"_44":189,"_50":141,"_52":194},"<p>Co umożliwia wzorzec Strategy?</p>",[190,191,192,193],"Dynamiczną zmianę algorytmu działania programu","Budowanie złożonych obiektów krok po kroku","Uproszczenie złożonego interfejsu","Tworzenie jednej instancji klasy","Strategy pozwala dynamicznie zmieniać algorytm działania programu.",{"_42":196,"_44":197,"_50":51,"_52":199},"<p>Który wzorzec stosujesz, by uprościć korzystanie z kilku skomplikowanych systemów przez jeden prosty interfejs?</p>",[198,176,177,178],"Singleton","Facade upraszcza złożone systemy przez prosty interfejs.","6f7de4e6-874b-4492-9b80-3b2598ba1d35","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wzorce-projektowe.md"]
