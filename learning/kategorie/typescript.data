[{"_1":2},"course-list-with-category",{"_3":4},"data",{"_5":6,"_7":8,"_20":21},"category","typescript","categories",[9,10,6,11,12,13,14,15,16,17,18,19],"wprowadzenie","html","bazy-danych","javascript","css","sql","react","wzorce-projektowe","git","devops","seo","courses",[22,97,154],{"_23":24,"_25":26,"_27":28,"_7":33,"_34":35,"_36":37,"_89":90,"_91":92,"_93":94,"_95":96},"title","Wprowadzenie do TypeScript","description","Dowiedz się czym jest TypeScript, jak zacząć z niego korzystać i dlaczego warto go używać w swoich projektach. Przystępny przewodnik dla początkujących z przykładami i praktycznymi wskazówkami.","keywords",[6,12,29,30,31,32],"programowanie","frontend","typowanie","learning",[9,6],"createdAt",["D",1750636800000],"quiz",{"_23":38,"_39":40},"Quiz: Podstawy TypeScript","questions",[41,54,63,71,80],{"_42":43,"_44":45,"_50":51,"_52":53},"question","<p>Czym jest TypeScript?</p>","options",[46,47,48,49],"Rozszerzeniem JavaScriptu o typowanie statyczne","Frameworkiem CSS","Językiem bazującym na Pythonie","Systemem szablonów HTML","answer",0,"explanation","TypeScript rozszerza JavaScript o typowanie statyczne i inne narzędzia dla programistów.",{"_42":55,"_44":56,"_50":61,"_52":62},"<p>Jakie rozszerzenie mają pliki natywne TypeScript?</p>",[57,58,59,60],".js",".ts",".cts",".json",1,"Standardowe pliki TypeScript mają rozszerzenie `.ts`. Natomiast w React używamy też `.tsx`.",{"_42":64,"_44":65,"_50":61,"_52":70},"<p>Które z poniższych typowań zmiennej jest poprawne w TypeScript?</p>",[66,67,68,69],"var liczba: num = 10;","let liczba: number = 10;","let liczba: 10 = number;","let liczba = number 10;","Poprawna składnia to let liczba: number = 10;",{"_42":72,"_44":73,"_50":78,"_52":79},"<p>Czym różni się TypeScript od JavaScript?</p>",[74,75,76,77],"JavaScript nie pozwala na funkcje","TypeScript działa tylko w przeglądarce","TypeScript nie obsługuje klas","TypeScript ma statyczne typowanie, JavaScript nie",3,"Najważniejsza różnica to typowanie statyczne i kompilacja do JS.",{"_42":81,"_44":82,"_50":87,"_52":88},"<p>Jak zainstalować TypeScript globalnie przez npm?</p>",[83,84,85,86],"npm add global typescript","npm get typescript","npm install -g typescript","npm install typescript",2,"Polecenie npm install -g typescript instaluje TypeScript globalnie.","id","350032fe-594d-4ad4-bf44-d4a05bb574dc","slug","wprowadzenie-do-typescript","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-typescript.md",{"_23":98,"_25":99,"_27":100,"_7":106,"_34":107,"_36":108,"_89":151,"_91":152,"_93":94,"_95":153},"Pierwsze kroki z TypeScript w React – praktyczne podstawy","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.",[6,15,30,101,102,103,104,105,32],"nauka","komponenty","props","state","kurs",[6,15],["D",1750550400000],{"_23":109,"_39":110},"Quiz: TypeScript w React – podstawy",[111,119,127,135,143],{"_42":112,"_44":113,"_50":51,"_52":118},"<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>",[114,115,116,117],"Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Eliminuje konieczność używania npm.","Generuje automatycznie dokumentację komponentów.","Zamienia kod na czysty CSS.","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_42":120,"_44":121,"_50":78,"_52":126},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[122,123,124,125],"const [count, setCount] = useState(0: number);","let count = useState(0);","const [count, setCount] = useState<string>(0);","const [count, setCount] = useState<number>(0);","Poprawna składnia to useState<number>(0).",{"_42":128,"_44":129,"_50":51,"_52":134},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[130,131,132,133],"Przez interface lub type i przekazać go do propsów funkcji.","Nie trzeba typować propsów w TS.","Tylko poprzez klasę.","Wyłącznie przez any.","Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_42":136,"_44":137,"_50":87,"_52":142},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[138,139,140,141],"const ref = useRef<HTMLDivElement>(null);","const ref = useRef(null);","const ref = useRef<HTMLButtonElement>(null);","const ref = useRef<Button>(null);","Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_42":144,"_44":145,"_50":87,"_52":150},"<p>Co wyświetli poniższy komponent?</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n<p>Jeśli wywołasz <code>&#x3C;Welcome name=\"Ala\" /></code></p>",[146,147,148,149],"Witaj, Ala!","Błąd kompilacji","Cześć, Ala!","undefined","Komponent wyświetli 'Cześć, Ala!'.","5252e688-e94c-44c3-b2b2-2ab78b69945f","pierwsze-kroki-z-typescript-w-react","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/pierwsze-kroki-z-typescript-w-react.md",{"_23":155,"_25":156,"_27":157,"_7":160,"_34":161,"_36":162,"_89":200,"_91":16,"_93":94,"_95":201},"Wzorce projektowe w praktyce","Kompleksowy przewodnik po wzorcach projektowych — od podstaw po praktyczne przykłady w kontekście frontendu i backendu.",[158,29,6,12,30,159,105,32],"wzorce projektowe","backend",[16,6],["D",1750550400000],{"_23":163,"_39":164},"Quiz: Wzorce projektowe",[165,173,181,187,195],{"_42":166,"_44":167,"_50":51,"_52":172},"<p>Do której grupy należy wzorzec Singleton?</p>",[168,169,170,171],"Kreacyjne","Funkcyjne","Strukturalne","Behawioralne","Singleton to wzorzec kreacyjny – dotyczy sposobu tworzenia obiektów.",{"_42":174,"_44":175,"_50":51,"_52":180},"<p>Który wzorzec umożliwia zamianę jednego interfejsu na inny, by umożliwić współpracę niekompatybilnych klas?</p>",[176,177,178,179],"Adapter","Observer","Builder","Facade","Adapter tłumaczy jeden interfejs na inny.",{"_42":182,"_44":183,"_50":78,"_52":186},"<p>Który wzorzec pozwala powiadamiać wiele obiektów o zmianie stanu bez ścisłego powiązania?</p>",[184,185,179,177],"Factory","Strategy","Observer służy do powiadamiania wielu obiektów o zmianie stanu.",{"_42":188,"_44":189,"_50":87,"_52":194},"<p>Co umożliwia wzorzec Strategy?</p>",[190,191,192,193],"Uproszczenie złożonego interfejsu","Tworzenie jednej instancji klasy","Dynamiczną zmianę algorytmu działania programu","Budowanie złożonych obiektów krok po kroku","Strategy pozwala dynamicznie zmieniać algorytm działania programu.",{"_42":196,"_44":197,"_50":51,"_52":199},"<p>Który wzorzec stosujesz, by uprościć korzystanie z kilku skomplikowanych systemów przez jeden prosty interfejs?</p>",[179,178,198,176],"Singleton","Facade upraszcza złożone systemy przez prosty interfejs.","7d9e442b-d89e-4fa6-8745-9e6bd98df491","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wzorce-projektowe.md"]
