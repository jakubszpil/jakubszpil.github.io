[{"_1":2},"course-list-with-category",{"_3":4},"data",{"_5":6,"_7":8,"_18":19},"category","typescript","categories",[9,10,6,11,12,13,14,15,16,17],"wprowadzenie","html","javascript","css","react","wzorce-projektowe","git","devops","seo","courses",[20,95,152],{"_21":22,"_23":24,"_25":26,"_7":31,"_32":33,"_34":35,"_87":88,"_89":90,"_91":92,"_93":94},"title","Wprowadzenie do TypeScript","description","Dowiedz się czym jest TypeScript, jak zacząć z niego korzystać i dlaczego warto go używać w swoich projektach. Przystępny przewodnik dla początkujących z przykładami i praktycznymi wskazówkami.","keywords",[6,11,27,28,29,30],"programowanie","frontend","typowanie","learning",[9,6],"createdAt",["D",1750636800000],"quiz",{"_21":36,"_37":38},"Quiz: Podstawy TypeScript","questions",[39,52,61,70,79],{"_40":41,"_42":43,"_48":49,"_50":51},"question","<p>Czym jest TypeScript?</p>","options",[44,45,46,47],"Systemem szablonów HTML","Frameworkiem CSS","Językiem bazującym na Pythonie","Rozszerzeniem JavaScriptu o typowanie statyczne","answer",3,"explanation","TypeScript rozszerza JavaScript o typowanie statyczne i inne narzędzia dla programistów.",{"_40":53,"_42":54,"_48":59,"_50":60},"<p>Jakie rozszerzenie mają pliki natywne TypeScript?</p>",[55,56,57,58],".ts",".json",".cts",".js",0,"Standardowe pliki TypeScript mają rozszerzenie `.ts`. Natomiast w React używamy też `.tsx`.",{"_40":62,"_42":63,"_48":68,"_50":69},"<p>Które z poniższych typowań zmiennej jest poprawne w TypeScript?</p>",[64,65,66,67],"let liczba = number 10;","let liczba: number = 10;","let liczba: 10 = number;","var liczba: num = 10;",1,"Poprawna składnia to let liczba: number = 10;",{"_40":71,"_42":72,"_48":77,"_50":78},"<p>Czym różni się TypeScript od JavaScript?</p>",[73,74,75,76],"TypeScript nie obsługuje klas","TypeScript działa tylko w przeglądarce","TypeScript ma statyczne typowanie, JavaScript nie","JavaScript nie pozwala na funkcje",2,"Najważniejsza różnica to typowanie statyczne i kompilacja do JS.",{"_40":80,"_42":81,"_48":77,"_50":86},"<p>Jak zainstalować TypeScript globalnie przez npm?</p>",[82,83,84,85],"npm get typescript","npm add global typescript","npm install -g typescript","npm install typescript","Polecenie npm install -g typescript instaluje TypeScript globalnie.","id","743e5614-76eb-43fe-b5ab-4df27d815207","slug","wprowadzenie-do-typescript","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-typescript.md",{"_21":96,"_23":97,"_25":98,"_7":104,"_32":105,"_34":106,"_87":149,"_89":150,"_91":92,"_93":151},"Pierwsze kroki z TypeScript w React – praktyczne podstawy","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.",[6,13,28,99,100,101,102,103,30],"nauka","komponenty","props","state","kurs",[6,13],["D",1750550400000],{"_21":107,"_37":108},"Quiz: TypeScript w React – podstawy",[109,117,125,133,141],{"_40":110,"_42":111,"_48":68,"_50":116},"<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>",[112,113,114,115],"Eliminuje konieczność używania npm.","Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Zamienia kod na czysty CSS.","Generuje automatycznie dokumentację komponentów.","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_40":118,"_42":119,"_48":68,"_50":124},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[120,121,122,123],"const [count, setCount] = useState<string>(0);","const [count, setCount] = useState<number>(0);","const [count, setCount] = useState(0: number);","let count = useState(0);","Poprawna składnia to useState<number>(0).",{"_40":126,"_42":127,"_48":59,"_50":132},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[128,129,130,131],"Przez interface lub type i przekazać go do propsów funkcji.","Nie trzeba typować propsów w TS.","Wyłącznie przez any.","Tylko poprzez klasę.","Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_40":134,"_42":135,"_48":68,"_50":140},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[136,137,138,139],"const ref = useRef(null);","const ref = useRef<HTMLButtonElement>(null);","const ref = useRef<HTMLDivElement>(null);","const ref = useRef<Button>(null);","Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_40":142,"_42":143,"_48":49,"_50":148},"<p>Co wyświetli poniższy komponent?</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n<p>Jeśli wywołasz <code>&#x3C;Welcome name=\"Ala\" /></code></p>",[144,145,146,147],"Błąd kompilacji","Witaj, Ala!","undefined","Cześć, Ala!","Komponent wyświetli 'Cześć, Ala!'.","677b5dc3-df9b-4989-845f-8189a724a6be","pierwsze-kroki-z-typescript-w-react","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/pierwsze-kroki-z-typescript-w-react.md",{"_21":153,"_23":154,"_25":155,"_7":158,"_32":159,"_34":160,"_87":198,"_89":14,"_91":92,"_93":199},"Wzorce projektowe w praktyce","Kompleksowy przewodnik po wzorcach projektowych — od podstaw po praktyczne przykłady w kontekście frontendu i backendu.",[156,27,6,11,28,157,103,30],"wzorce projektowe","backend",[14,6],["D",1750550400000],{"_21":161,"_37":162},"Quiz: Wzorce projektowe",[163,171,179,185,193],{"_40":164,"_42":165,"_48":68,"_50":170},"<p>Do której grupy należy wzorzec Singleton?</p>",[166,167,168,169],"Strukturalne","Kreacyjne","Funkcyjne","Behawioralne","Singleton to wzorzec kreacyjny – dotyczy sposobu tworzenia obiektów.",{"_40":172,"_42":173,"_48":68,"_50":178},"<p>Który wzorzec umożliwia zamianę jednego interfejsu na inny, by umożliwić współpracę niekompatybilnych klas?</p>",[174,175,176,177],"Facade","Adapter","Builder","Observer","Adapter tłumaczy jeden interfejs na inny.",{"_40":180,"_42":181,"_48":68,"_50":184},"<p>Który wzorzec pozwala powiadamiać wiele obiektów o zmianie stanu bez ścisłego powiązania?</p>",[182,177,174,183],"Strategy","Factory","Observer służy do powiadamiania wielu obiektów o zmianie stanu.",{"_40":186,"_42":187,"_48":77,"_50":192},"<p>Co umożliwia wzorzec Strategy?</p>",[188,189,190,191],"Uproszczenie złożonego interfejsu","Tworzenie jednej instancji klasy","Dynamiczną zmianę algorytmu działania programu","Budowanie złożonych obiektów krok po kroku","Strategy pozwala dynamicznie zmieniać algorytm działania programu.",{"_40":194,"_42":195,"_48":49,"_50":197},"<p>Który wzorzec stosujesz, by uprościć korzystanie z kilku skomplikowanych systemów przez jeden prosty interfejs?</p>",[175,176,196,174],"Singleton","Facade upraszcza złożone systemy przez prosty interfejs.","8f92fb07-71ef-4c63-b261-f1fa37c4ad1a","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wzorce-projektowe.md"]
