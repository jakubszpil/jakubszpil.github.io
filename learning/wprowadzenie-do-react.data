[{"_1":2},"course-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_21":22,"_23":24,"_25":26,"_78":79,"_80":81,"_82":83,"_84":85,"_86":87},"title","Wprowadzenie do Reacta","description","React to popularna biblioteka JavaScript do budowania interfejsów użytkownika. Pozwala na tworzenie złożonych aplikacji webowych z komponentów, co ułatwia zarządzanie stanem i renderowanie widoków. Naucz się podstaw Reacta i zacznij tworzyć dynamiczne aplikacje!","keywords",[11,12,13,14,15,16,17,18,19,20],"react","javascript","biblioteka","frontend","komponenty","ui","jsx","hooks","vite","learning","categories",[11,12],"createdAt","2025-07-12T00:00:00.000Z","quiz",{"_5":27,"_28":29},"Quiz: Podstawy Reacta","questions",[30,43,51,60,69],{"_31":32,"_33":34,"_39":40,"_41":42},"question","<p>Czym jest React?</p>","options",[35,36,37,38],"Językiem programowania","Bazą danych","Frameworkiem do budowania backendu","Biblioteką JavaScript do tworzenia interfejsów użytkownika","answer",3,"explanation","React to biblioteka JavaScript skupiająca się na warstwie widoku (interfejsu użytkownika).",{"_31":44,"_33":45,"_39":40,"_41":50},"<p>Co to jest JSX?</p>",[46,47,48,49],"Nowy język programowania","Funkcja do zarządzania stanem w React","Menedżer pakietów dla Reacta","Rozszerzenie składni JavaScript, które pozwala pisać kod podobny do HTML w JavaScripcie","JSX to składniowe rozszerzenie JavaScriptu, ułatwiające pisanie elementów UI.",{"_31":52,"_33":53,"_39":58,"_41":59},"<p>Który z poniższych nie jest metodą cyklu życia komponentu klasowego w React (do React 16.8)?</p>",[54,55,56,57],"useEffect","componentWillUnmount","render","componentDidMount",0,"`useEffect` to Hook używany w komponentach funkcyjnych do zarządzania efektami pobocznymi, nie jest metodą cyklu życia komponentów klasowych.",{"_31":61,"_33":62,"_39":67,"_41":68},"<p>Co to jest komponent w React?</p>",[63,64,65,66],"Plik CSS","Niezależna, wielokrotnego użytku część interfejsu użytkownika","Funkcja do pobierania danych z serwera","Baza danych aplikacji",1,"Komponent to podstawowy budulec aplikacji React, reprezentujący kawałek UI i jego logikę.",{"_31":70,"_33":71,"_39":76,"_41":77},"<p>Do czego służą 'propsy' w React?</p>",[72,73,74,75],"Do stylowania komponentów","Do definiowania routingu w aplikacji","Do przekazywania danych z komponentu nadrzędnego do podrzędnego","Do zmieniania stanu komponentu",2,"Propsy (properties) służą do przekazywania danych z komponentu-rodzica do komponentu-dziecka, jednokierunkowo.","id","f625b04b-9d3a-491f-b585-3617fd15dddd","slug","wprowadzenie-do-react","content","<p>Witaj w świecie <strong>Reacta</strong>! 🚀 Jeśli chcesz tworzyć dynamiczne i interaktywne interfejsy użytkownika, to właśnie znalazłeś/aś odpowiednie narzędzie. React to potężna biblioteka JavaScript, która zmienia podejście do budowania aplikacji webowych, koncentrując się na komponentach – niezależnych, wielokrotnego użytku elementach Twojego interfejsu. Gotowy/a, by zanurzyć się w świat deklaratywnego UI i wirtualnego DOM? Zaczynajmy! ✨</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-react\">Czym jest React?</a></li>\n<li><a href=\"#dlaczego-react-g%C5%82%C3%B3wne-zalety\">Dlaczego React? Główne zalety</a></li>\n<li><a href=\"#podstawowe-poj%C4%99cia-w-react\">Podstawowe pojęcia w React</a>\n<ul>\n<li><a href=\"#komponenty-serce-reacta\">Komponenty: Serce Reacta</a></li>\n<li><a href=\"#jsx-javascript--xmlhtml\">JSX: JavaScript + XML/HTML</a></li>\n<li><a href=\"#propsy-properties-przekazywanie-danych\">Propsy (Properties): Przekazywanie danych</a></li>\n<li><a href=\"#stan-state-zarz%C4%85dzanie-danymi-wewn%C4%99trznymi\">Stan (State): Zarządzanie danymi wewnętrznymi</a></li>\n<li><a href=\"#wirtualny-dom-wydajne-aktualizacje\">Wirtualny DOM: Wydajne aktualizacje</a></li>\n</ul>\n</li>\n<li><a href=\"#tworzenie-pierwszej-aplikacji-react-z-vite\">Tworzenie pierwszej aplikacji React z Vite</a>\n<ul>\n<li><a href=\"#dlaczego-vite\">Dlaczego Vite?</a></li>\n<li><a href=\"#inicjalizacja-projektu\">Inicjalizacja projektu</a></li>\n<li><a href=\"#struktura-projektu\">Struktura projektu</a></li>\n</ul>\n</li>\n<li><a href=\"#komponenty-funkcyjne-i-hooki-hooks\">Komponenty funkcyjne i Hooki (Hooks)</a>\n<ul>\n<li><a href=\"#usestate\"><code>useState</code></a></li>\n<li><a href=\"#useeffect\"><code>useEffect</code></a></li>\n</ul>\n</li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1-komponent-powitania\">Zadanie 1: Komponent Powitania</a></li>\n<li><a href=\"#zadanie-2-licznik-z-przyciskiem\">Zadanie 2: Licznik z przyciskiem</a></li>\n<li><a href=\"#zadanie-3-lista-element%C3%B3w\">Zadanie 3: Lista elementów</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-react\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-react\">>></a>Czym jest React?</h2>\n<p><strong>React</strong> (często nazywany też React.js lub ReactJS) to popularna, otwarta biblioteka JavaScript do <strong>budowania interfejsów użytkownika (UI)</strong>, stworzona i utrzymywana przez Meta (dawniej Facebook). ⚛️ Nie jest to pełnoprawny framework, jak np. Angular, ale skupia się wyłącznie na warstwie widoku w aplikacjach webowych i mobilnych (React Native).</p>\n<p>Jego główną filozofią jest tworzenie interfejsów z małych, <strong>niezależnych i wielokrotnego użytku części</strong>, zwanych <strong>komponentami</strong>. Dzięki temu, budowanie złożonych aplikacji staje się bardziej uporządkowane, modułowe i łatwiejsze w zarządzaniu. React stał się standardem w branży front-endu, wykorzystywanym przez tysiące firm na całym świecie, od małych startupów po gigantów technologicznych.</p>\n<hr>\n<h2 id=\"dlaczego-react-główne-zalety\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-react-główne-zalety\">>></a>Dlaczego React? Główne zalety</h2>\n<p>React zyskał ogromną popularność dzięki wielu korzyściom, które oferuje deweloperom:</p>\n<ol>\n<li><strong>Komponentowa architektura:</strong> Wszystko w React to komponent! 🧱 Dzięki temu możesz dzielić interfejs na małe, izolowane kawałki, które łatwo testować, rozwijać i ponownie wykorzystywać w różnych częściach aplikacji. To promuje podejście \"buduj raz, używaj wszędzie\".</li>\n<li><strong>Deklaratywne podejście:</strong> W React opisujesz, jak powinien wyglądać interfejs w danym stanie, a React zajmuje się resztą. Nie musisz martwić się o kroki manipulacji DOM (Document Object Model) – React zrobi to za Ciebie. To sprawia, że kod jest bardziej przewidywalny i łatwiejszy do debugowania.</li>\n<li><strong>Wydajność dzięki Wirtualnemu DOM:</strong> React używa <strong>Wirtualnego DOM</strong>, czyli lekkiej kopii prawdziwego DOM w pamięci. Kiedy stan aplikacji się zmienia, React najpierw aktualizuje Wirtualny DOM, porównuje go z poprzednim stanem i dopiero wtedy efektywnie aktualizuje tylko te fragmenty prawdziwego DOM, które faktycznie się zmieniły. To minimalizuje kosztowne operacje na DOM i sprawia, że aplikacje są szybkie. ⚡️</li>\n<li><strong>Jednokierunkowy przepływ danych:</strong> Dane w React płyną z góry na dół (od komponentów nadrzędnych do podrzędnych) poprzez tzw. <strong>propsy</strong>. To upraszcza debugowanie i zarządzanie stanem aplikacji, czyniąc ją bardziej przewidywalną.</li>\n<li><strong>Duża społeczność i ekosystem:</strong> React ma ogromną i aktywną społeczność deweloperów. Znajdziesz mnóstwo tutoriali, narzędzi, bibliotek pomocniczych (np. do routingu, zarządzania stanem) i wsparcia. To oznacza, że prawdopodobnie znajdziesz rozwiązanie na każdy problem, jaki napotkasz. 🤝</li>\n<li><strong>JSX:</strong> Specjalna składnia, która pozwala pisać kod przypominający HTML bezpośrednio w plikach JavaScript. Chociaż na początku może wydawać się dziwna, bardzo ułatwia wizualizację, jak dany komponent będzie wyglądał w przeglądarce.</li>\n</ol>\n<hr>\n<h2 id=\"podstawowe-pojęcia-w-react\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-pojęcia-w-react\">>></a>Podstawowe pojęcia w React</h2>\n<p>Zanim zaczniemy pisać kod, poznajmy kluczowe terminy i koncepcje, które stanowią fundament Reacta.</p>\n<h3 id=\"komponenty-serce-reacta\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#komponenty-serce-reacta\">>>></a>Komponenty: Serce Reacta</h3>\n<p>Jak już wspomnieliśmy, <strong>komponenty</strong> są podstawowymi budulcami każdej aplikacji React. Myśl o nich jak o niezależnych, wielokrotnego użytku elementach interfejsu, które mają swoją własną logikę i wygląd. Mogą to być proste elementy, takie jak przycisk czy pole tekstowe, albo bardziej złożone, jak pasek nawigacyjny czy cały formularz logowania.</p>\n<p>W tym wprowadzeniu skupimy się na <strong>komponentach funkcyjnych</strong>, ponieważ są one obecnie standardem i wykorzystują <strong>Hooki</strong>, o których dowiemy się więcej za chwilę.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// Przykład prostego komponentu funkcyjnego</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Welcome</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Komponent funkcyjny, który zwraca JSX</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Welcome to React! 👋<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}\n</code></pre>\n<p>Ten komponent <code>Welcome</code> renderuje prosty nagłówek <code>&#x3C;h1></code>.</p>\n<h3 id=\"jsx-javascript--xmlhtml\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jsx-javascript--xmlhtml\">>>></a>JSX: JavaScript + XML/HTML</h3>\n<p><strong>JSX</strong> (JavaScript XML) to rozszerzenie składni JavaScriptu, które pozwala nam pisać kod przypominający HTML bezpośrednio w plikach JavaScript. To może być mylące na początku, ponieważ miesza logikę JavaScript z deklaracjami UI, ale ma to na celu ułatwienie tworzenia komponentów.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> element = <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, world!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>; <span class=\"hljs-comment\">// To jest JSX</span>\n</code></pre>\n<p><strong>Ważne:</strong> Przeglądarki nie rozumieją JSX. Jest on transpilowany (przetłumaczony) na standardowy JavaScript przez narzędzia takie jak Babel, zanim kod zostanie uruchomiony w przeglądarce. JSX jest konwertowany na wywołania funkcji <code>createElement</code> (z pakietu <code>react</code>).</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// Ten JSX:</span>\n<span class=\"hljs-keyword\">const</span> element = <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, world!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n\n<span class=\"hljs-comment\">// jest transpilowany do (uproszczone):</span>\n<span class=\"hljs-keyword\">const</span> element = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"h1\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"Hello, world!\"</span>);\n</code></pre>\n<p>Dzięki JSX kod jest bardziej intuicyjny i przypomina strukturę, którą widzimy w przeglądarce. ✨</p>\n<h3 id=\"propsy-properties-przekazywanie-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#propsy-properties-przekazywanie-danych\">>>></a>Propsy (Properties): Przekazywanie danych</h3>\n<p><strong>Propsy</strong> (skrót od \"properties\") to sposób na przekazywanie danych z komponentu nadrzędnego (rodzica) do komponentu podrzędnego (dziecka). Działają one podobnie do atrybutów HTML i są <strong>tylko do odczytu</strong> – komponent podrzędny nie powinien modyfikować swoich propsów. To zapewnia jednokierunkowy przepływ danych, co ułatwia zarządzanie stanem aplikacji.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Welcome</span>(<span class=\"hljs-params\">props</span>) {\n  <span class=\"hljs-comment\">// Komponent funkcyjny przyjmuje obiekt props jako argument</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, {props.name}! 👋<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Alice\"</span> /></span> {/* Przekazujemy props 'name' */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Bob\"</span> /></span> {/* Kolejne użycie z innym propsem */}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n<span class=\"hljs-comment\">// Renderowanie komponentu App spowoduje wyświetlenie:</span>\n<span class=\"hljs-comment\">// &#x3C;h1>Hello, Alice!&#x3C;/h1></span>\n<span class=\"hljs-comment\">// &#x3C;h1>Hello, Bob!&#x3C;/h1></span>\n</code></pre>\n<h3 id=\"stan-state-zarządzanie-danymi-wewnętrznymi\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#stan-state-zarządzanie-danymi-wewnętrznymi\">>>></a>Stan (State): Zarządzanie danymi wewnętrznymi</h3>\n<p>Podczas gdy propsy służą do przekazywania danych z zewnątrz, <strong>stan (state)</strong> służy do zarządzania danymi, które są <strong>wewnętrzne</strong> dla komponentu i mogą się zmieniać w czasie. Kiedy stan komponentu się zmienia, React automatycznie ponownie renderuje ten komponent, aby odzwierciedlić nowe dane.</p>\n<p>W komponentach funkcyjnych stan zarządzany jest za pomocą <strong>Hooków</strong>, w szczególności <code>useState</code>.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>; <span class=\"hljs-comment\">// Importujemy Hook useState</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Deklaracja stanu 'count' z początkową wartością 0</span>\n  <span class=\"hljs-comment\">// 'count' to bieżąca wartość, 'setCount' to funkcja do jej aktualizacji</span>\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">setCount</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> prev + <span class=\"hljs-number\">1</span>);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">decrement</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">setCount</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> prev - <span class=\"hljs-number\">1</span>);\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Count: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      {/* Zwiększamy licznik */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{increment}</span>></span>Increment<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      {/* Zmniejszamy licznik */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{decrement}</span>></span>Decrement<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>Kliknięcie przycisków spowoduje zmianę stanu <code>count</code>, co automatycznie zaktualizuje wyświetlaną wartość. 🔢</p>\n<h3 id=\"wirtualny-dom-wydajne-aktualizacje\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wirtualny-dom-wydajne-aktualizacje\">>>></a>Wirtualny DOM: Wydajne aktualizacje</h3>\n<p><strong>Wirtualny DOM</strong> jest jednym z kluczowych powodów, dla których React jest tak wydajny. Zamiast bezpośrednio manipulować prawdziwym DOM (co jest kosztowne), React tworzy jego lekką kopię w pamięci.</p>\n<p><strong>Jak to działa?</strong></p>\n<ol>\n<li>Kiedy stan aplikacji się zmienia, React tworzy <strong>nowy Wirtualny DOM</strong>.</li>\n<li>Porównuje go z <strong>poprzednim Wirtualnym DOM</strong> (proces zwany \"diffing\").</li>\n<li>Oblicza minimalną liczbę zmian potrzebnych do zaktualizowania prawdziwego DOM.</li>\n<li>Wprowadza te minimalne zmiany do <strong>prawdziwego DOM</strong>.</li>\n</ol>\n<p>Dzięki temu React unika zbędnych operacji, co przekłada się na płynniejsze i szybsze działanie aplikacji, nawet przy częstych aktualizacjach. 🚀</p>\n<hr>\n<h2 id=\"tworzenie-pierwszej-aplikacji-react-z-vite\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tworzenie-pierwszej-aplikacji-react-z-vite\">>></a>Tworzenie pierwszej aplikacji React z Vite</h2>\n<p>Nowoczesne aplikacje React rzadko są tworzone od podstaw bez żadnego narzędzia. Zamiast przestarzałego <code>create-react-app</code>, obecnie popularne są szybsze i bardziej elastyczne narzędzia takie jak <strong>Vite</strong>.</p>\n<h3 id=\"dlaczego-vite\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-vite\">>>></a>Dlaczego Vite?</h3>\n<p><strong>Vite</strong> to narzędzie do budowania front-endów, które oferuje bardzo szybkie uruchamianie serwera deweloperskiego (Dev Server) oraz błyskawiczne aktualizacje modułów (HMR - Hot Module Replacement). Dzieje się tak dzięki wykorzystaniu natywnych modułów ES w przeglądarce podczas dewelopmentu, co eliminuje potrzebę pełnej rekompilacji kodu przy każdej zmianie. Dla dewelopera oznacza to znacznie szybsze i przyjemniejsze doświadczenie. ⚡</p>\n<h3 id=\"inicjalizacja-projektu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#inicjalizacja-projektu\">>>></a>Inicjalizacja projektu</h3>\n<p><strong>Kroki do utworzenia nowej aplikacji React z Vite:</strong></p>\n<ol>\n<li>Upewnij się, że masz zainstalowany <strong>Node.js</strong> (wraz z npm lub yarn) na swoim komputerze.</li>\n<li>Otwórz terminal (lub wiersz poleceń).</li>\n<li>Uruchom polecenie:\n<pre><code class=\"hljs language-bash\">npm create vite@latest\n</code></pre>\nlub\n<pre><code class=\"hljs language-bash\">yarn create vite\n</code></pre>\n</li>\n<li>Zostaniesz poproszony/a o podanie nazwy projektu (np. <code>my-react-app</code>).</li>\n<li>Następnie wybierz framework: <code>React</code>.</li>\n<li>Wybierz wariant: <code>JavaScript</code> (lub <code>TypeScript</code>, jeśli znasz).</li>\n<li>Po zakończeniu instalacji, przejdź do katalogu projektu:\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cd</span> my-react-app\n</code></pre>\n</li>\n<li>Zainstaluj zależności:\n<pre><code class=\"hljs language-bash\">npm install\n</code></pre>\nlub\n<pre><code class=\"hljs language-bash\">yarn install\n</code></pre>\n</li>\n<li>Uruchom aplikację:\n<pre><code class=\"hljs language-bash\">npm run dev\n</code></pre>\nlub\n<pre><code class=\"hljs language-bash\">yarn dev\n</code></pre>\nTo uruchomi serwer deweloperski, a Twoja aplikacja będzie dostępna pod adresem <code>http://localhost:5173</code> (lub podobnym). 🎉</li>\n</ol>\n<h3 id=\"struktura-projektu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#struktura-projektu\">>>></a>Struktura projektu</h3>\n<p>Po utworzeniu aplikacji Vite zobaczysz następującą strukturę katalogów (uproszczoną):</p>\n<pre><code>my-react-app/\n├── node_modules/       # Zależności projektu\n├── public/             # Publiczne zasoby (np. favicon.svg)\n├── src/                # Tutaj piszesz swój kod React!\n│   ├── assets/         # Statyczne zasoby (np. logo.svg)\n│   ├── App.css\n│   ├── App.jsx         # Główny komponent Twojej aplikacji (lub App.js jeśli wybrałeś JS)\n│   ├── index.css\n│   └── main.jsx        # Główny plik JavaScript, który renderuje aplikację (lub main.js)\n├── .gitignore\n├── index.html          # Główny plik HTML, do którego React będzie renderować aplikację\n├── package.json        # Informacje o projekcie i zależnościach\n├── vite.config.js      # Konfiguracja Vite\n└── README.md\n</code></pre>\n<p>Najważniejsze pliki na początek to <code>index.html</code> (główny plik, w którym React się \"zakotwiczy\"), <code>src/main.jsx</code> (punkt wejścia aplikacji, gdzie React jest renderowany do DOM) i <code>src/App.jsx</code> (główny komponent Twojej aplikacji).</p>\n<hr>\n<h2 id=\"komponenty-funkcyjne-i-hooki-hooks\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#komponenty-funkcyjne-i-hooki-hooks\">>></a>Komponenty funkcyjne i Hooki (Hooks)</h2>\n<p>Współczesny React opiera się głównie na <strong>komponentach funkcyjnych</strong> i <strong>Hookach</strong>. Hooki to specjalne funkcje, które pozwalają komponentom funkcyjnym \"zahaczać się\" w stan Reacta i cykl życia (life-cycle) bez pisania klas. Są one kluczowe dla zarządzania stanem i efektami pobocznymi.</p>\n<h3 id=\"usestate\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#usestate\">>>></a><code>useState</code></h3>\n<p><code>useState</code> to najczęściej używany Hook. Pozwala komponentom funkcyjnym na dodawanie stanu do komponentów.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>; <span class=\"hljs-comment\">// Pamiętaj o importowaniu tylko tego, czego potrzebujesz</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyComponent</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Deklaracja stanu 'isOn' z początkową wartością 'false'</span>\n  <span class=\"hljs-comment\">// 'isOn' to bieżąca wartość stanu, 'setIsOn' to funkcja do jej aktualizacji</span>\n  <span class=\"hljs-keyword\">const</span> [isOn, setIsOn] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n\n  <span class=\"hljs-comment\">// Funkcja zmieniająca stan</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">toggleStatus</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">setIsOn</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> !prev); <span class=\"hljs-comment\">// Zmieniamy stan na przeciwny</span>\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Status: {isOn ? \"On\" : \"Off\"}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleStatus}</span>></span>Toggle<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>Za każdym razem, gdy wywołasz <code>setIsOn</code>, komponent <code>MyComponent</code> zostanie ponownie wyrenderowany z nową wartością stanu <code>isOn</code>.</p>\n<h3 id=\"useeffect\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#useeffect\">>>></a><code>useEffect</code></h3>\n<p><code>useEffect</code> to Hook, który pozwala na wykonywanie <strong>efektów pobocznych</strong> (side effects) w komponentach funkcyjnych. Efekty poboczne to operacje, które wchodzą w interakcję ze światem zewnętrznym, takie jak:</p>\n<ul>\n<li>Pobieranie danych z API 🌐</li>\n<li>Subskrypcje zdarzeń (np. nasłuchiwanie kliknięć)</li>\n<li>Bezpośrednia manipulacja DOM (rzadziej potrzebna w React)</li>\n<li>Ustawianie timerów</li>\n</ul>\n<p><code>useEffect</code> przyjmuje dwa argumenty: funkcję, która zawiera logikę efektu, oraz tablicę zależności (dependency array).</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>; <span class=\"hljs-comment\">// Importujemy potrzebne Hooki</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FetchedData</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n\n  <span class=\"hljs-comment\">// useEffect uruchomi się po pierwszym renderowaniu i za każdym razem,</span>\n  <span class=\"hljs-comment\">// gdy zmieni się któraś z wartości w tablicy zależności (tutaj: pusta tablica oznacza tylko raz)</span>\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// Symulacja pobierania danych</span>\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-title function_\">setData</span>(<span class=\"hljs-string\">\"Data fetched from API! 👍\"</span>);\n      <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n    }, <span class=\"hljs-number\">2000</span>); <span class=\"hljs-comment\">// Po 2 sekundach</span>\n\n    <span class=\"hljs-comment\">// Opcjonalnie: funkcja czyszcząca (cleanup function)</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Component odmontowany lub efekt uruchomiony ponownie.\"</span>);\n    };\n  }, []); <span class=\"hljs-comment\">// Pusta tablica zależności: efekt uruchamia się tylko raz (jak componentDidMount)</span>\n\n  <span class=\"hljs-keyword\">if</span> (loading) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Loading data... ⏳<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>{data}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span></span>;\n}\n</code></pre>\n<p><code>useEffect</code> bez tablicy zależności (<code>useEffect(() => { ... });</code>) uruchamia się po każdym renderowaniu. Z pustą tablicą (<code>useEffect(() => { ... }, []);</code>) uruchamia się tylko raz, po pierwszym renderowaniu. Z tablicą zależności (<code>useEffect(() => { ... }, [variable1, variable2]);</code>) uruchamia się, gdy wartości w tablicy ulegną zmianie.</p>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Gratulacje! Zrobiłeś/aś pierwsze kroki w świecie Reacta. 🎉 Wiesz już, że React to potężna biblioteka do budowania interfejsów użytkownika w oparciu o komponenty. Zrozumiałeś/aś kluczowe koncepcje takie jak <strong>JSX</strong>, <strong>propsy</strong>, <strong>stan</strong> oraz <strong>Wirtualny DOM</strong>. Poznałeś/aś również <strong>komponenty funkcyjne</strong> i podstawowe <strong>Hooki</strong> (<code>useState</code>, <code>useEffect</code>), które są fundamentem nowoczesnego Reacta. Nauczyłeś/aś się także, jak szybko inicjować projekty za pomocą <strong>Vite</strong>.</p>\n<p>To dopiero początek przygody! React oferuje znacznie więcej możliwości, takich jak:</p>\n<ul>\n<li><strong>Routing</strong> (np. React Router) 🧭</li>\n<li>Zaawansowane zarządzanie stanem (np. Context API, Redux, Zustand)</li>\n<li>Formularze i ich walidacja</li>\n<li>Obsługa API i asynchroniczności</li>\n<li>Testowanie komponentów</li>\n</ul>\n<p>Zachęcam do dalszego eksperymentowania i budowania własnych projektów. Praktyka to najlepszy sposób na naukę! 🚀</p>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<p>Poniższe zadania pomogą Ci utrwalić wiedzę o podstawach Reacta. Stwórz nowy projekt React z Vite, a następnie wykonaj w nim poniższe zadania, tworząc osobne komponenty. Pamiętaj, aby importować tylko te Hooki i funkcje, których potrzebujesz!</p>\n<h3 id=\"zadanie-1-komponent-powitania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-komponent-powitania\">>>></a>Zadanie 1: Komponent Powitania</h3>\n<p>Stwórz nowy komponent funkcyjny o nazwie <code>Welcome</code>, który:</p>\n<ol>\n<li>Przyjmuje jeden <strong>prop</strong> o nazwie <code>name</code>.</li>\n<li>Wyświetla nagłówek <code>&#x3C;h1></code> z tekstem \"Hello, [name]!\"</li>\n<li>Wykorzystaj ten komponent dwukrotnie w komponencie <code>App.jsx</code>, przekazując różne imiona.</li>\n</ol>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// src/components/Welcome.jsx</span>\n<span class=\"hljs-comment\">// Stwórz nowy katalog 'components' w 'src' dla lepszej organizacji</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Welcome</span>(<span class=\"hljs-params\">props</span>) {\n  <span class=\"hljs-comment\">// Komponent wyświetlający powitanie na podstawie propsów</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, {props.name}! 👋<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Welcome</span>;\n\n<span class=\"hljs-comment\">// src/App.jsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Welcome</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Welcome'</span>; <span class=\"hljs-comment\">// Pamiętaj o poprawnej ścieżce importu!</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Alice\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Bob\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"World\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-licznik-z-przyciskiem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-licznik-z-przyciskiem\">>>></a>Zadanie 2: Licznik z przyciskiem</h3>\n<p>Stwórz nowy komponent funkcyjny o nazwie <code>Counter</code>, który:</p>\n<ol>\n<li>Używa Hooka <code>useState</code> do zarządzania stanem licznika (początkowa wartość <code>0</code>).</li>\n<li>Wyświetla aktualną wartość licznika w akapicie (<code>&#x3C;p></code>).</li>\n<li>Posiada dwa przyciski: jeden do <strong>zwiększania</strong> licznika o 1, drugi do <strong>zmniejszania</strong> licznika o 1.</li>\n</ol>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// src/components/Counter.jsx</span>\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// Deklaracja stanu licznika</span>\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-comment\">// Funkcja zwiększająca licznik</span>\n    <span class=\"hljs-title function_\">setCount</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">prevCount</span> =></span> prevCount + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Najlepsza praktyka: używaj funkcji do aktualizacji stanu</span>\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">decrement</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-comment\">// Funkcja zmniejszająca licznik</span>\n    <span class=\"hljs-title function_\">setCount</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">prevCount</span> =></span> prevCount - <span class=\"hljs-number\">1</span>);\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>My Counter<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Current value: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{increment}</span>></span>Increment<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{decrement}</span>></span>Decrement<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Counter</span>;\n\n<span class=\"hljs-comment\">// src/App.jsx (example usage)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Counter</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Counter'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">textAlign:</span> '<span class=\"hljs-attr\">center</span>', <span class=\"hljs-attr\">marginTop:</span> '<span class=\"hljs-attr\">50px</span>' }}></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Counter</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-lista-elementów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-lista-elementów\">>>></a>Zadanie 3: Lista elementów</h3>\n<p>Stwórz nowy komponent funkcyjny o nazwie <code>ShoppingList</code>, który:</p>\n<ol>\n<li>Używa Hooka <code>useState</code> do przechowywania tablicy elementów zakupów (początkowo pusta, np. <code>[]</code>).</li>\n<li>Wyświetla te elementy jako nieuporządkowaną listę (<code>&#x3C;ul></code>).</li>\n<li>Pobierz dane z tablicy wewnątrz <code>useEffect</code> po pierwszym renderowaniu komponentu, symulując pobieranie z API. W międzyczasie wyświetlaj \"Loading list...\".</li>\n</ol>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// src/components/ShoppingList.jsx</span>\n<span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ShoppingList</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [items, setItems] = <span class=\"hljs-title function_\">useState</span>([]); <span class=\"hljs-comment\">// Stan dla listy zakupów</span>\n  <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// Stan dla statusu ładowania</span>\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// Symulacja pobierania danych z API</span>\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-keyword\">const</span> fetchedItems = [<span class=\"hljs-string\">'Milk 🥛'</span>, <span class=\"hljs-string\">'Bread 🍞'</span>, <span class=\"hljs-string\">'Eggs 🥚'</span>, <span class=\"hljs-string\">'Coffee ☕'</span>];\n      <span class=\"hljs-title function_\">setItems</span>(fetchedItems); <span class=\"hljs-comment\">// Ustawienie pobranych danych</span>\n      <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// Zmiana statusu ładowania</span>\n    }, <span class=\"hljs-number\">1500</span>); <span class=\"hljs-comment\">// Symulacja 1.5 sekundy czasu ładowania</span>\n  }, []); <span class=\"hljs-comment\">// Pusta tablica zależności: efekt uruchamia się tylko raz po zamontowaniu komponentu</span>\n\n  <span class=\"hljs-keyword\">if</span> (loading) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Loading shopping list... ⏳<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>; <span class=\"hljs-comment\">// Wyświetlanie komunikatu ładowania</span>\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Your Shopping List<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        {items.map((item, index) => (\n          // Renderowanie każdego elementu listy\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>></span>{item}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span> // Prop 'key' jest ważny dla list w React!\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ShoppingList</span>;\n\n<span class=\"hljs-comment\">// src/App.jsx (example usage)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ShoppingList</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/ShoppingList'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">textAlign:</span> '<span class=\"hljs-attr\">center</span>', <span class=\"hljs-attr\">marginTop:</span> '<span class=\"hljs-attr\">50px</span>' }}></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ShoppingList</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-react.md","readingTime","11 minut"]
