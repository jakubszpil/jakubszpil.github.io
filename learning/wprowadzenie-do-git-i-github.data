[{"_1":2},"course-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_22":23,"_25":26,"_27":28,"_80":81,"_82":83,"_84":85,"_86":87,"_88":89},"title","Wprowadzenie do Git i GitHub","description","Kompleksowy kurs wprowadzający do systemu kontroli wersji Git oraz platformy GitHub. Poznaj podstawowe pojęcia, komendy oraz narzędzia do pracy zespołowej i automatyzacji.","keywords",[11,12,13,14,15,16,17,18,19,20,21],"Git","GitHub","kontrola wersji","repozytorium","commit","branch","pull request","CI/CD","GitHub Actions","GitHub Pages","learning","categories",[24],"git","createdAt",["D",1749081600000],"quiz",{"_5":29,"_30":31},"Quiz: Podstawy Git i GitHub","questions",[32,45,53,62,71],{"_33":34,"_35":36,"_41":42,"_43":44},"question","<p>Co oznacza skrót VCS?</p>","options",[37,38,39,40],"Verified Commit Syntax","Version Control System","Versioned Coding System","Virtual Clone Service","answer",1,"explanation","VCS to Version Control System, czyli system kontroli wersji.",{"_33":46,"_35":47,"_41":42,"_43":52},"<p>Co robi polecenie 'git clone'?</p>",[48,49,50,51],"Tworzy nową gałąź","Pobiera całe repozytorium zdalne na lokalny komputer","Zatwierdza zmiany do historii","Łączy zmiany z innego repozytorium","'git clone' kopiuje całe repozytorium wraz z historią na Twój komputer.",{"_33":54,"_35":55,"_41":60,"_43":61},"<p>Czym jest commit w Gicie?</p>",[56,57,58,59],"Automatyczne pobieranie zmian","Zdalne repozytorium","Nowa gałąź","Zapis zmian w repozytorium z opisem",3,"Commit to zapis zmian, który trafia do historii projektu i ma komentarz.",{"_33":63,"_35":64,"_41":69,"_43":70},"<p>Jak nazywa się prośba o połączenie zmian na GitHubie?</p>",[65,66,67,68],"Branch request","Merge commit","Pull request","Push request",2,"Pull request to prośba o połączenie zmian z inną gałęzią.",{"_33":72,"_35":73,"_41":78,"_43":79},"<p>Która platforma NIE jest alternatywą dla GitHub?</p>",[74,75,76,77],"Stack Overflow","Bitbucket","Azure DevOps","GitLab",0,"Stack Overflow to portal Q&A, nie platforma hostingu repozytoriów.","id","aaf8d4fc-d44a-45bc-858c-3511d62f8b33","slug","wprowadzenie-do-git-i-github","content","<p>Ten kurs to szybki i przystępny przewodnik po podstawach pracy z Gitem i GitHubem. Nauczysz się, czym jest kontrola wersji, poznasz kluczowe komendy oraz dowiesz się, jak pracować zespołowo nad kodem i publikować swoje projekty w internecie. 🚀</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-system-kontroli-wersji\">Czym jest system kontroli wersji?</a></li>\n<li><a href=\"#co-to-jest-git\">Co to jest Git?</a></li>\n<li><a href=\"#repozytorium-branch-commit\">Repozytorium, branch, commit</a>\n<ul>\n<li><a href=\"#repozytorium\">Co to jest repozytorium?</a></li>\n<li><a href=\"#branch-ga%C5%82%C4%85%C5%BA\">Co to jest branch/gałąź?</a></li>\n<li><a href=\"#commit\">Co to jest commit?</a></li>\n</ul>\n</li>\n<li><a href=\"#fundamentalne-komendy-gita-commit-checkout-pull-push-clone\">Fundamentalne komendy Git’a</a>\n<ul>\n<li><a href=\"#git-clone\"><code>git clone</code></a></li>\n<li><a href=\"#git-checkout-oraz-git-switch\"><code>git checkout</code> oraz <code>git switch</code></a></li>\n<li><a href=\"#git-add\"><code>git add</code></a></li>\n<li><a href=\"#git-commit\"><code>git commit</code></a></li>\n<li><a href=\"#git-pull\"><code>git pull</code></a></li>\n<li><a href=\"#git-push\"><code>git push</code></a></li>\n<li><a href=\"#git-status\"><code>git status</code></a></li>\n<li><a href=\"#git-log\"><code>git log</code></a></li>\n</ul>\n</li>\n<li><a href=\"#czym-jest-github-przyk%C5%82adowe-alternatywy\">Czym jest Github? Przykładowe alternatywy</a></li>\n<li><a href=\"#pull-request---z-czym-to-si%C4%99-je\">Pull request - z czym to się je?</a></li>\n<li><a href=\"#github-actions---podstawy-cicd\">Github actions - podstawy CI/CD</a></li>\n<li><a href=\"#github-pages---mo%C5%BCliwo%C5%9B%C4%87-wystawienia-naszej-aplikacji-na-%C5%9Bwiat\">Github pages - możliwość wystawienia naszej aplikacji na świat</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-system-kontroli-wersji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-system-kontroli-wersji\">>></a>Czym jest system kontroli wersji?</h2>\n<p>System kontroli wersji (VCS, czyli Version Control System) to narzędzie, które umożliwia śledzenie wszystkich zmian w projekcie, cofanie się do wcześniejszych wersji oraz bezpieczną współpracę z innymi osobami. Pozwala na zarządzanie historią plików i ułatwia organizację pracy nad kodem.</p>\n<p><strong>Dlaczego warto używać systemu kontroli wersji?</strong> 🕓</p>\n<ul>\n<li>Pełna historia zmian w plikach.</li>\n<li>Możliwość powrotu do dowolnej wersji projektu.</li>\n<li>Praca zespołowa bez ryzyka nadpisania czyjejś pracy.</li>\n<li>Lepsza organizacja i bezpieczeństwo kodu.</li>\n</ul>\n<hr>\n<h2 id=\"co-to-jest-git\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-git\">>></a>Co to jest Git?</h2>\n<p>Git to najpopularniejszy system kontroli wersji na świecie, stworzony przez Linusa Torvaldsa. Pozwala na pracę zarówno lokalną na komputerze, jak i w chmurze, zapewniając bezpieczeństwo i elastyczność zarządzania projektem.</p>\n<p><strong>Co wyróżnia Gita?</strong> 🏆</p>\n<ul>\n<li>Możliwość pracy offline.</li>\n<li>Łatwe cofanie się do poprzednich wersji.</li>\n<li>Wsparcie dla gałęzi (branches), dzięki którym można testować nowe pomysły bez wpływu na główną wersję projektu.</li>\n</ul>\n<hr>\n<h2 id=\"repozytorium-branch-commit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#repozytorium-branch-commit\">>></a>Repozytorium, branch, commit</h2>\n<p>Te trzy pojęcia są podstawą pracy z Gitem i GitHubem. Zrozumienie ich znaczenia i działania pozwala sprawnie korzystać z systemu kontroli wersji.</p>\n<h3 id=\"repozytorium\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#repozytorium\">>>></a>Repozytorium</h3>\n<p>Repozytorium (ang. repository) to miejsce przechowywania całego projektu wraz z historią zmian. Może być lokalne (na komputerze) lub zdalne (np. na GitHubie).</p>\n<p><strong>Co znajduje się w repozytorium?</strong></p>\n<ul>\n<li>Pliki projektu (kody źródłowe, dokumentacja)</li>\n<li>Ukryty folder <code>.git</code> z historią zmian</li>\n<li>Informacje o commitach, gałęziach i tagach</li>\n</ul>\n<p><strong>Typowe operacje:</strong> ⚙️</p>\n<ul>\n<li>Tworzenie nowego repozytorium: <code>git init</code></li>\n<li>Pobranie repozytorium z internetu: <code>git clone &#x3C;adres_repo></code></li>\n</ul>\n<h3 id=\"branch-gałąź\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#branch-gałąź\">>>></a>Branch (gałąź)</h3>\n<p>Gałąź pozwala pracować nad różnymi funkcjonalnościami równolegle. Dzięki gałęziom można eksperymentować i rozwijać nowe funkcje bez wpływu na główną wersję kodu.</p>\n<p><strong>Dlaczego warto używać gałęzi?</strong></p>\n<ul>\n<li>Testowanie nowych funkcji bez ryzyka dla głównej wersji projektu (zazwyczaj gałąź <code>main</code> lub <code>master</code>)</li>\n<li>Każdy członek zespołu może pracować na własnej gałęzi</li>\n<li>Możliwość łączenia (merge) zmian z różnych gałęzi</li>\n</ul>\n<p><strong>Typowe operacje:</strong> 🌿</p>\n<ul>\n<li>Tworzenie gałęzi: <code>git branch &#x3C;nazwa_gałęzi></code></li>\n<li>Przełączanie się na gałąź: <code>git checkout &#x3C;nazwa_gałęzi></code> lub <code>git switch &#x3C;nazwa_gałęzi></code></li>\n<li>Łączenie gałęzi: <code>git merge &#x3C;nazwa_gałęzi></code></li>\n</ul>\n<h3 id=\"commit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#commit\">>>></a>Commit</h3>\n<p>Commit to zapis zmian w projekcie wraz z opisem. Każdy commit jest jak punkt kontrolny w historii projektu.</p>\n<p><strong>Cechy commitów:</strong></p>\n<ul>\n<li>Każdy commit ma unikalny identyfikator (hash)</li>\n<li>Opis commita powinien informować o dokonanych zmianach</li>\n<li>Możliwość powrotu do dowolnego commita</li>\n</ul>\n<p><strong>Tworzenie commita:</strong> 💾</p>\n<ol>\n<li>Dodanie plików do obszaru stage:<br>\n<code>git add &#x3C;plik></code> lub <code>git add .</code></li>\n<li>Zapisanie zmian:<br>\n<code>git commit -m \"Opis zmian\"</code></li>\n</ol>\n<hr>\n<h2 id=\"fundamentalne-komendy-gita-commit-checkout-pull-push-clone\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#fundamentalne-komendy-gita-commit-checkout-pull-push-clone\">>></a>Fundamentalne komendy Git’a: commit, checkout, pull, push, clone</h2>\n<p>Poniżej znajdują się szczegółowe opisy najważniejszych komend Git'a wraz z zastosowaniem i przykładami. Przy każdej znajdziesz praktyczną instrukcję użycia.</p>\n<h3 id=\"git-clone\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-clone\">>>></a><code>git clone</code></h3>\n<p>Klonuje istniejące repozytorium z internetu na komputer. 🖥️</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/uzytkownik/projekt.git\n</code></pre>\n<p>Po tej komendzie otrzymujesz pełną kopię repozytorium z całą historią zmian.</p>\n<hr>\n<h3 id=\"git-checkout-oraz-git-switch\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-checkout-oraz-git-switch\">>>></a><code>git checkout</code> oraz <code>git switch</code></h3>\n<p>Służą do przełączania się między gałęziami lub do konkretnego commita.</p>\n<ul>\n<li>Przełączenie na inną gałąź:\n<pre><code class=\"hljs language-bash\">git checkout nazwa_gałęzi\n<span class=\"hljs-comment\"># lub</span>\ngit switch nazwa_gałęzi\n</code></pre>\n</li>\n<li>Przełączenie do konkretnego commita (tylko do odczytu):\n<pre><code class=\"hljs language-bash\">git checkout hash_commita\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"git-add\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-add\">>>></a><code>git add</code></h3>\n<p>Dodaje zmienione pliki do obszaru staging, przygotowując je do commita.</p>\n<ul>\n<li>Dodanie pojedynczego pliku:\n<pre><code class=\"hljs language-bash\">git add index.html\n</code></pre>\n</li>\n<li>Dodanie wszystkich plików:\n<pre><code class=\"hljs language-bash\">git add .\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"git-commit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-commit\">>>></a><code>git commit</code></h3>\n<p>Zapisuje zmiany w repozytorium wraz z opisem.</p>\n<pre><code class=\"hljs language-bash\">git commit -m <span class=\"hljs-string\">\"Opis zmian\"</span>\n</code></pre>\n<p>Opis powinien być zwięzły i informować, co zostało zmienione.</p>\n<hr>\n<h3 id=\"git-pull\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-pull\">>>></a><code>git pull</code></h3>\n<p>Pobiera najnowsze zmiany z repozytorium zdalnego do lokalnego i automatycznie je łączy. 🔄</p>\n<pre><code class=\"hljs language-bash\">git pull\n</code></pre>\n<hr>\n<h3 id=\"git-push\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-push\">>>></a><code>git push</code></h3>\n<p>Wysyła lokalne zmiany (commity) do repozytorium zdalnego.</p>\n<pre><code class=\"hljs language-bash\">git push\n</code></pre>\n<p>Możesz również wskazać nazwę zdalnego repozytorium i gałęzi:</p>\n<pre><code class=\"hljs language-bash\">git push origin nowa-funkcja\n</code></pre>\n<hr>\n<h3 id=\"git-status\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-status\">>>></a><code>git status</code></h3>\n<p>Pokazuje aktualny stan repozytorium: które pliki zostały zmienione, które są przygotowane do commita, a które nie.</p>\n<pre><code class=\"hljs language-bash\">git status\n</code></pre>\n<hr>\n<h3 id=\"git-log\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-log\">>>></a><code>git log</code></h3>\n<p>Pokazuje historię wszystkich commitów w repozytorium. 📜</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span>\n</code></pre>\n<hr>\n<h2 id=\"czym-jest-github-przykładowe-alternatywy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-github-przykładowe-alternatywy\">>></a>Czym jest Github? Przykładowe alternatywy</h2>\n<p>GitHub to platforma umożliwiająca przechowywanie projektów opartych o Git, dzielenie się kodem i współpracę w zespole. Umożliwia zarządzanie projektami, recenzowanie kodu i automatyzację procesów. To swoisty \"hub\" dla programistów i projektów open source.</p>\n<p><strong>Inne popularne platformy:</strong> 🌐</p>\n<ul>\n<li>GitLab</li>\n<li>Bitbucket</li>\n<li>Azure DevOps</li>\n</ul>\n<hr>\n<h2 id=\"pull-request---z-czym-to-się-je\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pull-request---z-czym-to-się-je\">>></a>Pull request - z czym to się je?</h2>\n<p>Pull request (PR) to prośba o akceptację i połączenie Twoich zmian z główną wersją projektu. Jest to podstawowy element pracy zespołowej na GitHubie.</p>\n<p><strong>Proces pull request:</strong> 👥</p>\n<ol>\n<li>Tworzysz nową gałąź i wprowadzasz w niej zmiany.</li>\n<li>Otwierasz pull request na GitHubie.</li>\n<li>Inni członkowie zespołu sprawdzają kod i mogą komentować lub zgłaszać poprawki.</li>\n<li>Po akceptacji zmiany są łączone z główną gałęzią projektu.</li>\n</ol>\n<hr>\n<h2 id=\"github-actions---podstawy-cicd\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#github-actions---podstawy-cicd\">>></a>Github actions - podstawy CI/CD</h2>\n<p>GitHub Actions to narzędzie do automatyzacji zadań takich jak testowanie, budowanie i wdrażanie aplikacji. Pozwala tworzyć workflowy, które wykonują się automatycznie po spełnieniu określonych warunków (np. po każdym commicie).</p>\n<p><strong>Główne pojęcia:</strong> ⚙️</p>\n<ul>\n<li>Workflow – zestaw zadań wykonywanych automatycznie</li>\n<li>Konfiguracja w plikach YAML w folderze <code>.github/workflows/</code></li>\n</ul>\n<hr>\n<h2 id=\"github-pages---możliwość-wystawienia-naszej-aplikacji-na-świat\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#github-pages---możliwość-wystawienia-naszej-aplikacji-na-świat\">>></a>Github pages - możliwość wystawienia naszej aplikacji na świat</h2>\n<p>GitHub Pages umożliwia publikowanie stron internetowych lub portfolio bez konieczności posiadania własnego serwera. Strona jest dostępna online bezpośrednio z repozytorium.</p>\n<p><strong>Jak to zrobić?</strong> 🌍</p>\n<ol>\n<li>Utwórz repozytorium z plikami strony (HTML, CSS, JS).</li>\n<li>W ustawieniach repozytorium aktywuj GitHub Pages.</li>\n<li>Strona będzie dostępna pod adresem:<br>\n<code>https://&#x3C;twoja-nazwa-użytkownika>.github.io/&#x3C;nazwa-repo></code></li>\n</ol>\n<hr>\n<p>To tylko wstęp – każdy z tych tematów można rozwinąć o praktyczne przykłady i ćwiczenia, które pozwolą lepiej zrozumieć narzędzia i procesy pracy z Git oraz GitHubem.</p>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-git-i-github.md","readingTime","4 minuty"]
