[{"_1":2},"course-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_21":22,"_25":26,"_27":28,"_29":30,"_31":32,"_33":34},"title","Wprowadzenie do Git i GitHub","description","Kompleksowy kurs wprowadzający do systemu kontroli wersji Git oraz platformy GitHub. Poznaj podstawowe pojęcia, komendy oraz narzędzia do pracy zespołowej i automatyzacji.","keywords",[11,12,13,14,15,16,17,18,19,20],"Git","GitHub","kontrola wersji","repozytorium","commit","branch","pull request","CI/CD","GitHub Actions","GitHub Pages","categories",[23,24],"git","devops","createdAt","2025-06-05","id","2c8034ea-974f-40fd-848f-2818ec889350","slug","wprowadzenie-do-git-i-github","content","<p>Ten kurs to szybki i przystępny przewodnik po podstawach pracy z Gitem i GitHubem. Nauczysz się, czym jest kontrola wersji, poznasz kluczowe komendy oraz dowiesz się, jak pracować zespołowo nad kodem i publikować swoje projekty w internecie.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li>\n<p><a href=\"#czym-jest-system-kontroli-wersji\">Czym jest system kontroli wersji?</a></p>\n</li>\n<li>\n<p><a href=\"#co-to-jest-git\">Co to jest Git?</a></p>\n</li>\n<li>\n<p><a href=\"#repozytorium-branch-commit\">Repozytorium, branch, commit</a></p>\n<ul>\n<li><a href=\"#repozytorium\">Co to jest repozytoriun?</a></li>\n<li><a href=\"#branch-ga%C5%82%C4%85%C5%BA\">Co to jest branch/gałąź?</a></li>\n<li><a href=\"#commit\">Co to jest commit?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#fundamentalne-komendy-gita-commit-checkout-pull-push-clone\">Fundamentalne komendy Git’a</a></p>\n<ul>\n<li><a href=\"#git-clone\"><code>git clone</code></a></li>\n<li><a href=\"#git-checkout-oraz-git-switch\"><code>git checkout</code> oraz <code>git switch</code></a></li>\n<li><a href=\"#git-add\"><code>git add</code></a></li>\n<li><a href=\"#git-commit\"><code>git commit</code></a></li>\n<li><a href=\"#git-pull\"><code>git pull</code></a></li>\n<li><a href=\"#git-push\"><code>git push</code></a></li>\n<li><a href=\"#git-status\"><code>git status</code></a></li>\n<li><a href=\"#git-log\"><code>git log</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#czym-jest-github-przyk%C5%82adowe-alternatywy\">Czym jest Github? Przykładowe alternatywy</a></p>\n</li>\n<li>\n<p><a href=\"#pull-request---z-czym-to-si%C4%99-je\">Pull request - z czym to się je?</a></p>\n</li>\n<li>\n<p><a href=\"#github-actions---podstawy-cicd\">Github actions - podstawy CI/CD</a></p>\n</li>\n<li>\n<p><a href=\"#github-pages---mo%C5%BCliwo%C5%9B%C4%87-wystawienia-naszej-aplikacji-na-%C5%9Bwiat\">Github pages - możliwość wystawienia naszej aplikacji na świat</a></p>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-system-kontroli-wersji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-system-kontroli-wersji\">>></a>Czym jest system kontroli wersji?</h2>\n<p>Wyobraź sobie, że pracujesz nad projektem i chcesz zachować każdą ważną wersję pliku. System kontroli wersji (VCS, czyli Version Control System) to narzędzie, które pozwala Ci śledzić wszystkie zmiany w projekcie, cofać się do wcześniejszych wersji oraz bezpiecznie współpracować z innymi.</p>\n<p><strong>Dlaczego warto używać systemu kontroli wersji?</strong></p>\n<ul>\n<li>Masz pełną historię zmian w plikach.</li>\n<li>Możesz wrócić do każdej wcześniejszej wersji projektu.</li>\n<li>Pracujesz w zespole bez ryzyka nadpisania czyjejś pracy.</li>\n<li>Twój kod jest lepiej zorganizowany i bezpieczniejszy.</li>\n</ul>\n<hr>\n<h2 id=\"co-to-jest-git\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-git\">>></a>Co to jest Git?</h2>\n<p>Git to najpopularniejszy system kontroli wersji na świecie. Został stworzony przez Linusa Torvaldsa (tego samego, który stworzył Linuksa). Git działa zarówno lokalnie na Twoim komputerze, jak i w chmurze (na serwerze).</p>\n<p><strong>Co wyróżnia Gita?</strong></p>\n<ul>\n<li>Możesz pracować nad projektem nawet bez internetu.</li>\n<li>Zmiany są bezpieczne i łatwo wrócić do poprzednich wersji.</li>\n<li>Można tworzyć „gałęzie” (branches), by testować nowe pomysły bez psucia głównego projektu.</li>\n</ul>\n<hr>\n<h2 id=\"repozytorium-branch-commit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#repozytorium-branch-commit\">>></a>Repozytorium, branch, commit</h2>\n<p>W tej części dokładniej przyjrzymy się tym trzem pojęciom – to podstawa pracy z Gitem!</p>\n<h3 id=\"repozytorium\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#repozytorium\">>>></a>Repozytorium</h3>\n<p>Repozytorium (ang. repository) to miejsce, w którym przechowujesz cały swój projekt i jego historię.<br>\nMoże być lokalne (na Twoim komputerze) lub zdalne (np. na GitHubie).</p>\n<p><strong>Co znajduje się w repozytorium?</strong></p>\n<ul>\n<li>Wszystkie pliki projektu (np. kody źródłowe, dokumentacja).</li>\n<li>Ukryty folder <code>.git</code> – to tam Git zapisuje całą historię zmian.</li>\n<li>Informacje o wszystkich commitach, gałęziach i tagach.</li>\n</ul>\n<p><strong>Typowe operacje:</strong></p>\n<ul>\n<li>Tworzenie nowego repozytorium: <code>git init</code></li>\n<li>Pobranie istniejącego repozytorium z internetu: <code>git clone &#x3C;adres_repo></code></li>\n</ul>\n<h3 id=\"branch-gałąź\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#branch-gałąź\">>>></a>Branch (gałąź)</h3>\n<p>Branch, czyli gałąź, pozwala Ci równolegle pracować nad różnymi funkcjonalnościami bez ryzyka, że popsujesz główny kod.<br>\nWyobraź sobie, że gałąź to alternatywny tor, na którym możesz wprowadzać zmiany i eksperymentować.</p>\n<p><strong>Dlaczego warto używać gałęzi?</strong></p>\n<ul>\n<li>Możesz testować nowe funkcje bez wpływu na główną wersję projektu (najczęściej gałąź <code>main</code> lub <code>master</code>).</li>\n<li>Każdy członek zespołu może pracować na własnej gałęzi.</li>\n<li>Łatwo wycofać zmiany lub połączyć je z główną gałęzią (tzw. merge).</li>\n</ul>\n<p><strong>Typowe operacje:</strong></p>\n<ul>\n<li>Tworzenie nowej gałęzi: <code>git branch &#x3C;nazwa_gałęzi></code></li>\n<li>Przełączanie się na gałąź: <code>git checkout &#x3C;nazwa_gałęzi></code> (lub nowocześnie: <code>git switch &#x3C;nazwa_gałęzi></code>)</li>\n<li>Łączenie gałęzi: <code>git merge &#x3C;nazwa_gałęzi></code></li>\n</ul>\n<p><strong>Przykład:</strong></p>\n<ol>\n<li>Masz projekt na gałęzi <code>main</code>.</li>\n<li>Tworzysz gałąź <code>nowa-funkcja</code>, gdzie testujesz nową opcję.</li>\n<li>Po przetestowaniu możesz połączyć (merge) gałąź <code>nowa-funkcja</code> z <code>main</code>.</li>\n</ol>\n<h3 id=\"commit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#commit\">>>></a>Commit</h3>\n<p>Commit to zapis zmian w projekcie wraz z krótkim opisem tego, co zostało zrobione.<br>\nMożesz traktować je jak „punkty zapisu” – każdy commit to krok naprzód w historii projektu.</p>\n<p><strong>Co warto wiedzieć o commitach?</strong></p>\n<ul>\n<li>Każdy commit ma unikalny identyfikator (hash).</li>\n<li>W opisie commita wpisujesz, co zostało zmienione (np. <code>Dodano menu na stronie głównej</code>).</li>\n<li>Możesz się cofnąć do dowolnego commita w historii projektu.</li>\n</ul>\n<p><strong>Jak zrobić commit?</strong></p>\n<ol>\n<li>Najpierw dodajesz pliki do „obszaru stage”:<br>\n<code>git add &#x3C;plik></code> lub <code>git add .</code> (wszystkie pliki)</li>\n<li>Następnie zapisujesz zmiany:<br>\n<code>git commit -m \"Opis zmian\"</code></li>\n</ol>\n<p><strong>Przykład cyklu pracy:</strong></p>\n<ol>\n<li>Zmieniasz plik w projekcie.</li>\n<li>Dodajesz go do stage: <code>git add index.html</code></li>\n<li>Zapisujesz zmiany: <code>git commit -m \"Poprawa nagłówka strony\"</code></li>\n</ol>\n<hr>\n<h2 id=\"fundamentalne-komendy-gita-commit-checkout-pull-push-clone\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#fundamentalne-komendy-gita-commit-checkout-pull-push-clone\">>></a>Fundamentalne komendy Git’a: commit, checkout, pull, push, clone</h2>\n<p>Poniżej znajdziesz szczegółowe opisy najważniejszych komend Git'a. Dowiesz się, po co każda z nich służy, jak jej używać i zobaczysz praktyczne przykłady.</p>\n<h3 id=\"git-clone\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-clone\">>>></a><code>git clone</code></h3>\n<p><strong>Do czego służy?</strong><br>\nKlonuje (kopiuje) istniejące repozytorium z internetu (np. z GitHuba) na Twój komputer.</p>\n<p><strong>Jak używać?</strong></p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/uzytkownik/projekt.git\n</code></pre>\n<p>Po tej komendzie masz na swoim komputerze pełną kopię repozytorium – z całą historią zmian.</p>\n<hr>\n<h3 id=\"git-checkout-oraz-git-switch\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-checkout-oraz-git-switch\">>>></a><code>git checkout</code> oraz <code>git switch</code></h3>\n<p><strong>Do czego służą?</strong><br>\nPozwalają przełączać się między różnymi gałęziami w projekcie lub cofać się do konkretnego commita.</p>\n<p><strong>Jak używać?</strong></p>\n<ul>\n<li>Przełączenie na inną gałąź:\n<pre><code class=\"hljs language-bash\">git checkout nazwa_gałęzi\n<span class=\"hljs-comment\"># lub</span>\ngit switch nazwa_gałęzi\n</code></pre>\n</li>\n<li>Przełączenie do konkretnego commita (tryb tylko do odczytu):\n<pre><code class=\"hljs language-bash\">git checkout hash_commita\n</code></pre>\n</li>\n</ul>\n<p><strong>Przykład:</strong><br>\nMasz gałąź <code>main</code> i <code>nowa-funkcja</code>. Przełączasz się na drugą:</p>\n<pre><code class=\"hljs language-bash\">git switch nowa-funkcja\n</code></pre>\n<hr>\n<h3 id=\"git-add\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-add\">>>></a><code>git add</code></h3>\n<p><strong>Do czego służy?</strong><br>\nDodaje zmienione pliki do tzw. „staging area” – miejsca, gdzie przygotowujesz pliki do zapisania ich historią (commit).</p>\n<p><strong>Jak używać?</strong></p>\n<ul>\n<li>Dodanie pojedynczego pliku:\n<pre><code class=\"hljs language-bash\">git add index.html\n</code></pre>\n</li>\n<li>Dodanie wszystkich zmodyfikowanych plików:\n<pre><code class=\"hljs language-bash\">git add .\n</code></pre>\n</li>\n</ul>\n<p><strong>Przykład:</strong><br>\nPo zmianie kilku plików, przygotuj je do commita:</p>\n<pre><code class=\"hljs language-bash\">git add index.html\ngit add style.css\n</code></pre>\n<hr>\n<h3 id=\"git-commit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-commit\">>>></a><code>git commit</code></h3>\n<p><strong>Do czego służy?</strong><br>\nZapisuje wykonane zmiany w repozytorium z krótkim opisem.</p>\n<p><strong>Jak używać?</strong></p>\n<pre><code class=\"hljs language-bash\">git commit -m <span class=\"hljs-string\">\"Opis zmian\"</span>\n</code></pre>\n<p>Opis powinien być krótki i mówić, co zostało zmienione.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-bash\">git commit -m <span class=\"hljs-string\">\"Dodano sekcję kontakt na stronie\"</span>\n</code></pre>\n<hr>\n<h3 id=\"git-pull\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-pull\">>>></a><code>git pull</code></h3>\n<p><strong>Do czego służy?</strong><br>\nPobiera najnowsze zmiany z repozytorium zdalnego (np. z GitHuba) do Twojego lokalnego repozytorium i automatycznie je łączy.</p>\n<p><strong>Jak używać?</strong></p>\n<pre><code class=\"hljs language-bash\">git pull\n</code></pre>\n<p><strong>Przykład:</strong><br>\nPrzed rozpoczęciem pracy zawsze warto pobrać zmiany innych osób:</p>\n<pre><code class=\"hljs language-bash\">git pull\n</code></pre>\n<hr>\n<h3 id=\"git-push\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-push\">>>></a><code>git push</code></h3>\n<p><strong>Do czego służy?</strong><br>\nWysyła Twoje lokalne zmiany (commity) do repozytorium zdalnego, aby inni mogli je zobaczyć i pobrać.</p>\n<p><strong>Jak używać?</strong></p>\n<pre><code class=\"hljs language-bash\">git push\n</code></pre>\n<p>Możesz podać też nazwę zdalnego repozytorium i gałęzi, np.:</p>\n<pre><code class=\"hljs language-bash\">git push origin nowa-funkcja\n</code></pre>\n<p><strong>Przykład:</strong><br>\nPo skończonej pracy i zapisaniu zmian (commit) wysyłasz je do GitHuba:</p>\n<pre><code class=\"hljs language-bash\">git push\n</code></pre>\n<hr>\n<h3 id=\"git-status\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-status\">>>></a><code>git status</code></h3>\n<p><strong>Do czego służy?</strong><br>\nPokazuje aktualny stan repozytorium: które pliki zostały zmienione, które są przygotowane do commita (w staging area), a które nie.</p>\n<p><strong>Jak używać?</strong></p>\n<pre><code class=\"hljs language-bash\">git status\n</code></pre>\n<p><strong>Przykład:</strong><br>\nChcesz sprawdzić, co zmieniłeś przed commitem:</p>\n<pre><code class=\"hljs language-bash\">git status\n</code></pre>\n<hr>\n<h3 id=\"git-log\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-log\">>>></a><code>git log</code></h3>\n<p><strong>Do czego służy?</strong><br>\nPokazuje historię wszystkich commitów w repozytorium.</p>\n<p><strong>Jak używać?</strong></p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span>\n</code></pre>\n<p><strong>Przykład:</strong><br>\nMożesz przejrzeć listę zmian w projekcie wraz z datami i autorami:</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span>\n</code></pre>\n<hr>\n<h2 id=\"czym-jest-github-przykładowe-alternatywy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-github-przykładowe-alternatywy\">>></a>Czym jest Github? Przykładowe alternatywy</h2>\n<p>GitHub to platforma internetowa, na której możesz trzymać swoje projekty oparte o Gita, dzielić się kodem i współpracować w grupie. To taki „Facebook dla programistów i kodu”.</p>\n<p><strong>Inne popularne platformy:</strong></p>\n<ul>\n<li>GitLab</li>\n<li>Bitbucket</li>\n<li>Azure DevOps</li>\n</ul>\n<hr>\n<h2 id=\"pull-request---z-czym-to-się-je\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pull-request---z-czym-to-się-je\">>></a>Pull request - z czym to się je?</h2>\n<p>Pull request (PR) to prośba, by Twoje zmiany w projekcie zostały zaakceptowane i połączone z główną wersją. Tworzysz PR, gdy chcesz, by ktoś sprawdził Twój kod – to część pracy zespołowej.</p>\n<p><strong>Jak wygląda typowy proces PR?</strong></p>\n<ol>\n<li>Tworzysz nową gałąź i wprowadzasz w niej zmiany.</li>\n<li>Otwierasz pull request na GitHubie.</li>\n<li>Inni sprawdzają Twój kod i mogą go komentować lub poprosić o poprawki.</li>\n<li>Po akceptacji Twoje zmiany trafiają do głównej wersji projektu.</li>\n</ol>\n<hr>\n<h2 id=\"github-actions---podstawy-cicd\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#github-actions---podstawy-cicd\">>></a>Github actions - podstawy CI/CD</h2>\n<p>GitHub Actions pozwala zautomatyzować wiele zadań, np. testowanie, budowanie i wdrażanie aplikacji. Dzięki temu projekt jest lepiej przetestowany, a Ty masz mniej ręcznej pracy.</p>\n<p><strong>Główne pojęcia:</strong></p>\n<ul>\n<li><strong>Workflow</strong> – zestaw zadań, które GitHub może wykonać za Ciebie automatycznie (np. po każdym commicie).</li>\n<li>Wszystko konfiguruje się w plikach YAML w folderze <code>.github/workflows/</code>.</li>\n</ul>\n<hr>\n<h2 id=\"github-pages---możliwość-wystawienia-naszej-aplikacji-na-świat\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#github-pages---możliwość-wystawienia-naszej-aplikacji-na-świat\">>></a>Github pages - możliwość wystawienia naszej aplikacji na świat</h2>\n<p>GitHub Pages to darmowa opcja do publikowania stron internetowych lub portfolio prosto z Twojego repozytorium. Nie potrzebujesz własnego serwera!</p>\n<p><strong>Jak to zrobić?</strong></p>\n<ol>\n<li>Stwórz repozytorium z plikami strony (HTML, CSS, JS itp.).</li>\n<li>W ustawieniach repozytorium włącz GitHub Pages.</li>\n<li>Twoja strona pojawi się pod adresem:<br>\n<code>https://&#x3C;twoja-nazwa-użytkownika>.github.io/&#x3C;nazwa-repo></code></li>\n</ol>\n<hr>\n<blockquote>\n<p>To tylko wstęp – każdy temat można zgłębić szerzej z praktycznymi przykładami i ćwiczeniami!</p>\n</blockquote>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-git-i-github.md"]
