[{"_1":2},"course-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_17":18,"_19":20,"_21":22,"_23":24,"_25":26,"_27":28},"title","Renesans w JS, czyli nowoczesny JavaScript","description","JavaScript jest językiem programowania, który jest powszechnie stosowany do tworzenia dynamicznych i interaktywnych stron internetowych. W ciągu ostatnich lat JavaScript znacznie ewoluował, wprowadzając nowe funkcje i poprawiając istniejące mechanizmy. W tym kursie omówimy najważniejsze elementy nowoczesnego JavaScript, w tym ES6 i nowsze.","keywords",[11,12,13,14,15,16],"javascript","kurs","wprowadzenie","przewodnik","web","frontend","categories",[13,11],"createdAt",["D",1719705600000],"id","a96a9906-5107-459f-903b-5a6058e85c90","slug","nowoczesny-javascript","content","<p>JavaScript jest językiem programowania, który jest powszechnie stosowany do tworzenia dynamicznych i interaktywnych stron internetowych. W ciągu ostatnich lat JavaScript znacznie ewoluował, wprowadzając nowe funkcje i poprawiając istniejące mechanizmy. W tym kursie omówimy najważniejsze elementy nowoczesnego JavaScript, w tym ES6 i nowsze.</p>\n<h2 id=\"zmienne-let-i-const\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zmienne-let-i-const\">#</a>Zmienne: <code>let</code> i <code>const</code></h2>\n<p>W nowoczesnym JavaScript zmienne są definiowane za pomocą <code>let</code> i <code>const</code> zamiast <code>var</code>.</p>\n<ul>\n<li><code>let</code> pozwala na deklarację zmiennych, które mogą być zmieniane.</li>\n<li><code>const</code> pozwala na deklarację zmiennych, które są stałe i nie mogą być zmieniane.</li>\n</ul>\n<h3 id=\"przykłady\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykłady\">#</a>Przykłady:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> zmienna = <span class=\"hljs-string\">\"To jest zmienna\"</span>;\nzmienna = <span class=\"hljs-string\">\"Zmieniona wartość\"</span>;\n\n<span class=\"hljs-keyword\">const</span> stala = <span class=\"hljs-string\">\"To jest stała\"</span>;\n<span class=\"hljs-comment\">// stala = 'Zmieniona wartość'; // Spowoduje błąd</span>\n</code></pre>\n<h2 id=\"funkcje-strzałkowe\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#funkcje-strzałkowe\">#</a>Funkcje strzałkowe</h2>\n<p>Funkcje strzałkowe to skrócony zapis funkcji, który również pozwala na lepsze zrozumienie kontekstu <code>this</code>.</p>\n<h3 id=\"przykład\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład\">#</a>Przykład:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Standardowa funkcja</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n\n<span class=\"hljs-comment\">// Funkcja strzałkowa</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dodaj</span> = (<span class=\"hljs-params\">a, b</span>) => a + b;\n</code></pre>\n<h2 id=\"szablony-stringów-template-literals\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#szablony-stringów-template-literals\">#</a>Szablony stringów (Template Literals)</h2>\n<p>Szablony stringów umożliwiają interpolację zmiennych i wyrażenia w łańcuchach znaków za pomocą backticków (<code>`</code>).</p>\n<h3 id=\"przykład-1\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-1\">#</a>Przykład:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">\"Jan\"</span>;\n<span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${name}</span>! Jak się masz?`</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting); <span class=\"hljs-comment\">// \"Cześć, Jan! Jak się masz?\"</span>\n</code></pre>\n<h2 id=\"destrukturyzacja\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#destrukturyzacja\">#</a>Destrukturyzacja</h2>\n<p>Destrukturyzacja pozwala na wyodrębnienie wartości z tablic lub obiektów i przypisanie ich do zmiennych.</p>\n<h3 id=\"przykład-z-tablicą\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-z-tablicą\">#</a>Przykład z tablicą:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> liczby = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> [jeden, dwa, trzy] = liczby;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(jeden, dwa, trzy); <span class=\"hljs-comment\">// 1 2 3</span>\n</code></pre>\n<h3 id=\"przykład-z-obiektem\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-z-obiektem\">#</a>Przykład z obiektem:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> osoba = { <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span> };\n<span class=\"hljs-keyword\">const</span> { imie, wiek } = osoba;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(imie, wiek); <span class=\"hljs-comment\">// Jan 30</span>\n</code></pre>\n<h2 id=\"spread-operator-\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#spread-operator-\">#</a>Spread operator (<code>...</code>)</h2>\n<p>Spread operator pozwala na rozwinięcie elementów tablicy lub obiektu.</p>\n<h3 id=\"przykład-z-tablicą-1\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-z-tablicą-1\">#</a>Przykład z tablicą:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> liczby = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> wiecejLiczb = [...liczby, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wiecejLiczb); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6]</span>\n</code></pre>\n<h3 id=\"przykład-z-obiektem-1\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-z-obiektem-1\">#</a>Przykład z obiektem:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> osoba = { <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span> };\n<span class=\"hljs-keyword\">const</span> nowaOsoba = { ...osoba, <span class=\"hljs-attr\">miasto</span>: <span class=\"hljs-string\">\"Warszawa\"</span> };\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(nowaOsoba); <span class=\"hljs-comment\">// { imie: 'Jan', wiek: 30, miasto: 'Warszawa' }</span>\n</code></pre>\n<h2 id=\"promisy\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#promisy\">#</a>Promisy</h2>\n<p>Promisy są używane do obsługi operacji asynchronicznych.</p>\n<h3 id=\"przykład-2\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-2\">#</a>Przykład:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> obietnica = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> sukces = <span class=\"hljs-literal\">true</span>;\n\n  <span class=\"hljs-keyword\">if</span> (sukces) {\n    <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">\"Operacja zakończona sukcesem!\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-string\">\"Operacja zakończona niepowodzeniem.\"</span>);\n  }\n});\n\nobietnica\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error));\n</code></pre>\n<h2 id=\"asyncawait\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#asyncawait\">#</a>Async/Await</h2>\n<p>Async/Await to składnia, która upraszcza pracę z promisami i sprawia, że kod asynchroniczny wygląda jak kod synchroniczny.</p>\n<h3 id=\"przykład-3\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#przykład-3\">#</a>Przykład:</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">asyncFunction</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> obietnica;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);\n  }\n};\n\n<span class=\"hljs-title function_\">asyncFunction</span>();\n</code></pre>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadania-do-wykonania\">#</a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadanie-1\">#</a>Zadanie 1</h3>\n<p>Napisz funkcję strzałkową, która przyjmuje dwa argumenty i zwraca ich sumę.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dodaj</span> = (<span class=\"hljs-params\">a, b</span>) => a + b;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// 5</span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-2\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadanie-2\">#</a>Zadanie 2</h3>\n<p>Utwórz obiekt reprezentujący samochód, z atrybutami <code>marka</code>, <code>model</code> i <code>rok</code>. Następnie użyj destrukturyzacji, aby wyodrębnić te wartości i wyświetlić je w konsoli.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> samochod = { <span class=\"hljs-attr\">marka</span>: <span class=\"hljs-string\">\"Toyota\"</span>, <span class=\"hljs-attr\">model</span>: <span class=\"hljs-string\">\"Corolla\"</span>, <span class=\"hljs-attr\">rok</span>: <span class=\"hljs-number\">2020</span> };\n<span class=\"hljs-keyword\">const</span> { marka, model, rok } = samochod;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(marka, model, rok); <span class=\"hljs-comment\">// Toyota Corolla 2020</span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-3\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadanie-3\">#</a>Zadanie 3</h3>\n<p>Stwórz tablicę liczb od 1 do 5. Następnie użyj operatora spread, aby dodać liczby 6 i 7 do tej tablicy.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> liczby = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n<span class=\"hljs-keyword\">const</span> wiecejLiczb = [...liczby, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>];\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wiecejLiczb); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7]</span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-4\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#zadanie-4\">#</a>Zadanie 4</h3>\n<p>Napisz funkcję asynchroniczną, która używa promisów do symulacji opóźnienia (np. za pomocą <code>setTimeout</code>). Funkcja powinna zwracać wynik po 2 sekundach.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">delay</span> = (<span class=\"hljs-params\">ms</span>) => <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =></span> <span class=\"hljs-built_in\">setTimeout</span>(resolve, ms));\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">asyncFunction</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Czekam 2 sekundy...\"</span>);\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">2000</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"2 sekundy minęły!\"</span>);\n};\n\n<span class=\"hljs-title function_\">asyncFunction</span>();\n</code></pre>\n</details>\n<p>To tyle na temat podstaw nowoczesnego JavaScript! Zachęcam do dalszego eksperymentowania i zgłębiania tego tematu, aby tworzyć bardziej zaawansowane i interaktywne aplikacje.</p>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/nowoczesny-javascript.md"]
