[{"_1":2},"course-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_18":19,"_20":21,"_22":23,"_75":76,"_77":78,"_79":80,"_81":82},"title","Renesans w JS, czyli nowoczesny JavaScript","description","JavaScript jest językiem programowania, który jest powszechnie stosowany do tworzenia dynamicznych i interaktywnych stron internetowych. W ciągu ostatnich lat JavaScript znacznie ewoluował, wprowadzając nowe funkcje i poprawiając istniejące mechanizmy. W tym kursie omówimy najważniejsze elementy nowoczesnego JavaScript, w tym ES6 i nowsze.","keywords",[11,12,13,14,15,16,17],"javascript","kurs","wprowadzenie","przewodnik","web","frontend","learning","categories",[13,11],"createdAt",["D",1719705600000],"quiz",{"_5":24,"_25":26},"Quiz: Podstawy nowoczesnego JavaScript","questions",[27,40,49,58,66],{"_28":29,"_30":31,"_36":37,"_38":39},"question","<p>Jaką główną różnicę między <code>let</code> a <code>var</code> podkreśla się w nowoczesnym JavaScript?</p>","options",[32,33,34,35],"Obie są identyczne","`let` nie pozwala na przyjmowanie wartości domyślnej","Zakres blokowy (`block scope`) w `let`","`var` nie istnieje w nowoczesnym JS","answer",2,"explanation","`let` posiada zakres blokowy, podczas gdy `var` ma zakres funkcyjny.",{"_28":41,"_30":42,"_36":47,"_38":48},"<p>Co zwróci poniższy kod?</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> [a, , b] = arr;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a, b);\n</code></pre>",[43,44,45,46],"1 2","2 3","undefined 3","1 3",3,"Drugi element jest pomijany. Wynik to 1 i 3.",{"_28":50,"_30":51,"_36":56,"_38":57},"<p>Co robi operator spread (<code>...</code>)?</p>",[52,53,54,55],"Tworzy nowy Promise","Rozwija elementy tablicy lub właściwości obiektu","Deklaruje zmienną stałą","Łączy Promise'y",1,"Spread operator służy do rozwijania/skopiowania elementów tablicy lub obiektu.",{"_28":59,"_30":60,"_36":47,"_38":65},"<p>Czym różni się funkcja strzałkowa od zwykłej funkcji pod względem <code>this</code>?</p>",[61,62,63,64],"Funkcja strzałkowa tworzy nowy kontekst `this`","Nie ma różnicy","Funkcje strzałkowe nie działają w JS","Funkcja strzałkowa nie ma własnego `this`","Funkcje strzałkowe nie posiadają własnego `this` — dziedziczą go z otoczenia.",{"_28":67,"_30":68,"_36":73,"_38":74},"<p>Jaką wartość zwróci poniższy kod?</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span>; }\n<span class=\"hljs-title function_\">test</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>);\n</code></pre>",[69,70,71,72],"5","Promise {<fulfilled>: 5}","undefined","Błąd",0,"Funkcja async zawsze zwraca Promise, ale `then` wypisze wartość 5.","id","bf0212c8-35a4-4be3-a4fe-0cabbe9d5cd3","slug","nowoczesny-javascript","content","<p>JavaScript to wszechstronny język programowania, kluczowy dla współczesnych aplikacji webowych i nie tylko. Wraz z pojawieniem się standardu ES6 (ECMAScript 2015) oraz kolejnych aktualizacji, JS stał się bardziej ekspresyjny, bezpieczny i wygodny w użyciu. W tym przewodniku poznasz najważniejsze zagadnienia nowoczesnego JavaScriptu, które pozwolą Ci pisać czytelny, skuteczny i łatwo rozwijalny kod.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#zmienne-let-const-i-zakresy-blokowe\">Zmienne: <code>let</code>, <code>const</code> i zakresy blokowe</a></li>\n<li><a href=\"#funkcje-strza%C5%82kowe-i-ich-zastosowania\">Funkcje strzałkowe i ich zastosowania</a></li>\n<li><a href=\"#szablony-string%C3%B3w-template-literals\">Szablony stringów (Template Literals)</a></li>\n<li><a href=\"#destrukturyzacja-tablic-i-obiekt%C3%B3w\">Destrukturyzacja tablic i obiektów</a></li>\n<li><a href=\"#spread-i-rest-operator-\">Spread i rest operator (<code>...</code>)</a></li>\n<li><a href=\"#promise-api-i-obs%C5%82uga-asynchroniczno%C5%9Bci\">Promise API i obsługa asynchroniczności</a></li>\n<li><a href=\"#asyncawait--nowoczesna-obs%C5%82uga-kodu-asynchronicznego\">Async/await – nowoczesna obsługa kodu asynchronicznego</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a></li>\n</ol>\n<hr>\n<h2 id=\"zmienne-let-const-i-zakresy-blokowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zmienne-let-const-i-zakresy-blokowe\">>></a>Zmienne: <code>let</code>, <code>const</code> i zakresy blokowe</h2>\n<h3 id=\"zakres-blokowy-block-scope\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zakres-blokowy-block-scope\">>>></a>Zakres blokowy (<code>block scope</code>)</h3>\n<p>W przeciwieństwie do starszego <code>var</code>, deklaracje <code>let</code> i <code>const</code> są ograniczone do bloku, w którym zostały zadeklarowane (czyli do najbliższych <code>{ ... }</code>). Dzięki temu unikasz tzw. „przecieków zmiennych” (variable hoisting) i niezamierzonych nadpisań.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n  <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n  <span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 5</span>\n}\n<span class=\"hljs-comment\">// console.log(x); // ReferenceError</span>\n</code></pre>\n<h3 id=\"różnice-między-let-const-i-var\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#różnice-między-let-const-i-var\">>>></a>Różnice między <code>let</code>, <code>const</code> i <code>var</code></h3>\n<ul>\n<li><code>let</code> – pozwala na modyfikację wartości, ale nie na ponowną deklarację w tym samym bloku.</li>\n<li><code>const</code> – wymaga przypisania wartości przy deklaracji i nie pozwala na jej zmianę (dotyczy to referencji, niekoniecznie zawartości – patrz poniżej).</li>\n<li><code>var</code> – ma zakres funkcyjny (function scope), podlega hoistingowi, co może prowadzić do nieprzewidzianych rezultatów.</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> tablica = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\ntablica.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// Dozwolone! Zmieniamy zawartość, nie referencję.</span>\n<span class=\"hljs-comment\">// tablica = [1, 2]; // Błąd! Przypisanie nowej referencji jest niedozwolone.</span>\n</code></pre>\n<hr>\n<h2 id=\"funkcje-strzałkowe-i-ich-zastosowania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-strzałkowe-i-ich-zastosowania\">>></a>Funkcje strzałkowe i ich zastosowania</h2>\n<h3 id=\"składnia-funkcji-strzałkowej\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#składnia-funkcji-strzałkowej\">>>></a>Składnia funkcji strzałkowej</h3>\n<ul>\n<li>Szybszy zapis (szczególnie dla funkcji jedno-liniowych).</li>\n<li>Automatyczne wiązanie <code>this</code> do kontekstu, w którym funkcja została zadeklarowana.</li>\n<li>Brak własnego obiektu <code>arguments</code> oraz brak możliwości użycia jako konstruktor.</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dodaj</span> = (<span class=\"hljs-params\">a, b</span>) => a + b;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">powitanie</span> = (<span class=\"hljs-params\">imie</span>) => <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie}</span>!`</span>;\n</code></pre>\n<h3 id=\"funkcje-strzałkowe-a-kontekst-this\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-strzałkowe-a-kontekst-this\">>>></a>Funkcje strzałkowe a kontekst <code>this</code></h3>\n<p>Funkcje strzałkowe nie mają własnego <code>this</code>, przez co bardzo dobrze sprawdzają się w metodach, callbackach czy w obsłudze zdarzeń, gdzie chcemy korzystać z kontekstu obiektu nadrzędnego.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Timer</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sekundy</span> = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sekundy</span>++;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sekundy</span>);\n  }, <span class=\"hljs-number\">1000</span>);\n}\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Timer</span>(); <span class=\"hljs-comment\">// this.sekundy będzie poprawnie zwiększane</span>\n</code></pre>\n<hr>\n<h2 id=\"szablony-stringów-template-literals\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#szablony-stringów-template-literals\">>></a>Szablony stringów (Template Literals)</h2>\n<h3 id=\"interpolacja-i-wielolinijkowość\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#interpolacja-i-wielolinijkowość\">>>></a>Interpolacja i wielolinijkowość</h3>\n<p>Szablony stringów pozwalają na interpolację zmiennych i wyrażeń oraz łatwe tworzenie tekstów wielolinijkowych, co jest szczególnie przydatne np. przy generowaniu HTML-a lub komunikatów:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> imie = <span class=\"hljs-string\">\"Ola\"</span>;\n<span class=\"hljs-keyword\">const</span> wiek = <span class=\"hljs-number\">25</span>;\n<span class=\"hljs-keyword\">const</span> info = <span class=\"hljs-string\">`Mam na imię <span class=\"hljs-subst\">${imie}</span> i mam <span class=\"hljs-subst\">${wiek}</span> lat.`</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(info);\n\n<span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-string\">`\n&#x3C;div>\n  &#x3C;h1><span class=\"hljs-subst\">${imie}</span>&#x3C;/h1>\n  &#x3C;p>Wiek: <span class=\"hljs-subst\">${wiek}</span>&#x3C;/p>\n&#x3C;/div>\n`</span>;\n</code></pre>\n<h3 id=\"dodatkowe-możliwości\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dodatkowe-możliwości\">>>></a>Dodatkowe możliwości</h3>\n<p>Szablony stringów wspierają także tzw. tagowane szablony (<code>tagged templates</code>), które pozwalają na zaawansowaną manipulację tekstem (np. do tłumaczeń, walidacji, formatowania).</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">upper</span>(<span class=\"hljs-params\">strings, ...values</span>) {\n  <span class=\"hljs-keyword\">return</span> strings[<span class=\"hljs-number\">0</span>] + values.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> v.<span class=\"hljs-title function_\">toUpperCase</span>()).<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\"\"</span>);\n}\n<span class=\"hljs-keyword\">const</span> imie = <span class=\"hljs-string\">\"Ania\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(upper<span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie}</span>!`</span>); <span class=\"hljs-comment\">// Cześć, ANIA!</span>\n</code></pre>\n<hr>\n<h2 id=\"destrukturyzacja-tablic-i-obiektów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#destrukturyzacja-tablic-i-obiektów\">>></a>Destrukturyzacja tablic i obiektów</h2>\n<h3 id=\"destrukturyzacja-tablic\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#destrukturyzacja-tablic\">>>></a>Destrukturyzacja tablic</h3>\n<p>Pozwala na szybkie przypisanie wartości z tablicy do zmiennych:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> [pierwszy, drugi, trzeci = <span class=\"hljs-number\">0</span>] = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pierwszy, drugi, trzeci); <span class=\"hljs-comment\">// 10 20 0 (wartość domyślna)</span>\n</code></pre>\n<p>Można pomijać niektóre elementy lub korzystać z reszty:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> [a, , b, ...reszta] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a, b, reszta); <span class=\"hljs-comment\">// 1 3 [4, 5]</span>\n</code></pre>\n<h3 id=\"destrukturyzacja-obiektów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#destrukturyzacja-obiektów\">>>></a>Destrukturyzacja obiektów</h3>\n<p>Do zmiennych przypisywane są wartości na podstawie nazw kluczy:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> osoba = { <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span>, <span class=\"hljs-attr\">kraj</span>: <span class=\"hljs-string\">\"PL\"</span> };\n<span class=\"hljs-keyword\">const</span> { wiek, imie, miasto = <span class=\"hljs-string\">\"nieznane\"</span> } = osoba;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(imie, wiek, miasto); <span class=\"hljs-comment\">// Jan 30 nieznane</span>\n</code></pre>\n<p>Można zmieniać nazwy zmiennych:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">imie</span>: name, <span class=\"hljs-attr\">wiek</span>: age } = osoba;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name, age); <span class=\"hljs-comment\">// Jan 30</span>\n</code></pre>\n<hr>\n<h2 id=\"spread-i-rest-operator-\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spread-i-rest-operator-\">>></a>Spread i rest operator (<code>...</code>)</h2>\n<h3 id=\"spread-operator\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spread-operator\">>>></a>Spread operator</h3>\n<p>Pozwala na rozwinięcie (skopiowanie) elementów tablicy lub właściwości obiektu:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> tablica = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> nowaTablica = [...tablica, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]; <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span>\n\n<span class=\"hljs-keyword\">const</span> obiekt = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> };\n<span class=\"hljs-keyword\">const</span> nowyObiekt = { ...obiekt, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> }; <span class=\"hljs-comment\">// { a: 1, b: 2, c: 3 }</span>\n</code></pre>\n<h3 id=\"rest-operator\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#rest-operator\">>>></a>Rest operator</h3>\n<p>Pozwala na zbieranie wielu wartości w jedną tablicę (lub obiekt):</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">suma</span>(<span class=\"hljs-params\">...liczby</span>) {\n  <span class=\"hljs-keyword\">return</span> liczby.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a + b, <span class=\"hljs-number\">0</span>);\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">suma</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)); <span class=\"hljs-comment\">// 10</span>\n\n<span class=\"hljs-keyword\">const</span> { a, ...reszta } = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> };\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(reszta); <span class=\"hljs-comment\">// { b: 2, c: 3 }</span>\n</code></pre>\n<hr>\n<h2 id=\"promise-api-i-obsługa-asynchroniczności\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#promise-api-i-obsługa-asynchroniczności\">>></a>Promise API i obsługa asynchroniczności</h2>\n<h3 id=\"czym-jest-promise\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-promise\">>>></a>Czym jest Promise?</h3>\n<p>Promise reprezentuje operację asynchroniczną, która może zakończyć się sukcesem (<code>resolve</code>) lub błędem (<code>reject</code>). Stany: <em>pending</em> → <em>fulfilled</em> lub <em>rejected</em>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> obietnica = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> sukces = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() > <span class=\"hljs-number\">0.5</span>;\n    <span class=\"hljs-keyword\">if</span> (sukces) <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">\"Sukces!\"</span>);\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-string\">\"Błąd!\"</span>);\n  }, <span class=\"hljs-number\">1000</span>);\n});\n\nobietnica\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">wynik</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wynik))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">błąd</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(błąd))\n  .<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Gotowe!\"</span>));\n</code></pre>\n<h3 id=\"łańcuchy-promise\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#łańcuchy-promise\">>>></a>Łańcuchy Promise</h3>\n<p>Możesz łączyć wiele operacji asynchronicznych w łańcuch:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"https://jsonplaceholder.typicode.com/users/1\"</span>)\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> response.<span class=\"hljs-title function_\">json</span>())\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">user</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(user))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error));\n</code></pre>\n<hr>\n<h2 id=\"asyncawait--nowoczesna-obsługa-kodu-asynchronicznego\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#asyncawait--nowoczesna-obsługa-kodu-asynchronicznego\">>></a>Async/await – nowoczesna obsługa kodu asynchronicznego</h2>\n<h3 id=\"uproszczenie-pracy-z-promise\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#uproszczenie-pracy-z-promise\">>>></a>Uproszczenie pracy z Promise</h3>\n<p>Słowa kluczowe <code>async</code> i <code>await</code> pozwalają pisać kod asynchroniczny w stylu synchronicznym, co znacząco poprawia czytelność i obsługę błędów.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pobierzDane</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(\n      <span class=\"hljs-string\">\"https://jsonplaceholder.typicode.com/posts/1\"</span>\n    );\n    <span class=\"hljs-keyword\">const</span> post = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(post);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Błąd:\"</span>, error);\n  }\n}\n<span class=\"hljs-title function_\">pobierzDane</span>();\n</code></pre>\n<h3 id=\"zwracanie-wartości-i-obsługa-błędów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zwracanie-wartości-i-obsługa-błędów\">>>></a>Zwracanie wartości i obsługa błędów</h3>\n<p>Wartość zwrócona przez funkcję oznaczoną <code>async</code> jest automatycznie opakowana w Promise.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">zwrocLiczbe</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>;\n}\n<span class=\"hljs-title function_\">zwrocLiczbe</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(val)); <span class=\"hljs-comment\">// 42</span>\n</code></pre>\n<p>Obsługa błędów działa z użyciem standardowego <code>try...catch</code>.</p>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1\">>>></a>Zadanie 1</h3>\n<p>Napisz funkcję strzałkową, która przyjmuje dowolną liczbę argumentów i zwraca ich sumę.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">suma</span> = (<span class=\"hljs-params\">...args</span>) => args.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a + b, <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">suma</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// 6</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2\">>>></a>Zadanie 2</h3>\n<p>Utwórz obiekt reprezentujący użytkownika z kluczami: <code>imie</code>, <code>email</code>, <code>aktywny</code>. Następnie użyj destrukturyzacji, by wyodrębnić te wartości i wyświetlić je w konsoli.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> user = { <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Ewa\"</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"ewa@example.com\"</span>, <span class=\"hljs-attr\">aktywny</span>: <span class=\"hljs-literal\">true</span> };\n<span class=\"hljs-keyword\">const</span> { imie, email, aktywny } = user;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(imie, email, aktywny); <span class=\"hljs-comment\">// Ewa ewa@example.com true</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3\">>>></a>Zadanie 3</h3>\n<p>Stwórz tablicę imion, a następnie utwórz nową tablicę ze wszystkimi tymi imionami plus dodatkowym imieniem na końcu (wykorzystaj spread).</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> imiona = [<span class=\"hljs-string\">\"Anna\"</span>, <span class=\"hljs-string\">\"Bartek\"</span>];\n<span class=\"hljs-keyword\">const</span> wiecejImion = [...imiona, <span class=\"hljs-string\">\"Celina\"</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wiecejImion); <span class=\"hljs-comment\">// [\"Anna\", \"Bartek\", \"Celina\"]</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4\">>>></a>Zadanie 4</h3>\n<p>Napisz funkcję asynchroniczną, która symuluje pobieranie danych z serwera (z użyciem <code>setTimeout</code> i Promise) i po 2 sekundach wyświetla wynik.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">pobierzDane</span> = (<span class=\"hljs-params\"></span>) =>\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =></span> <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">\"Dane pobrane!\"</span>), <span class=\"hljs-number\">2000</span>));\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">asyncFunction</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Pobieram dane...\"</span>);\n  <span class=\"hljs-keyword\">const</span> dane = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">pobierzDane</span>();\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(dane);\n};\n\n<span class=\"hljs-title function_\">asyncFunction</span>();\n</code></pre>\n</details>\n<hr>\n<p>To tylko początek przygody z nowoczesnym JavaScriptem! Zachęcam do dalszego zgłębiania m.in. takich zagadnień jak: klasy ES6, moduły, funkcje wyższego rzędu, obsługa błędów, praca z API, a także frameworków opartych na JS (React, Vue, Svelte).</p>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/nowoczesny-javascript.md"]
