[{"_1":2},"course-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_20":21,"_22":23,"_24":25,"_77":78,"_79":80,"_81":82,"_83":84},"title","Pierwsze kroki z TypeScript w React – praktyczne podstawy","description","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.","keywords",[11,12,13,14,15,16,17,18,19],"typescript","react","frontend","nauka","komponenty","props","state","kurs","learning","categories",[11,12],"createdAt",["D",1750550400000],"quiz",{"_5":26,"_27":28},"Quiz: TypeScript w React – podstawy","questions",[29,42,51,60,68],{"_30":31,"_32":33,"_38":39,"_40":41},"question","<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>","options",[34,35,36,37],"Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Generuje automatycznie dokumentację komponentów.","Zamienia kod na czysty CSS.","Eliminuje konieczność używania npm.","answer",0,"explanation","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_30":43,"_32":44,"_38":49,"_40":50},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[45,46,47,48],"const [count, setCount] = useState(0: number);","let count = useState(0);","const [count, setCount] = useState<string>(0);","const [count, setCount] = useState<number>(0);",3,"Poprawna składnia to useState<number>(0).",{"_30":52,"_32":53,"_38":58,"_40":59},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[54,55,56,57],"Nie trzeba typować propsów w TS.","Przez interface lub type i przekazać go do propsów funkcji.","Tylko poprzez klasę.","Wyłącznie przez any.",1,"Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_30":61,"_32":62,"_38":49,"_40":67},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[63,64,65,66],"const ref = useRef(null);","const ref = useRef<Button>(null);","const ref = useRef<HTMLDivElement>(null);","const ref = useRef<HTMLButtonElement>(null);","Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_30":69,"_32":70,"_38":75,"_40":76},"<p>Co wyświetli poniższy komponent?</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n<p>Jeśli wywołasz <code>&#x3C;Welcome name=\"Ala\" /></code></p>",[71,72,73,74],"Witaj, Ala!","undefined","Cześć, Ala!","Błąd kompilacji",2,"Komponent wyświetli 'Cześć, Ala!'.","id","d125a2ce-1989-42d6-809d-452bba94faec","slug","pierwsze-kroki-z-typescript-w-react","content","<p>Chcesz pisać nowoczesne aplikacje i mieć pewność, że Twój kod jest czysty, bezpieczny i przyszłościowy? 🚀 TypeScript w połączeniu z React to duet, który pokochasz od pierwszego projektu! Ten przewodnik przeprowadzi Cię krok po kroku przez najważniejsze podstawy – bez zbędnych teorii, za to z praktycznymi przykładami i zadaniami, które pomogą Ci naprawdę zrozumieć temat.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#dlaczego-warto-u%C5%BCywa%C4%87-typescript-w-react\">Dlaczego warto używać TypeScript w React?</a></li>\n<li><a href=\"#podstawowe-typy-w-typescript\">Podstawowe typy w TypeScript</a></li>\n<li><a href=\"#tworzenie-komponent%C3%B3w-funkcyjnych-z-typami\">Tworzenie komponentów funkcyjnych z typami</a></li>\n<li><a href=\"#props-i-typowanie-props%C3%B3w\">Props i typowanie propsów</a></li>\n<li><a href=\"#typowanie-stanu-usestate\">Typowanie stanu (useState)</a></li>\n<li><a href=\"#typowanie-referencji-useref\">Typowanie referencji (useRef)</a></li>\n<li><a href=\"#przydatne-narz%C4%99dzia-i-wskaz%C3%B3wki\">Przydatne narzędzia i wskazówki</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1-prosty-komponent-powitalny\">Zadanie 1: Prosty komponent powitalny</a></li>\n<li><a href=\"#zadanie-2-typowanie-tablicy-liczb\">Zadanie 2: Typowanie tablicy liczb</a></li>\n<li><a href=\"#zadanie-3-komponent-z-typowanymi-propsami-i-zdarzeniem\">Zadanie 3: Komponent z typowanymi propsami i zdarzeniem</a></li>\n<li><a href=\"#zadanie-4-typowanie-obiektu-w-stanie\">Zadanie 4: Typowanie obiektu w stanie</a></li>\n<li><a href=\"#zadanie-5-lista-komponent%C3%B3w-na-podstawie-tablicy-obiekt%C3%B3w\">Zadanie 5: Lista komponentów na podstawie tablicy obiektów</a></li>\n</ul>\n</li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"dlaczego-warto-używać-typescript-w-react\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-warto-używać-typescript-w-react\">>></a>Dlaczego warto używać TypeScript w React?</h2>\n<p>TypeScript to nie tylko “lepszy JavaScript” – to Twoja tajna broń na błędy w kodzie! Dzięki niemu:</p>\n<ul>\n<li>🛡️ Kod jest bardziej przewidywalny i bezpieczniejszy – typy wykrywają literówki i błędy logiczne już podczas pisania.</li>\n<li>⚡ Praca w zespole staje się łatwiejsza – czytelny kod, lepsze podpowiedzi w edytorze (IntelliSense), szybkie ogarnianie cudzych projektów.</li>\n<li>🔄 Refaktoryzacje nie są już straszne – zmiany w typach wymuszają poprawki w całym projekcie, więc nic Ci nie umknie.</li>\n<li>📖 Typy to żywa dokumentacja – od razu wiesz, co i gdzie przekazujesz do komponentów oraz funkcji.</li>\n</ul>\n<p>W React TypeScript to must-have, jeśli chcesz:</p>\n<ul>\n<li>jasno typować propsy i stan (<code>useState</code>, <code>useReducer</code>),</li>\n<li>wygodnie pracować z referencjami (<code>useRef</code>),</li>\n<li>bez obaw korzystać z zewnętrznych bibliotek i API.</li>\n</ul>\n<hr>\n<h2 id=\"podstawowe-typy-w-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-typy-w-typescript\">>></a>Podstawowe typy w TypeScript</h2>\n<p>Najczęściej spotkasz się z:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Ala\"</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">25</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">isActive</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">numbers</span>: <span class=\"hljs-built_in\">number</span>[] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">person</span>: { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span> } = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> };\n</code></pre>\n<p>Chcesz być PRO? Twórz własne typy i interfejsy – kod będzie czytelniejszy i łatwiejszy do rozbudowy:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">User</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Product</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-built_in\">number</span>;\n}\n</code></pre>\n<blockquote>\n<p>💡 <strong>TIP:</strong> Korzystaj z własnych typów zawsze, gdy masz złożone obiekty lub korzystasz z API!</p>\n</blockquote>\n<hr>\n<h2 id=\"tworzenie-komponentów-funkcyjnych-z-typami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tworzenie-komponentów-funkcyjnych-z-typami\">>></a>Tworzenie komponentów funkcyjnych z typami</h2>\n<p>Najprostszy komponent funkcyjny w TypeScript:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">HelloWorld</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, World!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}\n</code></pre>\n<p>Nie używasz propsów? Nie musisz nic typować!<br>\nAle gdy przekazujesz dane do komponentu – patrz niżej.</p>\n<hr>\n<h2 id=\"props-i-typowanie-propsów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#props-i-typowanie-propsów\">>></a>Props i typowanie propsów</h2>\n<p>Propsy to podstawa pracy z Reactem! W TypeScript opisujesz je przez interfejs lub typ:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">WelcomeProps</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Welcome</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">props</span>: <span class=\"hljs-title class_\">WelcomeProps</span></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Witaj, {props.name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n}\n</code></pre>\n<p><strong>Co zyskujesz?</strong></p>\n<ul>\n<li>Edytor podpowiada, co możesz przekazać,</li>\n<li>Błyskawicznie wykrywasz literówki i brakujące dane,</li>\n<li>Tworzysz samodokumentujące się komponenty!</li>\n</ul>\n<hr>\n<h2 id=\"typowanie-stanu-usestate\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-stanu-usestate\">>></a>Typowanie stanu (useState)</h2>\n<p>Chcesz jasno określić, co przechowujesz w stanie? Z TypeScriptem to proste:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState&#x3C;<span class=\"hljs-built_in\">number</span>>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Licznik: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount((prev) => prev - 1)}>Zmniejsz<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount((prev) => prev + 1)}>Zwiększ<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<blockquote>\n<p>⭐ <strong>Pro tip:</strong> Przy bardziej złożonych stanach (np. obiekty, tablice) – zawsze wpisuj typ ręcznie, nawet jeśli TypeScript czasem sam się domyśli!</p>\n</blockquote>\n<hr>\n<h2 id=\"typowanie-referencji-useref\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-referencji-useref\">>></a>Typowanie referencji (useRef)</h2>\n<p>Referencje to Twój most do DOM-u i wartości poza renderem:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { useRef, useCallback } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> ref = useRef&#x3C;<span class=\"hljs-title class_\">HTMLButtonElement</span>>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-keyword\">const</span> handleClick = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =></span> {\n    ref.<span class=\"hljs-property\">current</span>?.<span class=\"hljs-title function_\">focus</span>();\n  }, [ref]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleClick}</span>></span>\n        Kliknij aby sfokusować drugi przycisk\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{ref}</span>></span>Drugi przycisk<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>Dzięki typowaniu masz pewność, do jakiego elementu się odwołujesz (<code>HTMLButtonElement</code>).</p>\n<hr>\n<h2 id=\"przydatne-narzędzia-i-wskazówki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przydatne-narzędzia-i-wskazówki\">>></a>Przydatne narzędzia i wskazówki</h2>\n<ul>\n<li><strong>TSX</strong> – pliki <code>.tsx</code> pozwalają pisać JSX z typami!</li>\n<li><strong>TypeScript Playground</strong> – testuj kod online: <a href=\"https://www.typescriptlang.org/play\">https://www.typescriptlang.org/play</a></li>\n<li><strong>Oficjalna dokumentacja React + TypeScript:</strong> <a href=\"https://react.dev/learn/typescript\">https://react.dev/learn/typescript</a></li>\n<li><strong>Chcesz szybko wystartować?</strong>\n<pre><code class=\"hljs language-bash\">npm init vite@latest my-app -- --template react-ts\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1-prosty-komponent-powitalny\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-prosty-komponent-powitalny\">>>></a>Zadanie 1: Prosty komponent powitalny</h3>\n<p>Stwórz komponent powitalny, który przyjmuje przez props imię użytkownika (typ string) i wyświetla komunikat \"Cześć, [imię]!\".</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-typowanie-tablicy-liczb\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-typowanie-tablicy-liczb\">>>></a>Zadanie 2: Typowanie tablicy liczb</h3>\n<p>Zadeklaruj w komponencie tablicę liczb jako stan przy użyciu useState oraz odpowiedniego typu.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">NumbersComponent</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [numbers, setNumbers] = useState&#x3C;<span class=\"hljs-built_in\">number</span>[]>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>{numbers.join(\", \")}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n};\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-komponent-z-typowanymi-propsami-i-zdarzeniem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-komponent-z-typowanymi-propsami-i-zdarzeniem\">>>></a>Zadanie 3: Komponent z typowanymi propsami i zdarzeniem</h3>\n<p>Stwórz przycisk, który przyjmuje przez props funkcję onClick oraz tekst do wyświetlenia. Oba propsy odpowiednio wytypuj.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">ButtonProps</span> = {\n  <span class=\"hljs-attr\">label</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">onClick</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">void</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CustomButton</span> = (<span class=\"hljs-params\">{ label, onClick }: <span class=\"hljs-title class_\">ButtonProps</span></span>) => (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>></span>{label}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-typowanie-obiektu-w-stanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-typowanie-obiektu-w-stanie\">>>></a>Zadanie 4: Typowanie obiektu w stanie</h3>\n<p>Zadeklaruj stan użytkownika jako obiekt z polami name (string) i age (number).</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">User</span> = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">UserComponent</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [user, setUser] = useState&#x3C;<span class=\"hljs-title class_\">User</span>>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Anna\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">28</span> });\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      {user.name}, wiek: {user.age}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-5-lista-komponentów-na-podstawie-tablicy-obiektów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-lista-komponentów-na-podstawie-tablicy-obiektów\">>>></a>Zadanie 5: Lista komponentów na podstawie tablicy obiektów</h3>\n<p>Zadeklaruj tablicę użytkowników (name: string, id: number) i wyświetl imiona w liście.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">User</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">users</span>: <span class=\"hljs-title class_\">User</span>[] = [\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Kasia\"</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Marek\"</span> },\n];\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">UserTile</span> = (<span class=\"hljs-params\"><span class=\"hljs-attr\">props</span>: { user: User }</span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>{props.user.name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span></span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">UserList</span> = (<span class=\"hljs-params\"></span>) => (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n    {users.map((user) => (\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">UserTile</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{user.id}</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">{user}</span> /></span>\n    ))}\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span></span>\n);\n</code></pre>\n</details>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Gratulacje! 🎉 Zrobiłeś właśnie pierwszy krok w świat TypeScript + React – połączenia, które sprawia, że kod staje się bardziej przewidywalny, czytelny i po prostu przyjemniejszy w pracy. Dzięki typowaniu szybciej łapiesz błędy, a Twoje komponenty są super czytelne nie tylko dla Ciebie, ale też dla całego zespołu.</p>\n<p>Nie bój się eksperymentować, zadawać pytań i sprawdzać rzeczy w praktyce. Każdy kod napisany z TypeScriptem to inwestycja w Twój rozwój jako programisty! 🚀</p>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/pierwsze-kroki-z-typescript-w-react.md"]
