[{"_1":2},"course-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_20":21,"_22":23,"_24":25,"_77":78,"_79":80,"_81":82,"_83":84,"_85":86},"title","Pierwsze kroki z TypeScript w React – praktyczne podstawy","description","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.","keywords",[11,12,13,14,15,16,17,18,19],"typescript","react","frontend","nauka","komponenty","props","state","kurs","learning","categories",[11,12],"createdAt","2025-06-22T00:00:00.000Z","quiz",{"_5":26,"_27":28},"Quiz: TypeScript w React – podstawy","questions",[29,42,51,60,68],{"_30":31,"_32":33,"_38":39,"_40":41},"question","<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>","options",[34,35,36,37],"Generuje automatycznie dokumentację komponentów.","Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Zamienia kod na czysty CSS.","Eliminuje konieczność używania npm.","answer",1,"explanation","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_30":43,"_32":44,"_38":49,"_40":50},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[45,46,47,48],"const [count, setCount] = useState(0: number);","const [count, setCount] = useState<string>(0);","let count = useState(0);","const [count, setCount] = useState<number>(0);",3,"Poprawna składnia to useState<number>(0).",{"_30":52,"_32":53,"_38":58,"_40":59},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[54,55,56,57],"Nie trzeba typować propsów w TS.","Tylko poprzez klasę.","Przez interface lub type i przekazać go do propsów funkcji.","Wyłącznie przez any.",2,"Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_30":61,"_32":62,"_38":58,"_40":67},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[63,64,65,66],"const ref = useRef<Button>(null);","const ref = useRef(null);","const ref = useRef<HTMLButtonElement>(null);","const ref = useRef<HTMLDivElement>(null);","Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_30":69,"_32":70,"_38":75,"_40":76},"<p>Co wyświetli poniższy komponent?nn<code>tsxntype WelcomeProps = { name: string };nconst Welcome = ({ name }: WelcomeProps) => &#x3C;p>Cześć, {name}!&#x3C;/p>;n</code>nJeśli wywołasz <code>&#x3C;Welcome name='Ala' /></code></p>",[71,72,73,74],"Cześć, Ala!","Błąd kompilacji","undefined","Witaj, Ala!",0,"Komponent wyświetli 'Cześć, Ala!'.","id","c8e96990-7484-41c6-88d6-377cda26a7c3","slug","pierwsze-kroki-z-typescript-w-react","content","<p>Witaj w świecie <strong>Reacta</strong> połączonego z <strong>TypeScriptem</strong>! 🚀 Jeśli chcesz pisać nowoczesne aplikacje i mieć pewność, że Twój kod jest czysty, bezpieczny i przyszłościowy, to właśnie znalazłeś/aś odpowiednie narzędzie. TypeScript w połączeniu z React to duet, który pokochasz od pierwszego projektu! Ten przewodnik przeprowadzi Cię krok po kroku przez najważniejsze podstawy – bez zbędnych teorii, za to z praktycznymi przykładami i zadaniami, które pomogą Ci naprawdę zrozumieć temat. ✨</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#dlaczego-warto-u%C5%BCywa%C4%87-typescript-w-react\">Dlaczego warto używać TypeScript w React?</a></li>\n<li><a href=\"#podstawowe-typy-w-typescript\">Podstawowe typy w TypeScript</a></li>\n<li><a href=\"#tworzenie-komponent%C3%B3w-funkcyjnych-z-typami\">Tworzenie komponentów funkcyjnych z typami</a></li>\n<li><a href=\"#props-i-typowanie-props%C3%B3w\">Props i typowanie propsów</a></li>\n<li><a href=\"#typowanie-stanu-usestate\">Typowanie stanu (useState)</a></li>\n<li><a href=\"#typowanie-referencji-useref\">Typowanie referencji (useRef)</a></li>\n<li><a href=\"#przydatne-narz%C4%99dzia-i-wskaz%C3%B3wki\">Przydatne narzędzia i wskazówki</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1-prosty-komponent-powitalny\">Zadanie 1: Prosty komponent powitalny</a></li>\n<li><a href=\"#zadanie-2-typowanie-tablicy-liczb\">Zadanie 2: Typowanie tablicy liczb</a></li>\n<li><a href=\"#zadanie-3-komponent-z-typowanymi-propsami-i-zdarzeniem\">Zadanie 3: Komponent z typowanymi propsami i zdarzeniem</a></li>\n<li><a href=\"#zadanie-4-typowanie-obiektu-w-stanie\">Zadanie 4: Typowanie obiektu w stanie</a></li>\n<li><a href=\"#zadanie-5-lista-komponent%C3%B3w-na-podstawie-tablicy-obiekt%C3%B3w\">Zadanie 5: Lista komponentów na podstawie tablicy obiektów</a></li>\n</ul>\n</li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"dlaczego-warto-używać-typescript-w-react\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-warto-używać-typescript-w-react\">>></a>Dlaczego warto używać TypeScript w React?</h2>\n<p>TypeScript to nie tylko “lepszy JavaScript” – to Twoja tajna broń na błędy w kodzie! Dzięki niemu:</p>\n<ul>\n<li>🛡️ <strong>Kod jest bardziej przewidywalny i bezpieczniejszy</strong> – typy wykrywają literówki i błędy logiczne już podczas pisania. To jak posiadanie prywatnego asystenta, który sprawdza Twój kod na bieżąco!</li>\n<li>⚡ <strong>Praca w zespole staje się łatwiejsza</strong> – czytelny kod, lepsze podpowiedzi w edytorze (IntelliSense), szybkie ogarnianie cudzych projektów. Koniec z \"zgadywaniem\" jakie dane funkcja przyjmuje!</li>\n<li>🔄 <strong>Refaktoryzacje nie są już straszne</strong> – zmiany w typach wymuszają poprawki w całym projekcie, więc nic Ci nie umknie. TypeScript prowadzi Cię za rękę przez proces zmian.</li>\n<li>📖 <strong>Typy to żywa dokumentacja</strong> – od razu wiesz, co i gdzie przekazujesz do komponentów oraz funkcji. Twój kod staje się samoopisujący.</li>\n</ul>\n<p>W React TypeScript to must-have, jeśli chcesz:</p>\n<ul>\n<li>jasno typować <strong>propsy</strong> i <strong>stan</strong> (<code>useState</code>, <code>useReducer</code>),</li>\n<li>wygodnie pracować z <strong>referencjami</strong> (<code>useRef</code>),</li>\n<li>bez obaw korzystać z zewnętrznych bibliotek i API.</li>\n</ul>\n<hr>\n<h2 id=\"podstawowe-typy-w-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-typy-w-typescript\">>></a>Podstawowe typy w TypeScript</h2>\n<p>Najczęściej spotkasz się z podstawowymi typami, które pomogą Ci kontrolować dane w Twojej aplikacji:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userName</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Alice\"</span>; <span class=\"hljs-comment\">// Tekst</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userAge</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">25</span>; <span class=\"hljs-comment\">// Liczba</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">isActive</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Wartość logiczna (prawda/fałsz)</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">primes</span>: <span class=\"hljs-built_in\">number</span>[] = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>]; <span class=\"hljs-comment\">// Tablica liczb</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userProfile</span>: { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span> } = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> }; <span class=\"hljs-comment\">// Obiekt</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">anyValue</span>: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-string\">\"Can be anything!\"</span>; <span class=\"hljs-comment\">// Typ 'any' - używaj z ostrożnością! Wyłącza sprawdzanie typów.</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">unknownValue</span>: <span class=\"hljs-built_in\">unknown</span> = <span class=\"hljs-number\">123</span>; <span class=\"hljs-comment\">// Typ 'unknown' - bezpieczniejsza alternatywa dla 'any', wymaga sprawdzenia typu.</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userStatus</span>: <span class=\"hljs-string\">\"active\"</span> | <span class=\"hljs-string\">\"inactive\"</span> = <span class=\"hljs-string\">\"active\"</span>; <span class=\"hljs-comment\">// Literał (union type) - tylko te dwie wartości są dozwolone.</span>\n</code></pre>\n<p>Chcesz być PRO? Twórz własne <strong>typy</strong> i <strong>interfejsy</strong> – kod będzie czytelniejszy i łatwiejszy do rozbudowy:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Przykład użycia 'type'</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">User</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">email</span>?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// Opcjonalne pole</span>\n};\n\n<span class=\"hljs-comment\">// Przykład użycia 'interface'</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Product</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">description</span>?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// Opcjonalne pole</span>\n  <span class=\"hljs-attr\">onSale</span>: <span class=\"hljs-built_in\">boolean</span>;\n}\n</code></pre>\n<p><strong><code>type</code> vs <code>interface</code></strong>\nChoć często używane zamiennie, istnieją pewne różnice. <code>interface</code> może być rozszerzany i implementowany przez klasy, <code>type</code> jest bardziej elastyczny do tworzenia aliasów typów złożonych (np. unii). W prostych przypadkach, takich jak definicja propsów, wybór między <code>type</code> a <code>interface</code> często sprowadza się do preferencji.</p>\n<blockquote>\n<p>💡 <strong>TIP:</strong> Korzystaj z własnych typów (<code>type</code> lub <code>interface</code>) zawsze, gdy masz złożone obiekty, struktury danych lub korzystasz z API! Ułatwi to debugowanie i utrzymanie kodu.</p>\n</blockquote>\n<hr>\n<h2 id=\"tworzenie-komponentów-funkcyjnych-z-typami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tworzenie-komponentów-funkcyjnych-z-typami\">>></a>Tworzenie komponentów funkcyjnych z typami</h2>\n<p>Najprostszy komponent funkcyjny w TypeScript, który nie przyjmuje żadnych propsów, nie wymaga jawnego typowania:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">HelloWorld</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, World!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}\n</code></pre>\n<p>Jeśli komponent nie przyjmuje żadnych propsów, TypeScript sam to zrozumie. Jeśli jednak chcesz być super precyzyjny (i czasami jest to wymagane przez lintery lub pewne schematy projektowe), możesz użyć typu <code>React.FC</code> (Functional Component) lub <code>React.FunctionComponent</code>.</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">FC</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SimpleComponent</span>: <span class=\"hljs-variable constant_\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>This is a simple component.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n};\n\n<span class=\"hljs-comment\">// lub bardziej zwięźle</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">AnotherSimpleComponent</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Another simple component.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n};\n</code></pre>\n<p>Zauważ, że importujemy <code>FC</code> bezpośrednio z pakietu <code>react</code>, a nie cały obiekt <code>React</code>.</p>\n<hr>\n<h2 id=\"props-i-typowanie-propsów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#props-i-typowanie-propsów\">>></a>Props i typowanie propsów</h2>\n<p>Propsy to podstawa przekazywania danych do komponentów w React! W TypeScript opisujesz je przez <strong>interfejs</strong> lub <strong>typ</strong>, a następnie wskazujesz ten typ jako argument komponentu.</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">WelcomeProps</span> {\n  <span class=\"hljs-attr\">userName</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>?: <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-comment\">// Opcjonalny prop</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Welcome</span>(<span class=\"hljs-params\">{ userName, age }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n      Hello, {userName}! {age &#x26;&#x26; `You are ${age} years old.`} 👋\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n  );\n}\n\n<span class=\"hljs-comment\">// Użycie komponentu:</span>\n<span class=\"hljs-comment\">// &#x3C;Welcome userName=\"Alice\" /></span>\n<span class=\"hljs-comment\">// &#x3C;Welcome userName=\"Bob\" age={30} /></span>\n</code></pre>\n<p><strong>Co zyskujesz?</strong></p>\n<ul>\n<li><strong>IntelliSense:</strong> Edytor podpowiada, jakie propsy są dostępne i jakiego są typu, gdy piszesz <code>&#x3C;Welcome ...</code>.</li>\n<li><strong>Wykrywanie błędów na etapie kompilacji:</strong> Jeśli zapomnisz przekazać wymagany prop, lub przekazujesz go z niewłaściwym typem, TypeScript od razu Cię o tym poinformuje.</li>\n<li><strong>Samodokumentujący się kod:</strong> Definicja interfejsu propsów służy jako jasna dokumentacja dla każdego, kto używa Twojego komponentu.</li>\n</ul>\n<hr>\n<h2 id=\"typowanie-stanu-usestate\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-stanu-usestate\">>></a>Typowanie stanu (useState)</h2>\n<p>Hook <code>useState</code> pozwala komponentom funkcyjnym zarządzać ich wewnętrznym stanem. Z TypeScriptem możesz jasno określić, co przechowujesz w stanie, zwiększając tym samym bezpieczeństwo i czytelność kodu.</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState&#x3C;<span class=\"hljs-built_in\">number</span>>(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// Jawnie typujemy stan jako 'number'</span>\n  <span class=\"hljs-keyword\">const</span> [message, setMessage] = useState&#x3C;<span class=\"hljs-built_in\">string</span>>(<span class=\"hljs-string\">\"Hello\"</span>); <span class=\"hljs-comment\">// Jawnie typujemy stan jako 'string'</span>\n  <span class=\"hljs-keyword\">const</span> [isActive, setIsActive] = useState&#x3C;<span class=\"hljs-built_in\">boolean</span>>(<span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// Jawnie typujemy stan jako 'boolean'</span>\n\n  <span class=\"hljs-comment\">// Przykład złożonego stanu: obiekt</span>\n  <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserProfile</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-attr\">email</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-attr\">isLoggedIn</span>: <span class=\"hljs-built_in\">boolean</span>;\n  }\n  <span class=\"hljs-keyword\">const</span> [user, setUser] = useState&#x3C;<span class=\"hljs-title class_\">UserProfile</span>>({\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John Doe\"</span>,\n    <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"john@example.com\"</span>,\n    <span class=\"hljs-attr\">isLoggedIn</span>: <span class=\"hljs-literal\">false</span>,\n  });\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Counter:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Current count: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount((prevCount) => prevCount - 1)}>\n        Decrement\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount((prevCount) => prevCount + 1)}>\n        Increment\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Message:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{message}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setMessage(\"Updated message!\")}>\n        Update Message\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>User Profile:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Name: {user.name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Email: {user.email}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Logged In: {user.isLoggedIn ? \"Yes\" : \"No\"}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setUser({ ...user, isLoggedIn: !user.isLoggedIn })}\n      >\n        Toggle Login Status\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<blockquote>\n<p>⭐ <strong>Pro tip:</strong> Przy bardziej złożonych stanach (np. obiekty, tablice) – zawsze jawnie wpisuj typ. Nawet jeśli TypeScript czasem sam się domyśli (tzw. inferencja typów), jawne typowanie jest bardziej czytelne i odporne na błędy, zwłaszcza gdy stan może być początkowo <code>null</code> lub pustą tablicą.</p>\n</blockquote>\n<hr>\n<h2 id=\"typowanie-referencji-useref\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-referencji-useref\">>></a>Typowanie referencji (useRef)</h2>\n<p>Hook <code>useRef</code> służy do tworzenia referencji do elementów DOM lub do przechowywania wartości, które mają przetrwać ponowne renderowanie komponentu, ale nie wywołują go. Z TypeScriptem musisz jawnie określić, do jakiego typu elementu lub wartości odwołuje się referencja.</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { useRef, useCallback } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FocusButton</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Typujemy ref jako referencję do elementu HTMLButtonElement,</span>\n  <span class=\"hljs-comment\">// która może być null, zanim ref zostanie przypisany do elementu DOM.</span>\n  <span class=\"hljs-keyword\">const</span> buttonRef = useRef&#x3C;<span class=\"hljs-title class_\">HTMLButtonElement</span>>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-keyword\">const</span> handleClick = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// Używamy operatora łańcuchowania opcjonalnego (?.) aby upewnić się,</span>\n    <span class=\"hljs-comment\">// że buttonRef.current nie jest null przed wywołaniem focus().</span>\n    buttonRef.<span class=\"hljs-property\">current</span>?.<span class=\"hljs-title function_\">focus</span>();\n  }, []); <span class=\"hljs-comment\">// useCallback bez zależności, ponieważ buttonRef jest stały.</span>\n\n  <span class=\"hljs-comment\">// Przykład referencji do przechowywania wartości, która nie jest elementem DOM</span>\n  <span class=\"hljs-keyword\">const</span> counterRef = useRef&#x3C;<span class=\"hljs-built_in\">number</span>>(<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Current value in counterRef:\"</span>, counterRef.<span class=\"hljs-property\">current</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">incrementCounter</span> = (<span class=\"hljs-params\"></span>) => {\n    counterRef.<span class=\"hljs-property\">current</span> += <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"New value in counterRef:\"</span>, counterRef.<span class=\"hljs-property\">current</span>);\n    <span class=\"hljs-comment\">// Zauważ, że zmiana counterRef.current nie spowoduje ponownego renderowania!</span>\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Focus Button Example:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleClick}</span>></span>Click to focus the other button<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{buttonRef}</span>></span>Another Button<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Ref for value storage:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Check console for counterRef value. It won't update UI directly.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{incrementCounter}</span>></span>Increment Counter in Ref<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>Dzięki typowaniu masz pewność, do jakiego elementu się odwołujesz (<code>HTMLButtonElement</code>) i jakie ma on właściwości/metody. Typy <code>HTMLElement</code>, <code>HTMLDivElement</code>, <code>HTMLInputElement</code> itp. są wbudowane w bibliotekę DOM.</p>\n<hr>\n<h2 id=\"przydatne-narzędzia-i-wskazówki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przydatne-narzędzia-i-wskazówki\">>></a>Przydatne narzędzia i wskazówki</h2>\n<ul>\n<li><strong>TSX (lub JSX z TypeScriptem)</strong> – Twoje pliki React powinny mieć rozszerzenie <code>.tsx</code> (lub <code>.jsx</code> jeśli używasz React w trybie TypeScript, ale <code>.tsx</code> jest standardem). Pozwalają one na mieszanie składni JSX z typami TypeScript!</li>\n<li><strong>TypeScript Playground</strong> – idealne narzędzie do szybkiego testowania kodu TypeScript online bez konfiguracji środowiska:\n<code>https://www.typescriptlang.org/play</code></li>\n<li><strong>Oficjalna dokumentacja React + TypeScript:</strong> Zawsze warto zajrzeć do źródła – dokumentacja Reacta ma dedykowaną sekcję o TypeScript:\n<code>https://react.dev/learn/typescript</code></li>\n<li><strong>Chcesz szybko wystartować z nowym projektem?</strong> Użyj Vite z szablonem React + TypeScript:\n<pre><code class=\"hljs language-bash\">npm create vite@latest my-react-ts-app -- --template react-ts\n</code></pre>\nTo polecenie automatycznie skonfiguruje projekt z Vite, Reactem i TypeScriptem, gotowy do pracy od razu.</li>\n</ul>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<p>Poniższe zadania pomogą Ci utrwalić wiedzę o podstawach typowania w React z TypeScriptem. Stwórz nowy projekt React z Vite (jeśli jeszcze tego nie zrobiłeś/aś za pomocą polecenia <code>npm create vite@latest my-react-ts-app -- --template react-ts</code>), a następnie wykonaj w nim poniższe zadania, tworząc osobne komponenty w katalogu <code>src/components</code>. Pamiętaj, aby importować tylko te Hooki i funkcje, których potrzebujesz!</p>\n<h3 id=\"zadanie-1-prosty-komponent-powitalny\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-prosty-komponent-powitalny\">>>></a>Zadanie 1: Prosty komponent powitalny</h3>\n<p>Stwórz komponent funkcyjny <code>Greeting</code>, który przyjmuje przez props imię użytkownika (<code>userName</code> typu <code>string</code>) i wyświetla komunikat \"Hello, [userName]!\".</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// src/components/Greeting.tsx</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">GreetingProps</span> {\n  <span class=\"hljs-attr\">userName</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Greeting</span> = (<span class=\"hljs-params\">{ userName }: <span class=\"hljs-title class_\">GreetingProps</span></span>) => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Hello, {userName}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Greeting</span>;\n\n<span class=\"hljs-comment\">// src/App.tsx (przykładowe użycie)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Greeting</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/Greeting\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Greeting</span> <span class=\"hljs-attr\">userName</span>=<span class=\"hljs-string\">\"Alice\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Greeting</span> <span class=\"hljs-attr\">userName</span>=<span class=\"hljs-string\">\"Bob\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-typowanie-tablicy-liczb\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-typowanie-tablicy-liczb\">>>></a>Zadanie 2: Typowanie tablicy liczb</h3>\n<p>Zadeklaruj w komponencie <code>NumberList</code> tablicę liczb jako stan przy użyciu <code>useState</code> oraz odpowiedniego typu. Wyświetl te liczby.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// src/components/NumberList.tsx</span>\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">NumberList</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [numbers, setNumbers] = useState&#x3C;<span class=\"hljs-built_in\">number</span>[]>([<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Numbers:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        {numbers.map((num, index) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>></span>{num}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">NumberList</span>;\n\n<span class=\"hljs-comment\">// src/App.tsx (przykładowe użycie)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">NumberList</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/NumberList\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">NumberList</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-komponent-z-typowanymi-propsami-i-zdarzeniem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-komponent-z-typowanymi-propsami-i-zdarzeniem\">>>></a>Zadanie 3: Komponent z typowanymi propsami i zdarzeniem</h3>\n<p>Stwórz komponent <code>ClickableButton</code>, który przyjmuje przez props <code>label</code> (tekst do wyświetlenia na przycisku, <code>string</code>) oraz <code>onClick</code> (funkcję, która ma być wywołana po kliknięciu). Oba propsy odpowiednio wytypuj.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// src/components/ClickableButton.tsx</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ClickableButtonProps</span> {\n  <span class=\"hljs-attr\">label</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">onClick</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">void</span>; <span class=\"hljs-comment\">// Funkcja, która nic nie przyjmuje i nic nie zwraca</span>\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ClickableButton</span> = (<span class=\"hljs-params\">{ label, onClick }: <span class=\"hljs-title class_\">ClickableButtonProps</span></span>) => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>></span>{label}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ClickableButton</span>;\n\n<span class=\"hljs-comment\">// src/App.tsx (przykładowe użycie)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ClickableButton</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/ClickableButton\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleButtonClick</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"Button clicked!\"</span>);\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ClickableButton</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"Click Me\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleButtonClick}</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-typowanie-obiektu-w-stanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-typowanie-obiektu-w-stanie\">>>></a>Zadanie 4: Typowanie obiektu w stanie</h3>\n<p>Zadeklaruj stan użytkownika w komponencie <code>UserProfile</code> jako obiekt z polami <code>firstName</code> (string), <code>lastName</code> (string) i <code>age</code> (number). Wyświetl te informacje.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// src/components/UserProfile.tsx</span>\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">UserProfile</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [user, setUser] = useState&#x3C;<span class=\"hljs-title class_\">User</span>>({\n    <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">\"Jane\"</span>,\n    <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">\"Doe\"</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>,\n  });\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>User Profile:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n        Name: {user.firstName} {user.lastName}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Age: {user.age}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setUser({ ...user, age: user.age + 1 })}>\n        Increment Age\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">UserProfile</span>;\n\n<span class=\"hljs-comment\">// src/App.tsx (przykładowe użycie)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">UserProfile</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/UserProfile\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">UserProfile</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-5-lista-komponentów-na-podstawie-tablicy-obiektów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-lista-komponentów-na-podstawie-tablicy-obiektów\">>>></a>Zadanie 5: Lista komponentów na podstawie tablicy obiektów</h3>\n<p>Zadeklaruj tablicę obiektów <code>Product</code> (z polami <code>id</code>: <code>number</code>, <code>name</code>: <code>string</code>, <code>price</code>: <code>number</code>) i wyświetl każdy produkt jako osobny element listy (<code>&#x3C;li></code>), korzystając z komponentu <code>ProductItem</code>. Pamiętaj o kluczu <code>key</code>!</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// src/components/ProductItem.tsx</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Product</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ProductItemProps</span> {\n  <span class=\"hljs-attr\">product</span>: <span class=\"hljs-title class_\">Product</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ProductItem</span> = (<span class=\"hljs-params\">{ product }: <span class=\"hljs-title class_\">ProductItemProps</span></span>) => (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>\n    {product.name} - ${product.price.toFixed(2)}\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span></span>\n);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ProductItem</span>;\n\n<span class=\"hljs-comment\">// src/components/ProductList.tsx</span>\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ProductItem</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./ProductItem\"</span>; <span class=\"hljs-comment\">// Importuj komponent ProductItem</span>\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Product</span> {\n  <span class=\"hljs-comment\">// Ponownie definiujemy interfejs, lub importujemy go z pliku typów, jeśli jest globalny</span>\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ProductList</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [products, setProducts] = useState&#x3C;<span class=\"hljs-title class_\">Product</span>[]>([\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Laptop\"</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">1200</span> },\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Mouse\"</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">25</span> },\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Keyboard\"</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">75</span> },\n  ]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Our Products:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        {products.map((product) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProductItem</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{product.id}</span> <span class=\"hljs-attr\">product</span>=<span class=\"hljs-string\">{product}</span> /></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ProductList</span>;\n\n<span class=\"hljs-comment\">// src/App.tsx (przykładowe użycie)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ProductList</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/ProductList\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProductList</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Gratulacje! 🎉 Zrobiłeś właśnie pierwszy krok w świat TypeScript + React – połączenia, które sprawia, że kod staje się bardziej przewidywalny, czytelny i po prostu przyjemniejszy w pracy. Dzięki typowaniu szybciej łapiesz błędy, a Twoje komponenty są super czytelne nie tylko dla Ciebie, ale też dla całego zespołu.</p>\n<p>Nie bój się eksperymentować, zadawać pytań i sprawdzać rzeczy w praktyce. Każdy kod napisany z TypeScriptem to inwestycja w Twój rozwój jako programisty! 🚀</p>","resourceUrl","/app/content/courses/pierwsze-kroki-z-typescript-w-react.md","readingTime","10 minut"]
