[{"_1":2},"course-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_24":25,"_26":27,"_28":29,"_80":81,"_82":83,"_84":85,"_86":87,"_88":89},"title","Wprowadzenie do TypeScript","description","Hej, programisto! 👋 Chcesz przenieść swój JavaScript na wyższy poziom? Dowiedz się, czym jest TypeScript, jak go zainstalować, jak zacząć z nim kodować i dlaczego to właśnie on może być Twoim najlepszym kumplem w tworzeniu niezawodnych aplikacji! Przystępny przewodnik dla początkujących z mnóstwem przykładów i praktycznych wskazówek. Gotowy na typowanie? 😉","keywords",[11,12,13,14,15,16,17,18,19,20,21,22,23],"typescript","javascript","programowanie","frontend","typowanie statyczne","nauka","przewodnik","web dev","typy danych","interfejsy","klasy","enums","devtools","categories",[11],"createdAt","2025-07-06T00:00:00.000Z","quiz",{"_5":30,"_31":32},"Quiz: Wprowadzenie do TypeScript - Sprawdź się! 💪","questions",[33,46,55,63,71],{"_34":35,"_36":37,"_42":43,"_44":45},"question","<p>Czym tak naprawdę jest TypeScript w porównaniu do JavaScriptu?</p>","options",[38,39,40,41],"System do tworzenia dynamicznych szablonów HTML, alternatywa dla Pug czy Handlebars.","To rozszerzenie JavaScriptu, które dodaje statyczne typowanie i inne bajery dla deweloperów! ✨","To taki super-CSS framework, do stylizacji stron.","Język programowania bazujący na składni Pythona, ale dla frontendu.","answer",1,"explanation","Dokładnie tak! TypeScript to JavaScript na sterydach 😎 – rozszerza go o statyczne typowanie, które pomaga łapać błędy zanim kod się uruchomi, a także dostarcza mnóstwo narzędzi wspierających pisanie kodu. To prawdziwy game-changer!",{"_34":47,"_36":48,"_42":53,"_44":54},"<p>Jakie rozszerzenie mają standardowe pliki z kodem TypeScript?</p>",[49,50,51,52],".cts",".js",".ts",".json",2,"Bingo! 🎯 Pliki TypeScript najczęściej mają rozszerzenie **.ts**. Jeśli pracujesz z Reactem, często spotkasz też **.tsx**, który obsługuje składnię JSX (czyli HTML w JS/TS). Po skompilowaniu, zamieniają się w klasyczne pliki **.js**.",{"_34":56,"_36":57,"_42":53,"_44":62},"<p>Które z poniższych sposobów typowania zmiennej <code>liczba</code> na typ liczbowy jest prawidłowe w TypeScript?</p>",[58,59,60,61],"let liczba: 10 = number;","var liczba: num = 10;","let liczba: number = 10;","let liczba = number 10;","Strzał w dziesiątkę! 🎉 Poprawna i najczęściej używana składnia do typowania zmiennej to `let nazwaZmiennej: Typ = wartość;`. Pamiętaj o dwukropku i nazwie typu pisanej małymi literami (np. `number`, `string`, `boolean`).",{"_34":64,"_36":65,"_42":53,"_44":70},"<p>Jaka jest KLUCZOWA różnica między TypeScriptem a JavaScriptem?</p>",[66,67,68,69],"TypeScript nie obsługuje klas, a JavaScript tak.","JavaScript nie pozwala na tworzenie funkcji, a TypeScript tak.","TypeScript ma statyczne typowanie (sprawdzanie typów przed uruchomieniem), a JavaScript nie (sprawdza je dopiero w trakcie działania). 🧐","TypeScript działa tylko w przeglądarce, a JavaScript wszędzie.","Dokładnie tak! To właśnie **statyczne typowanie** jest największą supermocą TypeScripta! 💪 Dzięki niemu Twój edytor kodu (np. VS Code) może wychwycić mnóstwo błędów już podczas pisania, co oszczędza mnóstwo czasu i nerwów.",{"_34":72,"_36":73,"_42":78,"_44":79},"<p>Jak prawidłowo zainstalować kompilator TypeScript globalnie na swoim komputerze za pomocą npm?</p>",[74,75,76,77],"npm install typescript","npm get typescript","npm add global typescript","npm install -g typescript",3,"Brawo! 👍 Polecenie `npm install -g typescript` zainstaluje kompilator `tsc` globalnie, dzięki czemu będziesz mógł go używać z dowolnego miejsca w terminalu. Litera `-g` oznacza 'globalnie'!","id","41b7633a-bda5-404b-9bd1-5de256336a7c","slug","wprowadzenie-do-typescript","content","<p>Cześć! 👋 Słyszałeś/aś kiedyś o <strong>TypeScript</strong>? Jeśli już trochę kodujesz w <strong>JavaScript</strong>, to na pewno docenisz, jak bardzo może ułatwić życie! TypeScript to tak naprawdę <strong>JavaScript na sterydach</strong>, stworzony przez giganta Microsoft. Brzmi poważnie? Może trochę, ale w praktyce to Twój nowy najlepszy przyjaciel w programowaniu! 🧑‍🤝‍🧑</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#co-to-jest-typescript-i-dlaczego-warto-go-zna%C4%87\">Co to jest TypeScript i dlaczego warto go znać?</a></li>\n<li><a href=\"#typescript-vs-javascript-g%C5%82%C3%B3wne-r%C3%B3%C5%BCnice\">TypeScript vs. JavaScript: Główne Różnice</a></li>\n<li><a href=\"#dlaczego-ka%C5%BCdy-programista-powinien-korzysta%C4%87-z-typescript\">Dlaczego każdy programista powinien korzystać z TypeScript?</a></li>\n<li><a href=\"#typescript-od-zera-pierwsze-kroki-w-kodowaniu\">TypeScript od zera: Pierwsze Kroki w Kodowaniu</a>\n<ul>\n<li><a href=\"#instalacja-jak-zacz%C4%85%C4%87-swoj%C4%85-przygod%C4%99\">Instalacja: Jak zacząć swoją przygodę?</a></li>\n<li><a href=\"#kompilacja-magia-przekszta%C5%82cania-ts-w-js\">Kompilacja: Magia przekształcania <code>.ts</code> w <code>.js</code></a></li>\n<li><a href=\"#konfiguracja-projektu-i-tsconfigjson\">Konfiguracja projektu: Tajemnice <code>tsconfig.json</code></a></li>\n<li><a href=\"#tw%C3%B3j-pierwszy-projekt-typescript-hello-types\">Twój pierwszy projekt TypeScript: Hello, Types!</a></li>\n</ul>\n</li>\n<li><a href=\"#podstawy-sk%C5%82adni-typescript-typowanie-w-praktyce\">Podstawy Składni TypeScript: Typowanie w Praktyce!</a>\n<ul>\n<li><a href=\"#typowanie-zmiennych-koniec-z-niespodziankami\">Typowanie zmiennych: Koniec z niespodziankami!</a></li>\n<li><a href=\"#typowanie-funkcji-precyzyjne-wej%C5%9Bcia-i-wyj%C5%9Bcia\">Typowanie funkcji: Precyzyjne wejścia i wyjścia</a></li>\n<li><a href=\"#interfejsy-szablony-dla-twoich-obiekt%C3%B3w\">Interfejsy: Szablony dla Twoich obiektów</a></li>\n<li><a href=\"#typy-z%C5%82o%C5%BCone-gdy-jeden-typ-to-za-ma%C5%82o\">Typy złożone: Gdy jeden typ to za mało!</a></li>\n<li><a href=\"#klasy-i-dziedziczenie-oop-z-supermocami\">Klasy i dziedziczenie: OOP z supermocami</a></li>\n<li><a href=\"#enumy-%C5%82atwiejsze-zarz%C4%85dzanie-sta%C5%82ymi-warto%C5%9Bciami\">Enumy: Łatwiejsze zarządzanie stałymi wartościami</a></li>\n<li><a href=\"#alias-typ%C3%B3w-nadawanie-imion-z%C5%82o%C5%BConym-typom\">Alias typów: Nadawanie imion złożonym typom</a></li>\n</ul>\n</li>\n<li><a href=\"#jak-u%C5%BCywa%C4%87-typ%C3%B3w-w-praktyce-codzienne-scenariusze\">Jak używać typów w praktyce? Codzienne Scenariusze</a></li>\n<li><a href=\"#narz%C4%99dzia-i-integracje-twoi-pomocnicy-w-rozwoju\">Narzędzia i Integracje: Twoi Pomocnicy w Rozwoju</a></li>\n<li><a href=\"#cz%C4%99ste-pu%C5%82apki-i-praktyczne-wskaz%C3%B3wki-jak-unika%C4%87-problem%C3%B3w\">Częste Pułapki i Praktyczne Wskazówki: Jak Unikać Problemów?</a>\n<ul>\n<li><a href=\"#najcz%C4%99stsze-b%C5%82%C4%99dy-i-jak-je-naprawi%C4%87-nie-b%C3%B3j-si%C4%99-czerwonych-podkre%C5%9Ble%C5%84\">Najczęstsze błędy i jak je naprawić: Nie bój się czerwonych podkreśleń!</a></li>\n</ul>\n</li>\n<li><a href=\"#typescript-w-projektach-open-source-i-pracy-zespo%C5%82owej-graj-zespo%C5%82owo\">TypeScript w Projektach Open-Source i Pracy Zespołowej: Graj zespołowo!</a></li>\n<li><a href=\"#gdzie-znale%C5%BA%C4%87-deklaracje-typ%C3%B3w-do-bibliotek-js\">Gdzie znaleźć deklaracje typów do bibliotek JS?</a></li>\n<li><a href=\"#gdzie-szuka%C4%87-pomocy-nie-jeste%C5%9B-sam\">Gdzie szukać pomocy? Nie jesteś sam!</a></li>\n<li><a href=\"#zadania-praktyczne-%C4%87wicz-%C4%87wicz-%C4%87wicz\">Zadania Praktyczne: Ćwicz, ćwicz, ćwicz!</a></li>\n<li><a href=\"#podsumowanie-czas-na-typescript\">Podsumowanie: Czas na TypeScript!</a></li>\n</ol>\n<hr>\n<h2 id=\"co-to-jest-typescript-i-dlaczego-warto-go-znać\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-typescript-i-dlaczego-warto-go-znać\">>></a>Co to jest TypeScript i dlaczego warto go znać?</h2>\n<p>Co to znaczy, że jest \"nadzbiorem\" JavaScriptu? To proste: każdy poprawny kod, który napiszesz w <strong>JavaScript</strong>, jest również poprawnym kodem <strong>TypeScript</strong>! 🤯 To tak, jakby TypeScript był JavaScriptem, ale z dodatkowymi supermocami.</p>\n<p>Główna z tych supermocy to <strong>statyczne typowanie</strong>. Czym to jest? 🤔 Normalnie w JavaScript możesz przypisać cokolwiek do zmiennej, a błędy wyjdą dopiero, gdy program się uruchomi (czasem w najmniej odpowiednim momencie! 😱). TypeScript działa inaczej – sprawdza typy danych (czyli to, czy dana zmienna to liczba, tekst, czy może coś innego) <strong>już podczas pisania kodu</strong>. Dzięki temu, jeśli popełnisz błąd (np. spróbujesz dodać tekst do liczby), Twój edytor kodu od razu Cię o tym poinformuje, zanim w ogóle uruchomisz program! To jak mieć osobistego asystenta, który wyłapuje literówki i pomyłki za Ciebie! ✨</p>\n<p>Zapamiętaj:</p>\n<ul>\n<li><strong>JavaScript + Typy = TypeScript</strong> 🤩</li>\n<li>Pliki TypeScript poznasz po rozszerzeniu <strong><code>.ts</code></strong> (zamiast klasycznego <code>.js</code>).</li>\n<li>TypeScript nie działa bezpośrednio w przeglądarce czy Node.js. Musi być najpierw <strong>skompiowany</strong> (czyli przetłumaczony) na czysty JavaScript. Ale spokojnie, kompilator zrobi to za Ciebie! 😉</li>\n</ul>\n<hr>\n<h2 id=\"typescript-vs-javascript-główne-różnice\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typescript-vs-javascript-główne-różnice\">>></a>TypeScript vs. JavaScript: Główne Różnice</h2>\n<p>No dobrze, wiemy już, że TypeScript to JavaScript z bajerami. Ale jakie dokładnie są te różnice i dlaczego są one tak istotne dla każdego, kto chce pisać solidny kod? 🤔</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Cecha</th><th align=\"left\">JavaScript</th><th align=\"left\">TypeScript</th></tr></thead><tbody><tr><td align=\"left\"><strong>Typowanie</strong></td><td align=\"left\"><strong>Dynamiczne</strong> (sprawdza typy w trakcie działania programu)</td><td align=\"left\"><strong>Statyczne</strong> (sprawdza typy podczas pisania kodu/kompilacji)</td></tr><tr><td align=\"left\"><strong>Błędy</strong></td><td align=\"left\">Często wychodzą dopiero w czasie działania (runtime errors)</td><td align=\"left\">Wykrywane już na etapie pisania kodu (compile-time errors)</td></tr><tr><td align=\"left\"><strong>Kompilacja</strong></td><td align=\"left\">Nie wymaga kompilacji (jest interpretowany)</td><td align=\"left\">Wymaga <strong>kompilacji (transpilacji)</strong> do JavaScriptu</td></tr><tr><td align=\"left\"><strong>Wsparcie narzędzi</strong></td><td align=\"left\">Dobre, ale bez pełnej wiedzy o typach</td><td align=\"left\"><strong>Doskonałe!</strong> Podpowiedzi, autouzupełnianie, refaktoryzacje na wyższym poziomie 🚀</td></tr><tr><td align=\"left\"><strong>Pliki</strong></td><td align=\"left\"><code>.js</code> (lub <code>.jsx</code> dla Reacta)</td><td align=\"left\"><code>.ts</code> (lub <code>.tsx</code> dla Reacta)</td></tr></tbody></table>\n<p><strong>Kompilacja</strong>: To kluczowa sprawa! 🔑 Twój kod TypeScript (<code>.ts</code>) musi zostać <strong>przetłumaczony</strong> (technicznie to się nazywa <strong>transpilacja</strong>, bo to z jednego języka JavaScriptu na inną, starszą wersję JavaScriptu) na czysty JavaScript (<code>.js</code>), zanim przeglądarka albo Node.js będzie mogła go zrozumieć i uruchomić. To jak z przetłumaczeniem książki na inny język – najpierw tłumacz, potem czytaj. Kompilator TypeScripta (<code>tsc</code>) robi to błyskawicznie! ⚡️</p>\n<p><strong>Typowanie</strong>: To serce TypeScripta! ❤️ Dzięki niemu możesz określić, jakiego typu danych spodziewasz się w danym miejscu (np. <code>ta zmienna zawsze będzie liczbą</code>, <code>ta funkcja zawsze zwróci tekst</code>). Jeśli spróbujesz przypisać coś innego, TypeScript natychmiast Cię o tym poinformuje. W JavaScript takie błędy wychodzą na jaw dopiero, gdy użytkownik kliknie coś na stronie, co może doprowadzić do nieprzewidzianych crashy. 💥 W TypeScript błędy wyłapywane są <strong>wcześniej</strong>, co oszczędza mnóstwo czasu na debugowanie (czyli szukanie i naprawianie błędów)! 🕵️‍♀️</p>\n<p><strong>Lepsze wsparcie dla narzędzi</strong>: Wyobraź sobie, że Twój edytor kodu (np. super popularny VS Code) wie absolutnie wszystko o Twoim kodzie. Wie, jakie masz zmienne, jakich typów są, jakie funkcje przyjmują argumenty i co zwracają. Dzięki temu może Ci podpowiadać nazwy zmiennych, autouzupełniać kod, a nawet automatycznie refaktoryzować (czyli bezpiecznie zmieniać strukturę kodu) duże fragmenty! To jak mieć magiczną różdżkę! 🪄</p>\n<hr>\n<h2 id=\"dlaczego-każdy-programista-powinien-korzystać-z-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-każdy-programista-powinien-korzystać-z-typescript\">>></a>Dlaczego każdy programista powinien korzystać z TypeScript?</h2>\n<p>Okej, TypeScript to JavaScript z typami, rozumiem. Ale czy to naprawdę jest takie \"must-have\"? Moja odpowiedź brzmi: <strong>ZDECYDOWANIE TAK!</strong> 🙌 Oto dlaczego:</p>\n<ul>\n<li><strong>Bezpieczeństwo przede wszystkim!</strong> 🛡️ Statyczne typowanie to Twoja tarcza ochronna. Pomaga unikać tych irytujących błędów, które w JavaScript pojawiają się dopiero w trakcie działania aplikacji. Myślisz, że wysyłasz liczbę, a wysyłasz <code>undefined</code>? TypeScript powie Ci o tym od razu!</li>\n<li><strong>Kod czyta się jak dobrą książkę!</strong> 📖 Typy są jak darmowa, zawsze aktualna dokumentacja Twojego kodu. Kiedy patrzysz na funkcję <code>obliczPodatek(kwota: number, stawka: number): number</code>, od razu wiesz, że przyjmuje dwie liczby i zwraca liczbę. Koniec z zgadywaniem i przekopywaniem się przez dziesiątki linii kodu, żeby zrozumieć, co dana funkcja robi!</li>\n<li><strong>Twoje narzędzia (edytory) pokochają Cię!</strong> ❤️ VS Code (i inne edytory) z TypeScriptem to prawdziwy dream team. Dostajesz inteligentne podpowiedzi, autouzupełnianie, łatwe przechodzenie do definicji funkcji czy zmiennych. To przyspiesza pisanie kodu i zmniejsza liczbę literówek do minimum.</li>\n<li><strong>Skalowalność to podstawa dużych projektów!</strong> 📈 W małym skrypcie JavaScript brak typów może nie być problemem. Ale wyobraź sobie projekt z tysiącami linii kodu, nad którym pracuje wielu ludzi! Bez TypeScriptu taki projekt szybko staje się koszmarem. Z typami kod jest łatwiejszy do utrzymania, rozwijania i refaktoryzowania.</li>\n<li><strong>Łatwa Integracja: Nie musisz zaczynać od nowa!</strong> 🔄 Masz już istniejący projekt w JavaScript? Spokojnie! TypeScript jest tak zaprojektowany, że możesz go wprowadzać stopniowo. Możesz zmieniać pliki na <code>.ts</code> jeden po drugim, naprawiając typy w miarę potrzeb. To nie jest rewolucja, to ewolucja!</li>\n<li><strong>Popularność i Społeczność: Jesteś w dobrym towarzystwie!</strong> 🤝 TypeScript jest używany w olbrzymich projektach, takich jak Angular, Visual Studio Code, czy nawet Deno (środowisko uruchomieniowe dla JavaScriptu i TypeScriptu!). Znajomość TypeScripta to mega atut na rynku pracy!</li>\n<li><strong>Korzystaj z najnowszych funkcji JS... już dziś!</strong> 🔮 TypeScript pozwala pisać kod, używając najnowszych funkcji JavaScript (nawet tych, które jeszcze nie są wspierane przez wszystkie przeglądarki!). Kompilator zadba o to, żeby Twój kod został przetłumaczony na starszą wersję JavaScriptu, która działa wszędzie. Fajnie, prawda?</li>\n</ul>\n<p>Podsumowując, TypeScript to inwestycja w jakość, efektywność i przyszłość Twojego kodu. Warto! ✨</p>\n<hr>\n<h2 id=\"typescript-od-zera-pierwsze-kroki-w-kodowaniu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typescript-od-zera-pierwsze-kroki-w-kodowaniu\">>></a>TypeScript od zera: Pierwsze Kroki w Kodowaniu</h2>\n<p>Zacznijmy naszą przygodę z TypeScriptem! Nie martw się, to prostsze niż myślisz. Potrzebujemy tylko kilku narzędzi.</p>\n<h3 id=\"instalacja-jak-zacząć-swoją-przygodę\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#instalacja-jak-zacząć-swoją-przygodę\">>>></a>Instalacja: Jak zacząć swoją przygodę?</h3>\n<p>Zanim zaczniemy pisać kod, musimy zainstalować <strong>kompilator TypeScript</strong>. Najłatwiej zrobić to za pomocą <strong>npm</strong> (Node Package Manager), który jest instalowany razem z Node.js. Jeśli nie masz jeszcze Node.js, pobierz go stąd: <a href=\"https://nodejs.org/\">https://nodejs.org/</a>.</p>\n<p>Kiedy masz już Node.js i npm, otwórz terminal (lub wiersz poleceń) i wpisz to proste polecenie:</p>\n<pre><code class=\"hljs language-bash\">npm install -g typescript\n</code></pre>\n<p>Co tu się dzieje?</p>\n<ul>\n<li><code>npm install</code>: To standardowe polecenie do instalacji pakietów.</li>\n<li><code>-g</code>: To flaga oznacza \"globalnie\". Zainstalowanie TypeScripta globalnie pozwoli Ci używać kompilatora <code>tsc</code> (TypeScript Compiler) z dowolnego miejsca w systemie, a nie tylko w konkretnym projekcie. Mega wygodne!</li>\n<li><code>typescript</code>: To nazwa pakietu, który chcemy zainstalować.</li>\n</ul>\n<p>Po instalacji możesz sprawdzić, czy wszystko poszło gładko, wpisując:</p>\n<pre><code class=\"hljs language-bash\">tsc --version\n</code></pre>\n<p>Jeśli zobaczysz numer wersji (np. <code>Version 5.x.x</code>), to znaczy, że jesteś gotowy/a do kodowania! 🎉</p>\n<p><strong>Alternatywa: Instalacja lokalna w projekcie</strong>\nMożesz też zainstalować TypeScript tylko dla konkretnego projektu. To dobra praktyka, gdy pracujesz w zespole i chcesz, żeby wszyscy używali tej samej wersji TypeScriptu.</p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev typescript\n</code></pre>\n<p>W tym przypadku będziesz musiał/a używać <code>npx tsc</code> zamiast samego <code>tsc</code>, aby uruchomić kompilator (bo <code>tsc</code> nie będzie dostępne globalnie).</p>\n<h3 id=\"kompilacja-magia-przekształcania-ts-w-js\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#kompilacja-magia-przekształcania-ts-w-js\">>>></a>Kompilacja: Magia przekształcania <code>.ts</code> w <code>.js</code></h3>\n<p>Jak już wiesz, przeglądarki nie rozumieją TypeScriptu. Rozumieją tylko JavaScript. Dlatego nasz kod <code>.ts</code> musi zostać <strong>skompliowany</strong> (lub <strong>transpilowany</strong>) na <code>.js</code>. Robi to właśnie kompilator <code>tsc</code>.</p>\n<p>Załóżmy, że masz plik <code>moja-apka.ts</code> z takim kodem:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// moja-apka.ts</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">wiadomosc</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Cześć, świecie z TypeScript!\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wiadomosc);\n</code></pre>\n<p>Aby go skompilować, użyj polecenia w terminalu (w katalogu, gdzie jest plik <code>moja-apka.ts</code>):</p>\n<pre><code class=\"hljs language-bash\">tsc moja-apka.ts\n</code></pre>\n<p>Po wykonaniu tego polecenia, obok pliku <code>moja-apka.ts</code> pojawi się nowy plik o nazwie <code>moja-apka.js</code>, który będzie wyglądał tak:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// moja-apka.js (wygenerowany automatycznie!)</span>\n<span class=\"hljs-keyword\">var</span> wiadomosc = <span class=\"hljs-string\">\"Cześć, świecie z TypeScript!\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wiadomosc);\n</code></pre>\n<p>Widzisz? Czysty JavaScript, gotowy do uruchomienia! 🤩</p>\n<h3 id=\"konfiguracja-projektu-i-tsconfigjson\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#konfiguracja-projektu-i-tsconfigjson\">>>></a>Konfiguracja projektu i <code>tsconfig.json</code></h3>\n<p>W małych projektach kompilowanie pojedynczych plików to pestka. Ale w większych aplikacjach, gdzie masz wiele plików i folderów, ręczne kompilowanie każdego z osobna to katorga. 😩 Tu z pomocą przychodzi plik <strong><code>tsconfig.json</code></strong>! To plik konfiguracyjny, który mówi kompilatorowi TypeScripta, jak ma się zachować – jakie pliki kompilować, gdzie je umieścić, do jakiej wersji JavaScriptu konwertować i wiele, wiele więcej.</p>\n<p>Aby wygenerować podstawowy plik <code>tsconfig.json</code> w swoim projekcie, przejdź do głównego katalogu projektu w terminalu i wpisz:</p>\n<pre><code class=\"hljs language-bash\">tsc --init\n</code></pre>\n<p>To polecenie stworzy plik <code>tsconfig.json</code> z domyślnymi, często używanymi ustawieniami. Otwórz go w edytorze kodu – zobaczysz mnóstwo skomentowanych opcji. Na początek skupmy się na kilku kluczowych:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"compilerOptions\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"target\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"es2016\"</span> <span class=\"hljs-comment\">/* Określa docelową wersję ECMAScript (JavaScript). Np. \"es5\", \"es6\" (lub \"es2015\"), \"es2016\", \"esnext\".  Ustawienie na \"es2016\" (lub nowsze) oznacza, że kompilator wygeneruje JavaScript z nowoczesną składnią. */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"module\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"commonjs\"</span> <span class=\"hljs-comment\">/* Określa system modułów dla wygenerowanego JavaScriptu. \"commonjs\" jest popularne w Node.js, \"esnext\" dla nowoczesnych przeglądarek. */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"strict\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-comment\">/* Włącza wszystkie rygorystyczne opcje sprawdzania typów. BARDZO zalecane dla większego bezpieczeństwa! 🔒 */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"outDir\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"./dist\"</span> <span class=\"hljs-comment\">/* Określa katalog wyjściowy dla skompilowanych plików .js. Cały nasz skompilowany kod trafi do folderu 'dist'. */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"esModuleInterop\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-comment\">/* Pozwala na lepszą współpracę między CommonJS i ES Modules. Warto włączyć. */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"forceConsistentCasingInFileNames\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-comment\">/* Wymusza spójność w nazwach plików (np. `mojaKlasa.ts` vs `mojaklasa.ts`). Zapobiega błędom na różnych systemach operacyjnych. */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"skipLibCheck\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-comment\">/* Pomija sprawdzanie typów w plikach deklaracji bibliotek (np. node_modules/@types). Przydatne, aby uniknąć błędów z typami z zewnętrznych bibliotek. */</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"include\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">\"src/**/*\"</span> <span class=\"hljs-comment\">/* Określa, które pliki i foldery mają być kompilowane. Tutaj: wszystkie pliki we folderze 'src' i jego podfolderach. */</span>\n  <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"exclude\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">\"node_modules\"</span> <span class=\"hljs-comment\">/* Określa, które pliki i foldery mają być IGNOROWANE podczas kompilacji. */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">\"**/*.spec.ts\"</span> <span class=\"hljs-comment\">/* Typowy wzorzec wykluczania plików testowych */</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>Po utworzeniu pliku <code>tsconfig.json</code> wystarczy wpisać samo <code>tsc</code> w terminalu (w katalogu projektu), a kompilator automatycznie znajdzie ten plik i skompiluje wszystko zgodnie z jego wytycznymi! Magia! ✨</p>\n<h3 id=\"twój-pierwszy-projekt-typescript-hello-types\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#twój-pierwszy-projekt-typescript-hello-types\">>>></a>Twój pierwszy projekt TypeScript: Hello, Types!</h3>\n<p>No to jedziemy! Stwórzmy nasz pierwszy mały projekt TypeScript.</p>\n<ol>\n<li>\n<p><strong>Stwórz nowy folder projektu i wejdź do niego:</strong></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> moj-pierwszy-projekt-ts\n<span class=\"hljs-built_in\">cd</span> moj-pierwszy-projekt-ts\n</code></pre>\n</li>\n<li>\n<p><strong>Zainicjuj npm (stworzy plik <code>package.json</code>):</strong></p>\n<pre><code class=\"hljs language-bash\">npm init -y\n</code></pre>\n<p>Flaga <code>-y</code> oznacza, że zgadzasz się na domyślne ustawienia i nie będziesz musiał/a klikać Enter wiele razy.</p>\n</li>\n<li>\n<p><strong>Zainstaluj TypeScript jako zależność deweloperską:</strong></p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev typescript\n</code></pre>\n<p><code>--save-dev</code> oznacza, że TypeScript jest potrzebny tylko podczas rozwoju, a nie w finalnej wersji aplikacji.</p>\n</li>\n<li>\n<p><strong>Wygeneruj plik <code>tsconfig.json</code>:</strong></p>\n<pre><code class=\"hljs language-bash\">npx tsc --init\n</code></pre>\n<p><code>npx</code> pozwala uruchomić polecenie <code>tsc</code> zainstalowane lokalnie w projekcie (zamiast globalnie).\nOtwórz <code>tsconfig.json</code> i upewnij się, że <code>outDir</code> jest ustawione na <code>./dist</code> i <code>include</code> na <code>\"src/**/*\"</code>. Możesz też zmienić <code>target</code> na <code>es2020</code> dla nowocześniejszego kodu wyjściowego.</p>\n</li>\n<li>\n<p><strong>Stwórz folder <code>src</code> i plik <code>index.ts</code> w środku:</strong></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> src\n<span class=\"hljs-comment\"># Teraz otwórz ten folder w swoim edytorze kodu (np. VS Code) i stwórz plik src/index.ts</span>\n</code></pre>\n<p>W <code>src/index.ts</code> dodaj taki kod:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// src/index.ts</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">powitajUzytkownika</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-keyword\">if</span> (wiek &#x3C; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Wiek nie może być ujemny! 😡\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Wystąpił błąd.\"</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie}</span>! Masz <span class=\"hljs-subst\">${wiek}</span> lat. Fajnie, że jesteś! 🎉`</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> wiadomoscPowitalna = <span class=\"hljs-title function_\">powitajUzytkownika</span>(<span class=\"hljs-string\">\"Alicja\"</span>, <span class=\"hljs-number\">25</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wiadomoscPowitalna);\n\n<span class=\"hljs-comment\">// Spróbujmy wywołać z błędem, zobacz co się stanie w edytorze!</span>\n<span class=\"hljs-comment\">// const bladWiadomosc = powitajUzytkownika(\"Marcin\", \"dwadzieścia\"); // TypeScript od razu zakrzyczy! 🚨</span>\n</code></pre>\n</li>\n<li>\n<p><strong>Skompiluj swój kod:</strong>\nW terminalu, będąc w głównym katalogu projektu, wpisz:</p>\n<pre><code class=\"hljs language-bash\">npx tsc\n</code></pre>\n<p>Powinien pojawić się nowy folder <code>dist</code> z plikiem <code>index.js</code> w środku.</p>\n</li>\n<li>\n<p><strong>Uruchom skompilowany kod JavaScript:</strong></p>\n<pre><code class=\"hljs language-bash\">node dist/index.js\n</code></pre>\n<p>Powinieneś/Powinnaś zobaczyć w konsoli: <code>Cześć, Alicja! Masz 25 lat. Fajnie, że jesteś! 🎉</code>.</p>\n</li>\n</ol>\n<p>Gratulacje! Właśnie skompilowałeś/aś i uruchomiłeś/aś swój pierwszy kod TypeScript! 🥳</p>\n<hr>\n<h2 id=\"podstawy-składni-typescript-typowanie-w-praktyce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawy-składni-typescript-typowanie-w-praktyce\">>></a>Podstawy Składni TypeScript: Typowanie w Praktyce!</h2>\n<p>Teraz, gdy wiesz, jak ustawić projekt, zanurkujmy głębiej w sam język! Poznasz kluczowe elementy składni TypeScript, które sprawiają, że pisanie kodu jest bezpieczniejsze i przyjemniejsze.</p>\n<h3 id=\"typowanie-zmiennych-koniec-z-niespodziankami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-zmiennych-koniec-z-niespodziankami\">>>></a>Typowanie zmiennych: Koniec z niespodziankami!</h3>\n<p>W TypeScript możesz jawnie określić, jakiego typu danych spodziewasz się po zmiennej. Robisz to za pomocą dwukropka (<code>:</code>) po nazwie zmiennej, a następnie nazwy typu.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Typy podstawowe:</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">30</span>; <span class=\"hljs-comment\">// Zmienna 'wiek' musi być liczbą</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Adam\"</span>; <span class=\"hljs-comment\">// Zmienna 'imie' musi być tekstem</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">czyAktywny</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Zmienna 'czyAktywny' musi być wartością logiczną (prawda/fałsz)</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">nicNieMa</span>: <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// Zmienna 'nicNieMa' może przyjąć tylko null</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">nieOkreslone</span>: <span class=\"hljs-literal\">undefined</span> = <span class=\"hljs-literal\">undefined</span>; <span class=\"hljs-comment\">// Zmienna 'nieOkreslone' może przyjąć tylko undefined</span>\n\n<span class=\"hljs-comment\">// Co się stanie, jeśli spróbujesz przypisać zły typ?</span>\n<span class=\"hljs-comment\">// wiek = \"trzydzieści\"; // 🚨 Błąd kompilacji: Type 'string' is not assignable to type 'number'.</span>\n<span class=\"hljs-comment\">// imie = 123;         // 🚨 Błąd kompilacji: Type 'number' is not assignable to type 'string'.</span>\n\n<span class=\"hljs-comment\">// TypeScript potrafi też WYWNIOSKOWAĆ typ!</span>\n<span class=\"hljs-comment\">// Jeśli od razu przypiszesz wartość, TypeScript sam zgadnie typ.</span>\n<span class=\"hljs-keyword\">let</span> miasto = <span class=\"hljs-string\">\"Kraków\"</span>; <span class=\"hljs-comment\">// TypeScript wie, że to jest typu 'string'</span>\n<span class=\"hljs-comment\">// miasto = 123; // 🚨 Błąd, bo 'miasto' zostało wywnioskowane jako string!</span>\n\n<span class=\"hljs-comment\">// Typ 'any' - ucieczka od typowania (ale używaj ostrożnie!)</span>\n<span class=\"hljs-comment\">// Czasami potrzebujesz zmiennej, która może przyjąć DOWOLNY typ.</span>\n<span class=\"hljs-comment\">// Typ 'any' wyłącza sprawdzanie typów dla tej zmiennej.</span>\n<span class=\"hljs-comment\">// Używaj go tylko wtedy, gdy naprawdę wiesz, co robisz!</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">dowolnyTyp</span>: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-string\">\"Może być tekst\"</span>;\ndowolnyTyp = <span class=\"hljs-number\">123</span>; <span class=\"hljs-comment\">// OK</span>\ndowolnyTyp = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// OK</span>\n</code></pre>\n<p><strong>Wskazówka:</strong> Chociaż <code>any</code> daje elastyczność, to jest to trochę \"oszustwo\" w świecie typowania. Staraj się go unikać, chyba że naprawdę nie masz innej opcji (np. pracujesz z bardzo starym kodem JS bez typów). Celem TypeScripta jest właśnie bezpieczeństwo typów! 👮‍♂️</p>\n<h3 id=\"typowanie-funkcji-precyzyjne-wejścia-i-wyjścia\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-funkcji-precyzyjne-wejścia-i-wyjścia\">>>></a>Typowanie funkcji: Precyzyjne wejścia i wyjścia</h3>\n<p>Funkcje w TypeScript mogą być bardzo precyzyjnie typowane. Możesz określić typy dla:</p>\n<ul>\n<li><strong>Argumentów (parametrów)</strong> funkcji: Co funkcja przyjmuje?</li>\n<li><strong>Wartości zwracanej</strong> przez funkcję: Co funkcja oddaje?</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Funkcja przyjmująca dwie liczby i zwracająca liczbę</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>)); <span class=\"hljs-comment\">// Wypisze: 15</span>\n\n<span class=\"hljs-comment\">// console.log(dodaj(\"5\", 10)); // 🚨 Błąd: Argument of type 'string' is not assignable to parameter of type 'number'.</span>\n\n<span class=\"hljs-comment\">// Funkcja, która nic nie zwraca (typ 'void')</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">wyswietlWiadomosc</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">wiadomosc</span>: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">void</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Wiadomość: <span class=\"hljs-subst\">${wiadomosc}</span>`</span>);\n}\n\n<span class=\"hljs-title function_\">wyswietlWiadomosc</span>(<span class=\"hljs-string\">\"Halo, świat!\"</span>); <span class=\"hljs-comment\">// Wypisze: Wiadomość: Halo, świat!</span>\n\n<span class=\"hljs-comment\">// Funkcje strzałkowe (Arrow Functions) z typowaniem</span>\n<span class=\"hljs-keyword\">const</span> pomnoz = (<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">number</span> =></span> x * y;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">pomnoz</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>)); <span class=\"hljs-comment\">// Wypisze: 20</span>\n\n<span class=\"hljs-comment\">// Parametry opcjonalne (z '?' przed dwukropkiem)</span>\n<span class=\"hljs-comment\">// Możesz nie podawać wartości dla parametru opcjonalnego.</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">przywitaj</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">wiek</span>?: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-keyword\">if</span> (wiek) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie}</span>! Masz <span class=\"hljs-subst\">${wiek}</span> lat.`</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie}</span>!`</span>;\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">przywitaj</span>(<span class=\"hljs-string\">\"Kasia\"</span>)); <span class=\"hljs-comment\">// Wypisze: Cześć, Kasia!</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">przywitaj</span>(<span class=\"hljs-string\">\"Piotr\"</span>, <span class=\"hljs-number\">40</span>)); <span class=\"hljs-comment\">// Wypisze: Cześć, Piotr! Masz 40 lat.</span>\n\n<span class=\"hljs-comment\">// Parametry z wartościami domyślnymi</span>\n<span class=\"hljs-comment\">// Jeśli nie podasz wartości dla takiego parametru, zostanie użyta wartość domyślna.</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">obliczPoleKola</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">promien</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">PI</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">3.14</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable constant_\">PI</span> * promien * promien;\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">obliczPoleKola</span>(<span class=\"hljs-number\">5</span>)); <span class=\"hljs-comment\">// Użyje PI = 3.14</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">obliczPoleKola</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3.14159</span>)); <span class=\"hljs-comment\">// Użyje podanej wartości PI</span>\n</code></pre>\n<p>Typowanie funkcji jest niezwykle przydatne, zwłaszcza gdy pracujesz w zespole. Od razu widać, czego funkcja oczekuje i co zwróci, co minimalizuje błędy i nieporozumienia. 🙌</p>\n<h3 id=\"interfejsy-szablony-dla-twoich-obiektów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#interfejsy-szablony-dla-twoich-obiektów\">>>></a>Interfejsy: Szablony dla Twoich obiektów</h3>\n<p>Interfejsy (<code>interface</code>) to jeden z najpotężniejszych narzędzi w TypeScript! Pozwalają one <strong>opisać strukturę obiektów</strong>. Możesz myśleć o interfejsie jak o <strong>umowie</strong> lub <strong>szablonie</strong>, który mówi: \"każdy obiekt, który będzie tego typu, musi mieć takie i takie właściwości o takich i takich typach\".</p>\n<p>To super przydatne, gdy pracujesz z danymi, które mają określoną strukturę, np. dane pobrane z API (jakieś informacje o użytkowniku, produkcie itp.).</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Definiowanie interfejsu 'Uzytkownik'</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Uzytkownik</span> {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// Właściwość 'imie' musi być typu string</span>\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-comment\">// Właściwość 'wiek' musi być typu number</span>\n  <span class=\"hljs-attr\">email</span>?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// Właściwość 'email' jest OPCJONALNA (znak '?'). Może być stringiem lub w ogóle jej nie być.</span>\n  <span class=\"hljs-attr\">jestAktywny</span>: <span class=\"hljs-built_in\">boolean</span>; <span class=\"hljs-comment\">// Właściwość 'jestAktywny' musi być booleanem</span>\n  <span class=\"hljs-attr\">zainteresowania</span>: <span class=\"hljs-built_in\">string</span>[]; <span class=\"hljs-comment\">// Właściwość 'zainteresowania' to tablica stringów</span>\n}\n\n<span class=\"hljs-comment\">// Tworzenie obiektu, który SPEŁNIA interfejs 'Uzytkownik'</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">nowyUzytkownik</span>: <span class=\"hljs-title class_\">Uzytkownik</span> = {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Ewa\"</span>,\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">28</span>,\n  <span class=\"hljs-attr\">jestAktywny</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">zainteresowania</span>: [<span class=\"hljs-string\">\"czytanie\"</span>, <span class=\"hljs-string\">\"góry\"</span>, <span class=\"hljs-string\">\"programowanie\"</span>],\n  <span class=\"hljs-comment\">// 'email' jest opcjonalny, więc nie musimy go tu podawać</span>\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(nowyUzytkownik.<span class=\"hljs-property\">imie</span>); <span class=\"hljs-comment\">// Wypisze: Ewa</span>\n\n<span class=\"hljs-comment\">// Tworzenie obiektu z mailem</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">uzytkownikZMailem</span>: <span class=\"hljs-title class_\">Uzytkownik</span> = {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Marek\"</span>,\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">35</span>,\n  <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"marek@example.com\"</span>,\n  <span class=\"hljs-attr\">jestAktywny</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">zainteresowania</span>: [<span class=\"hljs-string\">\"gry\"</span>, <span class=\"hljs-string\">\"muzyka\"</span>],\n};\n\n<span class=\"hljs-comment\">// Co się stanie, jeśli obiekt NIE SPEŁNIA interfejsu?</span>\n<span class=\"hljs-comment\">// const zlyUzytkownik: Uzytkownik = {</span>\n<span class=\"hljs-comment\">//     imie: \"Kamil\",</span>\n<span class=\"hljs-comment\">//     wiek: \"dwadzieścia\", // 🚨 Błąd: Type 'string' is not assignable to type 'number'.</span>\n<span class=\"hljs-comment\">//     jestAktywny: true</span>\n<span class=\"hljs-comment\">//     // 🚨 Błąd: Property 'zainteresowania' is missing in type...</span>\n<span class=\"hljs-comment\">// };</span>\n</code></pre>\n<p>Interfejsy są fundamentem dla pisania czytelnego i bezpiecznego kodu, zwłaszcza w większych aplikacjach, gdzie struktury danych są skomplikowane. Używaj ich często! 💪</p>\n<h3 id=\"typy-złożone-gdy-jeden-typ-to-za-mało\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typy-złożone-gdy-jeden-typ-to-za-mało\">>>></a>Typy złożone: Gdy jeden typ to za mało!</h3>\n<p>Czasami potrzebujesz typów, które łączą w sobie cechy kilku innych. TypeScript oferuje świetne narzędzia do tworzenia takich \"hybryd\":</p>\n<ul>\n<li>\n<p><strong>Unie Typów (<code>|</code>)</strong>: Pozwalają zmiennej przyjmować wartości jednego z kilku określonych typów. To jak znak \"LUB\" – zmienna może być <em>albo</em> tym, <em>albo</em> tym.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-comment\">// 'id' może być stringiem LUB liczbą</span>\nid = <span class=\"hljs-string\">\"abc-123\"</span>; <span class=\"hljs-comment\">// OK</span>\nid = <span class=\"hljs-number\">456</span>; <span class=\"hljs-comment\">// OK</span>\n<span class=\"hljs-comment\">// id = true;    // 🚨 Błąd: Type 'boolean' is not assignable to type 'string | number'.</span>\n</code></pre>\n<p>To bardzo przydatne, gdy np. identyfikatory (ID) mogą być zarówno tekstami, jak i liczbami.</p>\n</li>\n<li>\n<p><strong>Typy Literalne</strong>: Możesz określić, że zmienna może przyjąć tylko konkretne wartości (np. tylko jeden z kilku tekstów lub liczb).</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Kierunek</span> = <span class=\"hljs-string\">\"północ\"</span> | <span class=\"hljs-string\">\"południe\"</span> | <span class=\"hljs-string\">\"wschód\"</span> | <span class=\"hljs-string\">\"zachód\"</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">obecnyKierunek</span>: <span class=\"hljs-title class_\">Kierunek</span> = <span class=\"hljs-string\">\"północ\"</span>; <span class=\"hljs-comment\">// OK</span>\n<span class=\"hljs-comment\">// obecnyKierunek = \"góra\"; // 🚨 Błąd: Type '\"góra\"' is not assignable to type 'Kierunek'.</span>\n</code></pre>\n<p>To świetnie sprawdza się w przypadku stałych wartości, np. statusów, poziomów dostępu czy właśnie kierunków.</p>\n</li>\n<li>\n<p><strong>Typy Połączeń (Intersection Types) (<code>&#x26;</code>)</strong>: Pozwalają połączyć ze sobą właściwości wielu typów w jeden nowy typ. To jak znak \"I\" – nowy typ musi mieć właściwości <em>zarówno</em> tego, <em>jak i</em> tego typu.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Admin</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>;\n  <span class=\"hljs-attr\">uprawnienia</span>: <span class=\"hljs-built_in\">string</span>[];\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UzytkownikZwykly</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"user\"</span>;\n  <span class=\"hljs-attr\">nick</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-comment\">// Typ 'Osoba' to ALBO Admin, ALBO UzytkownikZwykly (Unia typów)</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Osoba</span> = <span class=\"hljs-title class_\">Admin</span> | <span class=\"hljs-title class_\">UzytkownikZwykly</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">admin</span>: <span class=\"hljs-title class_\">Osoba</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>,\n  <span class=\"hljs-attr\">uprawnienia</span>: [<span class=\"hljs-string\">\"moderacja\"</span>, <span class=\"hljs-string\">\"raporty\"</span>],\n};\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">user</span>: <span class=\"hljs-title class_\">Osoba</span> = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-attr\">nick</span>: <span class=\"hljs-string\">\"gracz123\"</span> };\n\n<span class=\"hljs-comment\">// Typ 'AdministratorKonta' musi mieć WSZYSTKIE cechy Admin ORAZ UzytkownikZwykly (nie jest to często spotykane)</span>\n<span class=\"hljs-comment\">// Lepszym przykładem na Intersection Types byłoby połączenie interfejsu Person (imię, nazwisko) z interfejsem Employee (pensja, stanowisko)</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Pracownik</span> {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">nazwisko</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">DetalePracy</span> {\n  <span class=\"hljs-attr\">stanowisko</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">pensja</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-comment\">// Pracownik firmy musi mieć cechy Pracownika ORAZ DetaliPracy</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">PracownikFirmy</span> = <span class=\"hljs-title class_\">Pracownik</span> &#x26; <span class=\"hljs-title class_\">DetalePracy</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">nowyPracownik</span>: <span class=\"hljs-title class_\">PracownikFirmy</span> = {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Anna\"</span>,\n  <span class=\"hljs-attr\">nazwisko</span>: <span class=\"hljs-string\">\"Nowak\"</span>,\n  <span class=\"hljs-attr\">stanowisko</span>: <span class=\"hljs-string\">\"Developer\"</span>,\n  <span class=\"hljs-attr\">pensja</span>: <span class=\"hljs-number\">8000</span>,\n};\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(nowyPracownik);\n</code></pre>\n</li>\n</ul>\n<p>To tylko wierzchołek góry lodowej, jeśli chodzi o złożone typy, ale te podstawowe konstrukcje pozwolą Ci pisać bardzo elastyczny i bezpieczny kod! 🏔️</p>\n<h3 id=\"klasy-i-dziedziczenie-oop-z-supermocami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#klasy-i-dziedziczenie-oop-z-supermocami\">>>></a>Klasy i dziedziczenie: OOP z supermocami</h3>\n<p>Jeśli znasz inne języki programowania obiektowego (OOP) takie jak Java czy C#, klasy w TypeScript będą dla Ciebie znajome. TypeScript mocno wspiera koncepcje takie jak <strong>klasy</strong>, <strong>dziedziczenie</strong>, <strong>interfejsy</strong> i <strong>modyfikatory dostępu</strong> (public, private, protected), które są rozszerzeniem tego, co oferuje \"czysty\" JavaScript.</p>\n<p>Klasy to szablony do tworzenia obiektów. Dziedziczenie pozwala tworzyć nowe klasy na podstawie istniejących, dziedzicząc ich właściwości i metody.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Klasa bazowa 'Zwierze'</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Zwierze</span> {\n  <span class=\"hljs-comment\">// Konstruktor to specjalna metoda, która jest wywoływana podczas tworzenia nowego obiektu.</span>\n  <span class=\"hljs-comment\">// 'public nazwa: string' to skrót, który automatycznie deklaruje i przypisuje właściwość 'nazwa'.</span>\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">nazwa</span> = nazwa; <span class=\"hljs-comment\">// 'this' odnosi się do bieżącego obiektu klasy</span>\n  }\n\n  <span class=\"hljs-comment\">// Metoda klasy</span>\n  <span class=\"hljs-title function_\">wydajDzwiek</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Dźwięk zwierzęcia!\"</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Klasa 'Pies' dziedzicząca po 'Zwierze'</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pies</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Zwierze</span> {\n  <span class=\"hljs-comment\">// Słowo kluczowe 'extends' oznacza dziedziczenie</span>\n  <span class=\"hljs-comment\">// Konstruktor klasy potomnej</span>\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">rasa</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">super</span>(nazwa); <span class=\"hljs-comment\">// 'super()' wywołuje konstruktor klasy bazowej (Zwierze)</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rasa</span> = rasa;\n  }\n\n  <span class=\"hljs-comment\">// Nadpisanie metody z klasy bazowej (polimorfizm)</span>\n  <span class=\"hljs-title function_\">wydajDzwiek</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Hau hau! 🐕\"</span>);\n  }\n\n  <span class=\"hljs-title function_\">aportuj</span>(<span class=\"hljs-attr\">przedmiot</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.nazwa}</span> aportuje <span class=\"hljs-subst\">${przedmiot}</span>.`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Tworzenie obiektów (instancji klas)</span>\n<span class=\"hljs-keyword\">const</span> zwierze = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Zwierze</span>(<span class=\"hljs-string\">\"Ogólne zwierzę\"</span>);\nzwierze.<span class=\"hljs-title function_\">wydajDzwiek</span>(); <span class=\"hljs-comment\">// Wypisze: Dźwięk zwierzęcia!</span>\n\n<span class=\"hljs-keyword\">const</span> burek = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Pies</span>(<span class=\"hljs-string\">\"Burek\"</span>, <span class=\"hljs-string\">\"Kundel\"</span>);\nburek.<span class=\"hljs-title function_\">wydajDzwiek</span>(); <span class=\"hljs-comment\">// Wypisze: Hau hau! 🐕 (nadpisana metoda!)</span>\nburek.<span class=\"hljs-title function_\">aportuj</span>(<span class=\"hljs-string\">\"patyk\"</span>); <span class=\"hljs-comment\">// Wypisze: Burek aportuje patyk.</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(burek.<span class=\"hljs-property\">nazwa</span>); <span class=\"hljs-comment\">// Wypisze: Burek (dziedziczona właściwość)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(burek.<span class=\"hljs-property\">rasa</span>); <span class=\"hljs-comment\">// Wypisze: Kundel (właściwość specyficzna dla Pies)</span>\n</code></pre>\n<p>Klasy w TypeScript to potężne narzędzie do organizacji kodu w sposób obiektowy, co jest szczególnie cenne w dużych i złożonych aplikacjach. 🏗️</p>\n<h3 id=\"enumy-łatwiejsze-zarządzanie-stałymi-wartościami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#enumy-łatwiejsze-zarządzanie-stałymi-wartościami\">>>></a>Enumy: Łatwiejsze zarządzanie stałymi wartościami</h3>\n<p><strong>Enumy (typy wyliczeniowe)</strong> to specjalny typ w TypeScript, który pozwala zdefiniować zbiór nazwanych stałych wartości. Są super przydatne, gdy masz ograniczony zestaw opcji do wyboru (np. statusy, dni tygodnia, kolory). Zamiast używać \"magicznych stringów\" (<code>\"pending\"</code>, <code>\"success\"</code>), możesz użyć nazwanych, czytelnych wartości.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Definiowanie Enum Kolor</span>\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Kolor</span> {\n  <span class=\"hljs-title class_\">Czerwony</span>, <span class=\"hljs-comment\">// Domyślnie 0</span>\n  <span class=\"hljs-title class_\">Zielony</span>, <span class=\"hljs-comment\">// Domyślnie 1</span>\n  <span class=\"hljs-title class_\">Niebieski</span>, <span class=\"hljs-comment\">// Domyślnie 2</span>\n}\n\n<span class=\"hljs-comment\">// Użycie Enuma</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">ulubionyKolor</span>: <span class=\"hljs-title class_\">Kolor</span> = <span class=\"hljs-title class_\">Kolor</span>.<span class=\"hljs-property\">Zielony</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ulubionyKolor); <span class=\"hljs-comment\">// Wypisze: 1 (bo Zielony to druga wartość, indeks 1)</span>\n\n<span class=\"hljs-comment\">// Możesz przypisać własne wartości (np. tekstowe)</span>\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">StatusZamowienia</span> {\n  <span class=\"hljs-variable constant_\">W_OCZEKIWANIU</span> = <span class=\"hljs-string\">\"W_OCZEKIWANIU\"</span>,\n  <span class=\"hljs-variable constant_\">W_REALIZACJI</span> = <span class=\"hljs-string\">\"W_REALIZACJI\"</span>,\n  <span class=\"hljs-variable constant_\">ZREALIZOWANE</span> = <span class=\"hljs-string\">\"ZREALIZOWANE\"</span>,\n  <span class=\"hljs-variable constant_\">ANULOWANE</span> = <span class=\"hljs-string\">\"ANULOWANE\"</span>,\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">statusZamowienia</span>: <span class=\"hljs-title class_\">StatusZamowienia</span> = <span class=\"hljs-title class_\">StatusZamowienia</span>.<span class=\"hljs-property\">W_OCZEKIWANIU</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(statusZamowienia); <span class=\"hljs-comment\">// Wypisze: W_OCZEKIWANIU</span>\n\n<span class=\"hljs-keyword\">if</span> (statusZamowienia === <span class=\"hljs-title class_\">StatusZamowienia</span>.<span class=\"hljs-property\">W_OCZEKIWANIU</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Czekamy na potwierdzenie zamówienia... ⏳\"</span>);\n}\n</code></pre>\n<p>Enumy zwiększają czytelność kodu i minimalizują ryzyko literówek. Zamiast pisać <code>\"czerwony\"</code>, piszesz <code>Kolor.Czerwony</code> – od razu widać, że to jeden z predefiniowanych kolorów. 👍</p>\n<h3 id=\"alias-typów-nadawanie-imion-złożonym-typom\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#alias-typów-nadawanie-imion-złożonym-typom\">>>></a>Alias typów: Nadawanie imion złożonym typom</h3>\n<p>Czasami tworzysz złożone typy, używając unii, połączeń czy obiektów, a ich definicja staje się długa i powtarzalna. <strong>Alias typów (<code>type</code>)</strong> pozwala nadać tym złożonym typom prostą, zrozumiałą nazwę. To jak tworzenie własnych, niestandardowych typów!</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Złożony typ, który oznacza, że ID może być liczbą LUB stringiem</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-variable constant_\">ID</span> = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;\n\n<span class=\"hljs-comment\">// Użycie aliasu typu</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userId</span>: <span class=\"hljs-variable constant_\">ID</span> = <span class=\"hljs-number\">12345</span>; <span class=\"hljs-comment\">// OK, bo numer</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">productId</span>: <span class=\"hljs-variable constant_\">ID</span> = <span class=\"hljs-string\">\"prod-A7B\"</span>; <span class=\"hljs-comment\">// OK, bo string</span>\n\n<span class=\"hljs-comment\">// let orderId: ID = true; // 🚨 Błąd: Type 'boolean' is not assignable to type 'ID'.</span>\n\n<span class=\"hljs-comment\">// Alias dla obiektu</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Punkt2D</span> = {\n  <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mojPunkt</span>: <span class=\"hljs-title class_\">Punkt2D</span> = { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">20</span> };\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(mojPunkt); <span class=\"hljs-comment\">// Wypisze: { x: 10, y: 20 }</span>\n\n<span class=\"hljs-comment\">// Alias dla funkcji</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">FunkcjaMatematyczna</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-built_in\">number</span></span>) =></span> <span class=\"hljs-built_in\">number</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">dodawanie</span>: <span class=\"hljs-title class_\">FunkcjaMatematyczna</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">num1, num2</span>) =></span> num1 + num2;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">odejmowanie</span>: <span class=\"hljs-title class_\">FunkcjaMatematyczna</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">num1, num2</span>) =></span> num1 - num2;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">dodawanie</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// Wypisze: 8</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">odejmowanie</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>)); <span class=\"hljs-comment\">// Wypisze: 6</span>\n</code></pre>\n<p>Aliasy typów sprawiają, że Twój kod jest bardziej czytelny, łatwiejszy do refaktoryzacji i ogólnie przyjemniejszy w obsłudze. Kiedy widzisz <code>ID</code> zamiast <code>string | number</code>, od razu wiesz, o co chodzi! ✨</p>\n<hr>\n<h2 id=\"jak-używać-typów-w-praktyce-codzienne-scenariusze\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-używać-typów-w-praktyce-codzienne-scenariusze\">>></a>Jak używać typów w praktyce? Codzienne Scenariusze</h2>\n<p>Teraz, gdy znasz podstawy składni, zobaczmy, jak możesz je wykorzystać w codziennej pracy programisty!</p>\n<h3 id=\"funkcje-z-typami-zwracanymi-i-parametrami-opcjonalnymi\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-z-typami-zwracanymi-i-parametrami-opcjonalnymi\">>>></a>Funkcje z typami zwracanymi i parametrami opcjonalnymi</h3>\n<p>Często zdarza się, że funkcja może, ale nie musi, przyjąć pewien argument, albo że jeden z jej argumentów ma wartość domyślną. TypeScript świetnie sobie z tym radzi.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Parametr opcjonalny 'imie' - oznaczony znakiem '?'</span>\n<span class=\"hljs-comment\">// Wartość zwracana funkcji to 'string'</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">powiedzCzesc</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">imie</span>?: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-comment\">// Operator '??' (nullish coalescing) to super sprawa!</span>\n  <span class=\"hljs-comment\">// Jeśli 'imie' jest 'null' lub 'undefined', użyje \"nieznajomy\", w przeciwnym razie użyje 'imie'.</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie ?? <span class=\"hljs-string\">\"nieznajomy\"</span>}</span>!`</span>;\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">powiedzCzesc</span>(<span class=\"hljs-string\">\"Ania\"</span>)); <span class=\"hljs-comment\">// Wypisze: Cześć, Ania!</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">powiedzCzesc</span>()); <span class=\"hljs-comment\">// Wypisze: Cześć, nieznajomy!</span>\n<span class=\"hljs-comment\">// console.log(powiedzCzesc(123)); // 🚨 Błąd: Argument of type 'number' is not assignable to parameter of type 'string | undefined'.</span>\n</code></pre>\n<h3 id=\"łączenie-kilku-typów-unie-typów-w-akcji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#łączenie-kilku-typów-unie-typów-w-akcji\">>>></a>Łączenie kilku typów (Unie Typów w akcji!)</h3>\n<p>Gdy masz dane, które mogą przyjmować różne, ale określone formy, unie typów są Twoim przyjacielem.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Typy reprezentujące różne role użytkownika</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Admin</span> = {\n  <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>; <span class=\"hljs-comment\">// Literalny typ string</span>\n  <span class=\"hljs-attr\">poziomUprawnien</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">panelDostepu</span>: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Uzytkownik</span> = {\n  <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"user\"</span>; <span class=\"hljs-comment\">// Literalny typ string</span>\n  <span class=\"hljs-attr\">nazwaUzytkownika</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">ostatnieLogowanie</span>: <span class=\"hljs-title class_\">Date</span>; <span class=\"hljs-comment\">// Używamy wbudowanego typu Date</span>\n};\n\n<span class=\"hljs-comment\">// Typ 'OsobaNaPlatformie' może być ALBO Adminem, ALBO Uzytkownikiem</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">OsobaNaPlatformie</span> = <span class=\"hljs-title class_\">Admin</span> | <span class=\"hljs-title class_\">Uzytkownik</span>;\n\n<span class=\"hljs-comment\">// Tworzymy tablicę, która może zawierać obiekty obu typów</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">listaOsob</span>: <span class=\"hljs-title class_\">OsobaNaPlatformie</span>[] = [\n  { <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>, <span class=\"hljs-attr\">poziomUprawnien</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">panelDostepu</span>: <span class=\"hljs-string\">\"/admin/dashboard\"</span> },\n  {\n    <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"user\"</span>,\n    <span class=\"hljs-attr\">nazwaUzytkownika</span>: <span class=\"hljs-string\">\"super_gracz\"</span>,\n    <span class=\"hljs-attr\">ostatnieLogowanie</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(),\n  },\n  { <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>, <span class=\"hljs-attr\">poziomUprawnien</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">panelDostepu</span>: <span class=\"hljs-string\">\"/admin/stats\"</span> },\n];\n\n<span class=\"hljs-comment\">// Możemy iterować po liście i sprawdzić typ obiektu (tzw. \"type guarding\")</span>\nlistaOsob.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">osoba</span>) =></span> {\n  <span class=\"hljs-keyword\">if</span> (osoba.<span class=\"hljs-property\">rola</span> === <span class=\"hljs-string\">\"admin\"</span>) {\n    <span class=\"hljs-comment\">// W tym bloku TypeScript wie, że 'osoba' to typ 'Admin'</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n      <span class=\"hljs-string\">`Administrator: <span class=\"hljs-subst\">${osoba.panelDostepu}</span> (poziom: <span class=\"hljs-subst\">${osoba.poziomUprawnien}</span>)`</span>\n    );\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Tutaj TypeScript wie, że 'osoba' to typ 'Uzytkownik'</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n      <span class=\"hljs-string\">`Użytkownik: <span class=\"hljs-subst\">${\n        osoba.nazwaUzytkownika\n      }</span> (logował się: <span class=\"hljs-subst\">${osoba.ostatnieLogowanie.toLocaleDateString()}</span>)`</span>\n    );\n  }\n});\n</code></pre>\n<p>To podejście sprawia, że kod jest bardziej odporny na błędy i łatwiejszy do zrozumienia dla innych programistów (i dla Ciebie za kilka miesięcy! 😉).</p>\n<hr>\n<h2 id=\"narzędzia-i-integracje-twoi-pomocnicy-w-rozwoju\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#narzędzia-i-integracje-twoi-pomocnicy-w-rozwoju\">>></a>Narzędzia i Integracje: Twoi Pomocnicy w Rozwoju</h2>\n<p>TypeScript to nie tylko sam język, ale też cały ekosystem narzędzi, które ułatwiają życie programistom.</p>\n<ul>\n<li><strong>VS Code (Visual Studio Code)</strong>: To absolutny król wśród edytorów kodu dla TypeScripta! 👑 Jest stworzony przez Microsoft (tak jak TypeScript!) i ma wbudowane, doskonałe wsparcie dla typowania. Oznacza to, że dostajesz inteligentne podpowiedzi (IntelliSense), automatyczne uzupełnianie kodu, wykrywanie błędów na bieżąco, refaktoryzację, a wszystko to działa jak marzenie! Jeśli jeszcze nie używasz VS Code, to jest to moment, by spróbować.</li>\n<li><strong><code>tsconfig.json</code></strong>: Już o nim mówiliśmy, ale warto podkreślić, że to serce konfiguracji Twojego projektu TypeScript. Dzięki niemu możesz precyzyjnie dostosować, jak kompilator ma przetwarzać Twój kod. To jak centrala sterowania! 🎛️</li>\n<li><strong>Integracja z narzędziami budującymi (Build Tools)</strong>: TypeScript bez problemu integruje się z najpopularniejszymi narzędziami do budowania aplikacji, takimi jak:\n<ul>\n<li><strong>Webpack</strong>: Pakowanie modułów, transformacje kodu.</li>\n<li><strong>Babel</strong>: Transpilacja (konwersja kodu na starsze wersje JS). Często używa się Babel razem z TypeScriptem, aby skorzystać z najnowszych funkcji JS, które TypeScript jeszcze nie w pełni obsługuje w kompilacji.</li>\n<li><strong>ESLint</strong>: Narzędzie do statycznej analizy kodu, które pomaga utrzymać jego jakość i spójność (np. wymusza określony styl pisania).</li>\n<li><strong>Vite / Parcel</strong>: Szybkie i nowoczesne bundlery, które mają wbudowane wsparcie dla TypeScripta.</li>\n</ul>\n</li>\n<li><strong>Systemy CI/CD (Continuous Integration/Continuous Deployment)</strong>: TypeScript świetnie wpisuje się w nowoczesne procesy wytwarzania oprogramowania. Łatwo zintegrujesz kompilację TypeScripta z pipeline’ami takimi jak GitHub Actions, GitLab CI czy Jenkins. Oznacza to, że Twoje typy będą sprawdzane automatycznie przy każdym wgraniu kodu, zanim trafi on na produkcję! 🤖</li>\n</ul>\n<p>TypeScript jest domyślnym językiem dla wielu popularnych frameworków frontendowych, takich jak <strong>Angular</strong>. Coraz więcej projektów w <strong>React</strong> i <strong>Vue</strong> również przechodzi na TypeScript. To oznacza, że znajomość tego języka to <strong>ogromny plus</strong> na rynku pracy! 📈</p>\n<hr>\n<h2 id=\"częste-pułapki-i-praktyczne-wskazówki-jak-unikać-problemów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#częste-pułapki-i-praktyczne-wskazówki-jak-unikać-problemów\">>></a>Częste Pułapki i Praktyczne Wskazówki: Jak Unikać Problemów?</h2>\n<p>Nauka nowego języka (a w zasadzie \"rozszerzenia\" języka) zawsze wiąże się z pewnymi wyzwaniami. Oto kilka częstych pułapek i wskazówek, które pomogą Ci szybko stać się ninja TypeScripta! 🥷</p>\n<h3 id=\"nie-musisz-typować-wszystkiego-od-razu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#nie-musisz-typować-wszystkiego-od-razu\">>>></a>Nie musisz typować wszystkiego od razu!</h3>\n<p>To jest jedna z najważniejszych rad! Nie czuj presji, żeby od razu typować każdą zmienną, każdy parametr i każdą funkcję w swoim projekcie. Możesz zacząć od typowania kluczowych fragmentów kodu (np. interfejsów dla danych z API, typów dla skomplikowanych funkcji). Stopniowo rozszerzaj typowanie w miarę, jak czujesz się pewniej. Małe kroki to klucz do sukcesu! 🚶‍♀️</p>\n<h3 id=\"stopniowa-migracja-powoli-ale-skutecznie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#stopniowa-migracja-powoli-ale-skutecznie\">>>></a>Stopniowa migracja: Powoli, ale skutecznie!</h3>\n<p>Jeśli masz już duży projekt w JavaScript, nie musisz go przepisywać od nowa! Możesz migrować go na TypeScript krok po kroku. Po prostu zacznij zmieniać rozszerzenia plików z <code>.js</code> na <code>.ts</code> (lub <code>.tsx</code> dla Reacta). Kompilator TypeScripta potraktuje czysty JavaScript jako poprawny kod, a Ty będziesz mógł/mogła stopniowo dodawać typy i naprawiać błędy kompilatora. To jak renowacja, a nie budowa od podstaw! 🏡</p>\n<h3 id=\"współpraca-z-bibliotekami-js-poznaj-types\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#współpraca-z-bibliotekami-js-poznaj-types\">>>></a>Współpraca z bibliotekami JS: Poznaj <code>@types/</code>!</h3>\n<p>Co zrobić, jeśli używasz popularnej biblioteki JavaScript (np. Lodash, jQuery, Express), która nie jest napisana w TypeScript? Czy stracisz korzyści z typowania? Absolutnie nie! Istnieje specjalne repozytorium <strong>DefinitelyTyped</strong>, które zawiera pliki deklaracji typów (<code>.d.ts</code>) dla tysięcy bibliotek JavaScript.</p>\n<p>Wystarczy zainstalować odpowiedni pakiet z typami (zazwyczaj zaczyna się od <code>@types/</code>):</p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev @types/lodash\nnpm install --save-dev @types/jquery\nnpm install --save-dev @types/express\n</code></pre>\n<p>Po zainstalowaniu takiego pakietu, Twój edytor kodu (np. VS Code) będzie magicznie rozumiał typy z tych bibliotek, dając Ci podpowiedzi i wyłapując błędy, tak jakby były napisane w TypeScript! 🧙‍♀️</p>\n<h3 id=\"wyłączaj-sprawdzanie-niektórych-plików-dla-ekstremalnych-przypadków\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wyłączaj-sprawdzanie-niektórych-plików-dla-ekstremalnych-przypadków\">>>></a>Wyłączaj sprawdzanie niektórych plików (dla ekstremalnych przypadków)</h3>\n<p>Jeśli natrafisz na plik JavaScript, który jest absolutnym bałaganem i nie masz czasu go typować, a TypeScript ciągle krzyczy błędami, możesz go tymczasowo wyciszyć. Dodaj na górze pliku:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// @ts-nocheck</span>\n</code></pre>\n<p>To polecenie mówi kompilatorowi TypeScripta, żeby zignorował sprawdzanie typów w tym konkretnym pliku. Używaj tego oszczędnie, bo tracisz wtedy korzyści z typowania! To taka \"ostatnia deska ratunku\". 😉</p>\n<h3 id=\"czytaj-błędy-kompilatora-to-twoi-nauczyciele\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czytaj-błędy-kompilatora-to-twoi-nauczyciele\">>>></a>Czytaj błędy kompilatora: To Twoi nauczyciele!</h3>\n<p>Na początku komunikaty o błędach z TypeScripta mogą wydawać się straszne. Pełno czerwonych podkreśleń i długich wiadomości. Ale prawda jest taka, że błędy TypeScripta są zazwyczaj <strong>bardzo pomocne</strong>! Dokładnie wskazują, gdzie jest problem i często sugerują, jak go naprawić.</p>\n<h3 id=\"najczęstsze-błędy-i-jak-je-naprawić-nie-bój-się-czerwonych-podkreśleń\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#najczęstsze-błędy-i-jak-je-naprawić-nie-bój-się-czerwonych-podkreśleń\">>>></a>Najczęstsze błędy i jak je naprawić: Nie bój się czerwonych podkreśleń!</h3>\n<p>Początki bywają trudne, ale z każdym błędem uczysz się czegoś nowego! Oto kilka typowych błędów, które możesz napotkać, i jak sobie z nimi radzić:</p>\n<ul>\n<li>\n<p><strong>Błąd typowania: Typ X nie jest przypisywalny do typu Y.</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-string\">\"dwadzieścia pięć\"</span>; <span class=\"hljs-comment\">// 🚨 Błąd: Type 'string' is not assignable to type 'number'.</span>\n</code></pre>\n<p><strong>Naprawa:</strong> Upewnij się, że przypisujesz wartość odpowiedniego typu.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">25</span>; <span class=\"hljs-comment\">// Poprawnie!</span>\n</code></pre>\n</li>\n<li>\n<p><strong>Brak typu dla zwracanej wartości funkcji (albo niezgodność)</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">zwrocTekst</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>; <span class=\"hljs-comment\">// 🚨 Błąd: Type 'number' is not assignable to type 'string'.</span>\n}\n</code></pre>\n<p><strong>Naprawa:</strong> Upewnij się, że funkcja zwraca wartość zgodną z zadeklarowanym typem zwracanym.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">zwrocTekst</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"To jest tekst.\"</span>; <span class=\"hljs-comment\">// Poprawnie!</span>\n}\n</code></pre>\n</li>\n<li>\n<p><strong>Brakujące właściwości w interfejsie</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Produkt</span> {\n  <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">cena</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">dostepny</span>: <span class=\"hljs-built_in\">boolean</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mojProdukt</span>: <span class=\"hljs-title class_\">Produkt</span> = {\n  <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-string\">\"Książka\"</span>,\n  <span class=\"hljs-attr\">cena</span>: <span class=\"hljs-number\">50</span>, <span class=\"hljs-comment\">// 🚨 Błąd: Property 'dostepny' is missing in type '{ nazwa: string; cena: number; }' but required in type 'Produkt'.</span>\n};\n</code></pre>\n<p><strong>Naprawa:</strong> Dodaj wszystkie wymagane właściwości z interfejsu (lub oznacz je jako opcjonalne w interfejsie <code>?</code>).</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mojProdukt</span>: <span class=\"hljs-title class_\">Produkt</span> = {\n  <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-string\">\"Książka\"</span>,\n  <span class=\"hljs-attr\">cena</span>: <span class=\"hljs-number\">50</span>,\n  <span class=\"hljs-attr\">dostepny</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// Poprawnie!</span>\n};\n</code></pre>\n</li>\n<li>\n<p><strong>Próba użycia <code>null</code> lub <code>undefined</code> tam, gdzie nie powinno być</strong>\nW trybie <code>strict: true</code> (który jest bardzo zalecany!), TypeScript jest bardzo restrykcyjny, jeśli chodzi o <code>null</code> i <code>undefined</code>.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">nazwisko</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 🚨 Błąd: Type 'null' is not assignable to type 'string'.</span>\n</code></pre>\n<p><strong>Naprawa:</strong> Jeśli zmienna może być <code>null</code> lub <code>undefined</code>, musisz to jawnie określić za pomocą unii typów:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">nazwisko</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// Poprawnie!</span>\n</code></pre>\n</li>\n</ul>\n<p>Pamiętaj, że każdy błąd to szansa na naukę! Nie zniechęcaj się, analizuj komunikaty, a szybko zobaczysz, jak Twój kod staje się coraz bardziej solidny. 💪</p>\n<hr>\n<h2 id=\"typescript-w-projektach-open-source-i-pracy-zespołowej-graj-zespołowo\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typescript-w-projektach-open-source-i-pracy-zespołowej-graj-zespołowo\">>></a>TypeScript w Projektach Open-Source i Pracy Zespołowej: Graj zespołowo!</h2>\n<p>TypeScript to prawdziwy game-changer, jeśli chodzi o pracę w zespole i duże projekty! 🕹️ Dlaczego?</p>\n<ul>\n<li><strong>Ułatwia współpracę:</strong> Kiedy wielu programistów pracuje nad tym samym kodem, typy są jak uniwersalny język. Każdy od razu wie, jakiego typu danych spodziewać się po funkcji czy obiekcie, bez potrzeby ciągłego dopytywania. To minimalizuje nieporozumienia i przyspiesza development! 🧑‍💻👩‍💻</li>\n<li><strong>Poprawia czytelność i utrzymanie kodu:</strong> W dużych bazach kodu, gdzie funkcje i moduły mają wiele zależności, typy pełnią rolę żywej dokumentacji. Zmiana czegoś w jednym miejscu? TypeScript od razu pokaże, gdzie indziej ta zmiana może mieć wpływ. To jak mieć mapę skarbów w gęstej dżungli kodu! 🗺️</li>\n<li><strong>Zwiększa pewność siebie podczas refaktoryzacji:</strong> Refaktoryzacja (czyli restrukturyzacja kodu w celu poprawy jego czytelności i utrzymywalności, bez zmiany jego funkcjonalności) jest znacznie bezpieczniejsza z TypeScriptem. Jeśli zmienisz nazwę właściwości obiektu lub zmienisz typ zwracany przez funkcję, kompilator natychmiast wskaże wszystkie miejsca, które wymagają aktualizacji. Koniec z obawami, że coś się zepsuje po małej zmianie! 👷‍♀️</li>\n<li><strong>Standard w Open-Source i Enterprise:</strong> Jak już wspomniano, wiele gigantów technologicznych i popularnych bibliotek (Angular, React, Vue, NestJS, Express, VSCode, Deno) jest napisanych w TypeScript. Oznacza to, że jeśli chcesz wnieść wkład w projekty open-source lub pracować w dużej firmie, znajomość TypeScripta to praktycznie standard. Otwiera Ci to wiele drzwi! 🚪</li>\n</ul>\n<hr>\n<h2 id=\"gdzie-znaleźć-deklaracje-typów-do-bibliotek-js\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#gdzie-znaleźć-deklaracje-typów-do-bibliotek-js\">>></a>Gdzie znaleźć deklaracje typów do bibliotek JS?</h2>\n<p>To pytanie, które zadaje sobie każdy początkujący z TypeScriptem: \"Skoro używam biblioteki X napisanej w JavaScript, to czy tracę wszystkie zalety typowania?\" Na szczęście odpowiedź brzmi: <strong>NIE!</strong> 🎉</p>\n<p>Dzięki społeczności TypeScripta i projektowi <strong>DefinitelyTyped</strong>, dla większości popularnych bibliotek JavaScript istnieją tzw. <strong>pliki deklaracji typów</strong>. Są to pliki z rozszerzeniem <code>.d.ts</code>, które nie zawierają kodu wykonawczego, a jedynie opisują struktury typów (interfejsy, typy funkcji itp.) danej biblioteki.</p>\n<p>Instaluje się je bardzo prosto za pomocą npm, dodając przed nazwą biblioteki prefiks <code>@types/</code>. Przykłady:</p>\n<ul>\n<li><strong>Dla biblioteki <code>lodash</code>:</strong>\n<pre><code class=\"hljs language-bash\">npm install --save-dev @types/lodash\n</code></pre>\n</li>\n<li><strong>Dla biblioteki <code>jquery</code>:</strong>\n<pre><code class=\"hljs language-bash\">npm install --save-dev @types/jquery\n</code></pre>\n</li>\n<li><strong>Dla frameworka <code>express</code>:</strong>\n<pre><code class=\"hljs language-bash\">npm install --save-dev @types/express\n</code></pre>\n</li>\n</ul>\n<p>Po zainstalowaniu odpowiedniego pakietu <code>@types/</code>, Twój edytor kodu (szczególnie VS Code!) zacznie \"rozumieć\" strukturę typów z tej biblioteki, dając Ci pełne wsparcie IntelliSense, podpowiedzi i wykrywanie błędów, tak jakby sama biblioteka była napisana w TypeScript! To jest po prostu magiczne! 🪄</p>\n<hr>\n<h2 id=\"gdzie-szukać-pomocy-nie-jesteś-sam\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#gdzie-szukać-pomocy-nie-jesteś-sam\">>></a>Gdzie szukać pomocy? Nie jesteś sam!</h2>\n<p>Nauka programowania, zwłaszcza tak rozbudowanego języka jak TypeScript, to długa podróż. Ale nie musisz iść nią samotnie! Społeczność TypeScripta jest ogromna i bardzo pomocna.</p>\n<p>Oto miejsca, gdzie zawsze znajdziesz wsparcie:</p>\n<ul>\n<li>\n<p><strong>Oficjalna Dokumentacja TypeScript:</strong> To najlepsze miejsce, aby zacząć i pogłębić wiedzę. Dokumentacja jest świetnie napisana, pełna przykładów i regularnie aktualizowana.</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/\">TypeScript: The starting point for learning TypeScript</a> (anglojęzyczna, ale bardzo przystępna)</li>\n</ul>\n</li>\n<li>\n<p><strong>TypeScript Playground Online:</strong> To super narzędzie! Możesz w nim pisać kod TypeScript bezpośrednio w przeglądarce, zobaczyć, jak jest kompilowany do JavaScriptu i od razu sprawdzić błędy typów. Idealne do szybkich eksperymentów i testowania małych fragmentów kodu.</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/play\">TypeScript: TS Playground - An online editor for exploring TypeScript and JavaScript</a></li>\n</ul>\n</li>\n<li>\n<p><strong>Stack Overflow:</strong> To prawdziwa skarbnica wiedzy dla programistów! Jeśli masz konkretne pytanie lub natkniesz się na błąd, szanse są ogromne, że ktoś już miał podobny problem i rozwiązanie jest dostępne. Używaj tagu <code>[typescript]</code> w swoich pytaniach.</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/tagged/typescript\">Newest 'typescript' Questions - Stack Overflow</a></li>\n</ul>\n</li>\n<li>\n<p><strong>Społeczności na Discordzie i Forach:</strong> Istnieje wiele aktywnych społeczności, gdzie możesz zadawać pytania i dyskutować z innymi deweloperami. Poszukaj serwerów Discord poświęconych JavaScriptowi, Node.js czy frontendowi – na pewno znajdziesz tam kanały poświęcone TypeScriptowi.</p>\n</li>\n<li>\n<p><strong>GitHub:</strong> Przeglądaj projekty open-source napisane w TypeScript! To świetny sposób, aby zobaczyć, jak inni deweloperzy używają typów w praktyce i jakie wzorce stosują. Możesz też zadawać pytania w sekcji \"Issues\" danego projektu.</p>\n</li>\n<li>\n<p><strong>Kursy online i YouTube:</strong> Mnóstwo darmowych i płatnych kursów, a także kanałów na YouTube, oferuje świetne samouczki dotyczące TypeScripta. Znajdź styl nauki, który najbardziej Ci odpowiada! 🎬</p>\n</li>\n</ul>\n<p>Pamiętaj, że każdy kiedyś zaczynał! Nie krępuj się zadawać pytań, nawet jeśli wydają Ci się proste. Wzajemna pomoc to podstawa silnej społeczności programistów. Działaj! 💪</p>\n<hr>\n<h2 id=\"zadania-praktyczne-ćwicz-ćwicz-ćwicz\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-praktyczne-ćwicz-ćwicz-ćwicz\">>></a>Zadania Praktyczne: Ćwicz, ćwicz, ćwicz!</h2>\n<p>Teoria to jedno, ale prawdziwa nauka dzieje się, gdy piszesz kod! Spróbuj samodzielnie rozwiązać poniższe zadania. Nie bój się popełniać błędów – to najlepszy sposób na naukę! Zanim zajrzysz do rozwiązań, spróbuj pogłówkować trochę sam/a. Powodzenia! 🍀</p>\n<hr>\n<h3 id=\"zadanie-1-typowanie-zmiennych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-typowanie-zmiennych\">>>></a>Zadanie 1: Typowanie zmiennych</h3>\n<p>Zadeklaruj trzy zmienne z jawnym typowaniem:</p>\n<ul>\n<li><code>mojaLiczba</code> typu <code>number</code> i przypisz jej dowolną liczbę.</li>\n<li><code>mojTekst</code> typu <code>string</code> i przypisz jej dowolny tekst.</li>\n<li><code>czyJestSlonce</code> typu <code>boolean</code> i przypisz jej wartość logiczną.</li>\n</ul>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">mojaLiczba</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">77</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">mojTekst</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"TypeScript jest super!\"</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">czyJestSlonce</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(mojaLiczba, mojTekst, czyJestSlonce);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-funkcja-z-typowanymi-argumentami-i-wartością-zwracaną\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-funkcja-z-typowanymi-argumentami-i-wartością-zwracaną\">>>></a>Zadanie 2: Funkcja z typowanymi argumentami i wartością zwracaną</h3>\n<p>Napisz funkcję o nazwie <code>pomnozDwieLiczby</code>, która:</p>\n<ul>\n<li>Przyjmuje dwa argumenty: <code>parametr1</code> i <code>parametr2</code>, oba typu <code>number</code>.</li>\n<li>Zwraca ich iloczyn (wynik mnożenia), który również powinien być typu <code>number</code>.</li>\n<li>Wywołaj tę funkcję i wypisz wynik w konsoli.</li>\n</ul>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 2</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pomnozDwieLiczby</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">parametr1</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">parametr2</span>: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> parametr1 * parametr2;\n}\n\n<span class=\"hljs-keyword\">const</span> wynikMnozenia = <span class=\"hljs-title function_\">pomnozDwieLiczby</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Wynik mnożenia to: <span class=\"hljs-subst\">${wynikMnozenia}</span>`</span>); <span class=\"hljs-comment\">// Powinno wypisać: Wynik mnożenia to: 54</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-interfejs-i-obiekt-użytkownika\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-interfejs-i-obiekt-użytkownika\">>>></a>Zadanie 3: Interfejs i obiekt użytkownika</h3>\n<p>Zdefiniuj interfejs <code>UzytkownikProfil</code> z następującymi polami:</p>\n<ul>\n<li><code>id</code>: typu <code>number</code></li>\n<li><code>nazwa</code>: typu <code>string</code></li>\n<li><code>email</code>: typu <code>string</code> (opcjonalny, użyj <code>?</code>)</li>\n<li><code>czyAktywny</code>: typu <code>boolean</code></li>\n</ul>\n<p>Następnie utwórz obiekt o nazwie <code>mojProfil</code> typu <code>UzytkownikProfil</code>, który będzie miał wszystkie wymagane pola oraz jedno opcjonalne.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 3</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UzytkownikProfil</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">email</span>?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// Opcjonalne pole</span>\n  <span class=\"hljs-attr\">czyAktywny</span>: <span class=\"hljs-built_in\">boolean</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mojProfil</span>: <span class=\"hljs-title class_\">UzytkownikProfil</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1234</span>,\n  <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-string\">\"programistaJunior\"</span>,\n  <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"junior@example.com\"</span>, <span class=\"hljs-comment\">// Możesz dodać, ale nie musisz</span>\n  <span class=\"hljs-attr\">czyAktywny</span>: <span class=\"hljs-literal\">true</span>,\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(mojProfil);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-alias-typu-i-unia-typów-dla-statusu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-alias-typu-i-unia-typów-dla-statusu\">>>></a>Zadanie 4: Alias typu i unia typów dla statusu</h3>\n<p>Zdefiniuj alias typu o nazwie <code>StatusOperacji</code>, który może przyjąć jedną z trzech wartości tekstowych: <code>\"oczekujący\"</code>, <code>\"udany\"</code> lub <code>\"nieudany\"</code>. Następnie zadeklaruj zmienną <code>biezacyStatus</code> i przypisz jej jedną z tych wartości.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 4</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">StatusOperacji</span> = <span class=\"hljs-string\">\"oczekujący\"</span> | <span class=\"hljs-string\">\"udany\"</span> | <span class=\"hljs-string\">\"nieudany\"</span>;\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">biezacyStatus</span>: <span class=\"hljs-title class_\">StatusOperacji</span> = <span class=\"hljs-string\">\"udany\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Aktualny status: <span class=\"hljs-subst\">${biezacyStatus}</span>`</span>);\n\n<span class=\"hljs-comment\">// biezacyStatus = \"w toku\"; // 🚨 Błąd! Typ '\"w toku\"' nie jest przypisywalny do typu 'StatusOperacji'.</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-5-klasa-z-dziedziczeniem-i-metodą\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-klasa-z-dziedziczeniem-i-metodą\">>>></a>Zadanie 5: Klasa z dziedziczeniem i metodą</h3>\n<p>Stwórz klasę <code>Pojazd</code> z polem <code>marka</code> (string) i metodą <code>jedz()</code>, która wypisuje komunikat \"Pojazd jedzie.\".\nNastępnie utwórz klasę <code>Samochod</code> dziedziczącą po <code>Pojazd</code>. W klasie <code>Samochod</code> dodaj pole <code>model</code> (string) i nadpisz metodę <code>jedz()</code>, aby wypisywała np. \"Samochód [marka] [model] jedzie z piskiem opon!\".\nUtwórz instancję klasy <code>Samochod</code> i wywołaj jej metodę <code>jedz()</code>.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 5</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pojazd</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">marka</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n\n  <span class=\"hljs-title function_\">jedz</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Pojazd jedzie.\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Samochod</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Pojazd</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">marka</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">model</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">super</span>(marka); <span class=\"hljs-comment\">// Wywołanie konstruktora klasy bazowej</span>\n  }\n\n  <span class=\"hljs-comment\">// Nadpisanie metody jedz()</span>\n  <span class=\"hljs-title function_\">jedz</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n      <span class=\"hljs-string\">`Samochód <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.marka}</span> <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.model}</span> jedzie z piskiem opon! 🚗💨`</span>\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> mojSamochod = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Samochod</span>(<span class=\"hljs-string\">\"Tesla\"</span>, <span class=\"hljs-string\">\"Model 3\"</span>);\nmojSamochod.<span class=\"hljs-title function_\">jedz</span>(); <span class=\"hljs-comment\">// Oczekiwany wynik: Samochód Tesla Model 3 jedzie z piskiem opon! 🚗💨</span>\n</code></pre>\n</details>\n<hr>\n<h2 id=\"podsumowanie-czas-na-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie-czas-na-typescript\">>></a>Podsumowanie: Czas na TypeScript!</h2>\n<p>Mega robota! Dotarłeś/aś do końca wprowadzenia do TypeScript! 🥳 Mam nadzieję, że teraz rozumiesz, czym jest TypeScript, dlaczego jest tak potężnym narzędziem i jak możesz go wykorzystać w swoich projektach. Statyczne typowanie, lepsze narzędzia deweloperskie i czytelniejszy kod to tylko niektóre z jego zalet.</p>\n<p>TypeScript to nie tylko język, to filozofia pisania kodu, która promuje bezpieczeństwo, przewidywalność i łatwość współpracy. Jeśli chcesz pisać nowoczesny, bezpieczny i skalowalny kod JavaScript, TypeScript jest Twoim sprzymierzeńcem.</p>\n<p><strong>Moja rada na koniec:</strong> Zacznij używać TypeScripta w swoich małych projektach. Eksperymentuj, popełniaj błędy i ucz się na nich. Tylko w ten sposób naprawdę zrozumiesz jego moc. A jeśli masz jakieś pytania – wiesz, gdzie mnie szukać! 😉</p>\n<p>Gotowy/a na kolejne wyzwania z TypeScriptem, czy może masz już jakiś pomysł na swój pierwszy projekt z jego wykorzystaniem? Daj znać! 👇</p>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-typescript.md","readingTime","29 minut"]
