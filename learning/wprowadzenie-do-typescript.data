[{"_1":2},"course-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_16":17,"_20":21,"_22":23,"_24":25,"_26":27,"_28":29},"title","Wprowadzenie do TypeScript","description","Dowiedz się czym jest TypeScript, jak zacząć z niego korzystać i dlaczego warto go używać w swoich projektach. Przystępny przewodnik dla początkujących z przykładami i praktycznymi wskazówkami.","keywords",[11,12,13,14,15],"TypeScript","JavaScript","programowanie","frontend","typowanie","categories",[18,19],"wprowadzenie","typescript","createdAt","2025-06-23","id","9baee156-b9f6-4b37-a791-3c6a2fee1186","slug","wprowadzenie-do-typescript","content","<p>TypeScript to coraz popularniejszy język programowania, który rozszerza możliwości jakie daje JavaScript. Jeżeli pracowałeś już z JavaScript, na pewno docenisz dodatkowe bezpieczeństwo i wygodę, które oferuje TypeScript! 🚀</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#co-to-jest-typescript\">Co to jest TypeScript?</a></li>\n<li><a href=\"#czym-r%C3%B3%C5%BCni-si%C4%99-typescript-od-javascript\">Czym różni się TypeScript od JavaScript?</a></li>\n<li><a href=\"#dlaczego-warto-korzysta%C4%87-z-typescript\">Dlaczego warto korzystać z TypeScript?</a></li>\n<li><a href=\"#jak-zacz%C4%85%C4%87-z-typescript\">Jak zacząć z TypeScript?</a>\n<ul>\n<li><a href=\"#instalacja\">Instalacja</a></li>\n<li><a href=\"#kompilacja-plik%C3%B3w-ts-do-js\">Kompilacja plików <code>.ts</code> do <code>.js</code></a></li>\n<li><a href=\"#konfiguracja-projektu-i-tsconfigjson\">Konfiguracja projektu i tsconfig.json</a></li>\n<li><a href=\"#tw%C3%B3j-pierwszy-projekt-typescript\">Twój pierwszy projekt TypeScript</a></li>\n</ul>\n</li>\n<li><a href=\"#podstawy-sk%C5%82adni-typescript\">Podstawy składni TypeScript</a>\n<ul>\n<li><a href=\"#typowanie-zmiennych\">Typowanie zmiennych</a></li>\n<li><a href=\"#typowanie-funkcji\">Typowanie funkcji</a></li>\n<li><a href=\"#interfejsy\">Interfejsy</a></li>\n<li><a href=\"#typy-z%C5%82o%C5%BCone\">Typy złożone</a></li>\n<li><a href=\"#klasy-i-dziedziczenie\">Klasy i dziedziczenie</a></li>\n<li><a href=\"#enumy\">Enumy</a></li>\n<li><a href=\"#alias-typ%C3%B3w\">Alias typów</a></li>\n</ul>\n</li>\n<li><a href=\"#jak-u%C5%BCywa%C4%87-typ%C3%B3w-w-praktyce\">Jak używać typów w praktyce?</a></li>\n<li><a href=\"#narz%C4%99dzia-i-integracje\">Narzędzia i integracje</a></li>\n<li><a href=\"#cz%C4%99ste-pu%C5%82apki-i-wskaz%C3%B3wki\">Częste pułapki i wskazówki</a>\n<ul>\n<li><a href=\"#najcz%C4%99stsze-b%C5%82%C4%99dy-i-jak-je-naprawi%C4%87\">Najczęstsze błędy i jak je naprawić</a></li>\n</ul>\n</li>\n<li><a href=\"#typescript-w-projektach-open-source-i-pracy-zespo%C5%82owej\">TypeScript w projektach open-source i pracy zespołowej</a></li>\n<li><a href=\"#gdzie-znale%C5%BA%C4%87-deklaracje-typ%C3%B3w-do-bibliotek-js\">Gdzie znaleźć deklaracje typów do bibliotek JS?</a></li>\n<li><a href=\"#gdzie-szuka%C4%87-pomocy\">Gdzie szukać pomocy?</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"co-to-jest-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-typescript\">>></a>Co to jest TypeScript?</h2>\n<p>TypeScript to nadzbiór JavaScriptu stworzony przez Microsoft. Oznacza to, że każdy poprawny kod JavaScript jest też poprawnym kodem TypeScript. TypeScript wprowadza jednak <strong>statyczne typowanie</strong>, co pozwala na wcześniejsze wykrywanie błędów w kodzie i daje wiele narzędzi do pisania lepiej zorganizowanych aplikacji.</p>\n<ul>\n<li><strong>JavaScript + Typy = TypeScript</strong></li>\n<li>Pliki TypeScript mają rozszerzenie <code>.ts</code> (zamiast <code>.js</code>).</li>\n<li>TypeScript kompiluje się do „czystego” JavaScriptu, który działa w każdej przeglądarce lub środowisku Node.js.</li>\n</ul>\n<hr>\n<h2 id=\"czym-różni-się-typescript-od-javascript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-różni-się-typescript-od-javascript\">>></a>Czym różni się TypeScript od JavaScript?</h2>\n<p>TypeScript to JavaScript z dodatkowymi możliwościami typowania i narzędziami dla programistów.</p>\n<ul>\n<li><strong>Kompilacja</strong>: Kod TypeScript musi zostać przetłumaczony (skompliowany) do JavaScriptu, zanim zostanie uruchomiony w przeglądarce lub Node.js.</li>\n<li><strong>Typowanie</strong>: TypeScript pozwala wykryć błędy typów już podczas pisania kodu, zanim uruchomisz aplikację. JavaScript wykrywa większość błędów dopiero w czasie działania.</li>\n<li><strong>Lepsze wsparcie dla narzędzi</strong>: Edytory kodu mogą lepiej podpowiadać i wykrywać błędy w kodzie TypeScript dzięki znajomości typów.</li>\n</ul>\n<hr>\n<h2 id=\"dlaczego-warto-korzystać-z-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-warto-korzystać-z-typescript\">>></a>Dlaczego warto korzystać z TypeScript?</h2>\n<ul>\n<li><strong>Bezpieczeństwo</strong> – statyczne typowanie pomaga uniknąć wielu błędów, które normalnie wykryłbyś dopiero w trakcie działania aplikacji.</li>\n<li><strong>Lepsza czytelność</strong> – typy są jak dokumentacja, która podpowiada co dana funkcja przyjmuje i zwraca, ułatwiając pracę w zespole.</li>\n<li><strong>Wsparcie dla nowoczesnych narzędzi</strong> – edytory kodu mogą lepiej podpowiadać, autouzupełniać i wykrywać błędy.</li>\n<li><strong>Skalowalność</strong> – kod staje się łatwiejszy do utrzymania, szczególnie w dużych projektach.</li>\n<li><strong>Łatwa integracja z istniejącym kodem JS</strong> – możesz stopniowo migrować projekt z JavaScriptu na TypeScript.</li>\n<li><strong>Popularność</strong> – TypeScript jest szeroko używany w dużych projektach open-source (np. Angular, VSCode, Deno).</li>\n<li><strong>Wspiera nowoczesne funkcje JS</strong> – pozwala korzystać z najnowszych funkcji JavaScript, nawet jeśli nie są jeszcze wspierane przez wszystkie przeglądarki.</li>\n</ul>\n<hr>\n<h2 id=\"jak-zacząć-z-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-zacząć-z-typescript\">>></a>Jak zacząć z TypeScript?</h2>\n<h3 id=\"instalacja\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#instalacja\">>>></a>Instalacja</h3>\n<p>Najprostszym sposobem na rozpoczęcie pracy z TypeScript jest instalacja globalna kompilatora:</p>\n<pre><code class=\"hljs language-bash\">npm install -g typescript\n</code></pre>\n<p>Sprawdź wersję poleceniem:</p>\n<pre><code class=\"hljs language-bash\">tsc --version\n</code></pre>\n<p>Możesz też dodać TypeScript jako zależność do swojego projektu:</p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev typescript\n</code></pre>\n<h3 id=\"kompilacja-plików-ts-do-js\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#kompilacja-plików-ts-do-js\">>>></a>Kompilacja plików <code>.ts</code> do <code>.js</code></h3>\n<p>TypeScript nie jest rozumiany bezpośrednio przez przeglądarki. Musisz najpierw <strong>skompilować</strong> (<code>transpilować</code>) swój kod do JavaScriptu:</p>\n<pre><code class=\"hljs language-bash\">tsc nazwa-pliku.ts\n</code></pre>\n<p>To wygeneruje plik <code>nazwa-pliku.js</code> gotowy do użycia w przeglądarce lub Node.js.</p>\n<h3 id=\"konfiguracja-projektu-i-tsconfigjson\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#konfiguracja-projektu-i-tsconfigjson\">>>></a>Konfiguracja projektu i tsconfig.json</h3>\n<p>W większych projektach warto utworzyć plik <code>tsconfig.json</code>, aby skonfigurować ustawienia kompilatora:</p>\n<pre><code class=\"hljs language-bash\">tsc --init\n</code></pre>\n<p>Przykładowy plik <code>tsconfig.json</code>:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"compilerOptions\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"target\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"es6\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"module\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"commonjs\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"strict\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"outDir\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"./dist\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"include\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"src/**/*\"</span><span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<ul>\n<li><code>target</code> – do jakiej wersji JS kompilować kod,</li>\n<li><code>module</code> – jakiego systemu modułów używać,</li>\n<li><code>strict</code> – włącza rygorystyczne sprawdzanie typów,</li>\n<li><code>outDir</code> – gdzie mają trafić pliki <code>.js</code> po kompilacji,</li>\n<li><code>include</code> – które pliki mają być kompilowane.</li>\n</ul>\n<h3 id=\"twój-pierwszy-projekt-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#twój-pierwszy-projekt-typescript\">>>></a>Twój pierwszy projekt TypeScript</h3>\n<ol>\n<li>\n<p>Utwórz folder projektu i zainicjuj npm:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> moj-projekt-ts\n<span class=\"hljs-built_in\">cd</span> moj-projekt-ts\nnpm init -y\nnpm install typescript --save-dev\nnpx tsc --init\n</code></pre>\n</li>\n<li>\n<p>Dodaj plik <code>src/index.ts</code> z dowolnym kodem, np.:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Hello TypeScript!\"</span>);\n</code></pre>\n</li>\n<li>\n<p>Skompiluj i uruchom:</p>\n<pre><code class=\"hljs language-bash\">npx tsc\nnode dist/index.js\n</code></pre>\n</li>\n</ol>\n<hr>\n<h2 id=\"podstawy-składni-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawy-składni-typescript\">>></a>Podstawy składni TypeScript</h2>\n<h3 id=\"typowanie-zmiennych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-zmiennych\">>>></a>Typowanie zmiennych</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">liczba</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">42</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">tekst</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Cześć TypeScript!\"</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">isActive</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>;\n</code></pre>\n<h3 id=\"typowanie-funkcji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-funkcji\">>>></a>Typowanie funkcji</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n</code></pre>\n<p>Możesz też typować parametry domyślne, opcjonalne i funkcje strzałkowe:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> powiedzHej = (<span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Gość\"</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">string</span> =></span> <span class=\"hljs-string\">`Hej, <span class=\"hljs-subst\">${imie}</span>!`</span>;\n</code></pre>\n<h3 id=\"interfejsy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#interfejsy\">>>></a>Interfejsy</h3>\n<p>Interfejsy pozwalają opisać strukturę obiektów:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Osoba</span> {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">email</span>?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// pole opcjonalne</span>\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">user</span>: <span class=\"hljs-title class_\">Osoba</span> = {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>,\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span>,\n};\n</code></pre>\n<h3 id=\"typy-złożone\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typy-złożone\">>>></a>Typy złożone</h3>\n<p>Możesz używać tablic, unii typów oraz typów własnych:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">liczby</span>: <span class=\"hljs-built_in\">number</span>[] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">tekstLubNumer</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-string\">\"hej\"</span>;\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Punkt</span> = { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">p</span>: <span class=\"hljs-title class_\">Punkt</span> = { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">7</span> };\n</code></pre>\n<h3 id=\"klasy-i-dziedziczenie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#klasy-i-dziedziczenie\">>>></a>Klasy i dziedziczenie</h3>\n<p>TypeScript wspiera klasy i dziedziczenie (OOP):</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Zwierze</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n  <span class=\"hljs-title function_\">wydajDzwiek</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Dźwięk!\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pies</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Zwierze</span> {\n  <span class=\"hljs-title function_\">wydajDzwiek</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Hau hau!\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> burek = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Pies</span>(<span class=\"hljs-string\">\"Burek\"</span>);\nburek.<span class=\"hljs-title function_\">wydajDzwiek</span>(); <span class=\"hljs-comment\">// Hau hau!</span>\n</code></pre>\n<h3 id=\"enumy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#enumy\">>>></a>Enumy</h3>\n<p>Enumy pozwalają na definiowanie własnych typów wyliczeniowych:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Kolor</span> {\n  <span class=\"hljs-title class_\">Czerwony</span>,\n  <span class=\"hljs-title class_\">Zielony</span>,\n  <span class=\"hljs-title class_\">Niebieski</span>,\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">ulubionyKolor</span>: <span class=\"hljs-title class_\">Kolor</span> = <span class=\"hljs-title class_\">Kolor</span>.<span class=\"hljs-property\">Zielony</span>;\n</code></pre>\n<h3 id=\"alias-typów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#alias-typów\">>>></a>Alias typów</h3>\n<p>Alias pozwala nazwać typ złożony:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-variable constant_\">ID</span> = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userId</span>: <span class=\"hljs-variable constant_\">ID</span> = <span class=\"hljs-number\">123</span>;\n</code></pre>\n<hr>\n<h2 id=\"jak-używać-typów-w-praktyce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-używać-typów-w-praktyce\">>></a>Jak używać typów w praktyce?</h2>\n<ul>\n<li><strong>Funkcje z typami zwracanymi i parametrami opcjonalnymi:</strong>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">powiedz</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">imie</span>?: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie ?? <span class=\"hljs-string\">\"nieznajomy\"</span>}</span>!`</span>;\n}\n</code></pre>\n</li>\n<li><strong>Łączenie kilku typów:</strong>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Admin</span> = { <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>; <span class=\"hljs-attr\">poziom</span>: <span class=\"hljs-built_in\">number</span> };\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Uzytkownik</span> = { <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"user\"</span>; <span class=\"hljs-attr\">nick</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Osoba</span> = <span class=\"hljs-title class_\">Admin</span> | <span class=\"hljs-title class_\">Uzytkownik</span>;\n</code></pre>\n</li>\n<li><strong>Tablice obiektów o określonym typie:</strong>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">osoby</span>: <span class=\"hljs-title class_\">Osoba</span>[] = [\n  { <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>, <span class=\"hljs-attr\">poziom</span>: <span class=\"hljs-number\">1</span> },\n  { <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-attr\">nick</span>: <span class=\"hljs-string\">\"kuba\"</span> },\n];\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id=\"narzędzia-i-integracje\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#narzędzia-i-integracje\">>></a>Narzędzia i integracje</h2>\n<p>TypeScript świetnie współpracuje z popularnymi frameworkami frontendowymi jak React, Angular czy Vue. Wiele projektów open-source już teraz korzysta z TypeScriptu, więc znajomość tego języka to duży plus na rynku pracy!</p>\n<ul>\n<li><strong>VSCode</strong> – edytor Microsoftu ma doskonałe wsparcie dla TypeScript (podpowiedzi, refaktoryzacje, szybkie przechodzenie po kodzie).</li>\n<li><strong>tsconfig.json</strong> – plik konfiguracyjny pozwalający dostosować kompilację do potrzeb projektu.</li>\n<li><strong>Integracja z narzędziami budującymi</strong> – TypeScript można łatwo połączyć z Webpackiem, Babel, ESLint i innymi.</li>\n<li><strong>Systemy CI/CD</strong> – TypeScript jest łatwy do zintegrowania z pipeline’ami (np. GitHub Actions, GitLab CI).</li>\n</ul>\n<hr>\n<h2 id=\"częste-pułapki-i-wskazówki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#częste-pułapki-i-wskazówki\">>></a>Częste pułapki i wskazówki</h2>\n<ul>\n<li><strong>Nie musisz typować wszystkiego!</strong> – na początek możesz typować tylko kluczowe fragmenty kodu, stopniowo rozszerzając typowanie.</li>\n<li><strong>Stopniowa migracja</strong> – możesz przerabiać swój projekt z JavaScriptu na TypeScript krok po kroku, np. zmieniając rozszerzenia plików na <code>.ts</code> i naprawiając błędy kompilatora.</li>\n<li><strong>Współpraca z bibliotekami JS</strong> – TypeScript obsługuje pliki deklaracji typów (<code>@types/</code>), które pozwalają korzystać z popularnych bibliotek JavaScript z pełnym wsparciem typów. Wystarczy zainstalować odpowiedni pakiet, np.:\n<pre><code class=\"hljs language-bash\">npm install --save-dev @types/lodash\n</code></pre>\n</li>\n<li><strong>Wyłączaj sprawdzanie niektórych plików</strong> – możesz pominąć sprawdzanie typów dla wybranych plików przez dodanie <code>// @ts-nocheck</code> na górze pliku.</li>\n<li><strong>Czytaj błędy kompilatora</strong> – komunikaty TypeScript są najczęściej bardzo pomocne i dokładnie tłumaczą, co należy poprawić.</li>\n</ul>\n<h3 id=\"najczęstsze-błędy-i-jak-je-naprawić\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#najczęstsze-błędy-i-jak-je-naprawić\">>>></a>Najczęstsze błędy i jak je naprawić</h3>\n<ul>\n<li>\n<p><strong>Błąd typowania:</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-string\">\"25\"</span>; <span class=\"hljs-comment\">// Błąd: Type 'string' is not assignable to type 'number'</span>\n</code></pre>\n<p><strong>Popraw:</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">25</span>;\n</code></pre>\n</li>\n<li>\n<p><strong>Brak typu dla zwracanej wartości funkcji:</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">zwrocTekst</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>;\n}\n</code></pre>\n<p><strong>Popraw:</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">zwrocTekst</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Tekst\"</span>;\n}\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id=\"typescript-w-projektach-open-source-i-pracy-zespołowej\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typescript-w-projektach-open-source-i-pracy-zespołowej\">>></a>TypeScript w projektach open-source i pracy zespołowej</h2>\n<ul>\n<li>TypeScript pomaga w pracy zespołowej, bo kod jest bardziej czytelny i przewidywalny.</li>\n<li>Wiele popularnych bibliotek (np. React, Angular, Express) ma swoje typy lub nawet są napisane w TypeScript.</li>\n<li>W dużych projektach firmowych i open-source praktycznie zawsze warto używać TypeScriptu, by uniknąć błędów i zwiększyć produktywność zespołu.</li>\n</ul>\n<hr>\n<h2 id=\"gdzie-znaleźć-deklaracje-typów-do-bibliotek-js\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#gdzie-znaleźć-deklaracje-typów-do-bibliotek-js\">>></a>Gdzie znaleźć deklaracje typów do bibliotek JS?</h2>\n<p>Nie każda biblioteka JavaScript ma wbudowane typy. Możesz jednak łatwo doinstalować oficjalne deklaracje typów.</p>\n<ul>\n<li>Szukaj paczek <code>@types/</code> w npm, np. dla Lodash:\n<pre><code class=\"hljs language-bash\">npm install --save-dev @types/lodash\n</code></pre>\n</li>\n<li>Dzięki temu możesz korzystać z bibliotek JS z pełną obsługą typów w TypeScript.</li>\n</ul>\n<hr>\n<h2 id=\"gdzie-szukać-pomocy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#gdzie-szukać-pomocy\">>></a>Gdzie szukać pomocy?</h2>\n<ul>\n<li>Oficjalna dokumentacja: <a href=\"https://www.typescriptlang.org/docs/\">https://www.typescriptlang.org/docs/</a></li>\n<li>Playground online: <a href=\"https://www.typescriptlang.org/play\">https://www.typescriptlang.org/play</a></li>\n<li>Społeczność: Stack Overflow, Discord, GitHub, fora tematyczne</li>\n</ul>\n<p>Dodatkowo na GitHubie znajdziesz mnóstwo przykładowych projektów opartych o TypeScript, które mogą posłużyć za inspirację.</p>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>TypeScript to świetne narzędzie dla każdego, kto chce pisać nowoczesny, bezpieczny i skalowalny kod JavaScript. Dzięki statycznemu typowaniu, lepszej czytelności i wsparciu dla narzędzi deweloperskich praca z nim staje się łatwiejsza i przyjemniejsza. Jeśli jeszcze nie próbowałeś – spróbuj! 👨🏻‍💻👩🏼‍💻</p>\n<p>Masz pytania? Śmiało pisz do mnie lub zostaw komentarz!</p>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-typescript.md"]
