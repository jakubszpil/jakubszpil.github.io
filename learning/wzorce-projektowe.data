[{"_1":2},"course-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_19":20,"_22":23,"_24":25,"_70":71,"_72":21,"_73":74,"_75":76,"_77":78},"title","Wzorce projektowe w praktyce","description","Kompleksowy przewodnik po wzorcach projektowych — od podstaw po praktyczne przykłady w kontekście frontendu i backendu.","keywords",[11,12,13,14,15,16,17,18],"wzorce projektowe","programowanie","typescript","javascript","frontend","backend","kurs","learning","categories",[21,13],"wzorce-projektowe","createdAt","2025-06-22T00:00:00.000Z","quiz",{"_5":26,"_27":28},"Quiz: Wzorce projektowe","questions",[29,42,51,57,65],{"_30":31,"_32":33,"_38":39,"_40":41},"question","<p>Do której grupy należy wzorzec Singleton?</p>","options",[34,35,36,37],"Strukturalne","Funkcyjne","Kreacyjne","Behawioralne","answer",2,"explanation","Singleton to wzorzec kreacyjny – dotyczy sposobu tworzenia obiektów.",{"_30":43,"_32":44,"_38":49,"_40":50},"<p>Który wzorzec umożliwia zamianę jednego interfejsu na inny, by umożliwić współpracę niekompatybilnych klas?</p>",[45,46,47,48],"Observer","Adapter","Builder","Facade",1,"Adapter tłumaczy jeden interfejs na inny.",{"_30":52,"_32":53,"_38":39,"_40":56},"<p>Który wzorzec pozwala powiadamiać wiele obiektów o zmianie stanu bez ścisłego powiązania?</p>",[54,55,45,48],"Strategy","Factory","Observer służy do powiadamiania wielu obiektów o zmianie stanu.",{"_30":58,"_32":59,"_38":39,"_40":64},"<p>Co umożliwia wzorzec Strategy?</p>",[60,61,62,63],"Uproszczenie złożonego interfejsu","Tworzenie jednej instancji klasy","Dynamiczną zmianę algorytmu działania programu","Budowanie złożonych obiektów krok po kroku","Strategy pozwala dynamicznie zmieniać algorytm działania programu.",{"_30":66,"_32":67,"_38":49,"_40":69},"<p>Który wzorzec stosujesz, by uprościć korzystanie z kilku skomplikowanych systemów przez jeden prosty interfejs?</p>",[46,48,47,68],"Singleton","Facade upraszcza złożone systemy przez prosty interfejs.","id","92175feb-27ca-42e5-9707-5cfe5ae185d7","slug","content","<p>Poznaj praktyczne zastosowania najważniejszych <strong>wzorców projektowych</strong> — prosto, przystępnie, z przykładami w <strong>TypeScript</strong> oraz z zadaniami do samodzielnego wykonania! 🏗️🚀</p>\n<p>Ten przewodnik to nie tylko teoria, ale również konkretne przykłady, wskazówki i gotowe rozwiązania do typowych problemów programistycznych, zarówno po stronie frontendu, jak i backendu.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-s%C4%85-wzorce-projektowe\">Czym są wzorce projektowe?</a></li>\n<li><a href=\"#jak-je-dzielimy\">Jak je dzielimy?</a></li>\n<li><a href=\"#wzorce-kreacyjne\">Wzorce kreacyjne</a>\n<ul>\n<li><a href=\"#singleton\">Singleton</a></li>\n<li><a href=\"#factory-method\">Factory Method</a></li>\n<li><a href=\"#builder\">Builder</a></li>\n</ul>\n</li>\n<li><a href=\"#wzorce-strukturalne\">Wzorce strukturalne</a>\n<ul>\n<li><a href=\"#facade\">Facade</a></li>\n<li><a href=\"#adapter\">Adapter</a></li>\n</ul>\n</li>\n<li><a href=\"#wzorce-behawioralne\">Wzorce behawioralne</a>\n<ul>\n<li><a href=\"#observer\">Observer</a></li>\n<li><a href=\"#strategy\">Strategy</a></li>\n</ul>\n</li>\n<li><a href=\"#zastosowania-wzorc%C3%B3w-w-praktyce\">Zastosowania wzorców w praktyce</a></li>\n<li><a href=\"#przydatne-narz%C4%99dzia-i-materia%C5%82y\">Przydatne narzędzia i materiały</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1-singleton-w-praktyce\">Zadanie 1: Singleton w praktyce</a></li>\n<li><a href=\"#zadanie-2-factory-dla-przycisk%C3%B3w\">Zadanie 2: Factory dla przycisków</a></li>\n<li><a href=\"#zadanie-3-builder-do-pizzy\">Zadanie 3: Builder do pizzy</a></li>\n<li><a href=\"#zadanie-4-adapter--stare-i-nowe-api\">Zadanie 4: Adapter — stare i nowe API</a></li>\n<li><a href=\"#zadanie-5-strategy--wyb%C3%B3r-algorytmu-p%C5%82atno%C5%9Bci\">Zadanie 5: Strategy — wybór algorytmu płatności</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-są-wzorce-projektowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-są-wzorce-projektowe\">>></a>Czym są wzorce projektowe?</h2>\n<p><strong>Wzorce projektowe</strong> (Design Patterns) to sprawdzone, uniwersalne rozwiązania dla często spotykanych problemów w programowaniu. Możesz potraktować je jak gotowe \"przepisy\" — zamiast wymyślać wszystko od nowa, korzystasz z doświadczenia i najlepszych praktyk innych inżynierów oprogramowania. Są to abstrakcyjne koncepcje, które należy zaadaptować do konkretnego kontekstu problemu.</p>\n<h3 id=\"dlaczego-warto-ich-używać\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-warto-ich-używać\">>>></a>Dlaczego warto ich używać?</h3>\n<ul>\n<li>🤝 <strong>Ułatwiają komunikację w zespole:</strong> Kiedy używasz nazwy wzorca, wszyscy w zespole rozumieją intencje i strukturę danego rozwiązania.</li>\n<li>🏗️ <strong>Poprawiają strukturę, elastyczność i czytelność kodu:</strong> Wzorce promują modułowość, separację odpowiedzialności i otwarte na rozbudowę, ale zamknięte na modyfikację rozwiązania.</li>\n<li>⚡ <strong>Przyspieszają projektowanie i rozwój systemów:</strong> Nie musisz \"wynajdować koła na nowo\", możesz skupić się na unikalnych aspektach swojej aplikacji.</li>\n<li>🐞 <strong>Pozwalają unikać typowych błędów:</strong> Wzorce projektowe to rozwiązania, które przetrwały próbę czasu i zostały zoptymalizowane pod kątem stabilności i efektywności.</li>\n</ul>\n<hr>\n<h2 id=\"jak-je-dzielimy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-je-dzielimy\">>></a>Jak je dzielimy?</h2>\n<p>Wzorce projektowe są klasyfikowane na podstawie ich celu i problemu, który rozwiązują. Najpopularniejszy podział pochodzi z książki \"Design Patterns: Elements of Reusable Object-Oriented Software\" (tzw. Gang of Four - GoF):</p>\n<ol>\n<li><strong>Kreacyjne (Creational Patterns)</strong> — dotyczą sposobów tworzenia obiektów, zapewniając elastyczność i kontrolę nad procesem instancjonowania. Przykłady: Singleton, Factory Method, Builder.</li>\n<li><strong>Strukturalne (Structural Patterns)</strong> — pokazują, jak łączyć obiekty i klasy w większe struktury, zachowując ich elastyczność i efektywność. Przykłady: Facade, Adapter.</li>\n<li><strong>Behawioralne (Behavioral Patterns)</strong> — opisują interakcje i przepływ informacji między obiektami, ułatwiając komunikację i zarządzanie złożonym zachowaniem. Przykłady: Observer, Strategy.</li>\n</ol>\n<p>Każda kategoria rozwiązuje inne typy problemów, dlatego tak ważne jest, by znać przynajmniej po jednym wzorcu z każdej grupy.</p>\n<hr>\n<h2 id=\"wzorce-kreacyjne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wzorce-kreacyjne\">>></a>Wzorce kreacyjne</h2>\n<p>Wzorce kreacyjne koncentrują się na procesie tworzenia obiektów. Pozwalają na dynamiczne i elastyczne tworzenie instancji, oddzielając logikę tworzenia od klienta, który ich używa.</p>\n<h3 id=\"singleton\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#singleton\">>>></a>Singleton</h3>\n<p>Wzorzec <strong>Singleton</strong> zapewnia, że dana klasa posiada tylko jedną instancję w całej aplikacji i jednocześnie dostarcza globalny punkt dostępu do tej instancji. Jest to użyteczne w sytuacjach, gdy tylko jeden obiekt danego typu powinien istnieć.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Logger</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-attr\">instance</span>: <span class=\"hljs-title class_\">Logger</span>; <span class=\"hljs-comment\">// Statyczna zmienna przechowująca instancję</span>\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// Prywatny konstruktor zapobiega tworzeniu nowych instancji z zewnątrz</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Logger instance created!\"</span>);\n  }\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getInstance</span>(): <span class=\"hljs-title class_\">Logger</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-property\">instance</span>) {\n      <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-property\">instance</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Logger</span>();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-property\">instance</span>;\n  }\n\n  <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-keyword\">const</span> timestamp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">toISOString</span>();\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`[<span class=\"hljs-subst\">${timestamp}</span>] <span class=\"hljs-subst\">${message}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> logger1 = <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-title function_\">getInstance</span>();\nlogger1.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"First log message.\"</span>);\n\n<span class=\"hljs-keyword\">const</span> logger2 = <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-title function_\">getInstance</span>();\nlogger2.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Second log message.\"</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(logger1 === logger2); <span class=\"hljs-comment\">// Output: true (obie referencje wskazują na tę samą instancję)</span>\n</code></pre>\n<p><strong>Zastosowania:</strong> Konfiguracja aplikacji, połączenie z bazą danych, menedżer sesji, system logowania, menedżery zasobów (np. bufor obrazów).</p>\n<hr>\n<h3 id=\"factory-method\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#factory-method\">>>></a>Factory Method</h3>\n<p>Wzorzec <strong>Factory Method</strong> (Metoda Wytwórcza) definiuje interfejs do tworzenia obiektów, ale pozwala podklasom decydować, którą klasę instancjonować. Klient nie musi znać dokładnych klas konkretnych produktów, operuje na wspólnym interfejsie.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Interfejs produktu</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(): <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-title function_\">onClick</span>(): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Konkretne produkty</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WindowsButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;button style='background-color: blue;'>Windows Button&#x3C;/button>\"</span>;\n  }\n  <span class=\"hljs-title function_\">onClick</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Windows button clicked!\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MacButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;button style='background-color: gray;'>Mac Button&#x3C;/button>\"</span>;\n  }\n  <span class=\"hljs-title function_\">onClick</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Mac button clicked!\"</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Klasa kreatora (fabryki)</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ButtonFactory</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-attr\">os</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">Button</span> {\n    <span class=\"hljs-keyword\">if</span> (os === <span class=\"hljs-string\">\"Windows\"</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WindowsButton</span>();\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (os === <span class=\"hljs-string\">\"Mac\"</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MacButton</span>();\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">\"Unknown OS type.\"</span>);\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> windowsBtn = <span class=\"hljs-title class_\">ButtonFactory</span>.<span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-string\">\"Windows\"</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(windowsBtn.<span class=\"hljs-title function_\">render</span>());\nwindowsBtn.<span class=\"hljs-title function_\">onClick</span>();\n\n<span class=\"hljs-keyword\">const</span> macBtn = <span class=\"hljs-title class_\">ButtonFactory</span>.<span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-string\">\"Mac\"</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(macBtn.<span class=\"hljs-title function_\">render</span>());\nmacBtn.<span class=\"hljs-title function_\">onClick</span>();\n</code></pre>\n<p><strong>Zastosowania:</strong> Dynamiczne tworzenie elementów UI (w zależności od platformy lub konfiguracji), obsługa wielu formatów danych (np. parsery JSON, XML), integracja z zewnętrznymi systemami, gdzie typ obiektu zależy od konfiguracji.</p>\n<hr>\n<h3 id=\"builder\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#builder\">>>></a>Builder</h3>\n<p>Wzorzec <strong>Builder</strong> (Budowniczy) pozwala na tworzenie złożonych obiektów krok po kroku. Oddziela konstrukcję obiektu od jego reprezentacji, co pozwala na tworzenie różnych reprezentacji tego samego procesu budowania. Jest szczególnie przydatny, gdy obiekt ma wiele opcjonalnych parametrów.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Produkt, który ma być budowany</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pizza</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">dough</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">sauce</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">toppings</span>: <span class=\"hljs-built_in\">string</span>[],\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">cheese</span>: <span class=\"hljs-built_in\">boolean</span>\n  </span>) {}\n\n  <span class=\"hljs-title function_\">describe</span>(): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Pizza with <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.dough}</span> dough, <span class=\"hljs-subst\">${\n      <span class=\"hljs-variable language_\">this</span>.sauce\n    }</span> sauce, toppings: <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.toppings.join(<span class=\"hljs-string\">\", \"</span>)}</span> and <span class=\"hljs-subst\">${\n      <span class=\"hljs-variable language_\">this</span>.cheese ? <span class=\"hljs-string\">\"with\"</span> : <span class=\"hljs-string\">\"without\"</span>\n    }</span> cheese.`</span>;\n  }\n}\n\n<span class=\"hljs-comment\">// Klasa Buildera</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PizzaBuilder</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_dough</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"classic\"</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_sauce</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"tomato\"</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_toppings</span>: <span class=\"hljs-built_in\">string</span>[] = [];\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_cheese</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>;\n\n  <span class=\"hljs-title function_\">setDough</span>(<span class=\"hljs-attr\">doughType</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">PizzaBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_dough</span> = doughType;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>; <span class=\"hljs-comment\">// Zwracanie 'this' pozwala na łańcuchowanie metod</span>\n  }\n\n  <span class=\"hljs-title function_\">setSauce</span>(<span class=\"hljs-attr\">sauceType</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">PizzaBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_sauce</span> = sauceType;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">addTopping</span>(<span class=\"hljs-attr\">topping</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">PizzaBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_toppings</span>.<span class=\"hljs-title function_\">push</span>(topping);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">hasCheese</span>(<span class=\"hljs-attr\">has</span>: <span class=\"hljs-built_in\">boolean</span>): <span class=\"hljs-title class_\">PizzaBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_cheese</span> = has;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">build</span>(): <span class=\"hljs-title class_\">Pizza</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Pizza</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_dough</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_sauce</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_toppings</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_cheese</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> margherita = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PizzaBuilder</span>()\n  .<span class=\"hljs-title function_\">setSauce</span>(<span class=\"hljs-string\">\"pomodoro\"</span>)\n  .<span class=\"hljs-title function_\">addTopping</span>(<span class=\"hljs-string\">\"basil\"</span>)\n  .<span class=\"hljs-title function_\">build</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(margherita.<span class=\"hljs-title function_\">describe</span>());\n\n<span class=\"hljs-keyword\">const</span> customPizza = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PizzaBuilder</span>()\n  .<span class=\"hljs-title function_\">setDough</span>(<span class=\"hljs-string\">\"thin crust\"</span>)\n  .<span class=\"hljs-title function_\">setSauce</span>(<span class=\"hljs-string\">\"pesto\"</span>)\n  .<span class=\"hljs-title function_\">addTopping</span>(<span class=\"hljs-string\">\"chicken\"</span>)\n  .<span class=\"hljs-title function_\">addTopping</span>(<span class=\"hljs-string\">\"onions\"</span>)\n  .<span class=\"hljs-title function_\">hasCheese</span>(<span class=\"hljs-literal\">false</span>)\n  .<span class=\"hljs-title function_\">build</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(customPizza.<span class=\"hljs-title function_\">describe</span>());\n</code></pre>\n<p><strong>Zastosowania:</strong> Konfiguratory, kreatory złożonych obiektów (np. raportów, dokumentów PDF), generatory formularzy, obiekty z wieloma opcjonalnymi parametrami, gdzie bezpośredni konstruktor byłby zbyt skomplikowany.</p>\n<hr>\n<h2 id=\"wzorce-strukturalne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wzorce-strukturalne\">>></a>Wzorce strukturalne</h2>\n<p>Wzorce strukturalne zajmują się kompozycją klas i obiektów. Pomagają w tworzeniu dużych struktur z mniejszych elementów, jednocześnie zachowując ich elastyczność i uporządkowanie.</p>\n<h3 id=\"facade\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#facade\">>>></a>Facade</h3>\n<p>Wzorzec <strong>Facade</strong> (Fasada) dostarcza uproszczony interfejs do złożonego zestawu klas, biblioteki lub podsystemu. Ukrywa wewnętrzną złożoność, czyniąc system łatwiejszym w użyciu.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Złożony podsystem audio</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AudioSystem</span> {\n  <span class=\"hljs-title function_\">turnOn</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Audio system: On\"</span>);\n  }\n  <span class=\"hljs-title function_\">turnOff</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Audio system: Off\"</span>);\n  }\n  <span class=\"hljs-title function_\">setVolume</span>(<span class=\"hljs-attr\">level</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Audio system: Volume set to <span class=\"hljs-subst\">${level}</span>`</span>);\n  }\n  <span class=\"hljs-title function_\">playMusic</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Audio system: Playing music\"</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Złożony podsystem wideo</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VideoSystem</span> {\n  <span class=\"hljs-title function_\">turnOn</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Video system: On\"</span>);\n  }\n  <span class=\"hljs-title function_\">turnOff</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Video system: Off\"</span>);\n  }\n  <span class=\"hljs-title function_\">setResolution</span>(<span class=\"hljs-attr\">resolution</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Video system: Resolution set to <span class=\"hljs-subst\">${resolution}</span>`</span>);\n  }\n  <span class=\"hljs-title function_\">showMovie</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Video system: Showing movie \"<span class=\"hljs-subst\">${title}</span>\"`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Fasada dla Home Theater</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HomeTheaterFacade</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">audio</span>: <span class=\"hljs-title class_\">AudioSystem</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AudioSystem</span>();\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">video</span>: <span class=\"hljs-title class_\">VideoSystem</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VideoSystem</span>();\n\n  <span class=\"hljs-title function_\">startMovie</span>(<span class=\"hljs-attr\">movieTitle</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"nStarting movie...\"</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">audio</span>.<span class=\"hljs-title function_\">turnOn</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">audio</span>.<span class=\"hljs-title function_\">setVolume</span>(<span class=\"hljs-number\">7</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">turnOn</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">setResolution</span>(<span class=\"hljs-string\">\"4K\"</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">showMovie</span>(movieTitle);\n  }\n\n  <span class=\"hljs-title function_\">endMovie</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"nEnding movie...\"</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">turnOff</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">audio</span>.<span class=\"hljs-title function_\">turnOff</span>();\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> theater = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HomeTheaterFacade</span>();\ntheater.<span class=\"hljs-title function_\">startMovie</span>(<span class=\"hljs-string\">\"The Matrix\"</span>);\ntheater.<span class=\"hljs-title function_\">endMovie</span>();\n</code></pre>\n<p><strong>Zastosowania:</strong> Uproszczenie API dla skomplikowanych bibliotek, warstwy usług w architekturze (np. API gateway), integracja wielu zależności w jednym punkcie.</p>\n<hr>\n<h3 id=\"adapter\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#adapter\">>>></a>Adapter</h3>\n<p>Wzorzec <strong>Adapter</strong> (Adapter) pozwala na współpracę obiektom o niekompatybilnych interfejsach. Działa jak \"tłumacz\", który konwertuje interfejs jednej klasy na interfejs, którego oczekuje inna klasa.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Klasa ze starym, niekompatybilnym interfejsem</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OldLegacyPrinter</span> {\n  <span class=\"hljs-title function_\">printText</span>(<span class=\"hljs-attr\">text</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`[Old Legacy Printer] Printing text: \"<span class=\"hljs-subst\">${text}</span>\"`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Nowy, oczekiwany interfejs</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">NewModernPrinter</span> {\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Adapter, który dostosowuje stary interfejs do nowego</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PrinterAdapter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NewModernPrinter</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">oldPrinter</span>: <span class=\"hljs-title class_\">OldLegacyPrinter</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">printer</span>: <span class=\"hljs-title class_\">OldLegacyPrinter</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">oldPrinter</span> = printer;\n  }\n\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-comment\">// \"Tłumaczymy\" wywołanie z nowego interfejsu na stary</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">oldPrinter</span>.<span class=\"hljs-title function_\">printText</span>(content);\n  }\n}\n\n<span class=\"hljs-comment\">// Klient używający nowego interfejsu</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printDocument</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">printer</span>: <span class=\"hljs-title class_\">NewModernPrinter</span>, <span class=\"hljs-attr\">document</span>: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">void</span> {\n  printer.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-variable language_\">document</span>);\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> legacyPrinter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OldLegacyPrinter</span>();\n<span class=\"hljs-comment\">// printDocument(legacyPrinter, \"This will fail because interfaces don't match!\"); // Compile-time error</span>\n\n<span class=\"hljs-keyword\">const</span> adapter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PrinterAdapter</span>(legacyPrinter);\n<span class=\"hljs-title function_\">printDocument</span>(adapter, <span class=\"hljs-string\">\"Hello from the modern interface!\"</span>); <span class=\"hljs-comment\">// Działa!</span>\n</code></pre>\n<p><strong>Zastosowania:</strong> Integracja z zewnętrznymi bibliotekami o innym API, dostosowywanie starszego kodu do nowych standardów, migracje systemów, tworzenie warstw kompatybilności.</p>\n<hr>\n<h2 id=\"wzorce-behawioralne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wzorce-behawioralne\">>></a>Wzorce behawioralne</h2>\n<p>Wzorce behawioralne zajmują się algorytmami i przypisywaniem odpowiedzialności między obiektami. Opisują sposoby komunikacji i interakcji między obiektami.</p>\n<h3 id=\"observer\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#observer\">>>></a>Observer</h3>\n<p>Wzorzec <strong>Observer</strong> (Obserwator) definiuje mechanizm subskrypcji, dzięki któremu obiekt (tzw. <code>Subject</code> lub <code>Publisher</code>) może powiadamiać wiele innych obiektów (tzw. <code>Observers</code> lub <code>Subscribers</code>) o wszelkich zmianach stanu, bez ścisłego powiązania między nimi. Jest to kluczowy wzorzec w programowaniu reaktywnym i sterowanym zdarzeniami.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Interfejs Obserwatora</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Klasa Podmiotu (Subject)</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EventPublisher</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>[] = [];\n\n  <span class=\"hljs-title function_\">addObserver</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Observer added.\"</span>);\n  }\n\n  <span class=\"hljs-title function_\">removeObserver</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs</span>) =></span> obs !== observer);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Observer removed.\"</span>);\n  }\n\n  <span class=\"hljs-title function_\">notifyObservers</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Notifying observers with data:\"</span>, data);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> obs <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>) {\n      obs.<span class=\"hljs-title function_\">update</span>(data);\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// Konkretne klasy Obserwatorów</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoggerObserver</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`[Logger] Data received: <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(data)}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EmailSenderObserver</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`[EmailSender] Sending email about: <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(data)}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> publisher = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventPublisher</span>();\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggerObserver</span>();\n<span class=\"hljs-keyword\">const</span> emailSender = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EmailSenderObserver</span>();\n\npublisher.<span class=\"hljs-title function_\">addObserver</span>(logger);\npublisher.<span class=\"hljs-title function_\">addObserver</span>(emailSender);\n\npublisher.<span class=\"hljs-title function_\">notifyObservers</span>({ <span class=\"hljs-attr\">event</span>: <span class=\"hljs-string\">\"userLoggedIn\"</span>, <span class=\"hljs-attr\">userId</span>: <span class=\"hljs-number\">123</span> });\n\npublisher.<span class=\"hljs-title function_\">removeObserver</span>(emailSender);\npublisher.<span class=\"hljs-title function_\">notifyObservers</span>({ <span class=\"hljs-attr\">event</span>: <span class=\"hljs-string\">\"productAddedToCart\"</span>, <span class=\"hljs-attr\">productId</span>: <span class=\"hljs-number\">456</span> });\n</code></pre>\n<p><strong>Zastosowania:</strong> Systemy notyfikacji (np. powiadomienia email, SMS), reactive programming (np. RxJS), architektury event-driven (mikroserwisy), widoki UI reagujące na zmiany modelu danych (np. w frameworkach MVVM).</p>\n<hr>\n<h3 id=\"strategy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#strategy\">>>></a>Strategy</h3>\n<p>Wzorzec <strong>Strategy</strong> (Strategia) pozwala definiować rodzinę algorytmów, umieszczać każdy z nich w osobnej klasie i sprawiać, że są one wymienne. Klient może wybrać algorytm w trakcie działania aplikacji, bez zmiany struktury kodu.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Interfejs Strategii</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Konkretne Strategie</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PayPalStrategy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Paying <span class=\"hljs-subst\">${amount}</span> PLN using PayPal.`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CreditCardStrategy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Paying <span class=\"hljs-subst\">${amount}</span> PLN using Credit Card.`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BankTransferStrategy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Paying <span class=\"hljs-subst\">${amount}</span> PLN using Bank Transfer.`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Kontekst, który używa strategii</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ShoppingCart</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">paymentStrategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span>;\n\n  <span class=\"hljs-title function_\">setPaymentStrategy</span>(<span class=\"hljs-attr\">strategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">paymentStrategy</span> = strategy;\n  }\n\n  <span class=\"hljs-title function_\">checkout</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">paymentStrategy</span>) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Payment strategy not set!\"</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`nProcessing payment for <span class=\"hljs-subst\">${amount}</span> PLN...`</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">paymentStrategy</span>.<span class=\"hljs-title function_\">pay</span>(amount);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> cart = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ShoppingCart</span>();\n\ncart.<span class=\"hljs-title function_\">setPaymentStrategy</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PayPalStrategy</span>());\ncart.<span class=\"hljs-title function_\">checkout</span>(<span class=\"hljs-number\">150</span>);\n\ncart.<span class=\"hljs-title function_\">setPaymentStrategy</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CreditCardStrategy</span>());\ncart.<span class=\"hljs-title function_\">checkout</span>(<span class=\"hljs-number\">200</span>);\n\ncart.<span class=\"hljs-title function_\">setPaymentStrategy</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankTransferStrategy</span>());\ncart.<span class=\"hljs-title function_\">checkout</span>(<span class=\"hljs-number\">50</span>);\n</code></pre>\n<p><strong>Zastosowania:</strong> Algorytmy płatności, różne strategie walidacji danych, sortowania, eksportu danych, dynamiczna logika decyzyjna (np. AI), różne algorytmy kompresji plików.</p>\n<hr>\n<h2 id=\"zastosowania-wzorców-w-praktyce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zastosowania-wzorców-w-praktyce\">>></a>Zastosowania wzorców w praktyce</h2>\n<p>Wzorce projektowe nie są tylko teorią, ale są wszechobecne w realnych aplikacjach i frameworkach:</p>\n<ul>\n<li><strong>Frontend (React, Angular, Vue):</strong>\n<ul>\n<li><strong>Observer:</strong> Wiele bibliotek do zarządzania stanem (np. Redux, NgRx, Vuex) opiera się na idei obserwatorów. React Hooks (<code>useState</code>, <code>useEffect</code>) również w pewnym sensie korzystają z mechanizmów reaktywności podobnych do Observera.</li>\n<li><strong>Strategy:</strong> Dynamiczny wybór komponentów do renderowania na podstawie stanu aplikacji, różne strategie parsowania danych wejściowych.</li>\n<li><strong>Factory Method:</strong> Tworzenie instancji komponentów lub widżetów w zależności od konfiguracji.</li>\n<li><strong>Facade:</strong> Warstwa usług, która upraszcza komunikację z API backendowym lub złożonymi bibliotekami JS.</li>\n</ul>\n</li>\n<li><strong>Backend (Node.js, Java, .NET, Python):</strong>\n<ul>\n<li><strong>Singleton:</strong> Połączenia do bazy danych, menedżery konfiguracji, globalne instancje logowania.</li>\n<li><strong>Builder:</strong> Generowanie złożonych zapytań SQL, budowanie odpowiedzi HTTP, tworzenie obiektów z wieloma opcjonalnymi polami.</li>\n<li><strong>Adapter:</strong> Integracja z zewnętrznymi API (np. płatności, dostawcy SMS), dostosowywanie danych z legacy systemów.</li>\n<li><strong>Strategy:</strong> Różne algorytmy uwierzytelniania, polityki buforowania, procesy biznesowe.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"przydatne-narzędzia-i-materiały\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przydatne-narzędzia-i-materiały\">>></a>Przydatne narzędzia i materiały</h2>\n<p>Aby pogłębić swoją wiedzę i lepiej zrozumieć wzorce projektowe, polecam następujące zasoby:</p>\n<ul>\n<li><strong><a href=\"https://refactoring.guru/pl/design-patterns\">Refactoring.guru – wzorce projektowe po polsku i angielsku</a></strong>: Prawdopodobnie najlepsze źródło online z klarownymi opisami i przykładami kodu w wielu językach.</li>\n<li><strong><a href=\"https://www.typescriptlang.org/play\">TypeScript Playground</a></strong>: Idealne narzędzie do szybkiego testowania i eksperymentowania z przykładami kodu w TypeScript, bez potrzeby konfiguracji lokalnego środowiska.</li>\n<li><strong><a href=\"https://pl.wikipedia.org/wiki/Wzorzec_projektowy\">Wzorce projektowe – Wikipedia</a></strong>: Dobre źródło do ogólnego przeglądu i definicji.</li>\n<li><strong>Książka „Wzorce projektowe. Elementy oprogramowania obiektowego” – Gamma, Helm, Johnson, Vlissides (tzw. Gang of Four)</strong>: Klasyka, która zapoczątkowała całą dyskusję o wzorcach. Obowiązkowa lektura dla każdego, kto chce dogłębnie zrozumieć temat.</li>\n</ul>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<p>Poniższe zadania pomogą Ci utrwalić wiedzę o wzorcach projektowych w praktyce. Spróbuj zaimplementować je w środowisku TypeScript, skupiając się na czystości kodu i poprawnym typowaniu.</p>\n<h3 id=\"zadanie-1-singleton-w-praktyce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-singleton-w-praktyce\">>>></a>Zadanie 1: Singleton w praktyce</h3>\n<p>Zaimplementuj klasę <code>ConfigurationManager</code>, która realizuje wzorzec Singleton i umożliwia przechowywanie oraz pobieranie globalnych ustawień aplikacji. Upewnij się, że niezależnie od liczby wywołań <code>getInstance()</code>, zawsze używana jest ta sama instancja menedżera konfiguracji.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConfigurationManager</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-attr\">instance</span>: <span class=\"hljs-title class_\">ConfigurationManager</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">settings</span>: <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// Initialize default settings or load from a file</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">settings</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"apiUrl\"</span>, <span class=\"hljs-string\">\"https://api.example.com\"</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">settings</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"timeout\"</span>, <span class=\"hljs-string\">\"5000\"</span>);\n  }\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getInstance</span>(): <span class=\"hljs-title class_\">ConfigurationManager</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">ConfigurationManager</span>.<span class=\"hljs-property\">instance</span>) {\n      <span class=\"hljs-title class_\">ConfigurationManager</span>.<span class=\"hljs-property\">instance</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConfigurationManager</span>();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">ConfigurationManager</span>.<span class=\"hljs-property\">instance</span>;\n  }\n\n  <span class=\"hljs-title function_\">getSetting</span>(<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">settings</span>.<span class=\"hljs-title function_\">get</span>(key);\n  }\n\n  <span class=\"hljs-title function_\">setSetting</span>(<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">settings</span>.<span class=\"hljs-title function_\">set</span>(key, value);\n  }\n}\n\n<span class=\"hljs-comment\">// Usage:</span>\n<span class=\"hljs-keyword\">const</span> config1 = <span class=\"hljs-title class_\">ConfigurationManager</span>.<span class=\"hljs-title function_\">getInstance</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(config1.<span class=\"hljs-title function_\">getSetting</span>(<span class=\"hljs-string\">\"apiUrl\"</span>)); <span class=\"hljs-comment\">// https://api.example.com</span>\n\n<span class=\"hljs-keyword\">const</span> config2 = <span class=\"hljs-title class_\">ConfigurationManager</span>.<span class=\"hljs-title function_\">getInstance</span>();\nconfig2.<span class=\"hljs-title function_\">setSetting</span>(<span class=\"hljs-string\">\"timeout\"</span>, <span class=\"hljs-string\">\"10000\"</span>); <span class=\"hljs-comment\">// Change setting via second instance</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(config1.<span class=\"hljs-title function_\">getSetting</span>(<span class=\"hljs-string\">\"timeout\"</span>)); <span class=\"hljs-comment\">// 10000 (shows they are the same instance)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(config1 === config2); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-factory-dla-przycisków\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-factory-dla-przycisków\">>>></a>Zadanie 2: Factory dla przycisków</h3>\n<p>Zaimplementuj prostą fabrykę (Factory Method), która w zależności od przekazanego typu (<code>\"primary\"</code> lub <code>\"secondary\"</code>) zwróci obiekt reprezentujący przycisk z różnymi stylami (np. kolor tła, kolor tekstu). Zdefiniuj wspólny interfejs <code>IButton</code> dla wszystkich typów przycisków.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IButton</span> {\n  <span class=\"hljs-title function_\">render</span>(): <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-title function_\">getStyle</span>(): { <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-built_in\">string</span> };\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PrimaryButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IButton</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;button>Primary Button&#x3C;/button>\"</span>;\n  }\n  <span class=\"hljs-title function_\">getStyle</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"white\"</span> };\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecondaryButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IButton</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;button>Secondary Button&#x3C;/button>\"</span>;\n  }\n  <span class=\"hljs-title function_\">getStyle</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">\"gray\"</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"black\"</span> };\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ButtonFactory</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"primary\"</span> | <span class=\"hljs-string\">\"secondary\"</span>): <span class=\"hljs-title class_\">IButton</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">type</span> === <span class=\"hljs-string\">\"primary\"</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PrimaryButton</span>();\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">type</span> === <span class=\"hljs-string\">\"secondary\"</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SecondaryButton</span>();\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">\"Invalid button type\"</span>);\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// Usage:</span>\n<span class=\"hljs-keyword\">const</span> primaryBtn = <span class=\"hljs-title class_\">ButtonFactory</span>.<span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-string\">\"primary\"</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(primaryBtn.<span class=\"hljs-title function_\">render</span>(), primaryBtn.<span class=\"hljs-title function_\">getStyle</span>());\n\n<span class=\"hljs-keyword\">const</span> secondaryBtn = <span class=\"hljs-title class_\">ButtonFactory</span>.<span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-string\">\"secondary\"</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(secondaryBtn.<span class=\"hljs-title function_\">render</span>(), secondaryBtn.<span class=\"hljs-title function_\">getStyle</span>());\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-builder-do-pizzy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-builder-do-pizzy\">>>></a>Zadanie 3: Builder do pizzy</h3>\n<p>Stwórz klasę <code>OrderBuilder</code>, umożliwiającą budowanie złożonych zamówień w restauracji. Zamówienie może składać się z pizzy (z różnymi składnikami), napojów i deserów. Zaimplementuj metody do dodawania każdego elementu i budowania finalnego obiektu <code>Order</code>.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Order</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">pizzaDetails</span>: <span class=\"hljs-built_in\">string</span>[],\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">drinks</span>: <span class=\"hljs-built_in\">string</span>[],\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">desserts</span>: <span class=\"hljs-built_in\">string</span>[]\n  </span>) {}\n\n  <span class=\"hljs-title function_\">getTotalSummary</span>(): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Order Summary: Pizzas: [<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.pizzaDetails.join(\n      <span class=\"hljs-string\">\", \"</span>\n    )}</span>], Drinks: [<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.drinks.join(<span class=\"hljs-string\">\", \"</span>)}</span>], Desserts: [<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.desserts.join(\n      <span class=\"hljs-string\">\", \"</span>\n    )}</span>]`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderBuilder</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">pizzas</span>: <span class=\"hljs-built_in\">string</span>[] = [];\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">drinks</span>: <span class=\"hljs-built_in\">string</span>[] = [];\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">desserts</span>: <span class=\"hljs-built_in\">string</span>[] = [];\n\n  <span class=\"hljs-title function_\">addPizza</span>(<span class=\"hljs-attr\">pizzaDescription</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">OrderBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pizzas</span>.<span class=\"hljs-title function_\">push</span>(pizzaDescription);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">addDrink</span>(<span class=\"hljs-attr\">drinkName</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">OrderBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">drinks</span>.<span class=\"hljs-title function_\">push</span>(drinkName);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">addDessert</span>(<span class=\"hljs-attr\">dessertName</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">OrderBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">desserts</span>.<span class=\"hljs-title function_\">push</span>(dessertName);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">build</span>(): <span class=\"hljs-title class_\">Order</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Order</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pizzas</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">drinks</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">desserts</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Usage:</span>\n<span class=\"hljs-keyword\">const</span> customerOrder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OrderBuilder</span>()\n  .<span class=\"hljs-title function_\">addPizza</span>(<span class=\"hljs-string\">\"Pepperoni with extra cheese\"</span>)\n  .<span class=\"hljs-title function_\">addPizza</span>(<span class=\"hljs-string\">\"Veggie pizza\"</span>)\n  .<span class=\"hljs-title function_\">addDrink</span>(<span class=\"hljs-string\">\"Coca-Cola\"</span>)\n  .<span class=\"hljs-title function_\">addDessert</span>(<span class=\"hljs-string\">\"Cheesecake\"</span>)\n  .<span class=\"hljs-title function_\">build</span>();\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(customerOrder.<span class=\"hljs-title function_\">getTotalSummary</span>());\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-adapter--stare-i-nowe-api\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-adapter--stare-i-nowe-api\">>>></a>Zadanie 4: Adapter — stare i nowe API</h3>\n<p>Załóż, że masz starą klasę <code>LegacyUserService</code> z metodą <code>fetchUserById(id: string)</code>, która zwraca obiekt użytkownika w starym formacie (<code>{ uid: string; username: string }</code>). Chcesz korzystać z nowego interfejsu <code>NewUserApi</code> z metodą <code>getUser(id: string)</code> zwracającą nowy format (<code>{ id: string; name: string }</code>). Napisz <code>UserApiAdapter</code>.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Old API format</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">LegacyUser</span> {\n  <span class=\"hljs-attr\">uid</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">username</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LegacyUserService</span> {\n  <span class=\"hljs-title function_\">fetchUserById</span>(<span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">LegacyUser</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Fetching user <span class=\"hljs-subst\">${id}</span> from legacy service.`</span>);\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">uid</span>: id, <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">`user-<span class=\"hljs-subst\">${id}</span>-legacy`</span> };\n  }\n}\n\n<span class=\"hljs-comment\">// New API format</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">NewUser</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">NewUserApi</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">NewUser</span>;\n}\n\n<span class=\"hljs-comment\">// Adapter</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserApiAdapter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NewUserApi</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">legacyService</span>: <span class=\"hljs-title class_\">LegacyUserService</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">service</span>: <span class=\"hljs-title class_\">LegacyUserService</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">legacyService</span> = service;\n  }\n\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">NewUser</span> {\n    <span class=\"hljs-keyword\">const</span> legacyUser = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">legacyService</span>.<span class=\"hljs-title function_\">fetchUserById</span>(id);\n    <span class=\"hljs-comment\">// Adapt the old format to the new format</span>\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">id</span>: legacyUser.<span class=\"hljs-property\">uid</span>,\n      <span class=\"hljs-attr\">name</span>: legacyUser.<span class=\"hljs-property\">username</span>,\n    };\n  }\n}\n\n<span class=\"hljs-comment\">// Usage:</span>\n<span class=\"hljs-keyword\">const</span> legacyService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LegacyUserService</span>();\n<span class=\"hljs-keyword\">const</span> userAdapter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserApiAdapter</span>(legacyService);\n\n<span class=\"hljs-keyword\">const</span> newUser = userAdapter.<span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-string\">\"abc-123\"</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newUser); <span class=\"hljs-comment\">// { id: \"abc-123\", name: \"user-abc-123-legacy\" }</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-5-strategy--wybór-algorytmu-płatności\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-strategy--wybór-algorytmu-płatności\">>>></a>Zadanie 5: Strategy — wybór algorytmu płatności</h3>\n<p>Zaimplementuj trzy strategie płatności: <code>CreditCard</code>, <code>PayPal</code> i <code>CryptoPayment</code> (każda wypisuje w konsoli informację o metodzie płatności i kwocie). Stwórz klasę <code>PaymentProcessor</code> (kontekst), która umożliwi wybór i zmianę strategii w trakcie działania programu.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CreditCardPayment</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Payment via Credit Card: <span class=\"hljs-subst\">${amount}</span> units.`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PayPalPayment</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Payment via PayPal: <span class=\"hljs-subst\">${amount}</span> units.`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CryptoPayment</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n      <span class=\"hljs-string\">`Payment via Cryptocurrency: <span class=\"hljs-subst\">${amount}</span> units (might fluctuate).`</span>\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PaymentProcessor</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">strategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">initialStrategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">strategy</span> = initialStrategy;\n  }\n\n  <span class=\"hljs-title function_\">setStrategy</span>(<span class=\"hljs-attr\">strategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">strategy</span> = strategy;\n  }\n\n  <span class=\"hljs-title function_\">processPayment</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">strategy</span>.<span class=\"hljs-title function_\">pay</span>(amount);\n  }\n}\n\n<span class=\"hljs-comment\">// Usage:</span>\n<span class=\"hljs-keyword\">const</span> processor = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PaymentProcessor</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CreditCardPayment</span>());\nprocessor.<span class=\"hljs-title function_\">processPayment</span>(<span class=\"hljs-number\">100.5</span>);\n\nprocessor.<span class=\"hljs-title function_\">setStrategy</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PayPalPayment</span>());\nprocessor.<span class=\"hljs-title function_\">processPayment</span>(<span class=\"hljs-number\">250.0</span>);\n\nprocessor.<span class=\"hljs-title function_\">setStrategy</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CryptoPayment</span>());\nprocessor.<span class=\"hljs-title function_\">processPayment</span>(<span class=\"hljs-number\">75.2</span>);\n</code></pre>\n</details>\n<hr>\n<p>To dopiero początek! Każdy z tych wzorców ma swoje warianty, rozbudowane zastosowania i pułapki, których warto unikać. Kontynuuj eksplorację i pamiętaj, że najlepszym sposobem na naukę wzorców jest ich aktywne stosowanie w swoich projektach. Jakie są Twoje ulubione wzorce projektowe?</p>","resourceUrl","/app/content/courses/wzorce-projektowe.md","readingTime","13 minut"]
