[{"_1":2},"course-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_19":20,"_22":23,"_24":25,"_71":72,"_73":21,"_74":75,"_76":77,"_78":79},"title","Wzorce projektowe w praktyce","description","Kompleksowy przewodnik po wzorcach projektowych — od podstaw po praktyczne przykłady w kontekście frontendu i backendu.","keywords",[11,12,13,14,15,16,17,18],"wzorce projektowe","programowanie","typescript","javascript","frontend","backend","kurs","learning","categories",[21,13],"wzorce-projektowe","createdAt",["D",1750550400000],"quiz",{"_5":26,"_27":28},"Quiz: Wzorce projektowe","questions",[29,42,50,57,66],{"_30":31,"_32":33,"_38":39,"_40":41},"question","<p>Do której grupy należy wzorzec Singleton?</p>","options",[34,35,36,37],"Funkcyjne","Strukturalne","Kreacyjne","Behawioralne","answer",2,"explanation","Singleton to wzorzec kreacyjny – dotyczy sposobu tworzenia obiektów.",{"_30":43,"_32":44,"_38":39,"_40":49},"<p>Który wzorzec umożliwia zamianę jednego interfejsu na inny, by umożliwić współpracę niekompatybilnych klas?</p>",[45,46,47,48],"Builder","Facade","Adapter","Observer","Adapter tłumaczy jeden interfejs na inny.",{"_30":51,"_32":52,"_38":55,"_40":56},"<p>Który wzorzec pozwala powiadamiać wiele obiektów o zmianie stanu bez ścisłego powiązania?</p>",[48,46,53,54],"Strategy","Factory",0,"Observer służy do powiadamiania wielu obiektów o zmianie stanu.",{"_30":58,"_32":59,"_38":64,"_40":65},"<p>Co umożliwia wzorzec Strategy?</p>",[60,61,62,63],"Budowanie złożonych obiektów krok po kroku","Tworzenie jednej instancji klasy","Uproszczenie złożonego interfejsu","Dynamiczną zmianę algorytmu działania programu",3,"Strategy pozwala dynamicznie zmieniać algorytm działania programu.",{"_30":67,"_32":68,"_38":64,"_40":70},"<p>Który wzorzec stosujesz, by uprościć korzystanie z kilku skomplikowanych systemów przez jeden prosty interfejs?</p>",[47,69,45,46],"Singleton","Facade upraszcza złożone systemy przez prosty interfejs.","id","065d097b-0592-4e7d-9564-79d80eb6fd20","slug","content","<p>Poznaj praktyczne zastosowania najważniejszych wzorców projektowych — prosto, przystępnie, z przykładami w TypeScript oraz z zadaniami do samodzielnego wykonania! 🏗️🚀</p>\n<p>Ten przewodnik to nie tylko teoria, ale również konkretne przykłady, wskazówki i gotowe rozwiązania do typowych problemów programistycznych, zarówno po stronie frontendu jak i backendu.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-s%C4%85-wzorce-projektowe\">Czym są wzorce projektowe?</a></li>\n<li><a href=\"#jak-je-dzielimy\">Jak je dzielimy?</a></li>\n<li><a href=\"#wzorce-kreacyjne\">Wzorce kreacyjne</a>\n<ul>\n<li><a href=\"#singleton\">Singleton</a></li>\n<li><a href=\"#factory\">Factory</a></li>\n<li><a href=\"#builder\">Builder</a></li>\n</ul>\n</li>\n<li><a href=\"#wzorce-strukturalne\">Wzorce strukturalne</a>\n<ul>\n<li><a href=\"#facade\">Facade</a></li>\n<li><a href=\"#adapter\">Adapter</a></li>\n</ul>\n</li>\n<li><a href=\"#wzorce-behawioralne\">Wzorce behawioralne</a>\n<ul>\n<li><a href=\"#observer\">Observer</a></li>\n<li><a href=\"#strategy\">Strategy</a></li>\n</ul>\n</li>\n<li><a href=\"#zastosowania-wzorc%C3%B3w-w-praktyce\">Zastosowania wzorców w praktyce</a></li>\n<li><a href=\"#przydatne-narz%C4%99dzia-i-materia%C5%82y\">Przydatne narzędzia i materiały</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1-singleton-w-praktyce\">Zadanie 1: Singleton w praktyce</a></li>\n<li><a href=\"#zadanie-2-factory-dla-przycisk%C3%B3w\">Zadanie 2: Factory dla przycisków</a></li>\n<li><a href=\"#zadanie-3-builder-do-pizzy\">Zadanie 3: Builder do pizzy</a></li>\n<li><a href=\"#zadanie-4-adapter--stare-i-nowe-api\">Zadanie 4: Adapter — stare i nowe API</a></li>\n<li><a href=\"#zadanie-5-strategy--wyb%C3%B3r-algorytmu-p%C5%82atno%C5%9Bci\">Zadanie 5: Strategy — wybór algorytmu płatności</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-są-wzorce-projektowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-są-wzorce-projektowe\">>></a>Czym są wzorce projektowe?</h2>\n<p><strong>Wzorce projektowe</strong> to sprawdzone, uniwersalne rozwiązania dla często spotykanych problemów w programowaniu. Możesz potraktować je jak gotowe \"przepisy\" — nie musisz wymyślać wszystkiego od nowa, tylko korzystasz z doświadczenia innych.</p>\n<h3 id=\"dlaczego-warto-ich-używać\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-warto-ich-używać\">>>></a>Dlaczego warto ich używać?</h3>\n<ul>\n<li>🤝 Ułatwiają komunikację w zespole (wszyscy rozumieją, o czym mowa)</li>\n<li>🏗️ Poprawiają strukturę, elastyczność i czytelność kodu</li>\n<li>⚡ Przyspieszają projektowanie i rozwój systemów</li>\n<li>🐞 Pozwalają unikać typowych błędów</li>\n</ul>\n<hr>\n<h2 id=\"jak-je-dzielimy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-je-dzielimy\">>></a>Jak je dzielimy?</h2>\n<p>Wzorce projektowe dzielimy na trzy główne kategorie:</p>\n<ol>\n<li><strong>Kreacyjne</strong> — dotyczą sposobów tworzenia obiektów (np. Singleton, Factory, Builder)</li>\n<li><strong>Strukturalne</strong> — pokazują jak łączyć obiekty i klasy (np. Facade, Adapter)</li>\n<li><strong>Behawioralne</strong> — opisują interakcje i przepływ informacji (np. Observer, Strategy)</li>\n</ol>\n<p>Każda kategoria rozwiązuje inne typy problemów, dlatego tak ważne jest, by znać przynajmniej po jednym wzorcu z każdej grupy.</p>\n<hr>\n<h2 id=\"wzorce-kreacyjne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wzorce-kreacyjne\">>></a>Wzorce kreacyjne</h2>\n<h3 id=\"singleton\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#singleton\">>>></a>Singleton</h3>\n<p>Zapewnia, że dana klasa posiada tylko jedną instancję i zapewnia do niej globalny dostęp.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Singleton</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-attr\">instance</span>: <span class=\"hljs-title class_\">Singleton</span>;\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {}\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getInstance</span>(): <span class=\"hljs-title class_\">Singleton</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Singleton</span>.<span class=\"hljs-property\">instance</span>) {\n      <span class=\"hljs-title class_\">Singleton</span>.<span class=\"hljs-property\">instance</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Singleton</span>();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Singleton</span>.<span class=\"hljs-property\">instance</span>;\n  }\n}\n</code></pre>\n<p><strong>Zastosowania:</strong> konfiguracja aplikacji, połączenie z bazą danych, logger.</p>\n<hr>\n<h3 id=\"factory\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#factory\">>>></a>Factory</h3>\n<p>Pozwala tworzyć obiekty bez określania ich dokładnych klas — klient nie musi znać szczegółów implementacji.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WindowsButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Render Windows Button\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MacButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Render Mac Button\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ButtonFactory</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-attr\">os</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">Button</span> {\n    <span class=\"hljs-keyword\">if</span> (os === <span class=\"hljs-string\">\"Windows\"</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WindowsButton</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MacButton</span>();\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-title class_\">ButtonFactory</span>.<span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-string\">\"Windows\"</span>);\nbutton.<span class=\"hljs-title function_\">render</span>();\n</code></pre>\n<p><strong>Zastosowania:</strong> dynamiczne UI, obsługa wielu platform.</p>\n<hr>\n<h3 id=\"builder\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#builder\">>>></a>Builder</h3>\n<p>Ułatwia tworzenie złożonych obiektów krok po kroku — szczególnie przy wielu opcjonalnych parametrach.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Burger</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">bun</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">meat</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">extras</span>?: <span class=\"hljs-built_in\">string</span>[]\n  </span>) {}\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BurgerBuilder</span> {\n  <span class=\"hljs-keyword\">private</span> bun = <span class=\"hljs-string\">\"classic\"</span>;\n  <span class=\"hljs-keyword\">private</span> meat = <span class=\"hljs-string\">\"beef\"</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">extras</span>: <span class=\"hljs-built_in\">string</span>[] = [];\n\n  <span class=\"hljs-title function_\">setBun</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">bun</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">bun</span> = bun;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">setMeat</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">meat</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">meat</span> = meat;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">addExtra</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">extra</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">extras</span>.<span class=\"hljs-title function_\">push</span>(extra);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">build</span>(): <span class=\"hljs-title class_\">Burger</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Burger</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">bun</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">meat</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">extras</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> burger = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BurgerBuilder</span>()\n  .<span class=\"hljs-title function_\">setMeat</span>(<span class=\"hljs-string\">\"chicken\"</span>)\n  .<span class=\"hljs-title function_\">addExtra</span>(<span class=\"hljs-string\">\"cheese\"</span>)\n  .<span class=\"hljs-title function_\">build</span>();\n</code></pre>\n<p><strong>Zastosowania:</strong> konfiguratory, kreatory złożonych obiektów, generatory formularzy.</p>\n<hr>\n<h2 id=\"wzorce-strukturalne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wzorce-strukturalne\">>></a>Wzorce strukturalne</h2>\n<h3 id=\"facade\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#facade\">>>></a>Facade</h3>\n<p>Upraszcza korzystanie ze złożonych systemów, oferując prosty interfejs do wielu operacji.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AudioSystem</span> {\n  <span class=\"hljs-title function_\">turnOn</span>(<span class=\"hljs-params\"></span>) {}\n  <span class=\"hljs-title function_\">setVolume</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">level</span>: <span class=\"hljs-built_in\">number</span></span>) {}\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VideoSystem</span> {\n  <span class=\"hljs-title function_\">turnOn</span>(<span class=\"hljs-params\"></span>) {}\n  <span class=\"hljs-title function_\">setResolution</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">res</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HomeTheaterFacade</span> {\n  <span class=\"hljs-keyword\">private</span> audio = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AudioSystem</span>();\n  <span class=\"hljs-keyword\">private</span> video = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VideoSystem</span>();\n\n  <span class=\"hljs-title function_\">startMovie</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">audio</span>.<span class=\"hljs-title function_\">turnOn</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">audio</span>.<span class=\"hljs-title function_\">setVolume</span>(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">turnOn</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">setResolution</span>(<span class=\"hljs-string\">\"1080p\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> theater = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HomeTheaterFacade</span>();\ntheater.<span class=\"hljs-title function_\">startMovie</span>();\n</code></pre>\n<p><strong>Zastosowania:</strong> uproszczone API, integracja wielu zależności.</p>\n<hr>\n<h3 id=\"adapter\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#adapter\">>>></a>Adapter</h3>\n<p>Pozwala współpracować obiektom z niekompatybilnymi interfejsami — \"tłumaczy\" jeden interfejs na inny.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OldPrinter</span> {\n  <span class=\"hljs-title function_\">printText</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">text</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Old Printer: \"</span> + text);\n  }\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">NewPrinter</span> {\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PrinterAdapter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NewPrinter</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">oldPrinter</span>: <span class=\"hljs-title class_\">OldPrinter</span></span>) {}\n\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">oldPrinter</span>.<span class=\"hljs-title function_\">printText</span>(content);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> adapter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PrinterAdapter</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OldPrinter</span>());\nadapter.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Hello\"</span>);\n</code></pre>\n<p><strong>Zastosowania:</strong> integracja z zewnętrznymi bibliotekami, starszym kodem, migracje.</p>\n<hr>\n<h2 id=\"wzorce-behawioralne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wzorce-behawioralne\">>></a>Wzorce behawioralne</h2>\n<h3 id=\"observer\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#observer\">>>></a>Observer</h3>\n<p>Obiekt \"subject\" powiadamia inne obiekty (obserwatorów) o zmianach stanu — bez ścisłego powiązania.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Subject</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>[] = [];\n\n  <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n  }\n\n  <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> obs <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>) {\n      obs.<span class=\"hljs-title function_\">update</span>(data);\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Logger</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Log:\"</span>, data);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> subject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Subject</span>();\nsubject.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Logger</span>());\nsubject.<span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-string\">\"Dane się zmieniły\"</span>);\n</code></pre>\n<p><strong>Zastosowania:</strong> systemy notyfikacji, reactive programming, event-driven.</p>\n<hr>\n<h3 id=\"strategy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#strategy\">>>></a>Strategy</h3>\n<p>Pozwala zamieniać algorytmy w trakcie działania aplikacji, bez zmiany jej kodu.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PayPal</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`PayPal: Paid <span class=\"hljs-subst\">${amount}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CreditCard</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Card: Paid <span class=\"hljs-subst\">${amount}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Checkout</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">strategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span></span>) {}\n\n  <span class=\"hljs-title function_\">processPayment</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">strategy</span>.<span class=\"hljs-title function_\">pay</span>(amount);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> checkout = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Checkout</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PayPal</span>());\ncheckout.<span class=\"hljs-title function_\">processPayment</span>(<span class=\"hljs-number\">100</span>);\n</code></pre>\n<p><strong>Zastosowania:</strong> płatności, logika decyzyjna, AI.</p>\n<hr>\n<h2 id=\"zastosowania-wzorców-w-praktyce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zastosowania-wzorców-w-praktyce\">>></a>Zastosowania wzorców w praktyce</h2>\n<ul>\n<li><strong>Frontend:</strong> React, Angular czy Vue często korzystają z Observera (np. Redux, RxJS), Strategy (dynamiczny wybór komponentów), Factory (tworzenie widgetów), Facade (warstwa usług API).</li>\n<li><strong>Backend:</strong> Singleton dla połączeń do bazy danych, Builder przy generowaniu zapytań, Adapter do integracji z zewnętrznymi serwisami.</li>\n</ul>\n<hr>\n<h2 id=\"przydatne-narzędzia-i-materiały\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przydatne-narzędzia-i-materiały\">>></a>Przydatne narzędzia i materiały</h2>\n<ul>\n<li><a href=\"https://refactoring.guru/pl/design-patterns\">Refactoring.guru – wzorce projektowe po polsku i angielsku</a></li>\n<li><a href=\"https://www.typescriptlang.org/play\">TypeScript Playground</a></li>\n<li><a href=\"https://pl.wikipedia.org/wiki/Wzorzec_projektowy\">Wzorce projektowe – Wikipedia</a></li>\n<li>[Książka „Wzorce projektowe. Elementy oprogramowania obiektowego” – Gamma, Helm, Johnson, Vlissides]</li>\n</ul>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1-singleton-w-praktyce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-singleton-w-praktyce\">>>></a>Zadanie 1: Singleton w praktyce</h3>\n<p>Zaimplementuj klasę Logger, która realizuje wzorzec Singleton i umożliwia logowanie wiadomości do konsoli. Upewnij się, że niezależnie od liczby wywołań zawsze używana jest ta sama instancja loggera.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Logger</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-attr\">instance</span>: <span class=\"hljs-title class_\">Logger</span>;\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {}\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getInstance</span>(): <span class=\"hljs-title class_\">Logger</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-property\">instance</span>) {\n      <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-property\">instance</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Logger</span>();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-property\">instance</span>;\n  }\n\n  <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> logger1 = <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-title function_\">getInstance</span>();\n<span class=\"hljs-keyword\">const</span> logger2 = <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-title function_\">getInstance</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(logger1 === logger2); <span class=\"hljs-comment\">// true</span>\nlogger1.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Wiadomość testowa\"</span>);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-factory-dla-przycisków\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-factory-dla-przycisków\">>>></a>Zadanie 2: Factory dla przycisków</h3>\n<p>Zaimplementuj prostą fabrykę (Factory), która w zależności od przekazanego typu zwróci przycisk HTML (<code>&#x3C;button></code>) lub SVG (<code>&#x3C;svg></code>). Dodaj odpowiednie klasy ButtonHtml i ButtonSvg.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(): <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ButtonHtml</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;button>Przycisk HTML&#x3C;/button>\"</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ButtonSvg</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;svg>&#x3C;rect width='100' height='30'/>&#x3C;/svg>\"</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ButtonFactory</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">Button</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">type</span> === <span class=\"hljs-string\">\"html\"</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ButtonHtml</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ButtonSvg</span>();\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> btn = <span class=\"hljs-title class_\">ButtonFactory</span>.<span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-string\">\"svg\"</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(btn.<span class=\"hljs-title function_\">render</span>());\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-builder-do-pizzy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-builder-do-pizzy\">>>></a>Zadanie 3: Builder do pizzy</h3>\n<p>Stwórz klasę PizzaBuilder, umożliwiającą tworzenie pizzy z różnymi składnikami (np. ser, szynka, pieczarki) oraz rodzajem ciasta.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pizza</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">dough</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">ingredients</span>: <span class=\"hljs-built_in\">string</span>[]</span>) {}\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PizzaBuilder</span> {\n  <span class=\"hljs-keyword\">private</span> dough = <span class=\"hljs-string\">\"classic\"</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">ingredients</span>: <span class=\"hljs-built_in\">string</span>[] = [];\n\n  <span class=\"hljs-title function_\">setDough</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dough</span> = <span class=\"hljs-keyword\">type</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">addIngredient</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">ingredient</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ingredients</span>.<span class=\"hljs-title function_\">push</span>(ingredient);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">build</span>(): <span class=\"hljs-title class_\">Pizza</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Pizza</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dough</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ingredients</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> pizza = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PizzaBuilder</span>()\n  .<span class=\"hljs-title function_\">setDough</span>(<span class=\"hljs-string\">\"thin\"</span>)\n  .<span class=\"hljs-title function_\">addIngredient</span>(<span class=\"hljs-string\">\"cheese\"</span>)\n  .<span class=\"hljs-title function_\">addIngredient</span>(<span class=\"hljs-string\">\"ham\"</span>)\n  .<span class=\"hljs-title function_\">build</span>();\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pizza);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-adapter--stare-i-nowe-api\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-adapter--stare-i-nowe-api\">>>></a>Zadanie 4: Adapter — stare i nowe API</h3>\n<p>Załóż, że masz starą klasę ApiV1 z metodą getUserData(), a chcesz korzystać z nowego interfejsu NewApi z metodą fetchUser(). Napisz adapter.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ApiV1</span> {\n  <span class=\"hljs-title function_\">getUserData</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> };\n  }\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">NewApi</span> {\n  <span class=\"hljs-title function_\">fetchUser</span>(): <span class=\"hljs-built_in\">object</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ApiAdapter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NewApi</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">oldApi</span>: <span class=\"hljs-title class_\">ApiV1</span></span>) {}\n\n  <span class=\"hljs-title function_\">fetchUser</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">oldApi</span>.<span class=\"hljs-title function_\">getUserData</span>();\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> adapter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiAdapter</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiV1</span>());\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(adapter.<span class=\"hljs-title function_\">fetchUser</span>());\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-5-strategy--wybór-algorytmu-płatności\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-strategy--wybór-algorytmu-płatności\">>>></a>Zadanie 5: Strategy — wybór algorytmu płatności</h3>\n<p>Zaimplementuj dwie strategie płatności: przelew i BLIK (obie wypisują kwotę w konsoli). Stwórz klasę, która umożliwi wybór strategii w trakcie działania programu.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Transfer</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Płatność przelewem: <span class=\"hljs-subst\">${amount}</span> zł`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Blik</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Płatność BLIK: <span class=\"hljs-subst\">${amount}</span> zł`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PaymentProcessor</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">strategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span></span>) {}\n\n  <span class=\"hljs-title function_\">setStrategy</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">strategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">strategy</span> = strategy;\n  }\n\n  <span class=\"hljs-title function_\">process</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">strategy</span>.<span class=\"hljs-title function_\">pay</span>(amount);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> processor = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PaymentProcessor</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Transfer</span>());\nprocessor.<span class=\"hljs-title function_\">process</span>(<span class=\"hljs-number\">50</span>);\nprocessor.<span class=\"hljs-title function_\">setStrategy</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Blik</span>());\nprocessor.<span class=\"hljs-title function_\">process</span>(<span class=\"hljs-number\">75</span>);\n</code></pre>\n</details>\n<hr>\n<p>To dopiero początek! Każdy z tych wzorców ma swoje warianty, rozbudowane zastosowania i pułapki, których warto unikać.</p>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wzorce-projektowe.md","readingTime","6 minut"]
