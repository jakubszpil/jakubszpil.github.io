[{"_1":2},"article-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_15":16,"_18":19,"_20":21,"_22":23,"_24":25,"_26":27,"_28":-7,"_29":30},"title","Signalizacja, czyli koncept Signals w Typescript","description","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.","keywords",[11,12,13,14],"typescript","wzorce projektowe","signals","blog","categories",[11,17],"wzorce-projektowe","createdAt","2024-06-20T00:00:00.000Z","id","0e3fb703-d3be-44cc-b77e-838a88559ac9","slug","signalizacja-czyli-koncept-signals-w-typescript","content","<p>Signal to koncepcja znana z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzanie stanem aplikacji. Dzięki silnemu typowaniu TypeScript, sygnały można zaimplementować w sposób bezpieczny, czytelny i efektywny.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-signal\">Czym jest Signal?</a></li>\n<li><a href=\"#korzy%C5%9Bci-z-u%C5%BCywania-signal\">Korzyści z używania Signal</a></li>\n<li><a href=\"#prosta-implementacja-signal-w-typescript\">Prosta implementacja Signal w TypeScript</a></li>\n<li><a href=\"#zaawansowana-implementacja-signal-z-typowaniem\">Zaawansowana implementacja Signal z typowaniem</a></li>\n<li><a href=\"#praktyczne-zastosowania-sygna%C5%82%C3%B3w\">Praktyczne zastosowania sygnałów</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-signal\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-signal\">>></a>Czym jest Signal?</h2>\n<p><strong>Signal</strong> (sygnał) to obiekt reprezentujący strumień danych, który może być obserwowany i reagować na ich zmiany. Sygnały świetnie sprawdzają się w aplikacjach frontendowych, gdzie mogą służyć do reagowania na:</p>\n<ul>\n<li>zdarzenia użytkownika,</li>\n<li>zmiany stanu aplikacji,</li>\n<li>asynchroniczne operacje (np. żądania sieciowe).</li>\n</ul>\n<hr>\n<h2 id=\"korzyści-z-używania-signal\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#korzyści-z-używania-signal\">>></a>Korzyści z używania Signal</h2>\n<ul>\n<li><strong>Reaktywność:</strong> Automatyczne reagowanie na zmiany danych w aplikacji.</li>\n<li><strong>Czytelność:</strong> Eliminacja złożonych zależności i ręcznego zarządzania stanem.</li>\n<li><strong>Modularność:</strong> Oddzielenie logiki zarządzania stanem od komponentów, co ułatwia rozwój i utrzymanie kodu.</li>\n</ul>\n<hr>\n<h2 id=\"prosta-implementacja-signal-w-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#prosta-implementacja-signal-w-typescript\">>></a>Prosta implementacja Signal w TypeScript</h2>\n<p>Poniższy przykład przedstawia bazową implementację sygnału:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Listener</span>&#x3C;T> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">value</span>: T</span>) =></span> <span class=\"hljs-built_in\">void</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">listeners</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>[] = [];\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">push</span>(listener);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">l</span>) =></span> l !== listener);\n  }\n\n  <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">listener</span>) =></span> <span class=\"hljs-title function_\">listener</span>(value));\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie sygnału</span>\n<span class=\"hljs-keyword\">const</span> numberSignal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;<span class=\"hljs-built_in\">number</span>>();\n\nnumberSignal.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Received value: <span class=\"hljs-subst\">${value}</span>`</span>);\n});\n\nnumberSignal.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-number\">42</span>); <span class=\"hljs-comment\">// Output: Received value: 42</span>\n</code></pre>\n<p><strong>Opis:</strong><br>\nKlasa <code>Signal</code> pozwala na subskrybowanie funkcji-odbiorców, ich usuwanie oraz emitowanie wartości do wszystkich subskrybentów.</p>\n<hr>\n<h2 id=\"zaawansowana-implementacja-signal-z-typowaniem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zaawansowana-implementacja-signal-z-typowaniem\">>></a>Zaawansowana implementacja Signal z typowaniem</h2>\n<p>W większych aplikacjach warto zastosować typy generyczne i kolekcje, które zapobiegają wielokrotnemu dodawaniu tego samego subskrybenta:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Listener</span>&#x3C;T> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">value</span>: T</span>) =></span> <span class=\"hljs-built_in\">void</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">listeners</span>: <span class=\"hljs-title class_\">Set</span>&#x3C;<span class=\"hljs-title class_\">Listener</span>&#x3C;T>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">add</span>(listener);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">delete</span>(listener);\n  }\n\n  <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> listener <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>) {\n      <span class=\"hljs-title function_\">listener</span>(value);\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie sygnału z typem generycznym</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> userSignal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;<span class=\"hljs-title class_\">User</span>>();\n\nuserSignal.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">user</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`User: <span class=\"hljs-subst\">${user.name}</span>, Age: <span class=\"hljs-subst\">${user.age}</span>`</span>);\n});\n\nuserSignal.<span class=\"hljs-title function_\">emit</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John Doe\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> }); <span class=\"hljs-comment\">// Output: User: John Doe, Age: 30</span>\n</code></pre>\n<p><strong>Opis:</strong><br>\nDzięki użyciu <code>Set</code>, każdy subskrybent pojawia się tylko raz. Typy generyczne umożliwiają tworzenie sygnałów dla różnych typów danych.</p>\n<hr>\n<h2 id=\"praktyczne-zastosowania-sygnałów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#praktyczne-zastosowania-sygnałów\">>></a>Praktyczne zastosowania sygnałów</h2>\n<p>Sygnały są szeroko stosowane m.in. w:</p>\n<ul>\n<li>zarządzaniu stanem komponentów w frameworkach frontendowych (np. Angular Signals, SolidJS Signals),</li>\n<li>reagowaniu na zmiany danych w czasie rzeczywistym (np. WebSocket, API),</li>\n<li>obsłudze zdarzeń pomiędzy niezależnymi modułami (np. event bus).</li>\n</ul>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Sygnał do powiadamiania o zmianie zalogowanego użytkownika</span>\n<span class=\"hljs-keyword\">const</span> authSignal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;<span class=\"hljs-title class_\">User</span> | <span class=\"hljs-literal\">null</span>>();\n\nauthSignal.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">user</span>) =></span> {\n  <span class=\"hljs-keyword\">if</span> (user) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Zalogowano użytkownika:\"</span>, user.<span class=\"hljs-property\">name</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Wylogowano użytkownika\"</span>);\n  }\n});\n\n<span class=\"hljs-comment\">// Logowanie użytkownika</span>\nauthSignal.<span class=\"hljs-title function_\">emit</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Anna\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span> });\n<span class=\"hljs-comment\">// Wylogowanie użytkownika</span>\nauthSignal.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-literal\">null</span>);\n</code></pre>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Signal w TypeScript to skuteczny sposób na budowę reaktywnych aplikacji i automatyczne reagowanie na zmiany stanu. Silne typowanie pozwala uniknąć wielu błędów i sprawia, że kod jest zrozumiały oraz łatwy w utrzymaniu. Implementując sygnały, możesz znacząco uprościć zarządzanie stanem i poprawić architekturę swoich aplikacji.</p>","resourceUrl","/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md","quiz","readingTime","2 minuty"]
