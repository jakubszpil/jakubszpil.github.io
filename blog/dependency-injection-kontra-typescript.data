[{"_1":2},"article-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_15":16,"_18":19,"_20":21,"_22":23,"_24":25,"_26":27,"_28":-7,"_29":30},"title","Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","keywords",[11,12,13,14],"typescript","wzorce projektowe","javascript","blog","categories",[11,17],"wzorce-projektowe","createdAt",["D",1718841600000],"id","cbe7a5cd-e038-430f-9394-25f27249b047","slug","dependency-injection-kontra-typescript","content","<p>Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Pozwala on na oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności oraz ułatwia zarządzanie zależnościami w projekcie. 🔗</p>\n<p>W TypeScript DI można zaimplementować na różne sposoby, m.in. za pomocą funkcji wstrzykujących, kontenerów IoC oraz dekoratorów. Poniżej znajdziesz szczegółowe omówienie praktycznych sposobów implementacji DI w TypeScript wraz z przykładami i wskazówkami.</p>\n<hr>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-dependency-injection\">Czym jest Dependency Injection?</a></li>\n<li><a href=\"#zalety-stosowania-di\">Zalety stosowania DI</a></li>\n<li><a href=\"#podstawowy-przyk%C5%82ad-dependency-injection\">Podstawowy przykład Dependency Injection</a></li>\n<li><a href=\"#wstrzykiwanie-zale%C5%BCno%C5%9Bci-przy-pomocy-funkcji\">Wstrzykiwanie zależności przy pomocy funkcji</a></li>\n<li><a href=\"#kontener-ioc-i-automatyzacja-di\">Kontener IoC i automatyzacja DI</a></li>\n<li><a href=\"#testowanie-z-wykorzystaniem-di\">Testowanie z wykorzystaniem DI</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-dependency-injection\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-dependency-injection\">>></a>Czym jest Dependency Injection?</h2>\n<p><strong>Dependency Injection</strong> polega na przekazywaniu obiektów zależnych (tzw. zależności) do obiektu zamiast tworzenia ich bezpośrednio w jego wnętrzu. Dzięki temu możemy łatwo podmieniać zależności – np. na ich mocki podczas testowania – bez zmian w logice biznesowej.</p>\n<p>DI zwiększa elastyczność kodu, ułatwia jego testowanie oraz pozwala na lepszą separację odpowiedzialności. Dzięki temu Twój kod staje się bardziej modularny, przejrzysty i łatwy w utrzymaniu. 💡</p>\n<hr>\n<h2 id=\"zalety-stosowania-di\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zalety-stosowania-di\">>></a>Zalety stosowania DI</h2>\n<ul>\n<li><strong>Łatwiejsze testowanie</strong> – zależności można zamieniać na mocki lub stuby w testach jednostkowych.</li>\n<li><strong>Lepsza modularność</strong> – klasy nie są silnie powiązane z konkretnymi implementacjami.</li>\n<li><strong>Łatwiejsze zarządzanie zależnościami</strong> – zmiany w zależnościach nie wymagają modyfikacji całego kodu.</li>\n<li><strong>Wspieranie zasad SOLID</strong> – zwłaszcza zasady odwrócenia zależności (Dependency Inversion Principle).</li>\n<li><strong>Zwiększona elastyczność</strong> – łatwo rozszerzać i modyfikować funkcjonalność bez naruszania istniejących klas.</li>\n</ul>\n<hr>\n<h2 id=\"podstawowy-przykład-dependency-injection\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowy-przykład-dependency-injection\">>></a>Podstawowy przykład Dependency Injection</h2>\n<p>Rozważmy prosty scenariusz, w którym klasa <code>UserService</code> korzysta z <code>UserRepository</code>:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span> = userRepository;\n  }\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> userRepository = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserRepository</span>();\n<span class=\"hljs-keyword\">const</span> userService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserService</span>(userRepository);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nW tym przykładzie <code>UserRepository</code> jest wstrzykiwany do <code>UserService</code> poprzez konstruktor. Dzięki temu możemy łatwo podmienić repozytorium np. w testach jednostkowych lub zamienić na inną implementację.</p>\n<hr>\n<h2 id=\"wstrzykiwanie-zależności-przy-pomocy-funkcji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wstrzykiwanie-zależności-przy-pomocy-funkcji\">>></a>Wstrzykiwanie zależności przy pomocy funkcji</h2>\n<p>W większych aplikacjach zarządzanie zależnościami ręcznie może być uciążliwe. Możemy zastosować funkcję <code>inject</code>, która będzie przechowywać i dostarczać instancje klas (prosta wersja kontenera IoC):</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">dependencies</span>: <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n\n<span class=\"hljs-keyword\">function</span> inject&#x3C;T>(<span class=\"hljs-attr\">dependency</span>: <span class=\"hljs-title function_\">new</span> () => T): T {\n  <span class=\"hljs-keyword\">if</span> (dependencies.<span class=\"hljs-title function_\">has</span>(dependency.<span class=\"hljs-property\">name</span>)) {\n    <span class=\"hljs-keyword\">return</span> dependencies.<span class=\"hljs-title function_\">get</span>(dependency.<span class=\"hljs-property\">name</span>);\n  }\n  <span class=\"hljs-keyword\">const</span> dep = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">dependency</span>();\n  dependencies.<span class=\"hljs-title function_\">set</span>(dependency.<span class=\"hljs-property\">name</span>, dep);\n  <span class=\"hljs-keyword\">return</span> dep;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">protected</span> userRepository = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">UserRepository</span>);\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExtendedUserService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">UserService</span> {}\n\n<span class=\"hljs-keyword\">const</span> extendedUserService = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">ExtendedUserService</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(extendedUserService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p><strong>Wyjaśnienie:</strong></p>\n<ul>\n<li>Funkcja <code>inject</code> rejestruje i przechowuje instancje klas, zapewniając singleton dla każdej z nich.</li>\n<li>Nie musisz przekazywać zależności przez konstruktor – są pobierane automatycznie.</li>\n<li>Klasy można łatwo rozszerzać, a zależności są zarządzane centralnie – to duże ułatwienie w dużych projektach. 🛠️</li>\n</ul>\n<hr>\n<h2 id=\"kontener-ioc-i-automatyzacja-di\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#kontener-ioc-i-automatyzacja-di\">>></a>Kontener IoC i automatyzacja DI</h2>\n<p>W rozbudowanych projektach warto rozważyć użycie gotowych rozwiązań, np. <a href=\"https://inversify.io/\">InversifyJS</a>, które pozwalają korzystać z dekoratorów i automatycznie rozwiązywać zależności.</p>\n<p>Przykład z użyciem InversifyJS:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"reflect-metadata\"</span>;\n<span class=\"hljs-keyword\">import</span> { injectable, inject, <span class=\"hljs-title class_\">Container</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"inversify\"</span>;\n\n<span class=\"hljs-meta\">@injectable</span>()\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-meta\">@injectable</span>()\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@inject</span>(UserRepository) <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span></span>) {}\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Container</span>();\ncontainer.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-title class_\">UserRepository</span>).<span class=\"hljs-title function_\">toSelf</span>();\ncontainer.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-title class_\">UserService</span>).<span class=\"hljs-title function_\">toSelf</span>();\n\n<span class=\"hljs-keyword\">const</span> userService = container.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">UserService</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p><strong>Zalety takiego podejścia:</strong></p>\n<ul>\n<li>Automatyczna rejestracja i rozwiązywanie zależności.</li>\n<li>Wsparcie dla różnych zakresów życia obiektu (singleton, transient).</li>\n<li>Możliwość wstrzykiwania zależności przez dekoratory.</li>\n<li>Łatwiejsze zarządzanie rozbudowaną strukturą aplikacji.</li>\n</ul>\n<hr>\n<h2 id=\"testowanie-z-wykorzystaniem-di\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#testowanie-z-wykorzystaniem-di\">>></a>Testowanie z wykorzystaniem DI</h2>\n<p>Dzięki zastosowaniu DI możemy łatwo podmieniać implementacje zależności, np. na mocki lub stuby podczas testów jednostkowych:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MockUserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Mock User\"</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> mockRepo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MockUserRepository</span>();\n<span class=\"hljs-keyword\">const</span> userService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserService</span>(mockRepo);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// Mock User</span>\n</code></pre>\n<p><strong>Korzyści:</strong></p>\n<ul>\n<li>Testy są niezależne od rzeczywistej implementacji zależności.</li>\n<li>Można łatwo symulować różne scenariusze i przypadki brzegowe.</li>\n<li>Utrzymanie i rozwijanie testów staje się prostsze.</li>\n</ul>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Dependency Injection w TypeScript to potężny sposób na zwiększenie elastyczności, testowalności i modularności kodu. Najprostsze podejście to ręczne wstrzykiwanie zależności przez konstruktor, jednak w miarę wzrostu projektu warto pomyśleć o własnym kontenerze IoC lub sięgnąć po gotowe biblioteki jak InversifyJS. DI pozwala na lepszą separację odpowiedzialności i sprawia, że kod jest łatwiejszy w utrzymaniu i testowaniu.</p>\n<hr>\n<p><strong>Dalsza lektura:</strong> 📚</p>\n<ul>\n<li><a href=\"https://github.com/inversify/InversifyJS\">InversifyJS Documentation</a></li>\n<li><a href=\"https://angular.dev/guide/di\">Dependency Injection w TypeScript – Angular</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/SOLID\">SOLID Principles</a></li>\n</ul>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md","quiz","readingTime","3 minuty"]
