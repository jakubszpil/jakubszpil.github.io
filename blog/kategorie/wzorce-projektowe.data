[{"_1":2},"article-list-with-category",{"_3":4},"data",{"_5":6,"_31":32,"_37":34},"articles",[7,20,25],{"_8":9,"_10":11,"_12":13,"_14":15,"_16":17,"_18":19},"title","Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","createdAt","2024-06-20T00:00:00.000Z","id","6289b308-bc1e-4c69-8886-3138cc562c77","slug","dependency-injection-kontra-typescript","readingTime","3 minuty",{"_8":21,"_10":22,"_12":13,"_14":23,"_16":24,"_18":19},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.","bd920f4f-b32a-40b1-995d-159aa456604f","obserwatorium-czyli-wzorzec-projektowy-obserwatora",{"_8":26,"_10":27,"_12":13,"_14":28,"_16":29,"_18":30},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.","0e3fb703-d3be-44cc-b77e-838a88559ac9","signalizacja-czyli-koncept-signals-w-typescript","2 minuty","categories",[33,34,35,36],"typescript","wzorce-projektowe","devops","ci","category"]
