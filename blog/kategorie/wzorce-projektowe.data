[{"_1":2},"article-list-with-category",{"_3":4},"data",{"_5":6,"_18":55,"_58":20},"articles",[7,34,44],{"_8":9,"_10":11,"_12":13,"_18":19,"_21":22,"_23":24,"_25":26,"_27":28,"_29":30,"_31":-7,"_32":33},"title","Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","keywords",[14,15,16,17],"typescript","wzorce projektowe","javascript","blog","categories",[14,20],"wzorce-projektowe","createdAt",["D",1718841600000],"id","7212de3c-815b-4f5d-a6dd-73ea88283791","slug","dependency-injection-kontra-typescript","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md","quiz","readingTime","3 minuty",{"_8":35,"_10":36,"_12":37,"_18":39,"_21":40,"_23":41,"_25":42,"_27":28,"_29":43,"_31":-7,"_32":33},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[14,15,38,17],"programowanie",[14,20],["D",1718841600000],"801bb617-35c5-41b5-a593-967bc21da02d","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_8":45,"_10":46,"_12":47,"_18":49,"_21":50,"_23":51,"_25":52,"_27":28,"_29":53,"_31":-7,"_32":54},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[14,15,48,17],"signals",[14,20],["D",1718841600000],"2f9bcb05-4326-4218-828f-663ef9db62bc","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md","2 minuty",[14,20,56,57],"devops","ci","category"]
