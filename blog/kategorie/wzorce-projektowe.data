[{"_1":2},"article-list-with-category",{"_3":4},"data",{"_5":6,"_18":52,"_55":20},"articles",[7,32,42],{"_8":9,"_10":11,"_12":13,"_18":19,"_21":22,"_23":24,"_25":26,"_27":28,"_29":30,"_31":-7},"title","Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","keywords",[14,15,16,17],"typescript","wzorce projektowe","javascript","blog","categories",[14,20],"wzorce-projektowe","createdAt",["D",1718841600000],"id","f13458a1-cafb-4402-99d1-e6872a7cac5c","slug","dependency-injection-kontra-typescript","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md","quiz",{"_8":33,"_10":34,"_12":35,"_18":37,"_21":38,"_23":39,"_25":40,"_27":28,"_29":41,"_31":-7},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[14,15,36,17],"programowanie",[14,20],["D",1718841600000],"9d26c026-a3d1-47f8-b37e-d2bc7376feb9","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_8":43,"_10":44,"_12":45,"_18":47,"_21":48,"_23":49,"_25":50,"_27":28,"_29":51,"_31":-7},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[14,15,46,17],"signals",[14,20],["D",1718841600000],"58a02542-8567-4f43-8f38-aa65cd9d8dfd","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md",[14,20,53,54],"devops","ci","category"]
