[{"_1":2},"article-list-with-category",{"_3":4},"data",{"_5":6,"_17":50,"_53":19},"articles",[7,30,40],{"_8":9,"_10":11,"_12":13,"_17":18,"_20":21,"_22":23,"_24":25,"_26":27,"_28":29},"title","Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","keywords",[14,15,16],"typescript","wzorce projektowe","javascript","categories",[14,19],"wzorce-projektowe","createdAt",["D",1718841600000],"id","47fd4331-4d8f-4a00-aecf-dc09858229ee","slug","dependency-injection-kontra-typescript","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md",{"_8":31,"_10":32,"_12":33,"_17":35,"_20":36,"_22":37,"_24":38,"_26":27,"_28":39},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[14,15,34],"programowanie",[14,19],["D",1718841600000],"35433267-13e6-4aa8-a208-30df6a969136","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_8":41,"_10":42,"_12":43,"_17":45,"_20":46,"_22":47,"_24":48,"_26":27,"_28":49},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[14,15,44],"signals",[14,19],["D",1718841600000],"cd3d1779-4c19-44d5-b88e-52bf4cf49677","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md",[14,19,51,52],"devops","ci","category"]
