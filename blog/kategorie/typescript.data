[{"_1":2},"article-list-with-category",{"_3":4},"data",{"_5":6,"_7":8,"_9":10},"articles",["P",6],"categories",["P",8],"category","typescript"]
P6:[[12,32,42],{"_13":14,"_15":16,"_17":18,"_7":21,"_22":23,"_24":25,"_26":27,"_28":29,"_30":31},"title","Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","keywords",[10,19,20],"wzorce","javascript",[10,19],"createdAt",["D",1718841600000],"id","fd73c4d3-2a71-4061-8199-fb2a92a98588","slug","dependency-injection-kontra-typescript","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md",{"_13":33,"_15":34,"_17":35,"_7":37,"_22":38,"_24":39,"_26":40,"_28":29,"_30":41},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[10,19,36],"programowanie",[10,19],["D",1718841600000],"19fe640c-293e-47bb-abb1-eed0ad35a7e1","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_13":43,"_15":44,"_17":45,"_7":47,"_22":48,"_24":49,"_26":50,"_28":29,"_30":51},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[10,19,46],"signals",[10,19],["D",1718841600000],"8c01e8f2-848d-4605-aa02-757e0a296c79","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md"]
P8:[[10,19,53,54],"devops","ci"]
