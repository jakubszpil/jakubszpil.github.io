[{"_1":2},"article-list-with-category",{"_3":4},"data",{"_5":6,"_37":38,"_43":39},"articles",[7,20,26,31],{"_8":9,"_10":11,"_12":13,"_14":15,"_16":17,"_18":19},"title","Framework na 70 linii, czyli implementacja Signal API od zera","description","Dowiedz się, jak zaimplementować minimalistyczny system reaktywny (Signal API) w JavaScript/TypeScript w mniej niż 70 liniach kodu. Praktyczny przewodnik krok po kroku.","createdAt","2025-06-22T00:00:00.000Z","id","2701eaff-1eed-4b7e-a24c-e12831ab79bb","slug","framework-na-70-linii-czyli-implementacja-signal-api-od-zera","readingTime","3 minuty",{"_8":21,"_10":22,"_12":23,"_14":24,"_16":25,"_18":19},"Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","2024-06-20T00:00:00.000Z","fa341799-0dc2-434d-a8ac-07e4535a607c","dependency-injection-kontra-typescript",{"_8":27,"_10":28,"_12":23,"_14":29,"_16":30,"_18":19},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.","a93c67c3-0eb4-46e5-8ef8-f52c95cd3d4d","obserwatorium-czyli-wzorzec-projektowy-obserwatora",{"_8":32,"_10":33,"_12":23,"_14":34,"_16":35,"_18":36},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.","067a66c4-5c8e-4e26-bf18-9bdcb042deb3","signalizacja-czyli-koncept-signals-w-typescript","2 minuty","categories",[39,40,41,42],"typescript","wzorce-projektowe","devops","ci","category"]
