[{"_1":2},"article-list-with-category",{"_3":4},"data",{"_5":6,"_22":65,"_68":17},"articles",[7,34,45,55],{"_8":9,"_10":11,"_12":13,"_22":23,"_24":25,"_26":27,"_28":29,"_30":31,"_32":33},"title","Framework na 80 linii, czyli implementacja Signal API od zera","description","Dowiedz się, jak zaimplementować minimalistyczny system reaktywny (Signal API) w JavaScript/TypeScript w mniej niż 80 liniach kodu. Praktyczny przewodnik krok po kroku.","keywords",[14,15,16,17,18,19,20,21],"signal","reactive","javascript","typescript","frontend","framework","architektura","blog","categories",[17],"createdAt",["D",1750550400000],"id","c49155a2-b1f9-40c8-9ac7-400bdce93227","slug","framework-na-80-linii-czyli-implementacja-signal-api-od-zera","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/framework-na-80-linii-czyli-implementacja-signal-api-od-zera.md",{"_8":35,"_10":36,"_12":37,"_22":39,"_24":41,"_26":42,"_28":43,"_30":31,"_32":44},"Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.",[17,38,16,21],"wzorce projektowe",[17,40],"wzorce-projektowe",["D",1718841600000],"b5818b14-765d-4a9b-8bfb-0209092e9fd0","dependency-injection-kontra-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md",{"_8":46,"_10":47,"_12":48,"_22":50,"_24":51,"_26":52,"_28":53,"_30":31,"_32":54},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[17,38,49,21],"programowanie",[17,40],["D",1718841600000],"23285d33-87a1-45a9-97bd-d44e2e684ded","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_8":56,"_10":57,"_12":58,"_22":60,"_24":61,"_26":62,"_28":63,"_30":31,"_32":64},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[17,38,59,21],"signals",[17,40],["D",1718841600000],"a89e567e-e87f-42d6-b77c-ec23839ed28d","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md",[17,40,66,67],"devops","ci","category"]
