[{"_1":2,"_4":5},"root",{"_3":-5},"data","article-details-with-category",{"_3":6},{"_7":8,"_30":31,"_52":15,"_53":15},"article",{"_9":10,"_11":12,"_13":14,"_18":19,"_20":21,"_22":23,"_24":25,"_26":27,"_28":29},"title","Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","keywords",[15,16,17],"typescript","wzorce","javascript","categories",[15,16],"createdAt",["D",1718841600000],"id","67bb82e6-c3c1-4689-857a-d3840c5d6746","slug","dependency-injection-kontra-typescript","content","<p>Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami.</p>\n<p>W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#spis-treści\">#</a>Spis Treści</h2>\n<ol>\n<li>Podstawy Dependency Injection</li>\n<li>Prosty przykład DI</li>\n<li>Wstrzykiwanie zależności za pomocą funkcji wstrzykującej</li>\n</ol>\n<h2 id=\"1-podstawy-dependency-injection\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#1-podstawy-dependency-injection\">#</a>1. Podstawy Dependency Injection</h2>\n<p>W Dependency Injection chodzi o przekazywanie zależności do obiektu zamiast tworzenia ich bezpośrednio wewnątrz obiektu. Dzięki temu można łatwo wymieniać zależności, co ułatwia testowanie i modyfikowanie kodu.</p>\n<h2 id=\"2-prosty-przykład-di\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#2-prosty-przykład-di\">#</a>2. Prosty przykład DI</h2>\n<p>Rozważmy prosty przykład, w którym klasa <code>UserService</code> potrzebuje instancji <code>UserRepository</code>:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span> = userRepository;\n  }\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> userRepository = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserRepository</span>();\n<span class=\"hljs-keyword\">const</span> userService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserService</span>(userRepository);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p>W powyższym przykładzie <code>UserRepository</code> jest wstrzykiwany do <code>UserService</code> przez konstruktor.</p>\n<h2 id=\"3-wstrzykiwanie-zależności-za-pomocą-funkcji-wstrzykującej\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#3-wstrzykiwanie-zależności-za-pomocą-funkcji-wstrzykującej\">#</a>3. Wstrzykiwanie zależności za pomocą funkcji wstrzykującej</h2>\n<p>Aby lepiej zarządzać zależnościami, możemy użyć kontenera IoC. Przykład poniżej pokazuje, jak można to zrobić przy użyciu prostego kontenera DI:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">dependencies</span>: <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n\n<span class=\"hljs-keyword\">function</span> inject&#x3C;T>(<span class=\"hljs-attr\">dependency</span>: <span class=\"hljs-title function_\">new</span> () => T): T {\n  <span class=\"hljs-keyword\">if</span> (dependencies.<span class=\"hljs-title function_\">has</span>(dependency.<span class=\"hljs-property\">name</span>)) {\n    <span class=\"hljs-keyword\">const</span> dep = dependencies.<span class=\"hljs-title function_\">get</span>(dependency.<span class=\"hljs-property\">name</span>);\n    <span class=\"hljs-keyword\">if</span> (dep) {\n      <span class=\"hljs-keyword\">return</span> dep;\n    }\n  }\n\n  <span class=\"hljs-keyword\">const</span> dep = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">dependency</span>();\n  dependencies.<span class=\"hljs-title function_\">set</span>(dependency.<span class=\"hljs-property\">name</span>, dep);\n  <span class=\"hljs-keyword\">return</span> dependencies.<span class=\"hljs-title function_\">get</span>(dependency.<span class=\"hljs-property\">name</span>);\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">protected</span> userRepository = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">UserRepository</span>);\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExtendedUserService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">UserService</span> {}\n\n<span class=\"hljs-keyword\">const</span> extendedUserService = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">ExtendedUserService</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(extendedUserService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p>W tym przykładzie używamy funkcji do rejestrowania i rozwiązywania zależności.\nFunkcja inject przyjmuje, jako generyczny argument, zależność, którą na podstawie statycznej nazwy zapisuje i przechowuje, dzięki czemu potem mamy dostęp do wspólnej instancji tej zależności.\nTakie podejście pozwala na łatwe rozszerzanie klas, nie potrzebujemy pamiętać o zależnościach w konstruktorze klasy</p>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-4\"><a class=\"mr-1.5 no-underline hover:underline focus-visible:underline\" href=\"#podsumowanie\">#</a>Podsumowanie</h2>\n<p>Dependency Injection w TypeScript to potężna technika, która może znacznie ułatwić zarządzanie zależnościami i poprawić testowalność oraz modularność kodu. Przedstawione powyżej przykłady pokazują różne podejścia do implementacji DI, w tym bezpośrednie wstrzykiwanie przez konstruktor, korzystanie z funkcji wstrzykujących, używanie dekoratorów. Dzięki tym technikom można tworzyć bardziej elastyczne i łatwe w utrzymaniu aplikacje.</p>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md","siblings",[32,42],{"_9":33,"_11":34,"_13":35,"_18":37,"_20":38,"_22":39,"_24":40,"_26":-7,"_28":41},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[15,16,36],"programowanie",[15,16],["D",1718841600000],"411e1496-b1fe-480a-adcb-5276841c8ac4","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_9":43,"_11":44,"_13":45,"_18":47,"_20":48,"_22":49,"_24":50,"_26":-7,"_28":51},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[15,16,46],"signals",[15,16],["D",1718841600000],"11f0d990-3e1d-4cc6-9d64-1d13c4a8d242","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md","category","firstCategory"]
