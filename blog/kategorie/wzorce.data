[{"_1":2},"article-list-with-category",{"_3":4},"data",{"_5":6,"_17":49,"_52":15},"articles",[7,29,39],{"_8":9,"_10":11,"_12":13,"_17":18,"_19":20,"_21":22,"_23":24,"_25":26,"_27":28},"title","Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","keywords",[14,15,16],"typescript","wzorce","javascript","categories",[14,15],"createdAt",["D",1718841600000],"id","f3ebabbb-11f0-4334-b5e5-4a0da6903a23","slug","dependency-injection-kontra-typescript","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md",{"_8":30,"_10":31,"_12":32,"_17":34,"_19":35,"_21":36,"_23":37,"_25":26,"_27":38},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[14,15,33],"programowanie",[14,15],["D",1718841600000],"0c8e13da-9b20-46d0-b4a2-026f3ea6be6e","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_8":40,"_10":41,"_12":42,"_17":44,"_19":45,"_21":46,"_23":47,"_25":26,"_27":48},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[14,15,43],"signals",[14,15],["D",1718841600000],"0a384fb1-beb4-45b7-82e0-9f59c46bda17","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md",[14,15,50,51],"devops","ci","category"]
