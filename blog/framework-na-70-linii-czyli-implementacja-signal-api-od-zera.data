[{"_1":2},"article-details",{"_3":4},"data",{"_5":6,"_7":8,"_9":10,"_19":20,"_21":22,"_23":24,"_25":26,"_27":28,"_29":30,"_31":-7},"title","Framework na 70 linii, czyli implementacja Signal API od zera","description","Dowiedz się, jak zaimplementować minimalistyczny system reaktywny (Signal API) w JavaScript/TypeScript w mniej niż 70 liniach kodu. Praktyczny przewodnik krok po kroku.","keywords",[11,12,13,14,15,16,17,18],"signal","reactive","javascript","typescript","frontend","framework","architektura","blog","categories",[14],"createdAt",["D",1750550400000],"id","5e456131-7f85-43a4-99ae-01777b164090","slug","framework-na-70-linii-czyli-implementacja-signal-api-od-zera","content","<p>Dowiedz się, jak zbudować własny, minimalistyczny system reaktywny inspirowany Signal API – od koncepcji po gotowy kod. Ten artykuł przeprowadzi Cię krok po kroku przez założenia architektury, implementację, przykłady użycia i pomysły na dalszy rozwój. 🚦</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-signal-api\">Czym jest Signal API?</a></li>\n<li><a href=\"#po-co-nam-sygna%C5%82y\">Po co nam sygnały?</a></li>\n<li><a href=\"#podstawowe-za%C5%82o%C5%BCenia-architektury\">Podstawowe założenia architektury</a></li>\n<li><a href=\"#implementacja-signal-api\">Implementacja Signal API</a></li>\n<li><a href=\"#prosty-przyk%C5%82ad-u%C5%BCycia\">Prosty przykład użycia</a></li>\n<li><a href=\"#co-dalej-inspiracje-i-rozwijanie-w%C5%82asnego-frameworka\">Co dalej? Inspiracje i rozwijanie własnego frameworka</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-signal-api\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-signal-api\">>></a>Czym jest Signal API?</h2>\n<p><strong>Signal API</strong> to nowoczesny sposób zarządzania stanem i propagowania zmian w aplikacjach frontendowych. Sygnał (Signal) to po prostu wartość, która jest obserwowalna – każda zmiana tej wartości automatycznie powiadamia powiązane fragmenty kodu, które mogą na nią zareagować (np. przerysować UI). Dzięki temu nie musisz ręcznie pilnować subskrypcji i aktualizacji — system robi to za Ciebie w sposób wydajny i przewidywalny.</p>\n<hr>\n<h2 id=\"po-co-nam-sygnały\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#po-co-nam-sygnały\">>></a>Po co nam sygnały?</h2>\n<ul>\n<li>Eliminują ręczną obsługę subskrypcji i odświeżania 🔄</li>\n<li>Upraszczają zarządzanie stanem i zależnościami w aplikacji</li>\n<li>Pozwalają na budowę bardzo wydajnych i przewidywalnych interfejsów</li>\n<li>Zwiększają czytelność i modularność kodu</li>\n</ul>\n<p>Mechanika sygnałów leży u podstaw takich rozwiązań jak SolidJS Signals, Preact Signals czy system reaktywności w Vue.js.</p>\n<hr>\n<h2 id=\"podstawowe-założenia-architektury\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-założenia-architektury\">>></a>Podstawowe założenia architektury</h2>\n<ol>\n<li><strong>Signal</strong>: funkcja przechowująca wartość i listę „tasków” (efektów) zależnych od tej wartości.</li>\n<li><strong>effect</strong>: funkcja, która wykona zadanie reagując automatycznie na zmiany sygnału.</li>\n<li><strong>computed</strong>: sygnał zależny, obliczany na podstawie innych sygnałów.</li>\n<li><strong>Task i AbortSignal</strong>: pozwalają bezpiecznie anulować zadania, gdy są już niepotrzebne.</li>\n</ol>\n<p>Cel: zachować prostotę implementacji i zrozumienie działania reaktywności od podstaw.</p>\n<hr>\n<h2 id=\"implementacja-signal-api\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#implementacja-signal-api\">>></a>Implementacja Signal API</h2>\n<p>Poniżej znajdziesz kompletny kod minimalistycznego Signal API – całość w TypeScript, gotowa do użycia i dalszej rozbudowy! 🛠️</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Task</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">abortSignal</span>: <span class=\"hljs-title class_\">AbortSignal</span></span>) =></span> <span class=\"hljs-built_in\">void</span>;\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;T> = <span class=\"hljs-function\">() =></span> T;\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WritableSignal</span>&#x3C;T> = <span class=\"hljs-title class_\">Signal</span>&#x3C;T> &#x26; {\n  <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-built_in\">void</span>;\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">fn</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">value</span>: T</span>) =></span> T): <span class=\"hljs-built_in\">void</span>;\n};\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">currentTask</span>: <span class=\"hljs-title class_\">Task</span> | <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">currentAbortController</span>: <span class=\"hljs-title class_\">AbortController</span> | <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">runTask</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">Task</span></span>) {\n  <span class=\"hljs-keyword\">if</span> (currentAbortController) currentAbortController.<span class=\"hljs-title function_\">abort</span>();\n  currentAbortController = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AbortController</span>();\n  <span class=\"hljs-title function_\">task</span>(currentAbortController.<span class=\"hljs-property\">signal</span>);\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">Task</span></span>): <span class=\"hljs-built_in\">void</span> {\n  currentTask = task;\n  <span class=\"hljs-title function_\">runTask</span>(task);\n  currentTask = <span class=\"hljs-literal\">null</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> signal&#x3C;T>(<span class=\"hljs-attr\">setupOrValue</span>: T | (<span class=\"hljs-function\">() =></span> T)): <span class=\"hljs-title class_\">WritableSignal</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">tasks</span>: <span class=\"hljs-title class_\">Set</span>&#x3C;<span class=\"hljs-title class_\">Task</span>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">value</span>: T;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">valueSnapshot</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">previousValueSnapshot</span>: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">callSetupOrValue</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (setupOrValue <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Function</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">setupOrValue</span>();\n    <span class=\"hljs-keyword\">return</span> setupOrValue;\n  }\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getValue</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> currentValue = <span class=\"hljs-title function_\">callSetupOrValue</span>();\n    <span class=\"hljs-keyword\">const</span> currentValueSnapshot = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(currentValue);\n\n    <span class=\"hljs-keyword\">if</span> (currentValueSnapshot !== previousValueSnapshot) {\n      previousValueSnapshot = currentValueSnapshot;\n      value = currentValue;\n      valueSnapshot = currentValueSnapshot;\n    }\n\n    <span class=\"hljs-keyword\">return</span> value;\n  }\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">signal</span>: <span class=\"hljs-title class_\">WritableSignal</span>&#x3C;T> = <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">if</span> (currentTask) tasks.<span class=\"hljs-title function_\">add</span>(currentTask);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">getValue</span>();\n  };\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">updateValue</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">payload</span>: T</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-keyword\">const</span> payloadSnapshot = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(payload);\n    <span class=\"hljs-keyword\">if</span> (valueSnapshot === payloadSnapshot) <span class=\"hljs-keyword\">return</span>;\n    value = payload;\n    valueSnapshot = payloadSnapshot;\n    tasks.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">task</span>) =></span> <span class=\"hljs-title function_\">runTask</span>(task));\n  }\n\n  signal.<span class=\"hljs-property\">set</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =></span> <span class=\"hljs-title function_\">updateValue</span>(value);\n\n  signal.<span class=\"hljs-property\">update</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">setter</span>) =></span> <span class=\"hljs-title function_\">updateValue</span>(<span class=\"hljs-title function_\">setter</span>(<span class=\"hljs-title function_\">getValue</span>()));\n\n  <span class=\"hljs-keyword\">return</span> signal;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> computed = &#x3C;T>(<span class=\"hljs-attr\">setup</span>: <span class=\"hljs-function\">() =></span> T): <span class=\"hljs-title class_\">Signal</span>&#x3C;T> => setup;\n</code></pre>\n<hr>\n<h2 id=\"prosty-przykład-użycia\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#prosty-przykład-użycia\">>></a>Prosty przykład użycia</h2>\n<p>Zobacz, jak można wykorzystać własny system sygnałów w praktyce: 👇</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { signal, effect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./lib\"</span>;\n\n<span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Wartość licznika:\"</span>, <span class=\"hljs-title function_\">count</span>());\n});\n\ncount.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Wartość licznika: 1</span>\ncount.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> v + <span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// Wartość licznika: 6</span>\n</code></pre>\n<h3 id=\"signal-z-obiektem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#signal-z-obiektem\">>>></a>signal z obiektem</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { signal, effect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./lib\"</span>;\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">State</span> {\n  <span class=\"hljs-attr\">users</span>: <span class=\"hljs-title class_\">Array</span>&#x3C;<span class=\"hljs-title class_\">User</span>>;\n}\n\n<span class=\"hljs-keyword\">const</span> state = signal&#x3C;<span class=\"hljs-title class_\">State</span>>({\n  <span class=\"hljs-attr\">users</span>: [],\n});\n\n<span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Wartość stanu aplikacji: \"</span>, <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(<span class=\"hljs-title function_\">state</span>()));\n});\n\nstate.<span class=\"hljs-title function_\">set</span>({ <span class=\"hljs-attr\">users</span>: [{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Kuba\"</span> }] }); <span class=\"hljs-comment\">// Wartość stanu aplikacji:  {\"users\":[{\"id\":1,\"name\":\"Kuba\"}]}</span>\n\nstate.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> ({\n  ...prev,\n  <span class=\"hljs-attr\">users</span>: [...prev.<span class=\"hljs-property\">users</span>, { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Ola\"</span> }],\n})); <span class=\"hljs-comment\">// Wartość stanu aplikacji:  {\"users\":[{\"id\":1,\"name\":\"Kuba\"},{\"id\":2,\"name\":\"Ola\"}]}</span>\n</code></pre>\n<h3 id=\"computed\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#computed\">>>></a>computed</h3>\n<p>Obliczanie wartości zależnej od innych sygnałów jest bardzo proste i pozwala na deklaratywność podobną do nowoczesnych frameworków:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { signal, effect, computed } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./lib\"</span>;\n\n<span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">const</span> sum = <span class=\"hljs-title function_\">computed</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">a</span>() + <span class=\"hljs-title function_\">b</span>());\n\n<span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Suma:\"</span>, <span class=\"hljs-title function_\">sum</span>());\n});\n\na.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// Suma: 13</span>\nb.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">20</span>); <span class=\"hljs-comment\">// Suma: 30</span>\n</code></pre>\n<hr>\n<h2 id=\"co-dalej-inspiracje-i-rozwijanie-własnego-frameworka\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-dalej-inspiracje-i-rozwijanie-własnego-frameworka\">>></a>Co dalej? Inspiracje i rozwijanie własnego frameworka</h2>\n<ul>\n<li>Dodaj obsługę efektów czyszczących (cleanup) i anulowanie subskrypcji</li>\n<li>Przenieś sygnały bezpośrednio na poziom UI (np. automatyczna aktualizacja DOM)</li>\n<li>Zintegruj z React, Vue lub własnym mini-frameworkiem</li>\n<li>Zainspiruj się kodem SolidJS, Preact Signals i systemem reaktywnym Vue</li>\n<li>Przetestuj własne pomysły na optymalizację i rozbudowę systemu</li>\n</ul>\n<blockquote>\n<p>Minimalizm daje moc! Dzięki prostej implementacji możesz zrozumieć, jak działają sygnały pod maską i stworzyć swój własny system reaktywności dostosowany do potrzeb. 💡</p>\n</blockquote>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/framework-na-70-linii-czyli-implementacja-signal-api-od-zera.md","quiz"]
