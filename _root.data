[{"_1":2,"_4":5},"root",{"_3":-5},"data","routes/home",{"_3":6},{"_7":8,"_51":52},"articles",[9,31,41],{"_10":11,"_12":13,"_14":15,"_19":20,"_21":22,"_23":24,"_25":26,"_27":28,"_29":30},"title","Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","description","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.","keywords",[16,17,18],"typescript","wzorce","javascript","categories",[16,17],"createdAt",["D",1718841600000],"id","e1d57256-f8c3-4ecd-97b6-64831f91d4a2","slug","dependency-injection-kontra-typescript","content","","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md",{"_10":32,"_12":33,"_14":34,"_19":36,"_21":37,"_23":38,"_25":39,"_27":28,"_29":40},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[16,17,35],"programowanie",[16,17],["D",1718841600000],"967772df-8695-4af9-ac13-12e85e5f3db3","obserwatorium-czyli-wzorzec-projektowy-obserwatora","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_10":42,"_12":43,"_14":44,"_19":46,"_21":47,"_23":48,"_25":49,"_27":28,"_29":50},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[16,17,45],"signals",[16,17],["D",1718841600000],"03b9cd81-11f5-420e-9c7c-9d81a6dee668","signalizacja-czyli-koncept-signals-w-typescript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md","courses",[53,66,80],{"_10":54,"_12":55,"_14":56,"_19":61,"_21":62,"_23":63,"_25":64,"_27":28,"_29":65},"Wprowadzenie do Semantycznego HTML","Semantyczny HTML polega na używaniu elementów HTML, które jednoznacznie opisują swoje znaczenie i cel. Elementy semantyczne nie tylko definiują strukturę dokumentu, ale również pomagają w interpretacji jego zawartości zarówno przez przeglądarki, jak i przez wyszukiwarki internetowe oraz technologie wspomagające (np. czytniki ekranowe).",[57,58,59,60],"html","semantyka","seo","dostępność",[57,59],["D",1720137600000],"f56856b4-33a1-491e-a539-0401bd00a049","semantyczny-html","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/semantyczny-html.md",{"_10":67,"_12":68,"_14":69,"_19":75,"_21":76,"_23":77,"_25":78,"_27":28,"_29":79},"Renesans w JS, czyli nowoczesny JavaScript","JavaScript jest językiem programowania, który jest powszechnie stosowany do tworzenia dynamicznych i interaktywnych stron internetowych. W ciągu ostatnich lat JavaScript znacznie ewoluował, wprowadzając nowe funkcje i poprawiając istniejące mechanizmy. W tym kursie omówimy najważniejsze elementy nowoczesnego JavaScript, w tym ES6 i nowsze.",[18,70,71,72,73,74],"kurs","wprowadzenie","przewodnik","web","frontend",[71,18],["D",1719705600000],"779ce732-9feb-459f-9575-aa5ae23b3e51","nowoczesny-javascript","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/nowoczesny-javascript.md",{"_10":81,"_12":82,"_14":83,"_19":89,"_21":90,"_23":91,"_25":92,"_27":28,"_29":93},"Wprowadzenie do metodyki BEM","Czym jest BEM? BEM (Block, Element, Modifier) to metodyka nazewnictwa klas CSS, która pomaga tworzyć komponenty interfejsu użytkownika w sposób modularny i łatwy do utrzymania. BEM dzieli interfejs na bloki, elementy i modyfikatory, co pozwala na lepszą organizację kodu CSS.",[70,84,85,86,87,88,57],"css","bem","metodyka","metodyki","stylowanie",[71,84,57],["D",1719705600000],"67d2f0d7-8b22-4492-8e9f-81233175c1a4","szybszy-css-czyli-wprowadzenie-do-bem","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/szybszy-css-czyli-wprowadzenie-do-bem.md"]
