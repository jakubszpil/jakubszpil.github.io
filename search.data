[{"_1":2},"routes/search",{"_3":4},"data",{"_5":6,"_86":87,"_701":702},"articles",[7,35,52,64,75],{"_8":9,"_10":11,"_12":13,"_22":23,"_24":25,"_26":27,"_28":29,"_30":31,"_32":33,"_34":-7},"title","Framework na 70 linii, czyli implementacja Signal API od zera","description","Dowiedz się, jak zaimplementować minimalistyczny system reaktywny (Signal API) w JavaScript/TypeScript w mniej niż 70 liniach kodu. Praktyczny przewodnik krok po kroku.","keywords",[14,15,16,17,18,19,20,21],"signal","reactive","javascript","typescript","frontend","framework","architektura","blog","categories",[17],"createdAt",["D",1750550400000],"id","0278a8f8-eb24-49ce-8dc9-7589d1ad65d4","slug","framework-na-70-linii-czyli-implementacja-signal-api-od-zera","content","<p>Dowiedz się, jak zbudować własny, minimalistyczny system reaktywny inspirowany Signal API – od koncepcji po gotowy kod. Ten artykuł przeprowadzi Cię krok po kroku przez założenia architektury, implementację, przykłady użycia i pomysły na dalszy rozwój. 🚦</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-signal-api\">Czym jest Signal API?</a></li>\n<li><a href=\"#po-co-nam-sygna%C5%82y\">Po co nam sygnały?</a></li>\n<li><a href=\"#podstawowe-za%C5%82o%C5%BCenia-architektury\">Podstawowe założenia architektury</a></li>\n<li><a href=\"#implementacja-signal-api\">Implementacja Signal API</a></li>\n<li><a href=\"#prosty-przyk%C5%82ad-u%C5%BCycia\">Prosty przykład użycia</a></li>\n<li><a href=\"#co-dalej-inspiracje-i-rozwijanie-w%C5%82asnego-frameworka\">Co dalej? Inspiracje i rozwijanie własnego frameworka</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-signal-api\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-signal-api\">>></a>Czym jest Signal API?</h2>\n<p><strong>Signal API</strong> to nowoczesny sposób zarządzania stanem i propagowania zmian w aplikacjach frontendowych. Sygnał (Signal) to po prostu wartość, która jest obserwowalna – każda zmiana tej wartości automatycznie powiadamia powiązane fragmenty kodu, które mogą na nią zareagować (np. przerysować UI). Dzięki temu nie musisz ręcznie pilnować subskrypcji i aktualizacji — system robi to za Ciebie w sposób wydajny i przewidywalny.</p>\n<hr>\n<h2 id=\"po-co-nam-sygnały\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#po-co-nam-sygnały\">>></a>Po co nam sygnały?</h2>\n<ul>\n<li>Eliminują ręczną obsługę subskrypcji i odświeżania 🔄</li>\n<li>Upraszczają zarządzanie stanem i zależnościami w aplikacji</li>\n<li>Pozwalają na budowę bardzo wydajnych i przewidywalnych interfejsów</li>\n<li>Zwiększają czytelność i modularność kodu</li>\n</ul>\n<p>Mechanika sygnałów leży u podstaw takich rozwiązań jak SolidJS Signals, Preact Signals czy system reaktywności w Vue.js.</p>\n<hr>\n<h2 id=\"podstawowe-założenia-architektury\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-założenia-architektury\">>></a>Podstawowe założenia architektury</h2>\n<ol>\n<li><strong>Signal</strong>: funkcja przechowująca wartość i listę „tasków” (efektów) zależnych od tej wartości.</li>\n<li><strong>effect</strong>: funkcja, która wykona zadanie reagując automatycznie na zmiany sygnału.</li>\n<li><strong>computed</strong>: sygnał zależny, obliczany na podstawie innych sygnałów.</li>\n<li><strong>Task i AbortSignal</strong>: pozwalają bezpiecznie anulować zadania, gdy są już niepotrzebne.</li>\n</ol>\n<p>Cel: zachować prostotę implementacji i zrozumienie działania reaktywności od podstaw.</p>\n<hr>\n<h2 id=\"implementacja-signal-api\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#implementacja-signal-api\">>></a>Implementacja Signal API</h2>\n<p>Poniżej znajdziesz kompletny kod minimalistycznego Signal API – całość w TypeScript, gotowa do użycia i dalszej rozbudowy! 🛠️</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Task</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">abortSignal</span>: <span class=\"hljs-title class_\">AbortSignal</span></span>) =></span> <span class=\"hljs-built_in\">void</span>;\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;T> = <span class=\"hljs-function\">() =></span> T;\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WritableSignal</span>&#x3C;T> = <span class=\"hljs-title class_\">Signal</span>&#x3C;T> &#x26; {\n  <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-built_in\">void</span>;\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">fn</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">value</span>: T</span>) =></span> T): <span class=\"hljs-built_in\">void</span>;\n};\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">currentTask</span>: <span class=\"hljs-title class_\">Task</span> | <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">currentAbortController</span>: <span class=\"hljs-title class_\">AbortController</span> | <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">runTask</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">Task</span></span>) {\n  <span class=\"hljs-keyword\">if</span> (currentAbortController) currentAbortController.<span class=\"hljs-title function_\">abort</span>();\n  currentAbortController = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AbortController</span>();\n  <span class=\"hljs-title function_\">task</span>(currentAbortController.<span class=\"hljs-property\">signal</span>);\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">Task</span></span>): <span class=\"hljs-built_in\">void</span> {\n  currentTask = task;\n  <span class=\"hljs-title function_\">runTask</span>(task);\n  currentTask = <span class=\"hljs-literal\">null</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> signal&#x3C;T>(<span class=\"hljs-attr\">setupOrValue</span>: T | (<span class=\"hljs-function\">() =></span> T)): <span class=\"hljs-title class_\">WritableSignal</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">tasks</span>: <span class=\"hljs-title class_\">Set</span>&#x3C;<span class=\"hljs-title class_\">Task</span>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">value</span>: T;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">valueSnapshot</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">previousValueSnapshot</span>: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">callSetupOrValue</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (setupOrValue <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Function</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">setupOrValue</span>();\n    <span class=\"hljs-keyword\">return</span> setupOrValue;\n  }\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getValue</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> currentValue = <span class=\"hljs-title function_\">callSetupOrValue</span>();\n    <span class=\"hljs-keyword\">const</span> currentValueSnapshot = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(currentValue);\n\n    <span class=\"hljs-keyword\">if</span> (currentValueSnapshot !== previousValueSnapshot) {\n      previousValueSnapshot = currentValueSnapshot;\n      value = currentValue;\n      valueSnapshot = currentValueSnapshot;\n    }\n\n    <span class=\"hljs-keyword\">return</span> value;\n  }\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">signal</span>: <span class=\"hljs-title class_\">WritableSignal</span>&#x3C;T> = <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">if</span> (currentTask) tasks.<span class=\"hljs-title function_\">add</span>(currentTask);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">getValue</span>();\n  };\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">updateValue</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">payload</span>: T</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-keyword\">const</span> payloadSnapshot = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(payload);\n    <span class=\"hljs-keyword\">if</span> (valueSnapshot === payloadSnapshot) <span class=\"hljs-keyword\">return</span>;\n    value = payload;\n    valueSnapshot = payloadSnapshot;\n    tasks.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">task</span>) =></span> <span class=\"hljs-title function_\">runTask</span>(task));\n  }\n\n  signal.<span class=\"hljs-property\">set</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =></span> <span class=\"hljs-title function_\">updateValue</span>(value);\n\n  signal.<span class=\"hljs-property\">update</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">setter</span>) =></span> <span class=\"hljs-title function_\">updateValue</span>(<span class=\"hljs-title function_\">setter</span>(<span class=\"hljs-title function_\">getValue</span>()));\n\n  <span class=\"hljs-keyword\">return</span> signal;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> computed = &#x3C;T>(<span class=\"hljs-attr\">setup</span>: <span class=\"hljs-function\">() =></span> T): <span class=\"hljs-title class_\">Signal</span>&#x3C;T> => setup;\n</code></pre>\n<hr>\n<h2 id=\"prosty-przykład-użycia\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#prosty-przykład-użycia\">>></a>Prosty przykład użycia</h2>\n<p>Zobacz, jak można wykorzystać własny system sygnałów w praktyce: 👇</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { signal, effect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./lib\"</span>;\n\n<span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Wartość licznika:\"</span>, <span class=\"hljs-title function_\">count</span>());\n});\n\ncount.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Wartość licznika: 1</span>\ncount.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> v + <span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// Wartość licznika: 6</span>\n</code></pre>\n<h3 id=\"signal-z-obiektem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#signal-z-obiektem\">>>></a>signal z obiektem</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { signal, effect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./lib\"</span>;\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">State</span> {\n  <span class=\"hljs-attr\">users</span>: <span class=\"hljs-title class_\">Array</span>&#x3C;<span class=\"hljs-title class_\">User</span>>;\n}\n\n<span class=\"hljs-keyword\">const</span> state = signal&#x3C;<span class=\"hljs-title class_\">State</span>>({\n  <span class=\"hljs-attr\">users</span>: [],\n});\n\n<span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Wartość stanu aplikacji: \"</span>, <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(<span class=\"hljs-title function_\">state</span>()));\n});\n\nstate.<span class=\"hljs-title function_\">set</span>({ <span class=\"hljs-attr\">users</span>: [{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Kuba\"</span> }] }); <span class=\"hljs-comment\">// Wartość stanu aplikacji:  {\"users\":[{\"id\":1,\"name\":\"Kuba\"}]}</span>\n\nstate.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> ({\n  ...prev,\n  <span class=\"hljs-attr\">users</span>: [...prev.<span class=\"hljs-property\">users</span>, { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Ola\"</span> }],\n})); <span class=\"hljs-comment\">// Wartość stanu aplikacji:  {\"users\":[{\"id\":1,\"name\":\"Kuba\"},{\"id\":2,\"name\":\"Ola\"}]}</span>\n</code></pre>\n<h3 id=\"computed\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#computed\">>>></a>computed</h3>\n<p>Obliczanie wartości zależnej od innych sygnałów jest bardzo proste i pozwala na deklaratywność podobną do nowoczesnych frameworków:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { signal, effect, computed } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./lib\"</span>;\n\n<span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">const</span> sum = <span class=\"hljs-title function_\">computed</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">a</span>() + <span class=\"hljs-title function_\">b</span>());\n\n<span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Suma:\"</span>, <span class=\"hljs-title function_\">sum</span>());\n});\n\na.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// Suma: 13</span>\nb.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">20</span>); <span class=\"hljs-comment\">// Suma: 30</span>\n</code></pre>\n<hr>\n<h2 id=\"co-dalej-inspiracje-i-rozwijanie-własnego-frameworka\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-dalej-inspiracje-i-rozwijanie-własnego-frameworka\">>></a>Co dalej? Inspiracje i rozwijanie własnego frameworka</h2>\n<ul>\n<li>Dodaj obsługę efektów czyszczących (cleanup) i anulowanie subskrypcji</li>\n<li>Przenieś sygnały bezpośrednio na poziom UI (np. automatyczna aktualizacja DOM)</li>\n<li>Zintegruj z React, Vue lub własnym mini-frameworkiem</li>\n<li>Zainspiruj się kodem SolidJS, Preact Signals i systemem reaktywnym Vue</li>\n<li>Przetestuj własne pomysły na optymalizację i rozbudowę systemu</li>\n</ul>\n<blockquote>\n<p>Minimalizm daje moc! Dzięki prostej implementacji możesz zrozumieć, jak działają sygnały pod maską i stworzyć swój własny system reaktywności dostosowany do potrzeb. 💡</p>\n</blockquote>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/framework-na-70-linii-czyli-implementacja-signal-api-od-zera.md","quiz",{"_8":36,"_10":37,"_12":38,"_22":44,"_24":47,"_26":48,"_28":49,"_30":50,"_32":51,"_34":-7},"Proste deployowanie przy użyciu GitHub Actions","Dowiedz się, jak wdrożyć dowolną aplikację za pomocą GitHub Actions w prosty i automatyczny sposób.",[39,40,41,42,43,21],"react","github actions","deployment","CI/CD","automatyzacja",[45,46],"devops","ci",["D",1741996800000],"e44fbab1-089f-4d00-a02e-a001696f21ab","deployment-github-actions","<p>GitHub Actions to potężne narzędzie do automatyzacji procesów CI/CD. W tym artykule na przykładzie aplikacji React pokażę, jak w prosty sposób skonfigurować automatyczne wdrażanie na GitHub Pages z wykorzystaniem GitHub Actions.</p>\n<hr>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#wprowadzenie\">Wprowadzenie</a></li>\n<li><a href=\"#wymagania-wst%C4%99pne\">Wymagania wstępne</a></li>\n<li><a href=\"#tworzenie-aplikacji-react\">Tworzenie aplikacji React</a></li>\n<li><a href=\"#konfiguracja-workflow-github-actions\">Konfiguracja workflow GitHub Actions</a>\n<ul>\n<li><a href=\"#przyk%C5%82adowy-plik-deployyml\">Przykładowy plik deploy.yml</a></li>\n<li><a href=\"#om%C3%B3wienie-krok%C3%B3w-workflow\">Omówienie kroków workflow</a></li>\n</ul>\n</li>\n<li><a href=\"#konfiguracja-github-pages\">Konfiguracja GitHub Pages</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n<li><a href=\"#bonus-pe%C5%82ny-przyk%C5%82ad-w-repozytorium\">Bonus: Pełny przykład w repozytorium</a></li>\n</ol>\n<hr>\n<h2 id=\"wprowadzenie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wprowadzenie\">>></a>Wprowadzenie</h2>\n<p>GitHub Actions umożliwia automatyzację procesów związanych z budowaniem, testowaniem i wdrażaniem aplikacji. Dzięki temu możesz wdrażać swoją aplikację na GitHub Pages lub inny hosting jednym commitem – bez ręcznego wykonywania deployu.</p>\n<hr>\n<h2 id=\"wymagania-wstępne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wymagania-wstępne\">>></a>Wymagania wstępne</h2>\n<p>Przed rozpoczęciem upewnij się, że posiadasz:</p>\n<ul>\n<li>Konto na GitHubie,</li>\n<li>Zainstalowany Node.js oraz npm,</li>\n<li>Aplikację React utworzoną przez <code>create-react-app</code> lub <code>create-react-router</code> (w przykładzie użyto tego drugiego).</li>\n</ul>\n<hr>\n<h2 id=\"tworzenie-aplikacji-react\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tworzenie-aplikacji-react\">>></a>Tworzenie aplikacji React</h2>\n<p>Nie masz jeszcze projektu? Oto jak szybko utworzyć aplikację React:</p>\n<pre><code class=\"hljs language-sh\">npx create-react-router@latest my-app\n<span class=\"hljs-built_in\">cd</span> my-app\ngit init\ngit remote add origin https://github.com/twoj-user/twoj-repo.git\n</code></pre>\n<blockquote>\n<p><strong>Uwaga:</strong> Zmień <code>twoj-user</code> i <code>twoj-repo</code> na nazwę swojego użytkownika i repozytorium na GitHubie.</p>\n</blockquote>\n<hr>\n<h2 id=\"konfiguracja-workflow-github-actions\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#konfiguracja-workflow-github-actions\">>></a>Konfiguracja workflow GitHub Actions</h2>\n<p>Aby wdrożyć aplikację na GitHub Pages automatycznie, utwórz w repozytorium folder <code>.github/workflows</code>, a w nim plik <code>deploy.yml</code>.</p>\n<h3 id=\"przykładowy-plik-deployyml\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykładowy-plik-deployyml\">>>></a>Przykładowy plik deploy.yml</h3>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">React</span> <span class=\"hljs-string\">App</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">GitHub</span> <span class=\"hljs-string\">Pages</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">pull_request:</span>\n  <span class=\"hljs-attr\">push:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span>\n\n<span class=\"hljs-attr\">permissions:</span>\n  <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">write</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build-and-deploy:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span> <span class=\"hljs-string\">repo</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v4</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Install</span> <span class=\"hljs-string\">dependencies</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span> <span class=\"hljs-string\">project</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">build</span>\n\n      <span class=\"hljs-comment\"># - name: Test project</span>\n      <span class=\"hljs-comment\">#   run: npm run test</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">GitHub</span> <span class=\"hljs-string\">Pages</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">JamesIves/github-pages-deploy-action@v4</span>\n        <span class=\"hljs-attr\">if:</span> <span class=\"hljs-string\">github.ref</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">'refs/heads/main'</span> <span class=\"hljs-string\">&#x26;&#x26;</span> <span class=\"hljs-string\">github.event_name</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">'push'</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">gh-pages</span>\n          <span class=\"hljs-attr\">folder:</span> <span class=\"hljs-string\">build</span>\n</code></pre>\n<h3 id=\"omówienie-kroków-workflow\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#omówienie-kroków-workflow\">>>></a>Omówienie kroków workflow</h3>\n<ul>\n<li><strong>Trigger</strong>: Workflow uruchamia się na każdy <code>push</code> do brancha <code>main</code> oraz przy <code>pull_request</code>.</li>\n<li><strong>Uprawnienia</strong>: <code>permissions: contents: write</code> jest niezbędne do wykonania zapisu na branchu z GitHub Pages.</li>\n<li><strong>Kroki:</strong>\n<ol>\n<li><strong>Checkout repo</strong> – pobranie kodu źródłowego.</li>\n<li><strong>Install dependencies</strong> – instalacja zależności npm.</li>\n<li><strong>Build project</strong> – budowanie aplikacji produkcyjnej.</li>\n<li><em>(Opcjonalnie)</em> <strong>Test project</strong> – uruchomienie testów jednostkowych.</li>\n<li><strong>Deploy to GitHub Pages</strong> – automatyczny deploy do gałęzi <code>gh-pages</code> przy użyciu <a href=\"https://github.com/JamesIves/github-pages-deploy-action\">JamesIves/github-pages-deploy-action</a>.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"konfiguracja-github-pages\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#konfiguracja-github-pages\">>></a>Konfiguracja GitHub Pages</h2>\n<p>Aby GitHub Pages korzystało ze zdeployowanej aplikacji:</p>\n<ol>\n<li>Wejdź w ustawienia repozytorium: <strong>Settings</strong> → <strong>Pages</strong>.</li>\n<li>W sekcji <strong>Build and deployment</strong> ustaw <strong>Source</strong> na <code>GitHub Actions</code>.</li>\n<li>Zapisz zmiany. Od teraz każda zmiana na branchu <code>main</code> uruchomi automatyczny deploy.</li>\n</ol>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>GitHub Actions pozwala w pełni zautomatyzować proces wdrażania aplikacji React na GitHub Pages. Wystarczy commit na branchu <code>main</code>, a całość zostanie zbudowana i opublikowana bez Twojej ingerencji.</p>\n<hr>\n<h2 id=\"bonus-pełny-przykład-w-repozytorium\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#bonus-pełny-przykład-w-repozytorium\">>></a>Bonus: Pełny przykład w repozytorium</h2>\n<p>Chcesz zobaczyć kompletną konfigurację w praktyce?<br>\n<a href=\"https://github.com/jakubszpil/jakubszpil.github.io/blob/main/.github/workflows/deploy.yml\">Zajrzyj tutaj</a></p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/deployment-github-actions.md",{"_8":53,"_10":54,"_12":55,"_22":57,"_24":59,"_26":60,"_28":61,"_30":62,"_32":63,"_34":-7},"Szczepienie kodu, czyli jak Typescript radzi sobie z Dependency Injection","Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Umożliwia to oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności i łatwiejszego zarządzania zależnościami. W TypeScript, DI można zaimplementować na kilka sposobów, w tym za funkcji wstrzykujących, które są odpowiedzialne za tworzenie i wstrzykiwanie zależności. Przyjrzyjmy się, jak można zaimplementować DI w TypeScript z wykorzystaniem prostych przykładów.",[17,56,16,21],"wzorce projektowe",[17,58],"wzorce-projektowe",["D",1718841600000],"bd404793-afd3-43df-8870-b3f66782175c","dependency-injection-kontra-typescript","<p>Dependency Injection (DI) to wzorzec projektowy stosowany w celu zwiększenia modularności i testowalności kodu. Pozwala on na oddzielenie tworzenia obiektów od ich używania, co prowadzi do lepszej separacji odpowiedzialności oraz ułatwia zarządzanie zależnościami w projekcie. 🔗</p>\n<p>W TypeScript DI można zaimplementować na różne sposoby, m.in. za pomocą funkcji wstrzykujących, kontenerów IoC oraz dekoratorów. Poniżej znajdziesz szczegółowe omówienie praktycznych sposobów implementacji DI w TypeScript wraz z przykładami i wskazówkami.</p>\n<hr>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-dependency-injection\">Czym jest Dependency Injection?</a></li>\n<li><a href=\"#zalety-stosowania-di\">Zalety stosowania DI</a></li>\n<li><a href=\"#podstawowy-przyk%C5%82ad-dependency-injection\">Podstawowy przykład Dependency Injection</a></li>\n<li><a href=\"#wstrzykiwanie-zale%C5%BCno%C5%9Bci-przy-pomocy-funkcji\">Wstrzykiwanie zależności przy pomocy funkcji</a></li>\n<li><a href=\"#kontener-ioc-i-automatyzacja-di\">Kontener IoC i automatyzacja DI</a></li>\n<li><a href=\"#testowanie-z-wykorzystaniem-di\">Testowanie z wykorzystaniem DI</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-dependency-injection\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-dependency-injection\">>></a>Czym jest Dependency Injection?</h2>\n<p><strong>Dependency Injection</strong> polega na przekazywaniu obiektów zależnych (tzw. zależności) do obiektu zamiast tworzenia ich bezpośrednio w jego wnętrzu. Dzięki temu możemy łatwo podmieniać zależności – np. na ich mocki podczas testowania – bez zmian w logice biznesowej.</p>\n<p>DI zwiększa elastyczność kodu, ułatwia jego testowanie oraz pozwala na lepszą separację odpowiedzialności. Dzięki temu Twój kod staje się bardziej modularny, przejrzysty i łatwy w utrzymaniu. 💡</p>\n<hr>\n<h2 id=\"zalety-stosowania-di\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zalety-stosowania-di\">>></a>Zalety stosowania DI</h2>\n<ul>\n<li><strong>Łatwiejsze testowanie</strong> – zależności można zamieniać na mocki lub stuby w testach jednostkowych.</li>\n<li><strong>Lepsza modularność</strong> – klasy nie są silnie powiązane z konkretnymi implementacjami.</li>\n<li><strong>Łatwiejsze zarządzanie zależnościami</strong> – zmiany w zależnościach nie wymagają modyfikacji całego kodu.</li>\n<li><strong>Wspieranie zasad SOLID</strong> – zwłaszcza zasady odwrócenia zależności (Dependency Inversion Principle).</li>\n<li><strong>Zwiększona elastyczność</strong> – łatwo rozszerzać i modyfikować funkcjonalność bez naruszania istniejących klas.</li>\n</ul>\n<hr>\n<h2 id=\"podstawowy-przykład-dependency-injection\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowy-przykład-dependency-injection\">>></a>Podstawowy przykład Dependency Injection</h2>\n<p>Rozważmy prosty scenariusz, w którym klasa <code>UserService</code> korzysta z <code>UserRepository</code>:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span> = userRepository;\n  }\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> userRepository = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserRepository</span>();\n<span class=\"hljs-keyword\">const</span> userService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserService</span>(userRepository);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nW tym przykładzie <code>UserRepository</code> jest wstrzykiwany do <code>UserService</code> poprzez konstruktor. Dzięki temu możemy łatwo podmienić repozytorium np. w testach jednostkowych lub zamienić na inną implementację.</p>\n<hr>\n<h2 id=\"wstrzykiwanie-zależności-przy-pomocy-funkcji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wstrzykiwanie-zależności-przy-pomocy-funkcji\">>></a>Wstrzykiwanie zależności przy pomocy funkcji</h2>\n<p>W większych aplikacjach zarządzanie zależnościami ręcznie może być uciążliwe. Możemy zastosować funkcję <code>inject</code>, która będzie przechowywać i dostarczać instancje klas (prosta wersja kontenera IoC):</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">dependencies</span>: <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n\n<span class=\"hljs-keyword\">function</span> inject&#x3C;T>(<span class=\"hljs-attr\">dependency</span>: <span class=\"hljs-title function_\">new</span> () => T): T {\n  <span class=\"hljs-keyword\">if</span> (dependencies.<span class=\"hljs-title function_\">has</span>(dependency.<span class=\"hljs-property\">name</span>)) {\n    <span class=\"hljs-keyword\">return</span> dependencies.<span class=\"hljs-title function_\">get</span>(dependency.<span class=\"hljs-property\">name</span>);\n  }\n  <span class=\"hljs-keyword\">const</span> dep = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">dependency</span>();\n  dependencies.<span class=\"hljs-title function_\">set</span>(dependency.<span class=\"hljs-property\">name</span>, dep);\n  <span class=\"hljs-keyword\">return</span> dep;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-keyword\">protected</span> userRepository = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">UserRepository</span>);\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExtendedUserService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">UserService</span> {}\n\n<span class=\"hljs-keyword\">const</span> extendedUserService = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">ExtendedUserService</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(extendedUserService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p><strong>Wyjaśnienie:</strong></p>\n<ul>\n<li>Funkcja <code>inject</code> rejestruje i przechowuje instancje klas, zapewniając singleton dla każdej z nich.</li>\n<li>Nie musisz przekazywać zależności przez konstruktor – są pobierane automatycznie.</li>\n<li>Klasy można łatwo rozszerzać, a zależności są zarządzane centralnie – to duże ułatwienie w dużych projektach. 🛠️</li>\n</ul>\n<hr>\n<h2 id=\"kontener-ioc-i-automatyzacja-di\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#kontener-ioc-i-automatyzacja-di\">>></a>Kontener IoC i automatyzacja DI</h2>\n<p>W rozbudowanych projektach warto rozważyć użycie gotowych rozwiązań, np. <a href=\"https://inversify.io/\">InversifyJS</a>, które pozwalają korzystać z dekoratorów i automatycznie rozwiązywać zależności.</p>\n<p>Przykład z użyciem InversifyJS:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"reflect-metadata\"</span>;\n<span class=\"hljs-keyword\">import</span> { injectable, inject, <span class=\"hljs-title class_\">Container</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"inversify\"</span>;\n\n<span class=\"hljs-meta\">@injectable</span>()\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`User <span class=\"hljs-subst\">${userId}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-meta\">@injectable</span>()\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@inject</span>(UserRepository) <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">userRepository</span>: <span class=\"hljs-title class_\">UserRepository</span></span>) {}\n\n  <span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">userRepository</span>.<span class=\"hljs-title function_\">getUser</span>(userId);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Container</span>();\ncontainer.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-title class_\">UserRepository</span>).<span class=\"hljs-title function_\">toSelf</span>();\ncontainer.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-title class_\">UserService</span>).<span class=\"hljs-title function_\">toSelf</span>();\n\n<span class=\"hljs-keyword\">const</span> userService = container.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">UserService</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// User 1</span>\n</code></pre>\n<p><strong>Zalety takiego podejścia:</strong></p>\n<ul>\n<li>Automatyczna rejestracja i rozwiązywanie zależności.</li>\n<li>Wsparcie dla różnych zakresów życia obiektu (singleton, transient).</li>\n<li>Możliwość wstrzykiwania zależności przez dekoratory.</li>\n<li>Łatwiejsze zarządzanie rozbudowaną strukturą aplikacji.</li>\n</ul>\n<hr>\n<h2 id=\"testowanie-z-wykorzystaniem-di\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#testowanie-z-wykorzystaniem-di\">>></a>Testowanie z wykorzystaniem DI</h2>\n<p>Dzięki zastosowaniu DI możemy łatwo podmieniać implementacje zależności, np. na mocki lub stuby podczas testów jednostkowych:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MockUserRepository</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">userId</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Mock User\"</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> mockRepo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MockUserRepository</span>();\n<span class=\"hljs-keyword\">const</span> userService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserService</span>(mockRepo);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userService.<span class=\"hljs-title function_\">getUserName</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// Mock User</span>\n</code></pre>\n<p><strong>Korzyści:</strong></p>\n<ul>\n<li>Testy są niezależne od rzeczywistej implementacji zależności.</li>\n<li>Można łatwo symulować różne scenariusze i przypadki brzegowe.</li>\n<li>Utrzymanie i rozwijanie testów staje się prostsze.</li>\n</ul>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Dependency Injection w TypeScript to potężny sposób na zwiększenie elastyczności, testowalności i modularności kodu. Najprostsze podejście to ręczne wstrzykiwanie zależności przez konstruktor, jednak w miarę wzrostu projektu warto pomyśleć o własnym kontenerze IoC lub sięgnąć po gotowe biblioteki jak InversifyJS. DI pozwala na lepszą separację odpowiedzialności i sprawia, że kod jest łatwiejszy w utrzymaniu i testowaniu.</p>\n<hr>\n<p><strong>Dalsza lektura:</strong> 📚</p>\n<ul>\n<li><a href=\"https://github.com/inversify/InversifyJS\">InversifyJS Documentation</a></li>\n<li><a href=\"https://angular.dev/guide/di\">Dependency Injection w TypeScript – Angular</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/SOLID\">SOLID Principles</a></li>\n</ul>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/dependency-injection-kontra-typescript.md",{"_8":65,"_10":66,"_12":67,"_22":69,"_24":70,"_26":71,"_28":72,"_30":73,"_32":74,"_34":-7},"Obserwatorium, czyli wzorzec projektowy obserwatora","Wzorzec projektowy Obserwator (ang. Observer) jest jednym z najważniejszych wzorców projektowych, szczególnie użytecznym w kontekście programowania reaktywnego i aplikacji, które muszą reagować na zmiany stanu. W TypeScript możemy zaimplementować ten wzorzec w sposób typowany, co dodatkowo zwiększa bezpieczeństwo i czytelność kodu.",[17,56,68,21],"programowanie",[17,58],["D",1718841600000],"89d87220-8f75-41dd-8a53-16c44ce3fd18","obserwatorium-czyli-wzorzec-projektowy-obserwatora","<p>Wzorzec projektowy Obserwator (ang. Observer) to jeden z kluczowych wzorców, szczególnie przydatny w programowaniu reaktywnym oraz w aplikacjach wymagających reagowania na zmiany stanu. TypeScript pozwala na typowaną implementację tego wzorca, co zwiększa bezpieczeństwo i czytelność kodu.</p>\n<hr>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-wzorzec-obserwatora\">Czym jest Wzorzec Obserwatora?</a></li>\n<li><a href=\"#korzy%C5%9Bci-z-u%C5%BCywania-wzorca-obserwatora\">Korzyści z używania Wzorca Obserwatora</a></li>\n<li><a href=\"#prosta-implementacja-wzorca-obserwatora\">Prosta implementacja wzorca Obserwatora</a></li>\n<li><a href=\"#rozbudowana-implementacja-generics\">Rozbudowana implementacja generics</a></li>\n<li><a href=\"#przyk%C5%82ad-praktyczny--monitorowanie-temperatury\">Przykład praktyczny — monitorowanie temperatury</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-wzorzec-obserwatora\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-wzorzec-obserwatora\">>></a>Czym jest Wzorzec Obserwatora?</h2>\n<p>Wzorzec Obserwatora polega na tym, że obiekt zwany obserwowanym (Subject) zarządza listą swoich obserwatorów (Observers) i automatycznie powiadamia ich o zmianach swojego stanu. Mechanizm ten realizowany jest dzięki metodom do subskrybowania, odsubskrybowania i powiadamiania.</p>\n<hr>\n<h2 id=\"korzyści-z-używania-wzorca-obserwatora\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#korzyści-z-używania-wzorca-obserwatora\">>></a>Korzyści z używania Wzorca Obserwatora</h2>\n<ul>\n<li><strong>Reaktywność</strong> – automatyczne powiadamianie obserwatorów o zmianach.</li>\n<li><strong>Luźne powiązania</strong> – obserwatorzy nie muszą znać szczegółów implementacji obiektu obserwowanego.</li>\n<li><strong>Elastyczność</strong> – łatwość dodawania nowych obserwatorów bez modyfikacji istniejącego kodu.</li>\n</ul>\n<hr>\n<h2 id=\"prosta-implementacja-wzorca-obserwatora\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#prosta-implementacja-wzorca-obserwatora\">>></a>Prosta implementacja wzorca Obserwatora</h2>\n<p>Poniżej znajdziesz bazową implementację wzorca Obserwatora w TypeScript:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Interfejs obserwatora</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Klasa obserwowana</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Subject</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>[] = [];\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs</span>) =></span> obs !== observer);\n  }\n\n  <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer</span>) =></span> observer.<span class=\"hljs-title function_\">update</span>(message));\n  }\n}\n\n<span class=\"hljs-comment\">// Implementacja obserwatora</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConcreteObserver</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span> received message: <span class=\"hljs-subst\">${message}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie wzorca Obserwatora</span>\n<span class=\"hljs-keyword\">const</span> subject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Subject</span>();\n\n<span class=\"hljs-keyword\">const</span> observer1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcreteObserver</span>(<span class=\"hljs-string\">\"Observer 1\"</span>);\n<span class=\"hljs-keyword\">const</span> observer2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcreteObserver</span>(<span class=\"hljs-string\">\"Observer 2\"</span>);\n\nsubject.<span class=\"hljs-title function_\">subscribe</span>(observer1);\nsubject.<span class=\"hljs-title function_\">subscribe</span>(observer2);\n\nsubject.<span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-string\">\"Hello, Observers!\"</span>);\n\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Observer 1 received message: Hello, Observers!</span>\n<span class=\"hljs-comment\">// Observer 2 received message: Hello, Observers!</span>\n</code></pre>\n<p><strong>Opis:</strong><br>\n<code>Subject</code> zarządza listą obserwatorów i powiadamia ich o zmianach. Każdy obserwator implementuje interfejs <code>Observer</code> z metodą <code>update</code>.</p>\n<hr>\n<h2 id=\"rozbudowana-implementacja-generics\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#rozbudowana-implementacja-generics\">>></a>Rozbudowana implementacja generics</h2>\n<p>W bardziej zaawansowanych przypadkach warto użyć typów generycznych, co pozwala przekazywać różne typy danych:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Interfejs obserwatora z typem generycznym</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;T> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: T): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Klasa obserwowana z typem generycznym</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Subject</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;T>[] = [];\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs</span>) =></span> obs !== observer);\n  }\n\n  <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-attr\">data</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer</span>) =></span> observer.<span class=\"hljs-title function_\">update</span>(data));\n  }\n}\n\n<span class=\"hljs-comment\">// Implementacja obserwatora</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConcreteObserver</span>&#x3C;T> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;T> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span> received data:`</span>, data);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie z typem generycznym</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> userSubject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Subject</span>&#x3C;<span class=\"hljs-title class_\">User</span>>();\n\n<span class=\"hljs-keyword\">const</span> userObserver1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcreteObserver</span>&#x3C;<span class=\"hljs-title class_\">User</span>>(<span class=\"hljs-string\">\"User Observer 1\"</span>);\n<span class=\"hljs-keyword\">const</span> userObserver2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcreteObserver</span>&#x3C;<span class=\"hljs-title class_\">User</span>>(<span class=\"hljs-string\">\"User Observer 2\"</span>);\n\nuserSubject.<span class=\"hljs-title function_\">subscribe</span>(userObserver1);\nuserSubject.<span class=\"hljs-title function_\">subscribe</span>(userObserver2);\n\nuserSubject.<span class=\"hljs-title function_\">notify</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> });\n\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// User Observer 1 received data: { name: 'Alice', age: 30 }</span>\n<span class=\"hljs-comment\">// User Observer 2 received data: { name: 'Alice', age: 30 }</span>\n</code></pre>\n<p><strong>Opis:</strong><br>\nDzięki zastosowaniu typów generycznych, wzorzec staje się bardziej elastyczny i bezpieczny typowo. Możesz przekazywać dowolne typy danych bez utraty ich struktury.</p>\n<hr>\n<h2 id=\"przykład-praktyczny--monitorowanie-temperatury\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykład-praktyczny--monitorowanie-temperatury\">>></a>Przykład praktyczny – monitorowanie temperatury</h2>\n<p>Aby zobaczyć praktyczne zastosowanie, oto przykład aplikacji monitorującej zmiany temperatury:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Interfejs obserwatora</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;T> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: T): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Klasa obserwowana</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TemperatureSensor</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>>[] = [];\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">temperature</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs</span>) =></span> obs !== observer);\n  }\n\n  <span class=\"hljs-title function_\">setTemperature</span>(<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Setting temperature to <span class=\"hljs-subst\">${temp}</span>`</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">temperature</span> = temp;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">notify</span>(temp);\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer</span>) =></span> observer.<span class=\"hljs-title function_\">update</span>(temp));\n  }\n}\n\n<span class=\"hljs-comment\">// Implementacje obserwatorów</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TemperatureDisplay</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Temperature Display: <span class=\"hljs-subst\">${temp}</span>°C`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TemperatureLogger</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span>&#x3C;<span class=\"hljs-built_in\">number</span>> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Logging temperature: <span class=\"hljs-subst\">${temp}</span>°C`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie wzorca Obserwatora</span>\n<span class=\"hljs-keyword\">const</span> sensor = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TemperatureSensor</span>();\n<span class=\"hljs-keyword\">const</span> display = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TemperatureDisplay</span>();\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TemperatureLogger</span>();\n\nsensor.<span class=\"hljs-title function_\">subscribe</span>(display);\nsensor.<span class=\"hljs-title function_\">subscribe</span>(logger);\n\nsensor.<span class=\"hljs-title function_\">setTemperature</span>(<span class=\"hljs-number\">25</span>); <span class=\"hljs-comment\">// Output: Setting temperature to 25</span>\n<span class=\"hljs-comment\">//         Temperature Display: 25°C</span>\n<span class=\"hljs-comment\">//         Logging temperature: 25°C</span>\n\nsensor.<span class=\"hljs-title function_\">setTemperature</span>(<span class=\"hljs-number\">30</span>); <span class=\"hljs-comment\">// Output: Setting temperature to 30</span>\n<span class=\"hljs-comment\">//         Temperature Display: 30°C</span>\n<span class=\"hljs-comment\">//         Logging temperature: 30°C</span>\n</code></pre>\n<p><strong>Opis:</strong><br>\n<code>TemperatureSensor</code> pełni rolę obserwowanego, powiadamiając obserwatorów (<code>TemperatureDisplay</code>, <code>TemperatureLogger</code>) o zmianach temperatury. Wzorzec ten świetnie nadaje się do aplikacji monitorujących różne parametry w czasie rzeczywistym.</p>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Wzorzec Obserwatora to potężne narzędzie, które pozwala reagować na zmiany stanu w sposób luźno powiązany i elastyczny. W TypeScript dzięki silnemu typowaniu implementacja staje się jeszcze bezpieczniejsza i bardziej czytelna. Pokazane powyżej przykłady prezentują zarówno podstawową, jak i zaawansowaną wersję, która wykorzystuje typy generyczne. Zachęcam do eksperymentowania z tym wzorcem w swoich projektach – pozwala on na znacząco lepsze zarządzanie zależnościami i reaktywnością aplikacji.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/obserwatorium-czyli-wzorzec-projektowy-obserwatora.md",{"_8":76,"_10":77,"_12":78,"_22":80,"_24":81,"_26":82,"_28":83,"_30":84,"_32":85,"_34":-7},"Signalizacja, czyli koncept Signals w Typescript","Signal to koncepcja pochodząca z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzania stanem aplikacji. W TypeScript, dzięki silnemu typowaniu, można zaimplementować sygnały w sposób bezpieczny i efektywny.",[17,56,79,21],"signals",[17,58],["D",1718841600000],"0262eeff-3bcb-4746-9138-ccdb06b7e05c","signalizacja-czyli-koncept-signals-w-typescript","<p>Signal to koncepcja znana z programowania reaktywnego, której celem jest uproszczenie komunikacji między komponentami oraz zarządzanie stanem aplikacji. Dzięki silnemu typowaniu TypeScript, sygnały można zaimplementować w sposób bezpieczny, czytelny i efektywny.</p>\n<hr>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-signal\">Czym jest Signal?</a></li>\n<li><a href=\"#korzy%C5%9Bci-z-u%C5%BCywania-signal\">Korzyści z używania Signal</a></li>\n<li><a href=\"#prosta-implementacja-signal-w-typescript\">Prosta implementacja Signal w TypeScript</a></li>\n<li><a href=\"#zaawansowana-implementacja-signal-z-typowaniem\">Zaawansowana implementacja Signal z typowaniem</a></li>\n<li><a href=\"#praktyczne-zastosowania-sygna%C5%82%C3%B3w\">Praktyczne zastosowania sygnałów</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-signal\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-signal\">>></a>Czym jest Signal?</h2>\n<p><strong>Signal</strong> (sygnał) to obiekt reprezentujący strumień danych, który może być obserwowany i reagować na ich zmiany. Sygnały świetnie sprawdzają się w aplikacjach frontendowych, gdzie mogą służyć do reagowania na:</p>\n<ul>\n<li>zdarzenia użytkownika,</li>\n<li>zmiany stanu aplikacji,</li>\n<li>asynchroniczne operacje (np. żądania sieciowe).</li>\n</ul>\n<hr>\n<h2 id=\"korzyści-z-używania-signal\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#korzyści-z-używania-signal\">>></a>Korzyści z używania Signal</h2>\n<ul>\n<li><strong>Reaktywność:</strong> Automatyczne reagowanie na zmiany danych w aplikacji.</li>\n<li><strong>Czytelność:</strong> Eliminacja złożonych zależności i ręcznego zarządzania stanem.</li>\n<li><strong>Modularność:</strong> Oddzielenie logiki zarządzania stanem od komponentów, co ułatwia rozwój i utrzymanie kodu.</li>\n</ul>\n<hr>\n<h2 id=\"prosta-implementacja-signal-w-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#prosta-implementacja-signal-w-typescript\">>></a>Prosta implementacja Signal w TypeScript</h2>\n<p>Poniższy przykład przedstawia bazową implementację sygnału:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Listener</span>&#x3C;T> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">value</span>: T</span>) =></span> <span class=\"hljs-built_in\">void</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">listeners</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>[] = [];\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">push</span>(listener);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">l</span>) =></span> l !== listener);\n  }\n\n  <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">listener</span>) =></span> <span class=\"hljs-title function_\">listener</span>(value));\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie sygnału</span>\n<span class=\"hljs-keyword\">const</span> numberSignal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;<span class=\"hljs-built_in\">number</span>>();\n\nnumberSignal.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Received value: <span class=\"hljs-subst\">${value}</span>`</span>);\n});\n\nnumberSignal.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-number\">42</span>); <span class=\"hljs-comment\">// Output: Received value: 42</span>\n</code></pre>\n<p><strong>Opis:</strong><br>\nKlasa <code>Signal</code> pozwala na subskrybowanie funkcji-odbiorców, ich usuwanie oraz emitowanie wartości do wszystkich subskrybentów.</p>\n<hr>\n<h2 id=\"zaawansowana-implementacja-signal-z-typowaniem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zaawansowana-implementacja-signal-z-typowaniem\">>></a>Zaawansowana implementacja Signal z typowaniem</h2>\n<p>W większych aplikacjach warto zastosować typy generyczne i kolekcje, które zapobiegają wielokrotnemu dodawaniu tego samego subskrybenta:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Listener</span>&#x3C;T> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">value</span>: T</span>) =></span> <span class=\"hljs-built_in\">void</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">listeners</span>: <span class=\"hljs-title class_\">Set</span>&#x3C;<span class=\"hljs-title class_\">Listener</span>&#x3C;T>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();\n\n  <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">add</span>(listener);\n  }\n\n  <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-attr\">listener</span>: <span class=\"hljs-title class_\">Listener</span>&#x3C;T>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>.<span class=\"hljs-title function_\">delete</span>(listener);\n  }\n\n  <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> listener <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>) {\n      <span class=\"hljs-title function_\">listener</span>(value);\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie sygnału z typem generycznym</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> userSignal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;<span class=\"hljs-title class_\">User</span>>();\n\nuserSignal.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">user</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`User: <span class=\"hljs-subst\">${user.name}</span>, Age: <span class=\"hljs-subst\">${user.age}</span>`</span>);\n});\n\nuserSignal.<span class=\"hljs-title function_\">emit</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John Doe\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> }); <span class=\"hljs-comment\">// Output: User: John Doe, Age: 30</span>\n</code></pre>\n<p><strong>Opis:</strong><br>\nDzięki użyciu <code>Set</code>, każdy subskrybent pojawia się tylko raz. Typy generyczne umożliwiają tworzenie sygnałów dla różnych typów danych.</p>\n<hr>\n<h2 id=\"praktyczne-zastosowania-sygnałów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#praktyczne-zastosowania-sygnałów\">>></a>Praktyczne zastosowania sygnałów</h2>\n<p>Sygnały są szeroko stosowane m.in. w:</p>\n<ul>\n<li>zarządzaniu stanem komponentów w frameworkach frontendowych (np. Angular Signals, SolidJS Signals),</li>\n<li>reagowaniu na zmiany danych w czasie rzeczywistym (np. WebSocket, API),</li>\n<li>obsłudze zdarzeń pomiędzy niezależnymi modułami (np. event bus).</li>\n</ul>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Sygnał do powiadamiania o zmianie zalogowanego użytkownika</span>\n<span class=\"hljs-keyword\">const</span> authSignal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Signal</span>&#x3C;<span class=\"hljs-title class_\">User</span> | <span class=\"hljs-literal\">null</span>>();\n\nauthSignal.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">user</span>) =></span> {\n  <span class=\"hljs-keyword\">if</span> (user) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Zalogowano użytkownika:\"</span>, user.<span class=\"hljs-property\">name</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Wylogowano użytkownika\"</span>);\n  }\n});\n\n<span class=\"hljs-comment\">// Logowanie użytkownika</span>\nauthSignal.<span class=\"hljs-title function_\">emit</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Anna\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span> });\n<span class=\"hljs-comment\">// Wylogowanie użytkownika</span>\nauthSignal.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-literal\">null</span>);\n</code></pre>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Signal w TypeScript to skuteczny sposób na budowę reaktywnych aplikacji i automatyczne reagowanie na zmiany stanu. Silne typowanie pozwala uniknąć wielu błędów i sprawia, że kod jest zrozumiały oraz łatwy w utrzymaniu. Implementując sygnały, możesz znacząco uprościć zarządzanie stanem i poprawić architekturę swoich aplikacji.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/articles/signalizacja-czyli-koncept-signals-w-typescript.md","courses",[88,153,211,259,322,378,432,490,543,598,650],{"_8":89,"_10":90,"_12":91,"_22":94,"_24":96,"_34":97,"_26":149,"_28":150,"_30":151,"_32":152},"Wprowadzenie do TypeScript","Dowiedz się czym jest TypeScript, jak zacząć z niego korzystać i dlaczego warto go używać w swoich projektach. Przystępny przewodnik dla początkujących z przykładami i praktycznymi wskazówkami.",[17,16,68,18,92,93],"typowanie","learning",[95,17],"wprowadzenie",["D",1750636800000],{"_8":98,"_99":100},"Quiz: Podstawy TypeScript","questions",[101,114,122,131,140],{"_102":103,"_104":105,"_110":111,"_112":113},"question","<p>Czym jest TypeScript?</p>","options",[106,107,108,109],"Frameworkiem CSS","Rozszerzeniem JavaScriptu o typowanie statyczne","Językiem bazującym na Pythonie","Systemem szablonów HTML","answer",1,"explanation","TypeScript rozszerza JavaScript o typowanie statyczne i inne narzędzia dla programistów.",{"_102":115,"_104":116,"_110":111,"_112":121},"<p>Jakie rozszerzenie mają pliki natywne TypeScript?</p>",[117,118,119,120],".cts",".ts",".js",".json","Standardowe pliki TypeScript mają rozszerzenie `.ts`. Natomiast w React używamy też `.tsx`.",{"_102":123,"_104":124,"_110":129,"_112":130},"<p>Które z poniższych typowań zmiennej jest poprawne w TypeScript?</p>",[125,126,127,128],"let liczba = number 10;","var liczba: num = 10;","let liczba: number = 10;","let liczba: 10 = number;",2,"Poprawna składnia to let liczba: number = 10;",{"_102":132,"_104":133,"_110":138,"_112":139},"<p>Czym różni się TypeScript od JavaScript?</p>",[134,135,136,137],"TypeScript ma statyczne typowanie, JavaScript nie","TypeScript działa tylko w przeglądarce","TypeScript nie obsługuje klas","JavaScript nie pozwala na funkcje",0,"Najważniejsza różnica to typowanie statyczne i kompilacja do JS.",{"_102":141,"_104":142,"_110":147,"_112":148},"<p>Jak zainstalować TypeScript globalnie przez npm?</p>",[143,144,145,146],"npm install typescript","npm get typescript","npm add global typescript","npm install -g typescript",3,"Polecenie npm install -g typescript instaluje TypeScript globalnie.","d7ee2381-46b2-4bbe-939e-1450f74ef5e1","wprowadzenie-do-typescript","<p>TypeScript to coraz popularniejszy język programowania, który rozszerza możliwości jakie daje JavaScript. Jeżeli pracowałeś już z JavaScript, na pewno docenisz dodatkowe bezpieczeństwo i wygodę, które oferuje TypeScript! 🚀</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#co-to-jest-typescript\">Co to jest TypeScript?</a></li>\n<li><a href=\"#czym-r%C3%B3%C5%BCni-si%C4%99-typescript-od-javascript\">Czym różni się TypeScript od JavaScript?</a></li>\n<li><a href=\"#dlaczego-warto-korzysta%C4%87-z-typescript\">Dlaczego warto korzystać z TypeScript?</a></li>\n<li><a href=\"#jak-zacz%C4%85%C4%87-z-typescript\">Jak zacząć z TypeScript?</a>\n<ul>\n<li><a href=\"#instalacja\">Instalacja</a></li>\n<li><a href=\"#kompilacja-plik%C3%B3w-ts-do-js\">Kompilacja plików <code>.ts</code> do <code>.js</code></a></li>\n<li><a href=\"#konfiguracja-projektu-i-tsconfigjson\">Konfiguracja projektu i tsconfig.json</a></li>\n<li><a href=\"#tw%C3%B3j-pierwszy-projekt-typescript\">Twój pierwszy projekt TypeScript</a></li>\n</ul>\n</li>\n<li><a href=\"#podstawy-sk%C5%82adni-typescript\">Podstawy składni TypeScript</a>\n<ul>\n<li><a href=\"#typowanie-zmiennych\">Typowanie zmiennych</a></li>\n<li><a href=\"#typowanie-funkcji\">Typowanie funkcji</a></li>\n<li><a href=\"#interfejsy\">Interfejsy</a></li>\n<li><a href=\"#typy-z%C5%82o%C5%BCone\">Typy złożone</a></li>\n<li><a href=\"#klasy-i-dziedziczenie\">Klasy i dziedziczenie</a></li>\n<li><a href=\"#enumy\">Enumy</a></li>\n<li><a href=\"#alias-typ%C3%B3w\">Alias typów</a></li>\n</ul>\n</li>\n<li><a href=\"#jak-u%C5%BCywa%C4%87-typ%C3%B3w-w-praktyce\">Jak używać typów w praktyce?</a></li>\n<li><a href=\"#narz%C4%99dzia-i-integracje\">Narzędzia i integracje</a></li>\n<li><a href=\"#cz%C4%99ste-pu%C5%82apki-i-wskaz%C3%B3wki\">Częste pułapki i wskazówki</a>\n<ul>\n<li><a href=\"#najcz%C4%99stsze-b%C5%82%C4%99dy-i-jak-je-naprawi%C4%87\">Najczęstsze błędy i jak je naprawić</a></li>\n</ul>\n</li>\n<li><a href=\"#typescript-w-projektach-open-source-i-pracy-zespo%C5%82owej\">TypeScript w projektach open-source i pracy zespołowej</a></li>\n<li><a href=\"#gdzie-znale%C5%BA%C4%87-deklaracje-typ%C3%B3w-do-bibliotek-js\">Gdzie znaleźć deklaracje typów do bibliotek JS?</a></li>\n<li><a href=\"#gdzie-szuka%C4%87-pomocy\">Gdzie szukać pomocy?</a></li>\n<li><a href=\"#zadania-praktyczne\">Zadania praktyczne</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"co-to-jest-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-typescript\">>></a>Co to jest TypeScript?</h2>\n<p>TypeScript to nadzbiór JavaScriptu stworzony przez Microsoft. Oznacza to, że każdy poprawny kod JavaScript jest też poprawnym kodem TypeScript. TypeScript wprowadza jednak <strong>statyczne typowanie</strong>, co pozwala na wcześniejsze wykrywanie błędów w kodzie i daje wiele narzędzi do pisania lepiej zorganizowanych aplikacji.</p>\n<ul>\n<li><strong>JavaScript + Typy = TypeScript</strong></li>\n<li>Pliki TypeScript mają rozszerzenie <code>.ts</code> (zamiast <code>.js</code>).</li>\n<li>TypeScript kompiluje się do „czystego” JavaScriptu, który działa w każdej przeglądarce lub środowisku Node.js.</li>\n</ul>\n<hr>\n<h2 id=\"czym-różni-się-typescript-od-javascript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-różni-się-typescript-od-javascript\">>></a>Czym różni się TypeScript od JavaScript?</h2>\n<p>TypeScript to JavaScript z dodatkowymi możliwościami typowania i narzędziami dla programistów.</p>\n<ul>\n<li><strong>Kompilacja</strong>: Kod TypeScript musi zostać przetłumaczony (skompliowany) do JavaScriptu, zanim zostanie uruchomiony w przeglądarce lub Node.js.</li>\n<li><strong>Typowanie</strong>: TypeScript pozwala wykryć błędy typów już podczas pisania kodu, zanim uruchomisz aplikację. JavaScript wykrywa większość błędów dopiero w czasie działania.</li>\n<li><strong>Lepsze wsparcie dla narzędzi</strong>: Edytory kodu mogą lepiej podpowiadać i wykrywać błędy w kodzie TypeScript dzięki znajomości typów.</li>\n</ul>\n<hr>\n<h2 id=\"dlaczego-warto-korzystać-z-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-warto-korzystać-z-typescript\">>></a>Dlaczego warto korzystać z TypeScript?</h2>\n<ul>\n<li><strong>Bezpieczeństwo</strong> – statyczne typowanie pomaga uniknąć wielu błędów, które normalnie wykryłbyś dopiero w trakcie działania aplikacji.</li>\n<li><strong>Lepsza czytelność</strong> – typy są jak dokumentacja, która podpowiada co dana funkcja przyjmuje i zwraca, ułatwiając pracę w zespole.</li>\n<li><strong>Wsparcie dla nowoczesnych narzędzi</strong> – edytory kodu mogą lepiej podpowiadać, autouzupełniać i wykrywać błędy.</li>\n<li><strong>Skalowalność</strong> – kod staje się łatwiejszy do utrzymania, szczególnie w dużych projektach.</li>\n<li><strong>Łatwa integracja z istniejącym kodem JS</strong> – możesz stopniowo migrować projekt z JavaScriptu na TypeScript.</li>\n<li><strong>Popularność</strong> – TypeScript jest szeroko używany w dużych projektach open-source (np. Angular, VSCode, Deno).</li>\n<li><strong>Wspiera nowoczesne funkcje JS</strong> – pozwala korzystać z najnowszych funkcji JavaScript, nawet jeśli nie są jeszcze wspierane przez wszystkie przeglądarki.</li>\n</ul>\n<hr>\n<h2 id=\"jak-zacząć-z-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-zacząć-z-typescript\">>></a>Jak zacząć z TypeScript?</h2>\n<h3 id=\"instalacja\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#instalacja\">>>></a>Instalacja</h3>\n<p>Najprostszym sposobem na rozpoczęcie pracy z TypeScript jest instalacja globalna kompilatora:</p>\n<pre><code class=\"hljs language-bash\">npm install -g typescript\n</code></pre>\n<p>Sprawdź wersję poleceniem:</p>\n<pre><code class=\"hljs language-bash\">tsc --version\n</code></pre>\n<p>Możesz też dodać TypeScript jako zależność do swojego projektu:</p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev typescript\n</code></pre>\n<h3 id=\"kompilacja-plików-ts-do-js\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#kompilacja-plików-ts-do-js\">>>></a>Kompilacja plików <code>.ts</code> do <code>.js</code></h3>\n<p>TypeScript nie jest rozumiany bezpośrednio przez przeglądarki. Musisz najpierw <strong>skompilować</strong> (<code>transpilować</code>) swój kod do JavaScriptu:</p>\n<pre><code class=\"hljs language-bash\">tsc nazwa-pliku.ts\n</code></pre>\n<p>To wygeneruje plik <code>nazwa-pliku.js</code> gotowy do użycia w przeglądarce lub Node.js.</p>\n<h3 id=\"konfiguracja-projektu-i-tsconfigjson\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#konfiguracja-projektu-i-tsconfigjson\">>>></a>Konfiguracja projektu i tsconfig.json</h3>\n<p>W większych projektach warto utworzyć plik <code>tsconfig.json</code>, aby skonfigurować ustawienia kompilatora:</p>\n<pre><code class=\"hljs language-bash\">tsc --init\n</code></pre>\n<p>Przykładowy plik <code>tsconfig.json</code>:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"compilerOptions\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"target\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"es6\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"module\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"commonjs\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"strict\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"outDir\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"./dist\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"include\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"src/**/*\"</span><span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<ul>\n<li><code>target</code> – do jakiej wersji JS kompilować kod,</li>\n<li><code>module</code> – jakiego systemu modułów używać,</li>\n<li><code>strict</code> – włącza rygorystyczne sprawdzanie typów,</li>\n<li><code>outDir</code> – gdzie mają trafić pliki <code>.js</code> po kompilacji,</li>\n<li><code>include</code> – które pliki mają być kompilowane.</li>\n</ul>\n<h3 id=\"twój-pierwszy-projekt-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#twój-pierwszy-projekt-typescript\">>>></a>Twój pierwszy projekt TypeScript</h3>\n<ol>\n<li>\n<p>Utwórz folder projektu i zainicjuj npm:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> moj-projekt-ts\n<span class=\"hljs-built_in\">cd</span> moj-projekt-ts\nnpm init -y\nnpm install typescript --save-dev\nnpx tsc --init\n</code></pre>\n</li>\n<li>\n<p>Dodaj plik <code>src/index.ts</code> z dowolnym kodem, np.:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Hello TypeScript!\"</span>);\n</code></pre>\n</li>\n<li>\n<p>Skompiluj i uruchom:</p>\n<pre><code class=\"hljs language-bash\">npx tsc\nnode dist/index.js\n</code></pre>\n</li>\n</ol>\n<hr>\n<h2 id=\"podstawy-składni-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawy-składni-typescript\">>></a>Podstawy składni TypeScript</h2>\n<h3 id=\"typowanie-zmiennych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-zmiennych\">>>></a>Typowanie zmiennych</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">liczba</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">42</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">tekst</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Cześć TypeScript!\"</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">isActive</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>;\n</code></pre>\n<h3 id=\"typowanie-funkcji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-funkcji\">>>></a>Typowanie funkcji</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n</code></pre>\n<p>Możesz też typować parametry domyślne, opcjonalne i funkcje strzałkowe:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> powiedzHej = (<span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Gość\"</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">string</span> =></span> <span class=\"hljs-string\">`Hej, <span class=\"hljs-subst\">${imie}</span>!`</span>;\n</code></pre>\n<h3 id=\"interfejsy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#interfejsy\">>>></a>Interfejsy</h3>\n<p>Interfejsy pozwalają opisać strukturę obiektów:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Osoba</span> {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">email</span>?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// pole opcjonalne</span>\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">user</span>: <span class=\"hljs-title class_\">Osoba</span> = {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>,\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span>,\n};\n</code></pre>\n<h3 id=\"typy-złożone\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typy-złożone\">>>></a>Typy złożone</h3>\n<p>Możesz używać tablic, unii typów oraz typów własnych:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">liczby</span>: <span class=\"hljs-built_in\">number</span>[] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">tekstLubNumer</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-string\">\"hej\"</span>;\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Punkt</span> = { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">p</span>: <span class=\"hljs-title class_\">Punkt</span> = { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">7</span> };\n</code></pre>\n<h3 id=\"klasy-i-dziedziczenie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#klasy-i-dziedziczenie\">>>></a>Klasy i dziedziczenie</h3>\n<p>TypeScript wspiera klasy i dziedziczenie (OOP):</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Zwierze</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n  <span class=\"hljs-title function_\">wydajDzwiek</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Dźwięk!\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pies</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Zwierze</span> {\n  <span class=\"hljs-title function_\">wydajDzwiek</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Hau hau!\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> burek = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Pies</span>(<span class=\"hljs-string\">\"Burek\"</span>);\nburek.<span class=\"hljs-title function_\">wydajDzwiek</span>(); <span class=\"hljs-comment\">// Hau hau!</span>\n</code></pre>\n<h3 id=\"enumy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#enumy\">>>></a>Enumy</h3>\n<p>Enumy pozwalają na definiowanie własnych typów wyliczeniowych:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Kolor</span> {\n  <span class=\"hljs-title class_\">Czerwony</span>,\n  <span class=\"hljs-title class_\">Zielony</span>,\n  <span class=\"hljs-title class_\">Niebieski</span>,\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">ulubionyKolor</span>: <span class=\"hljs-title class_\">Kolor</span> = <span class=\"hljs-title class_\">Kolor</span>.<span class=\"hljs-property\">Zielony</span>;\n</code></pre>\n<h3 id=\"alias-typów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#alias-typów\">>>></a>Alias typów</h3>\n<p>Alias pozwala nazwać typ złożony:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-variable constant_\">ID</span> = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userId</span>: <span class=\"hljs-variable constant_\">ID</span> = <span class=\"hljs-number\">123</span>;\n</code></pre>\n<hr>\n<h2 id=\"jak-używać-typów-w-praktyce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-używać-typów-w-praktyce\">>></a>Jak używać typów w praktyce?</h2>\n<ul>\n<li><strong>Funkcje z typami zwracanymi i parametrami opcjonalnymi:</strong>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">powiedz</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">imie</span>?: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie ?? <span class=\"hljs-string\">\"nieznajomy\"</span>}</span>!`</span>;\n}\n</code></pre>\n</li>\n<li><strong>Łączenie kilku typów:</strong>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Admin</span> = { <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>; <span class=\"hljs-attr\">poziom</span>: <span class=\"hljs-built_in\">number</span> };\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Uzytkownik</span> = { <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"user\"</span>; <span class=\"hljs-attr\">nick</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Osoba</span> = <span class=\"hljs-title class_\">Admin</span> | <span class=\"hljs-title class_\">Uzytkownik</span>;\n</code></pre>\n</li>\n<li><strong>Tablice obiektów o określonym typie:</strong>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">osoby</span>: <span class=\"hljs-title class_\">Osoba</span>[] = [\n  { <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>, <span class=\"hljs-attr\">poziom</span>: <span class=\"hljs-number\">1</span> },\n  { <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-attr\">nick</span>: <span class=\"hljs-string\">\"kuba\"</span> },\n];\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id=\"narzędzia-i-integracje\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#narzędzia-i-integracje\">>></a>Narzędzia i integracje</h2>\n<p>TypeScript świetnie współpracuje z popularnymi frameworkami frontendowymi jak React, Angular czy Vue. Wiele projektów open-source już teraz korzysta z TypeScriptu, więc znajomość tego języka to duży plus na rynku pracy!</p>\n<ul>\n<li><strong>VSCode</strong> – edytor Microsoftu ma doskonałe wsparcie dla TypeScript (podpowiedzi, refaktoryzacje, szybkie przechodzenie po kodzie).</li>\n<li><strong>tsconfig.json</strong> – plik konfiguracyjny pozwalający dostosować kompilację do potrzeb projektu.</li>\n<li><strong>Integracja z narzędziami budującymi</strong> – TypeScript można łatwo połączyć z Webpackiem, Babel, ESLint i innymi.</li>\n<li><strong>Systemy CI/CD</strong> – TypeScript jest łatwy do zintegrowania z pipeline’ami (np. GitHub Actions, GitLab CI).</li>\n</ul>\n<hr>\n<h2 id=\"częste-pułapki-i-wskazówki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#częste-pułapki-i-wskazówki\">>></a>Częste pułapki i wskazówki</h2>\n<ul>\n<li><strong>Nie musisz typować wszystkiego!</strong> – na początek możesz typować tylko kluczowe fragmenty kodu, stopniowo rozszerzając typowanie.</li>\n<li><strong>Stopniowa migracja</strong> – możesz przerabiać swój projekt z JavaScriptu na TypeScript krok po kroku, np. zmieniając rozszerzenia plików na <code>.ts</code> i naprawiając błędy kompilatora.</li>\n<li><strong>Współpraca z bibliotekami JS</strong> – TypeScript obsługuje pliki deklaracji typów (<code>@types/</code>), które pozwalają korzystać z popularnych bibliotek JavaScript z pełnym wsparciem typów. Wystarczy zainstalować odpowiedni pakiet, np.:\n<pre><code class=\"hljs language-bash\">npm install --save-dev @types/lodash\n</code></pre>\n</li>\n<li><strong>Wyłączaj sprawdzanie niektórych plików</strong> – możesz pominąć sprawdzanie typów dla wybranych plików przez dodanie <code>// @ts-nocheck</code> na górze pliku.</li>\n<li><strong>Czytaj błędy kompilatora</strong> – komunikaty TypeScript są najczęściej bardzo pomocne i dokładnie tłumaczą, co należy poprawić.</li>\n</ul>\n<h3 id=\"najczęstsze-błędy-i-jak-je-naprawić\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#najczęstsze-błędy-i-jak-je-naprawić\">>>></a>Najczęstsze błędy i jak je naprawić</h3>\n<ul>\n<li>\n<p><strong>Błąd typowania:</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-string\">\"25\"</span>; <span class=\"hljs-comment\">// Błąd: Type 'string' is not assignable to type 'number'</span>\n</code></pre>\n<p><strong>Popraw:</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">25</span>;\n</code></pre>\n</li>\n<li>\n<p><strong>Brak typu dla zwracanej wartości funkcji:</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">zwrocTekst</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>;\n}\n</code></pre>\n<p><strong>Popraw:</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">zwrocTekst</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Tekst\"</span>;\n}\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id=\"typescript-w-projektach-open-source-i-pracy-zespołowej\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typescript-w-projektach-open-source-i-pracy-zespołowej\">>></a>TypeScript w projektach open-source i pracy zespołowej</h2>\n<ul>\n<li>TypeScript pomaga w pracy zespołowej, bo kod jest bardziej czytelny i przewidywalny.</li>\n<li>Wiele popularnych bibliotek (np. React, Angular, Express) ma swoje typy lub nawet są napisane w TypeScript.</li>\n<li>W dużych projektach firmowych i open-source praktycznie zawsze warto używać TypeScriptu, by uniknąć błędów i zwiększyć produktywność zespołu.</li>\n</ul>\n<hr>\n<h2 id=\"gdzie-znaleźć-deklaracje-typów-do-bibliotek-js\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#gdzie-znaleźć-deklaracje-typów-do-bibliotek-js\">>></a>Gdzie znaleźć deklaracje typów do bibliotek JS?</h2>\n<p>Nie każda biblioteka JavaScript ma wbudowane typy. Możesz jednak łatwo doinstalować oficjalne deklaracje typów.</p>\n<ul>\n<li>Szukaj paczek <code>@types/</code> w npm, np. dla Lodash:\n<pre><code class=\"hljs language-bash\">npm install --save-dev @types/lodash\n</code></pre>\n</li>\n<li>Dzięki temu możesz korzystać z bibliotek JS z pełną obsługą typów w TypeScript.</li>\n</ul>\n<hr>\n<h2 id=\"gdzie-szukać-pomocy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#gdzie-szukać-pomocy\">>></a>Gdzie szukać pomocy?</h2>\n<ul>\n<li>Oficjalna dokumentacja: <a href=\"https://www.typescriptlang.org/docs/\">https://www.typescriptlang.org/docs/</a></li>\n<li>Playground online: <a href=\"https://www.typescriptlang.org/play\">https://www.typescriptlang.org/play</a></li>\n<li>Społeczność: Stack Overflow, Discord, GitHub, fora tematyczne</li>\n</ul>\n<p>Dodatkowo na GitHubie znajdziesz mnóstwo przykładowych projektów opartych o TypeScript, które mogą posłużyć za inspirację.</p>\n<hr>\n<h2 id=\"zadania-praktyczne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-praktyczne\">>></a>Zadania praktyczne</h2>\n<p>Oto zadania, dzięki którym lepiej zrozumiesz podstawy TypeScript. Sprawdź się i rozwijaj swoje umiejętności!</p>\n<hr>\n<h3 id=\"zadanie-1-typowanie-zmiennych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-typowanie-zmiennych\">>>></a>Zadanie 1: Typowanie zmiennych</h3>\n<p>Zadeklaruj trzy zmienne: liczbę, tekst oraz wartość logiczną – każda powinna być odpowiednio otagowana typem.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">liczba</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">tekst</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Witaj TypeScript!\"</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">aktywny</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-funkcja-z-typowanymi-argumentami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-funkcja-z-typowanymi-argumentami\">>>></a>Zadanie 2: Funkcja z typowanymi argumentami</h3>\n<p>Napisz funkcję <code>dodaj</code>, która przyjmuje dwa argumenty typu <code>number</code> i zwraca ich sumę. Nie zapomnij o typach!</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-interfejs-i-obiekt\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-interfejs-i-obiekt\">>>></a>Zadanie 3: Interfejs i obiekt</h3>\n<p>Zdefiniuj interfejs <code>Samochod</code> z polami <code>marka</code> (string) oraz <code>rok</code> (number). Następnie utwórz obiekt typu <code>Samochod</code>.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Samochod</span> {\n  <span class=\"hljs-attr\">marka</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">rok</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">auto</span>: <span class=\"hljs-title class_\">Samochod</span> = {\n  <span class=\"hljs-attr\">marka</span>: <span class=\"hljs-string\">\"Toyota\"</span>,\n  <span class=\"hljs-attr\">rok</span>: <span class=\"hljs-number\">2020</span>,\n};\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-alias-typu-i-unia-typów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-alias-typu-i-unia-typów\">>>></a>Zadanie 4: Alias typu i unia typów</h3>\n<p>Zdefiniuj alias typu <code>ID</code> jako <code>string</code> lub <code>number</code>. Następnie zadeklaruj zmienną <code>userId</code> i przypisz jej liczbę.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-variable constant_\">ID</span> = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userId</span>: <span class=\"hljs-variable constant_\">ID</span> = <span class=\"hljs-number\">123</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-5-klasa-i-dziedziczenie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-klasa-i-dziedziczenie\">>>></a>Zadanie 5: Klasa i dziedziczenie</h3>\n<p>Stwórz klasę <code>Zwierze</code> z polem <code>nazwa</code> (string) oraz metodą <code>wydajDzwiek</code>. Następnie utwórz klasę <code>Kot</code> dziedziczącą po <code>Zwierze</code> i nadpisz metodę, aby wypisywała \"Miau!\".</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Zwierze</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n  <span class=\"hljs-title function_\">wydajDzwiek</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Dźwięk!\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Kot</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Zwierze</span> {\n  <span class=\"hljs-title function_\">wydajDzwiek</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Miau!\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> mruczek = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Kot</span>(<span class=\"hljs-string\">\"Mruczek\"</span>);\nmruczek.<span class=\"hljs-title function_\">wydajDzwiek</span>(); <span class=\"hljs-comment\">// Miau!</span>\n</code></pre>\n</details>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>TypeScript to świetne narzędzie dla każdego, kto chce pisać nowoczesny, bezpieczny i skalowalny kod JavaScript. Dzięki statycznemu typowaniu, lepszej czytelności i wsparciu dla narzędzi deweloperskich praca z nim staje się łatwiejsza i przyjemniejsza. Jeśli jeszcze nie próbowałeś – spróbuj! 👨🏻‍💻👩🏼‍💻</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-typescript.md",{"_8":154,"_10":155,"_12":156,"_22":162,"_24":163,"_34":164,"_26":207,"_28":208,"_30":209,"_32":210},"Pierwsze kroki z TypeScript w React – praktyczne podstawy","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.",[17,39,18,157,158,159,160,161,93],"nauka","komponenty","props","state","kurs",[17,39],["D",1750550400000],{"_8":165,"_99":166},"Quiz: TypeScript w React – podstawy",[167,175,183,191,199],{"_102":168,"_104":169,"_110":138,"_112":174},"<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>",[170,171,172,173],"Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Generuje automatycznie dokumentację komponentów.","Zamienia kod na czysty CSS.","Eliminuje konieczność używania npm.","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_102":176,"_104":177,"_110":147,"_112":182},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[178,179,180,181],"const [count, setCount] = useState(0: number);","let count = useState(0);","const [count, setCount] = useState<string>(0);","const [count, setCount] = useState<number>(0);","Poprawna składnia to useState<number>(0).",{"_102":184,"_104":185,"_110":111,"_112":190},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[186,187,188,189],"Nie trzeba typować propsów w TS.","Przez interface lub type i przekazać go do propsów funkcji.","Tylko poprzez klasę.","Wyłącznie przez any.","Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_102":192,"_104":193,"_110":147,"_112":198},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[194,195,196,197],"const ref = useRef(null);","const ref = useRef<Button>(null);","const ref = useRef<HTMLDivElement>(null);","const ref = useRef<HTMLButtonElement>(null);","Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_102":200,"_104":201,"_110":129,"_112":206},"<p>Co wyświetli poniższy komponent?</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n<p>Jeśli wywołasz <code>&#x3C;Welcome name=\"Ala\" /></code></p>",[202,203,204,205],"Witaj, Ala!","undefined","Cześć, Ala!","Błąd kompilacji","Komponent wyświetli 'Cześć, Ala!'.","f17422da-4e0d-46e8-aa3b-e834e3959324","pierwsze-kroki-z-typescript-w-react","<p>Chcesz pisać nowoczesne aplikacje i mieć pewność, że Twój kod jest czysty, bezpieczny i przyszłościowy? 🚀 TypeScript w połączeniu z React to duet, który pokochasz od pierwszego projektu! Ten przewodnik przeprowadzi Cię krok po kroku przez najważniejsze podstawy – bez zbędnych teorii, za to z praktycznymi przykładami i zadaniami, które pomogą Ci naprawdę zrozumieć temat.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#dlaczego-warto-u%C5%BCywa%C4%87-typescript-w-react\">Dlaczego warto używać TypeScript w React?</a></li>\n<li><a href=\"#podstawowe-typy-w-typescript\">Podstawowe typy w TypeScript</a></li>\n<li><a href=\"#tworzenie-komponent%C3%B3w-funkcyjnych-z-typami\">Tworzenie komponentów funkcyjnych z typami</a></li>\n<li><a href=\"#props-i-typowanie-props%C3%B3w\">Props i typowanie propsów</a></li>\n<li><a href=\"#typowanie-stanu-usestate\">Typowanie stanu (useState)</a></li>\n<li><a href=\"#typowanie-referencji-useref\">Typowanie referencji (useRef)</a></li>\n<li><a href=\"#przydatne-narz%C4%99dzia-i-wskaz%C3%B3wki\">Przydatne narzędzia i wskazówki</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1-prosty-komponent-powitalny\">Zadanie 1: Prosty komponent powitalny</a></li>\n<li><a href=\"#zadanie-2-typowanie-tablicy-liczb\">Zadanie 2: Typowanie tablicy liczb</a></li>\n<li><a href=\"#zadanie-3-komponent-z-typowanymi-propsami-i-zdarzeniem\">Zadanie 3: Komponent z typowanymi propsami i zdarzeniem</a></li>\n<li><a href=\"#zadanie-4-typowanie-obiektu-w-stanie\">Zadanie 4: Typowanie obiektu w stanie</a></li>\n<li><a href=\"#zadanie-5-lista-komponent%C3%B3w-na-podstawie-tablicy-obiekt%C3%B3w\">Zadanie 5: Lista komponentów na podstawie tablicy obiektów</a></li>\n</ul>\n</li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"dlaczego-warto-używać-typescript-w-react\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-warto-używać-typescript-w-react\">>></a>Dlaczego warto używać TypeScript w React?</h2>\n<p>TypeScript to nie tylko “lepszy JavaScript” – to Twoja tajna broń na błędy w kodzie! Dzięki niemu:</p>\n<ul>\n<li>🛡️ Kod jest bardziej przewidywalny i bezpieczniejszy – typy wykrywają literówki i błędy logiczne już podczas pisania.</li>\n<li>⚡ Praca w zespole staje się łatwiejsza – czytelny kod, lepsze podpowiedzi w edytorze (IntelliSense), szybkie ogarnianie cudzych projektów.</li>\n<li>🔄 Refaktoryzacje nie są już straszne – zmiany w typach wymuszają poprawki w całym projekcie, więc nic Ci nie umknie.</li>\n<li>📖 Typy to żywa dokumentacja – od razu wiesz, co i gdzie przekazujesz do komponentów oraz funkcji.</li>\n</ul>\n<p>W React TypeScript to must-have, jeśli chcesz:</p>\n<ul>\n<li>jasno typować propsy i stan (<code>useState</code>, <code>useReducer</code>),</li>\n<li>wygodnie pracować z referencjami (<code>useRef</code>),</li>\n<li>bez obaw korzystać z zewnętrznych bibliotek i API.</li>\n</ul>\n<hr>\n<h2 id=\"podstawowe-typy-w-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-typy-w-typescript\">>></a>Podstawowe typy w TypeScript</h2>\n<p>Najczęściej spotkasz się z:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Ala\"</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">25</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">isActive</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">numbers</span>: <span class=\"hljs-built_in\">number</span>[] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">person</span>: { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span> } = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> };\n</code></pre>\n<p>Chcesz być PRO? Twórz własne typy i interfejsy – kod będzie czytelniejszy i łatwiejszy do rozbudowy:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">User</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Product</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-built_in\">number</span>;\n}\n</code></pre>\n<blockquote>\n<p>💡 <strong>TIP:</strong> Korzystaj z własnych typów zawsze, gdy masz złożone obiekty lub korzystasz z API!</p>\n</blockquote>\n<hr>\n<h2 id=\"tworzenie-komponentów-funkcyjnych-z-typami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tworzenie-komponentów-funkcyjnych-z-typami\">>></a>Tworzenie komponentów funkcyjnych z typami</h2>\n<p>Najprostszy komponent funkcyjny w TypeScript:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">HelloWorld</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, World!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}\n</code></pre>\n<p>Nie używasz propsów? Nie musisz nic typować!<br>\nAle gdy przekazujesz dane do komponentu – patrz niżej.</p>\n<hr>\n<h2 id=\"props-i-typowanie-propsów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#props-i-typowanie-propsów\">>></a>Props i typowanie propsów</h2>\n<p>Propsy to podstawa pracy z Reactem! W TypeScript opisujesz je przez interfejs lub typ:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">WelcomeProps</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Welcome</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">props</span>: <span class=\"hljs-title class_\">WelcomeProps</span></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Witaj, {props.name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n}\n</code></pre>\n<p><strong>Co zyskujesz?</strong></p>\n<ul>\n<li>Edytor podpowiada, co możesz przekazać,</li>\n<li>Błyskawicznie wykrywasz literówki i brakujące dane,</li>\n<li>Tworzysz samodokumentujące się komponenty!</li>\n</ul>\n<hr>\n<h2 id=\"typowanie-stanu-usestate\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-stanu-usestate\">>></a>Typowanie stanu (useState)</h2>\n<p>Chcesz jasno określić, co przechowujesz w stanie? Z TypeScriptem to proste:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState&#x3C;<span class=\"hljs-built_in\">number</span>>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Licznik: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount((prev) => prev - 1)}>Zmniejsz<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount((prev) => prev + 1)}>Zwiększ<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<blockquote>\n<p>⭐ <strong>Pro tip:</strong> Przy bardziej złożonych stanach (np. obiekty, tablice) – zawsze wpisuj typ ręcznie, nawet jeśli TypeScript czasem sam się domyśli!</p>\n</blockquote>\n<hr>\n<h2 id=\"typowanie-referencji-useref\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-referencji-useref\">>></a>Typowanie referencji (useRef)</h2>\n<p>Referencje to Twój most do DOM-u i wartości poza renderem:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { useRef, useCallback } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> ref = useRef&#x3C;<span class=\"hljs-title class_\">HTMLButtonElement</span>>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-keyword\">const</span> handleClick = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =></span> {\n    ref.<span class=\"hljs-property\">current</span>?.<span class=\"hljs-title function_\">focus</span>();\n  }, [ref]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleClick}</span>></span>\n        Kliknij aby sfokusować drugi przycisk\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{ref}</span>></span>Drugi przycisk<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>Dzięki typowaniu masz pewność, do jakiego elementu się odwołujesz (<code>HTMLButtonElement</code>).</p>\n<hr>\n<h2 id=\"przydatne-narzędzia-i-wskazówki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przydatne-narzędzia-i-wskazówki\">>></a>Przydatne narzędzia i wskazówki</h2>\n<ul>\n<li><strong>TSX</strong> – pliki <code>.tsx</code> pozwalają pisać JSX z typami!</li>\n<li><strong>TypeScript Playground</strong> – testuj kod online: <a href=\"https://www.typescriptlang.org/play\">https://www.typescriptlang.org/play</a></li>\n<li><strong>Oficjalna dokumentacja React + TypeScript:</strong> <a href=\"https://react.dev/learn/typescript\">https://react.dev/learn/typescript</a></li>\n<li><strong>Chcesz szybko wystartować?</strong>\n<pre><code class=\"hljs language-bash\">npm init vite@latest my-app -- --template react-ts\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1-prosty-komponent-powitalny\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-prosty-komponent-powitalny\">>>></a>Zadanie 1: Prosty komponent powitalny</h3>\n<p>Stwórz komponent powitalny, który przyjmuje przez props imię użytkownika (typ string) i wyświetla komunikat \"Cześć, [imię]!\".</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WelcomeProps</span> = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Welcome</span> = (<span class=\"hljs-params\">{ name }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Cześć, {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-typowanie-tablicy-liczb\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-typowanie-tablicy-liczb\">>>></a>Zadanie 2: Typowanie tablicy liczb</h3>\n<p>Zadeklaruj w komponencie tablicę liczb jako stan przy użyciu useState oraz odpowiedniego typu.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">NumbersComponent</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [numbers, setNumbers] = useState&#x3C;<span class=\"hljs-built_in\">number</span>[]>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>{numbers.join(\", \")}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n};\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-komponent-z-typowanymi-propsami-i-zdarzeniem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-komponent-z-typowanymi-propsami-i-zdarzeniem\">>>></a>Zadanie 3: Komponent z typowanymi propsami i zdarzeniem</h3>\n<p>Stwórz przycisk, który przyjmuje przez props funkcję onClick oraz tekst do wyświetlenia. Oba propsy odpowiednio wytypuj.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">ButtonProps</span> = {\n  <span class=\"hljs-attr\">label</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">onClick</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">void</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CustomButton</span> = (<span class=\"hljs-params\">{ label, onClick }: <span class=\"hljs-title class_\">ButtonProps</span></span>) => (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>></span>{label}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-typowanie-obiektu-w-stanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-typowanie-obiektu-w-stanie\">>>></a>Zadanie 4: Typowanie obiektu w stanie</h3>\n<p>Zadeklaruj stan użytkownika jako obiekt z polami name (string) i age (number).</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">User</span> = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">UserComponent</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [user, setUser] = useState&#x3C;<span class=\"hljs-title class_\">User</span>>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Anna\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">28</span> });\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      {user.name}, wiek: {user.age}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-5-lista-komponentów-na-podstawie-tablicy-obiektów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-lista-komponentów-na-podstawie-tablicy-obiektów\">>>></a>Zadanie 5: Lista komponentów na podstawie tablicy obiektów</h3>\n<p>Zadeklaruj tablicę użytkowników (name: string, id: number) i wyświetl imiona w liście.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">User</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">users</span>: <span class=\"hljs-title class_\">User</span>[] = [\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Kasia\"</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Marek\"</span> },\n];\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">UserTile</span> = (<span class=\"hljs-params\"><span class=\"hljs-attr\">props</span>: { user: User }</span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>{props.user.name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span></span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">UserList</span> = (<span class=\"hljs-params\"></span>) => (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n    {users.map((user) => (\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">UserTile</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{user.id}</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">{user}</span> /></span>\n    ))}\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span></span>\n);\n</code></pre>\n</details>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Gratulacje! 🎉 Zrobiłeś właśnie pierwszy krok w świat TypeScript + React – połączenia, które sprawia, że kod staje się bardziej przewidywalny, czytelny i po prostu przyjemniejszy w pracy. Dzięki typowaniu szybciej łapiesz błędy, a Twoje komponenty są super czytelne nie tylko dla Ciebie, ale też dla całego zespołu.</p>\n<p>Nie bój się eksperymentować, zadawać pytań i sprawdzać rzeczy w praktyce. Każdy kod napisany z TypeScriptem to inwestycja w Twój rozwój jako programisty! 🚀</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/pierwsze-kroki-z-typescript-w-react.md",{"_8":212,"_10":213,"_12":214,"_22":216,"_24":217,"_34":218,"_26":256,"_28":58,"_30":257,"_32":258},"Wzorce projektowe w praktyce","Kompleksowy przewodnik po wzorcach projektowych — od podstaw po praktyczne przykłady w kontekście frontendu i backendu.",[56,68,17,16,18,215,161,93],"backend",[58,17],["D",1750550400000],{"_8":219,"_99":220},"Quiz: Wzorce projektowe",[221,229,237,243,251],{"_102":222,"_104":223,"_110":129,"_112":228},"<p>Do której grupy należy wzorzec Singleton?</p>",[224,225,226,227],"Strukturalne","Behawioralne","Kreacyjne","Funkcyjne","Singleton to wzorzec kreacyjny – dotyczy sposobu tworzenia obiektów.",{"_102":230,"_104":231,"_110":111,"_112":236},"<p>Który wzorzec umożliwia zamianę jednego interfejsu na inny, by umożliwić współpracę niekompatybilnych klas?</p>",[232,233,234,235],"Observer","Adapter","Facade","Builder","Adapter tłumaczy jeden interfejs na inny.",{"_102":238,"_104":239,"_110":147,"_112":242},"<p>Który wzorzec pozwala powiadamiać wiele obiektów o zmianie stanu bez ścisłego powiązania?</p>",[240,241,234,232],"Strategy","Factory","Observer służy do powiadamiania wielu obiektów o zmianie stanu.",{"_102":244,"_104":245,"_110":138,"_112":250},"<p>Co umożliwia wzorzec Strategy?</p>",[246,247,248,249],"Dynamiczną zmianę algorytmu działania programu","Tworzenie jednej instancji klasy","Uproszczenie złożonego interfejsu","Budowanie złożonych obiektów krok po kroku","Strategy pozwala dynamicznie zmieniać algorytm działania programu.",{"_102":252,"_104":253,"_110":111,"_112":255},"<p>Który wzorzec stosujesz, by uprościć korzystanie z kilku skomplikowanych systemów przez jeden prosty interfejs?</p>",[233,234,235,254],"Singleton","Facade upraszcza złożone systemy przez prosty interfejs.","1eabb6ca-2fd0-4afa-b4b6-b5ee21d985c8","<p>Poznaj praktyczne zastosowania najważniejszych wzorców projektowych — prosto, przystępnie, z przykładami w TypeScript oraz z zadaniami do samodzielnego wykonania! 🏗️🚀</p>\n<p>Ten przewodnik to nie tylko teoria, ale również konkretne przykłady, wskazówki i gotowe rozwiązania do typowych problemów programistycznych, zarówno po stronie frontendu jak i backendu.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-s%C4%85-wzorce-projektowe\">Czym są wzorce projektowe?</a></li>\n<li><a href=\"#jak-je-dzielimy\">Jak je dzielimy?</a></li>\n<li><a href=\"#wzorce-kreacyjne\">Wzorce kreacyjne</a>\n<ul>\n<li><a href=\"#singleton\">Singleton</a></li>\n<li><a href=\"#factory\">Factory</a></li>\n<li><a href=\"#builder\">Builder</a></li>\n</ul>\n</li>\n<li><a href=\"#wzorce-strukturalne\">Wzorce strukturalne</a>\n<ul>\n<li><a href=\"#facade\">Facade</a></li>\n<li><a href=\"#adapter\">Adapter</a></li>\n</ul>\n</li>\n<li><a href=\"#wzorce-behawioralne\">Wzorce behawioralne</a>\n<ul>\n<li><a href=\"#observer\">Observer</a></li>\n<li><a href=\"#strategy\">Strategy</a></li>\n</ul>\n</li>\n<li><a href=\"#zastosowania-wzorc%C3%B3w-w-praktyce\">Zastosowania wzorców w praktyce</a></li>\n<li><a href=\"#przydatne-narz%C4%99dzia-i-materia%C5%82y\">Przydatne narzędzia i materiały</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1-singleton-w-praktyce\">Zadanie 1: Singleton w praktyce</a></li>\n<li><a href=\"#zadanie-2-factory-dla-przycisk%C3%B3w\">Zadanie 2: Factory dla przycisków</a></li>\n<li><a href=\"#zadanie-3-builder-do-pizzy\">Zadanie 3: Builder do pizzy</a></li>\n<li><a href=\"#zadanie-4-adapter--stare-i-nowe-api\">Zadanie 4: Adapter — stare i nowe API</a></li>\n<li><a href=\"#zadanie-5-strategy--wyb%C3%B3r-algorytmu-p%C5%82atno%C5%9Bci\">Zadanie 5: Strategy — wybór algorytmu płatności</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-są-wzorce-projektowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-są-wzorce-projektowe\">>></a>Czym są wzorce projektowe?</h2>\n<p><strong>Wzorce projektowe</strong> to sprawdzone, uniwersalne rozwiązania dla często spotykanych problemów w programowaniu. Możesz potraktować je jak gotowe \"przepisy\" — nie musisz wymyślać wszystkiego od nowa, tylko korzystasz z doświadczenia innych.</p>\n<h3 id=\"dlaczego-warto-ich-używać\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-warto-ich-używać\">>>></a>Dlaczego warto ich używać?</h3>\n<ul>\n<li>🤝 Ułatwiają komunikację w zespole (wszyscy rozumieją, o czym mowa)</li>\n<li>🏗️ Poprawiają strukturę, elastyczność i czytelność kodu</li>\n<li>⚡ Przyspieszają projektowanie i rozwój systemów</li>\n<li>🐞 Pozwalają unikać typowych błędów</li>\n</ul>\n<hr>\n<h2 id=\"jak-je-dzielimy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-je-dzielimy\">>></a>Jak je dzielimy?</h2>\n<p>Wzorce projektowe dzielimy na trzy główne kategorie:</p>\n<ol>\n<li><strong>Kreacyjne</strong> — dotyczą sposobów tworzenia obiektów (np. Singleton, Factory, Builder)</li>\n<li><strong>Strukturalne</strong> — pokazują jak łączyć obiekty i klasy (np. Facade, Adapter)</li>\n<li><strong>Behawioralne</strong> — opisują interakcje i przepływ informacji (np. Observer, Strategy)</li>\n</ol>\n<p>Każda kategoria rozwiązuje inne typy problemów, dlatego tak ważne jest, by znać przynajmniej po jednym wzorcu z każdej grupy.</p>\n<hr>\n<h2 id=\"wzorce-kreacyjne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wzorce-kreacyjne\">>></a>Wzorce kreacyjne</h2>\n<h3 id=\"singleton\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#singleton\">>>></a>Singleton</h3>\n<p>Zapewnia, że dana klasa posiada tylko jedną instancję i zapewnia do niej globalny dostęp.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Singleton</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-attr\">instance</span>: <span class=\"hljs-title class_\">Singleton</span>;\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {}\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getInstance</span>(): <span class=\"hljs-title class_\">Singleton</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Singleton</span>.<span class=\"hljs-property\">instance</span>) {\n      <span class=\"hljs-title class_\">Singleton</span>.<span class=\"hljs-property\">instance</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Singleton</span>();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Singleton</span>.<span class=\"hljs-property\">instance</span>;\n  }\n}\n</code></pre>\n<p><strong>Zastosowania:</strong> konfiguracja aplikacji, połączenie z bazą danych, logger.</p>\n<hr>\n<h3 id=\"factory\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#factory\">>>></a>Factory</h3>\n<p>Pozwala tworzyć obiekty bez określania ich dokładnych klas — klient nie musi znać szczegółów implementacji.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WindowsButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Render Windows Button\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MacButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Render Mac Button\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ButtonFactory</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-attr\">os</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">Button</span> {\n    <span class=\"hljs-keyword\">if</span> (os === <span class=\"hljs-string\">\"Windows\"</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WindowsButton</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MacButton</span>();\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-title class_\">ButtonFactory</span>.<span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-string\">\"Windows\"</span>);\nbutton.<span class=\"hljs-title function_\">render</span>();\n</code></pre>\n<p><strong>Zastosowania:</strong> dynamiczne UI, obsługa wielu platform.</p>\n<hr>\n<h3 id=\"builder\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#builder\">>>></a>Builder</h3>\n<p>Ułatwia tworzenie złożonych obiektów krok po kroku — szczególnie przy wielu opcjonalnych parametrach.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Burger</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">bun</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">meat</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">extras</span>?: <span class=\"hljs-built_in\">string</span>[]\n  </span>) {}\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BurgerBuilder</span> {\n  <span class=\"hljs-keyword\">private</span> bun = <span class=\"hljs-string\">\"classic\"</span>;\n  <span class=\"hljs-keyword\">private</span> meat = <span class=\"hljs-string\">\"beef\"</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">extras</span>: <span class=\"hljs-built_in\">string</span>[] = [];\n\n  <span class=\"hljs-title function_\">setBun</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">bun</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">bun</span> = bun;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">setMeat</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">meat</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">meat</span> = meat;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">addExtra</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">extra</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">extras</span>.<span class=\"hljs-title function_\">push</span>(extra);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">build</span>(): <span class=\"hljs-title class_\">Burger</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Burger</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">bun</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">meat</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">extras</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> burger = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BurgerBuilder</span>()\n  .<span class=\"hljs-title function_\">setMeat</span>(<span class=\"hljs-string\">\"chicken\"</span>)\n  .<span class=\"hljs-title function_\">addExtra</span>(<span class=\"hljs-string\">\"cheese\"</span>)\n  .<span class=\"hljs-title function_\">build</span>();\n</code></pre>\n<p><strong>Zastosowania:</strong> konfiguratory, kreatory złożonych obiektów, generatory formularzy.</p>\n<hr>\n<h2 id=\"wzorce-strukturalne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wzorce-strukturalne\">>></a>Wzorce strukturalne</h2>\n<h3 id=\"facade\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#facade\">>>></a>Facade</h3>\n<p>Upraszcza korzystanie ze złożonych systemów, oferując prosty interfejs do wielu operacji.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AudioSystem</span> {\n  <span class=\"hljs-title function_\">turnOn</span>(<span class=\"hljs-params\"></span>) {}\n  <span class=\"hljs-title function_\">setVolume</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">level</span>: <span class=\"hljs-built_in\">number</span></span>) {}\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VideoSystem</span> {\n  <span class=\"hljs-title function_\">turnOn</span>(<span class=\"hljs-params\"></span>) {}\n  <span class=\"hljs-title function_\">setResolution</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">res</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HomeTheaterFacade</span> {\n  <span class=\"hljs-keyword\">private</span> audio = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AudioSystem</span>();\n  <span class=\"hljs-keyword\">private</span> video = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VideoSystem</span>();\n\n  <span class=\"hljs-title function_\">startMovie</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">audio</span>.<span class=\"hljs-title function_\">turnOn</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">audio</span>.<span class=\"hljs-title function_\">setVolume</span>(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">turnOn</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">setResolution</span>(<span class=\"hljs-string\">\"1080p\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> theater = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HomeTheaterFacade</span>();\ntheater.<span class=\"hljs-title function_\">startMovie</span>();\n</code></pre>\n<p><strong>Zastosowania:</strong> uproszczone API, integracja wielu zależności.</p>\n<hr>\n<h3 id=\"adapter\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#adapter\">>>></a>Adapter</h3>\n<p>Pozwala współpracować obiektom z niekompatybilnymi interfejsami — \"tłumaczy\" jeden interfejs na inny.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OldPrinter</span> {\n  <span class=\"hljs-title function_\">printText</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">text</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Old Printer: \"</span> + text);\n  }\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">NewPrinter</span> {\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PrinterAdapter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NewPrinter</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">oldPrinter</span>: <span class=\"hljs-title class_\">OldPrinter</span></span>) {}\n\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">oldPrinter</span>.<span class=\"hljs-title function_\">printText</span>(content);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> adapter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PrinterAdapter</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OldPrinter</span>());\nadapter.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Hello\"</span>);\n</code></pre>\n<p><strong>Zastosowania:</strong> integracja z zewnętrznymi bibliotekami, starszym kodem, migracje.</p>\n<hr>\n<h2 id=\"wzorce-behawioralne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wzorce-behawioralne\">>></a>Wzorce behawioralne</h2>\n<h3 id=\"observer\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#observer\">>>></a>Observer</h3>\n<p>Obiekt \"subject\" powiadamia inne obiekty (obserwatorów) o zmianach stanu — bez ścisłego powiązania.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Subject</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>[] = [];\n\n  <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n  }\n\n  <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> obs <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>) {\n      obs.<span class=\"hljs-title function_\">update</span>(data);\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Logger</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Log:\"</span>, data);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> subject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Subject</span>();\nsubject.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Logger</span>());\nsubject.<span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-string\">\"Dane się zmieniły\"</span>);\n</code></pre>\n<p><strong>Zastosowania:</strong> systemy notyfikacji, reactive programming, event-driven.</p>\n<hr>\n<h3 id=\"strategy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#strategy\">>>></a>Strategy</h3>\n<p>Pozwala zamieniać algorytmy w trakcie działania aplikacji, bez zmiany jej kodu.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PayPal</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`PayPal: Paid <span class=\"hljs-subst\">${amount}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CreditCard</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Card: Paid <span class=\"hljs-subst\">${amount}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Checkout</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">strategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span></span>) {}\n\n  <span class=\"hljs-title function_\">processPayment</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">strategy</span>.<span class=\"hljs-title function_\">pay</span>(amount);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> checkout = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Checkout</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PayPal</span>());\ncheckout.<span class=\"hljs-title function_\">processPayment</span>(<span class=\"hljs-number\">100</span>);\n</code></pre>\n<p><strong>Zastosowania:</strong> płatności, logika decyzyjna, AI.</p>\n<hr>\n<h2 id=\"zastosowania-wzorców-w-praktyce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zastosowania-wzorców-w-praktyce\">>></a>Zastosowania wzorców w praktyce</h2>\n<ul>\n<li><strong>Frontend:</strong> React, Angular czy Vue często korzystają z Observera (np. Redux, RxJS), Strategy (dynamiczny wybór komponentów), Factory (tworzenie widgetów), Facade (warstwa usług API).</li>\n<li><strong>Backend:</strong> Singleton dla połączeń do bazy danych, Builder przy generowaniu zapytań, Adapter do integracji z zewnętrznymi serwisami.</li>\n</ul>\n<hr>\n<h2 id=\"przydatne-narzędzia-i-materiały\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przydatne-narzędzia-i-materiały\">>></a>Przydatne narzędzia i materiały</h2>\n<ul>\n<li><a href=\"https://refactoring.guru/pl/design-patterns\">Refactoring.guru – wzorce projektowe po polsku i angielsku</a></li>\n<li><a href=\"https://www.typescriptlang.org/play\">TypeScript Playground</a></li>\n<li><a href=\"https://pl.wikipedia.org/wiki/Wzorzec_projektowy\">Wzorce projektowe – Wikipedia</a></li>\n<li>[Książka „Wzorce projektowe. Elementy oprogramowania obiektowego” – Gamma, Helm, Johnson, Vlissides]</li>\n</ul>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1-singleton-w-praktyce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-singleton-w-praktyce\">>>></a>Zadanie 1: Singleton w praktyce</h3>\n<p>Zaimplementuj klasę Logger, która realizuje wzorzec Singleton i umożliwia logowanie wiadomości do konsoli. Upewnij się, że niezależnie od liczby wywołań zawsze używana jest ta sama instancja loggera.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Logger</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-attr\">instance</span>: <span class=\"hljs-title class_\">Logger</span>;\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {}\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getInstance</span>(): <span class=\"hljs-title class_\">Logger</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-property\">instance</span>) {\n      <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-property\">instance</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Logger</span>();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-property\">instance</span>;\n  }\n\n  <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> logger1 = <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-title function_\">getInstance</span>();\n<span class=\"hljs-keyword\">const</span> logger2 = <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-title function_\">getInstance</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(logger1 === logger2); <span class=\"hljs-comment\">// true</span>\nlogger1.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Wiadomość testowa\"</span>);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-factory-dla-przycisków\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-factory-dla-przycisków\">>>></a>Zadanie 2: Factory dla przycisków</h3>\n<p>Zaimplementuj prostą fabrykę (Factory), która w zależności od przekazanego typu zwróci przycisk HTML (<code>&#x3C;button></code>) lub SVG (<code>&#x3C;svg></code>). Dodaj odpowiednie klasy ButtonHtml i ButtonSvg.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(): <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ButtonHtml</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;button>Przycisk HTML&#x3C;/button>\"</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ButtonSvg</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;svg>&#x3C;rect width='100' height='30'/>&#x3C;/svg>\"</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ButtonFactory</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">Button</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">type</span> === <span class=\"hljs-string\">\"html\"</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ButtonHtml</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ButtonSvg</span>();\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> btn = <span class=\"hljs-title class_\">ButtonFactory</span>.<span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-string\">\"svg\"</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(btn.<span class=\"hljs-title function_\">render</span>());\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-builder-do-pizzy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-builder-do-pizzy\">>>></a>Zadanie 3: Builder do pizzy</h3>\n<p>Stwórz klasę PizzaBuilder, umożliwiającą tworzenie pizzy z różnymi składnikami (np. ser, szynka, pieczarki) oraz rodzajem ciasta.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pizza</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">dough</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">ingredients</span>: <span class=\"hljs-built_in\">string</span>[]</span>) {}\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PizzaBuilder</span> {\n  <span class=\"hljs-keyword\">private</span> dough = <span class=\"hljs-string\">\"classic\"</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">ingredients</span>: <span class=\"hljs-built_in\">string</span>[] = [];\n\n  <span class=\"hljs-title function_\">setDough</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dough</span> = <span class=\"hljs-keyword\">type</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">addIngredient</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">ingredient</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ingredients</span>.<span class=\"hljs-title function_\">push</span>(ingredient);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">build</span>(): <span class=\"hljs-title class_\">Pizza</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Pizza</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dough</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">ingredients</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> pizza = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PizzaBuilder</span>()\n  .<span class=\"hljs-title function_\">setDough</span>(<span class=\"hljs-string\">\"thin\"</span>)\n  .<span class=\"hljs-title function_\">addIngredient</span>(<span class=\"hljs-string\">\"cheese\"</span>)\n  .<span class=\"hljs-title function_\">addIngredient</span>(<span class=\"hljs-string\">\"ham\"</span>)\n  .<span class=\"hljs-title function_\">build</span>();\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pizza);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-adapter--stare-i-nowe-api\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-adapter--stare-i-nowe-api\">>>></a>Zadanie 4: Adapter — stare i nowe API</h3>\n<p>Załóż, że masz starą klasę ApiV1 z metodą getUserData(), a chcesz korzystać z nowego interfejsu NewApi z metodą fetchUser(). Napisz adapter.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ApiV1</span> {\n  <span class=\"hljs-title function_\">getUserData</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> };\n  }\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">NewApi</span> {\n  <span class=\"hljs-title function_\">fetchUser</span>(): <span class=\"hljs-built_in\">object</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ApiAdapter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NewApi</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">oldApi</span>: <span class=\"hljs-title class_\">ApiV1</span></span>) {}\n\n  <span class=\"hljs-title function_\">fetchUser</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">oldApi</span>.<span class=\"hljs-title function_\">getUserData</span>();\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> adapter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiAdapter</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiV1</span>());\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(adapter.<span class=\"hljs-title function_\">fetchUser</span>());\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-5-strategy--wybór-algorytmu-płatności\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-strategy--wybór-algorytmu-płatności\">>>></a>Zadanie 5: Strategy — wybór algorytmu płatności</h3>\n<p>Zaimplementuj dwie strategie płatności: przelew i BLIK (obie wypisują kwotę w konsoli). Stwórz klasę, która umożliwi wybór strategii w trakcie działania programu.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Transfer</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Płatność przelewem: <span class=\"hljs-subst\">${amount}</span> zł`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Blik</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Płatność BLIK: <span class=\"hljs-subst\">${amount}</span> zł`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PaymentProcessor</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">strategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span></span>) {}\n\n  <span class=\"hljs-title function_\">setStrategy</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">strategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">strategy</span> = strategy;\n  }\n\n  <span class=\"hljs-title function_\">process</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">strategy</span>.<span class=\"hljs-title function_\">pay</span>(amount);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> processor = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PaymentProcessor</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Transfer</span>());\nprocessor.<span class=\"hljs-title function_\">process</span>(<span class=\"hljs-number\">50</span>);\nprocessor.<span class=\"hljs-title function_\">setStrategy</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Blik</span>());\nprocessor.<span class=\"hljs-title function_\">process</span>(<span class=\"hljs-number\">75</span>);\n</code></pre>\n</details>\n<hr>\n<p>To dopiero początek! Każdy z tych wzorców ma swoje warianty, rozbudowane zastosowania i pułapki, których warto unikać.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wzorce-projektowe.md",{"_8":260,"_10":261,"_12":262,"_22":272,"_24":274,"_34":275,"_26":318,"_28":319,"_30":320,"_32":321},"Wprowadzenie do Git i GitHub","Kompleksowy kurs wprowadzający do systemu kontroli wersji Git oraz platformy GitHub. Poznaj podstawowe pojęcia, komendy oraz narzędzia do pracy zespołowej i automatyzacji.",[263,264,265,266,267,268,269,42,270,271,93],"Git","GitHub","kontrola wersji","repozytorium","commit","branch","pull request","GitHub Actions","GitHub Pages",[273,45],"git",["D",1749081600000],{"_8":276,"_99":277},"Quiz: Podstawy Git i GitHub",[278,286,294,302,310],{"_102":279,"_104":280,"_110":111,"_112":285},"<p>Co oznacza skrót VCS?</p>",[281,282,283,284],"Virtual Clone Service","Version Control System","Verified Commit Syntax","Versioned Coding System","VCS to Version Control System, czyli system kontroli wersji.",{"_102":287,"_104":288,"_110":111,"_112":293},"<p>Co robi polecenie 'git clone'?</p>",[289,290,291,292],"Tworzy nową gałąź","Pobiera całe repozytorium zdalne na lokalny komputer","Łączy zmiany z innego repozytorium","Zatwierdza zmiany do historii","'git clone' kopiuje całe repozytorium wraz z historią na Twój komputer.",{"_102":295,"_104":296,"_110":147,"_112":301},"<p>Czym jest commit w Gicie?</p>",[297,298,299,300],"Nowa gałąź","Zdalne repozytorium","Automatyczne pobieranie zmian","Zapis zmian w repozytorium z opisem","Commit to zapis zmian, który trafia do historii projektu i ma komentarz.",{"_102":303,"_104":304,"_110":111,"_112":309},"<p>Jak nazywa się prośba o połączenie zmian na GitHubie?</p>",[305,306,307,308],"Merge commit","Pull request","Push request","Branch request","Pull request to prośba o połączenie zmian z inną gałęzią.",{"_102":311,"_104":312,"_110":129,"_112":317},"<p>Która platforma NIE jest alternatywą dla GitHub?</p>",[313,314,315,316],"GitLab","Bitbucket","Stack Overflow","Azure DevOps","Stack Overflow to portal Q&A, nie platforma hostingu repozytoriów.","a4374f9f-54dc-4b89-9e58-7bc59aabfbba","wprowadzenie-do-git-i-github","<p>Ten kurs to szybki i przystępny przewodnik po podstawach pracy z Gitem i GitHubem. Nauczysz się, czym jest kontrola wersji, poznasz kluczowe komendy oraz dowiesz się, jak pracować zespołowo nad kodem i publikować swoje projekty w internecie. 🚀</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-system-kontroli-wersji\">Czym jest system kontroli wersji?</a></li>\n<li><a href=\"#co-to-jest-git\">Co to jest Git?</a></li>\n<li><a href=\"#repozytorium-branch-commit\">Repozytorium, branch, commit</a>\n<ul>\n<li><a href=\"#repozytorium\">Co to jest repozytorium?</a></li>\n<li><a href=\"#branch-ga%C5%82%C4%85%C5%BA\">Co to jest branch/gałąź?</a></li>\n<li><a href=\"#commit\">Co to jest commit?</a></li>\n</ul>\n</li>\n<li><a href=\"#fundamentalne-komendy-gita-commit-checkout-pull-push-clone\">Fundamentalne komendy Git’a</a>\n<ul>\n<li><a href=\"#git-clone\"><code>git clone</code></a></li>\n<li><a href=\"#git-checkout-oraz-git-switch\"><code>git checkout</code> oraz <code>git switch</code></a></li>\n<li><a href=\"#git-add\"><code>git add</code></a></li>\n<li><a href=\"#git-commit\"><code>git commit</code></a></li>\n<li><a href=\"#git-pull\"><code>git pull</code></a></li>\n<li><a href=\"#git-push\"><code>git push</code></a></li>\n<li><a href=\"#git-status\"><code>git status</code></a></li>\n<li><a href=\"#git-log\"><code>git log</code></a></li>\n</ul>\n</li>\n<li><a href=\"#czym-jest-github-przyk%C5%82adowe-alternatywy\">Czym jest Github? Przykładowe alternatywy</a></li>\n<li><a href=\"#pull-request---z-czym-to-si%C4%99-je\">Pull request - z czym to się je?</a></li>\n<li><a href=\"#github-actions---podstawy-cicd\">Github actions - podstawy CI/CD</a></li>\n<li><a href=\"#github-pages---mo%C5%BCliwo%C5%9B%C4%87-wystawienia-naszej-aplikacji-na-%C5%9Bwiat\">Github pages - możliwość wystawienia naszej aplikacji na świat</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-system-kontroli-wersji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-system-kontroli-wersji\">>></a>Czym jest system kontroli wersji?</h2>\n<p>System kontroli wersji (VCS, czyli Version Control System) to narzędzie, które umożliwia śledzenie wszystkich zmian w projekcie, cofanie się do wcześniejszych wersji oraz bezpieczną współpracę z innymi osobami. Pozwala na zarządzanie historią plików i ułatwia organizację pracy nad kodem.</p>\n<p><strong>Dlaczego warto używać systemu kontroli wersji?</strong> 🕓</p>\n<ul>\n<li>Pełna historia zmian w plikach.</li>\n<li>Możliwość powrotu do dowolnej wersji projektu.</li>\n<li>Praca zespołowa bez ryzyka nadpisania czyjejś pracy.</li>\n<li>Lepsza organizacja i bezpieczeństwo kodu.</li>\n</ul>\n<hr>\n<h2 id=\"co-to-jest-git\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-git\">>></a>Co to jest Git?</h2>\n<p>Git to najpopularniejszy system kontroli wersji na świecie, stworzony przez Linusa Torvaldsa. Pozwala na pracę zarówno lokalną na komputerze, jak i w chmurze, zapewniając bezpieczeństwo i elastyczność zarządzania projektem.</p>\n<p><strong>Co wyróżnia Gita?</strong> 🏆</p>\n<ul>\n<li>Możliwość pracy offline.</li>\n<li>Łatwe cofanie się do poprzednich wersji.</li>\n<li>Wsparcie dla gałęzi (branches), dzięki którym można testować nowe pomysły bez wpływu na główną wersję projektu.</li>\n</ul>\n<hr>\n<h2 id=\"repozytorium-branch-commit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#repozytorium-branch-commit\">>></a>Repozytorium, branch, commit</h2>\n<p>Te trzy pojęcia są podstawą pracy z Gitem i GitHubem. Zrozumienie ich znaczenia i działania pozwala sprawnie korzystać z systemu kontroli wersji.</p>\n<h3 id=\"repozytorium\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#repozytorium\">>>></a>Repozytorium</h3>\n<p>Repozytorium (ang. repository) to miejsce przechowywania całego projektu wraz z historią zmian. Może być lokalne (na komputerze) lub zdalne (np. na GitHubie).</p>\n<p><strong>Co znajduje się w repozytorium?</strong></p>\n<ul>\n<li>Pliki projektu (kody źródłowe, dokumentacja)</li>\n<li>Ukryty folder <code>.git</code> z historią zmian</li>\n<li>Informacje o commitach, gałęziach i tagach</li>\n</ul>\n<p><strong>Typowe operacje:</strong> ⚙️</p>\n<ul>\n<li>Tworzenie nowego repozytorium: <code>git init</code></li>\n<li>Pobranie repozytorium z internetu: <code>git clone &#x3C;adres_repo></code></li>\n</ul>\n<h3 id=\"branch-gałąź\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#branch-gałąź\">>>></a>Branch (gałąź)</h3>\n<p>Gałąź pozwala pracować nad różnymi funkcjonalnościami równolegle. Dzięki gałęziom można eksperymentować i rozwijać nowe funkcje bez wpływu na główną wersję kodu.</p>\n<p><strong>Dlaczego warto używać gałęzi?</strong></p>\n<ul>\n<li>Testowanie nowych funkcji bez ryzyka dla głównej wersji projektu (zazwyczaj gałąź <code>main</code> lub <code>master</code>)</li>\n<li>Każdy członek zespołu może pracować na własnej gałęzi</li>\n<li>Możliwość łączenia (merge) zmian z różnych gałęzi</li>\n</ul>\n<p><strong>Typowe operacje:</strong> 🌿</p>\n<ul>\n<li>Tworzenie gałęzi: <code>git branch &#x3C;nazwa_gałęzi></code></li>\n<li>Przełączanie się na gałąź: <code>git checkout &#x3C;nazwa_gałęzi></code> lub <code>git switch &#x3C;nazwa_gałęzi></code></li>\n<li>Łączenie gałęzi: <code>git merge &#x3C;nazwa_gałęzi></code></li>\n</ul>\n<h3 id=\"commit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#commit\">>>></a>Commit</h3>\n<p>Commit to zapis zmian w projekcie wraz z opisem. Każdy commit jest jak punkt kontrolny w historii projektu.</p>\n<p><strong>Cechy commitów:</strong></p>\n<ul>\n<li>Każdy commit ma unikalny identyfikator (hash)</li>\n<li>Opis commita powinien informować o dokonanych zmianach</li>\n<li>Możliwość powrotu do dowolnego commita</li>\n</ul>\n<p><strong>Tworzenie commita:</strong> 💾</p>\n<ol>\n<li>Dodanie plików do obszaru stage:<br>\n<code>git add &#x3C;plik></code> lub <code>git add .</code></li>\n<li>Zapisanie zmian:<br>\n<code>git commit -m \"Opis zmian\"</code></li>\n</ol>\n<hr>\n<h2 id=\"fundamentalne-komendy-gita-commit-checkout-pull-push-clone\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#fundamentalne-komendy-gita-commit-checkout-pull-push-clone\">>></a>Fundamentalne komendy Git’a: commit, checkout, pull, push, clone</h2>\n<p>Poniżej znajdują się szczegółowe opisy najważniejszych komend Git'a wraz z zastosowaniem i przykładami. Przy każdej znajdziesz praktyczną instrukcję użycia.</p>\n<h3 id=\"git-clone\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-clone\">>>></a><code>git clone</code></h3>\n<p>Klonuje istniejące repozytorium z internetu na komputer. 🖥️</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/uzytkownik/projekt.git\n</code></pre>\n<p>Po tej komendzie otrzymujesz pełną kopię repozytorium z całą historią zmian.</p>\n<hr>\n<h3 id=\"git-checkout-oraz-git-switch\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-checkout-oraz-git-switch\">>>></a><code>git checkout</code> oraz <code>git switch</code></h3>\n<p>Służą do przełączania się między gałęziami lub do konkretnego commita.</p>\n<ul>\n<li>Przełączenie na inną gałąź:\n<pre><code class=\"hljs language-bash\">git checkout nazwa_gałęzi\n<span class=\"hljs-comment\"># lub</span>\ngit switch nazwa_gałęzi\n</code></pre>\n</li>\n<li>Przełączenie do konkretnego commita (tylko do odczytu):\n<pre><code class=\"hljs language-bash\">git checkout hash_commita\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"git-add\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-add\">>>></a><code>git add</code></h3>\n<p>Dodaje zmienione pliki do obszaru staging, przygotowując je do commita.</p>\n<ul>\n<li>Dodanie pojedynczego pliku:\n<pre><code class=\"hljs language-bash\">git add index.html\n</code></pre>\n</li>\n<li>Dodanie wszystkich plików:\n<pre><code class=\"hljs language-bash\">git add .\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"git-commit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-commit\">>>></a><code>git commit</code></h3>\n<p>Zapisuje zmiany w repozytorium wraz z opisem.</p>\n<pre><code class=\"hljs language-bash\">git commit -m <span class=\"hljs-string\">\"Opis zmian\"</span>\n</code></pre>\n<p>Opis powinien być zwięzły i informować, co zostało zmienione.</p>\n<hr>\n<h3 id=\"git-pull\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-pull\">>>></a><code>git pull</code></h3>\n<p>Pobiera najnowsze zmiany z repozytorium zdalnego do lokalnego i automatycznie je łączy. 🔄</p>\n<pre><code class=\"hljs language-bash\">git pull\n</code></pre>\n<hr>\n<h3 id=\"git-push\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-push\">>>></a><code>git push</code></h3>\n<p>Wysyła lokalne zmiany (commity) do repozytorium zdalnego.</p>\n<pre><code class=\"hljs language-bash\">git push\n</code></pre>\n<p>Możesz również wskazać nazwę zdalnego repozytorium i gałęzi:</p>\n<pre><code class=\"hljs language-bash\">git push origin nowa-funkcja\n</code></pre>\n<hr>\n<h3 id=\"git-status\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-status\">>>></a><code>git status</code></h3>\n<p>Pokazuje aktualny stan repozytorium: które pliki zostały zmienione, które są przygotowane do commita, a które nie.</p>\n<pre><code class=\"hljs language-bash\">git status\n</code></pre>\n<hr>\n<h3 id=\"git-log\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-log\">>>></a><code>git log</code></h3>\n<p>Pokazuje historię wszystkich commitów w repozytorium. 📜</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span>\n</code></pre>\n<hr>\n<h2 id=\"czym-jest-github-przykładowe-alternatywy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-github-przykładowe-alternatywy\">>></a>Czym jest Github? Przykładowe alternatywy</h2>\n<p>GitHub to platforma umożliwiająca przechowywanie projektów opartych o Git, dzielenie się kodem i współpracę w zespole. Umożliwia zarządzanie projektami, recenzowanie kodu i automatyzację procesów. To swoisty \"hub\" dla programistów i projektów open source.</p>\n<p><strong>Inne popularne platformy:</strong> 🌐</p>\n<ul>\n<li>GitLab</li>\n<li>Bitbucket</li>\n<li>Azure DevOps</li>\n</ul>\n<hr>\n<h2 id=\"pull-request---z-czym-to-się-je\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pull-request---z-czym-to-się-je\">>></a>Pull request - z czym to się je?</h2>\n<p>Pull request (PR) to prośba o akceptację i połączenie Twoich zmian z główną wersją projektu. Jest to podstawowy element pracy zespołowej na GitHubie.</p>\n<p><strong>Proces pull request:</strong> 👥</p>\n<ol>\n<li>Tworzysz nową gałąź i wprowadzasz w niej zmiany.</li>\n<li>Otwierasz pull request na GitHubie.</li>\n<li>Inni członkowie zespołu sprawdzają kod i mogą komentować lub zgłaszać poprawki.</li>\n<li>Po akceptacji zmiany są łączone z główną gałęzią projektu.</li>\n</ol>\n<hr>\n<h2 id=\"github-actions---podstawy-cicd\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#github-actions---podstawy-cicd\">>></a>Github actions - podstawy CI/CD</h2>\n<p>GitHub Actions to narzędzie do automatyzacji zadań takich jak testowanie, budowanie i wdrażanie aplikacji. Pozwala tworzyć workflowy, które wykonują się automatycznie po spełnieniu określonych warunków (np. po każdym commicie).</p>\n<p><strong>Główne pojęcia:</strong> ⚙️</p>\n<ul>\n<li>Workflow – zestaw zadań wykonywanych automatycznie</li>\n<li>Konfiguracja w plikach YAML w folderze <code>.github/workflows/</code></li>\n</ul>\n<hr>\n<h2 id=\"github-pages---możliwość-wystawienia-naszej-aplikacji-na-świat\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#github-pages---możliwość-wystawienia-naszej-aplikacji-na-świat\">>></a>Github pages - możliwość wystawienia naszej aplikacji na świat</h2>\n<p>GitHub Pages umożliwia publikowanie stron internetowych lub portfolio bez konieczności posiadania własnego serwera. Strona jest dostępna online bezpośrednio z repozytorium.</p>\n<p><strong>Jak to zrobić?</strong> 🌍</p>\n<ol>\n<li>Utwórz repozytorium z plikami strony (HTML, CSS, JS).</li>\n<li>W ustawieniach repozytorium aktywuj GitHub Pages.</li>\n<li>Strona będzie dostępna pod adresem:<br>\n<code>https://&#x3C;twoja-nazwa-użytkownika>.github.io/&#x3C;nazwa-repo></code></li>\n</ol>\n<hr>\n<p>To tylko wstęp – każdy z tych tematów można rozwinąć o praktyczne przykłady i ćwiczenia, które pozwolą lepiej zrozumieć narzędzia i procesy pracy z Git oraz GitHubem.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-git-i-github.md",{"_8":323,"_10":324,"_12":325,"_22":330,"_24":331,"_34":332,"_26":374,"_28":375,"_30":376,"_32":377},"Wprowadzenie do Semantycznego HTML","Semantyczny HTML polega na używaniu elementów HTML, które jednoznacznie opisują swoje znaczenie i cel. Elementy semantyczne nie tylko definiują strukturę dokumentu, ale również pomagają w interpretacji jego zawartości zarówno przez przeglądarki, jak i przez wyszukiwarki internetowe oraz technologie wspomagające (np. czytniki ekranowe).",[326,327,328,329,93],"html","semantyka","seo","dostępność",[326,328],["D",1720137600000],{"_8":333,"_99":334},"Quiz: Semantyczny HTML",[335,343,351,359,366],{"_102":336,"_104":337,"_110":129,"_112":342},"<p>Który element HTML najlepiej nadaje się do oznaczenia głównej treści strony?</p>",[338,339,340,341],"<section>","<aside>","<main>","<header>","Element <main> służy do oznaczenia głównej, unikatowej treści dokumentu.",{"_102":344,"_104":345,"_110":111,"_112":350},"<p>Do czego służy element <code>&#x3C;nav></code>?</p>",[346,347,348,349],"Do oznaczania artykułu","Do grupowania linków nawigacyjnych na stronie","Do wyświetlania stopki strony","Do osadzania obrazka z podpisem","Element <nav> grupuje linki prowadzące do różnych części witryny lub innych stron.",{"_102":352,"_104":353,"_110":147,"_112":358},"<p>Gdzie możesz legalnie umieścić element <code>&#x3C;footer></code>?</p>",[354,355,356,357],"Tylko na początku strony","Tylko w <main>","Wyłącznie w <aside>","Na końcu całej strony lub na końcu sekcji/artykułu","<footer> może być użyty zarówno dla całej strony, jak i dla poszczególnych sekcji czy artykułów.",{"_102":360,"_104":361,"_110":129,"_112":365},"<p>Który element HTML semantyczny najlepiej nadaje się na poboczny panel z reklamami lub linkami powiązanymi?</p>",[362,363,339,364],"<figure>","<mark>","<time>","<aside> przeznaczony jest na treści poboczne, niezwiązane bezpośrednio z główną osią tematyczną.",{"_102":367,"_104":368,"_110":111,"_112":373},"<p>Jakiego atrybutu użyjesz z <code>&#x3C;time></code>, by data była czytelna dla maszyn?</p>",[369,370,371,372],"date","datetime","machine","format","Atrybut datetime pozwala maszynom poprawnie interpretować podaną datę/czas.","50632982-207f-4b13-8b04-2fa8e05d1683","semantyczny-html","<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-semantyczny-html\">Czym jest semantyczny HTML?</a></li>\n<li><a href=\"#zalety-u%C5%BCywania-semantycznego-html\">Zalety używania semantycznego HTML</a></li>\n<li><a href=\"#semantyczne-elementy-html\">Semantyczne elementy HTML</a>\n<ul>\n<li><a href=\"#doctype-html\"><code>&#x3C;!DOCTYPE html></code></a></li>\n<li><a href=\"#header\"><code>&#x3C;header></code></a></li>\n<li><a href=\"#nav\"><code>&#x3C;nav></code></a></li>\n<li><a href=\"#main\"><code>&#x3C;main></code></a></li>\n<li><a href=\"#article\"><code>&#x3C;article></code></a></li>\n<li><a href=\"#section\"><code>&#x3C;section></code></a></li>\n<li><a href=\"#aside\"><code>&#x3C;aside></code></a></li>\n<li><a href=\"#footer\"><code>&#x3C;footer></code></a></li>\n<li><a href=\"#figure-i-figcaption\"><code>&#x3C;figure></code> i <code>&#x3C;figcaption></code></a></li>\n<li><a href=\"#time\"><code>&#x3C;time></code></a></li>\n<li><a href=\"#mark\"><code>&#x3C;mark></code></a></li>\n<li><a href=\"#address\"><code>&#x3C;address></code></a></li>\n</ul>\n</li>\n<li><a href=\"#ograniczenia-i-wyzwania\">Ograniczenia i wyzwania</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1\">Zadanie 1</a></li>\n<li><a href=\"#zadanie-2\">Zadanie 2</a></li>\n<li><a href=\"#zadanie-3\">Zadanie 3</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-semantyczny-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-semantyczny-html\">>></a>Czym jest semantyczny HTML?</h2>\n<p>Semantyczny HTML oznacza stosowanie takich elementów HTML, które jednoznacznie wskazują na swoje przeznaczenie i znaczenie w kontekście strony. Elementy semantyczne nie służą jedynie do budowania struktury dokumentu – ułatwiają one także przeglądarkom, wyszukiwarkom internetowym oraz technologiom wspomagającym (np. czytnikom ekranowym) prawidłową interpretację treści. Dzięki temu strony są bardziej dostępne, lepiej pozycjonowane i czytelniejsze zarówno dla ludzi, jak i maszyn.</p>\n<h2 id=\"zalety-używania-semantycznego-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zalety-używania-semantycznego-html\">>></a>Zalety używania semantycznego HTML</h2>\n<ol>\n<li><strong>Lepsza czytelność kodu:</strong> Kod oparty na semantycznych elementach jest bardziej zrozumiały i klarowny zarówno dla programistów, jak i dla narzędzi przetwarzających strony internetowe.</li>\n<li><strong>SEO:</strong> Wyszukiwarki skuteczniej rozpoznają strukturę i znaczenie treści, co może poprawić pozycję strony w wynikach wyszukiwania.</li>\n<li><strong>Dostępność:</strong> Semantyczny HTML sprawia, że technologie wspomagające (np. czytniki ekranowe) mogą lepiej przekazywać treść osobom z niepełnosprawnościami.</li>\n<li><strong>Łatwiejsza konserwacja:</strong> Strony zbudowane w oparciu o semantyczny HTML są bardziej uporządkowane i łatwiejsze w utrzymaniu oraz rozbudowie.</li>\n</ol>\n<h2 id=\"semantyczne-elementy-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#semantyczne-elementy-html\">>></a>Semantyczne elementy HTML</h2>\n<h3 id=\"doctype-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#doctype-html\">>>></a><code>&#x3C;!DOCTYPE html></code></h3>\n<p>Deklaracja typu dokumentu HTML5. Informuje przeglądarkę o używanej wersji HTML – od tego rozpoczyna się każdy nowoczesny dokument HTML.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Semantyczny HTML<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-comment\">&#x3C;!-- Zawartość strony --></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h3 id=\"header\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#header\">>>></a><code>&#x3C;header></code></h3>\n<p>Sekcja nagłówkowa strony lub danej sekcji. Zawiera zwykle tytuł, logo, wprowadzenie lub podstawową nawigację.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Tytuł strony<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#home\"</span>></span>Home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#about\"</span>></span>About<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#contact\"</span>></span>Contact<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n</code></pre>\n<p><em>Stosuj <code>&#x3C;header></code> na początku strony lub jako nagłówek sekcji.</em></p>\n<h3 id=\"nav\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#nav\">>>></a><code>&#x3C;nav></code></h3>\n<p>Wyodrębniony blok nawigacyjny. Zawiera zestaw linków prowadzących do różnych części serwisu lub do innych stron.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#home\"</span>></span>Home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#about\"</span>></span>About<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#contact\"</span>></span>Contact<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n</code></pre>\n<p><em>Element <code>&#x3C;nav></code> powinien obejmować tylko główną nawigację witryny.</em></p>\n<h3 id=\"main\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#main\">>>></a><code>&#x3C;main></code></h3>\n<p>Główna, unikatowa treść dokumentu. Może zawierać artykuły, sekcje, multimedia i inne elementy powiązane z tematem strony.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Artykuł<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Treść artykułu...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n</code></pre>\n<p><em>Tylko jeden element <code>&#x3C;main></code> na stronę!</em></p>\n<h3 id=\"article\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#article\">>>></a><code>&#x3C;article></code></h3>\n<p>Samodzielna jednostka treści, która ma sens także poza kontekstem strony (np. artykuł, wpis na blogu, post na forum).</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Artykuł<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Treść artykułu...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n</code></pre>\n<p><em>Możesz mieć wiele <code>&#x3C;article></code> na jednej stronie.</em></p>\n<h3 id=\"section\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#section\">>>></a><code>&#x3C;section></code></h3>\n<p>Logiczna sekcja dokumentu grupująca powiązane tematycznie treści, np. rozdziały, bloki tematyczne.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Sekcja<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Treść sekcji...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n</code></pre>\n<p><em>Używaj <code>&#x3C;section></code> do organizowania treści w logiczne grupy.</em></p>\n<h3 id=\"aside\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#aside\">>>></a><code>&#x3C;aside></code></h3>\n<p>Blok z treściami pobocznymi lub dodatkowymi – np. panele boczne, cytaty, reklamy, linki powiązane.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">aside</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Sidebar<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Informacje poboczne...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">aside</span>></span>\n</code></pre>\n<p><em>Elementy <code>&#x3C;aside></code> powinny zawierać treści niezwiązane bezpośrednio z główną osią tematyczną.</em></p>\n<h3 id=\"footer\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#footer\">>>></a><code>&#x3C;footer></code></h3>\n<p>Stopka strony lub sekcji. Zawiera informacje o autorze, prawa autorskie, dane kontaktowe, odnośniki do polityk i inne podobne treści.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-symbol\">&#x26;copy;</span> 2023 Moja Strona. Wszelkie prawa zastrzeżone.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n</code></pre>\n<p><em>Możesz mieć <code>&#x3C;footer></code> zarówno dla całej strony, jak i dla poszczególnych sekcji czy artykułów.</em></p>\n<h3 id=\"figure-i-figcaption\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#figure-i-figcaption\">>>></a><code>&#x3C;figure></code> i <code>&#x3C;figcaption></code></h3>\n<p>Blok do zamieszczania ilustracji, zdjęć, diagramów, wykresów wraz z podpisem.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">figure</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"obrazek.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Opis obrazka\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">figcaption</span>></span>Opis obrazka<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">figcaption</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">figure</span>></span>\n</code></pre>\n<p><em>Element <code>&#x3C;figcaption></code> zawsze powinien być związany z <code>&#x3C;figure></code>.</em></p>\n<h3 id=\"time\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#time\">>>></a><code>&#x3C;time></code></h3>\n<p>Element reprezentujący określony moment w czasie lub zakres dat.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">time</span> <span class=\"hljs-attr\">datetime</span>=<span class=\"hljs-string\">\"2023-06-29\"</span>></span>29 czerwca 2023<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">time</span>></span>\n</code></pre>\n<p><em>Używaj atrybutu <code>datetime</code> dla maszynowej czytelności.</em></p>\n<h3 id=\"mark\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#mark\">>>></a><code>&#x3C;mark></code></h3>\n<p>Służy do wyróżnienia fragmentu tekstu, na który należy zwrócić szczególną uwagę.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>To jest <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">mark</span>></span>ważne<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">mark</span>></span> słowo.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n</code></pre>\n<p><em>Pomaga w podkreśleniu słów kluczowych lub wyników wyszukiwania.</em></p>\n<h3 id=\"address\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#address\">>>></a><code>&#x3C;address></code></h3>\n<p>Reprezentuje dane kontaktowe autora strony, firmy lub działu.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">address</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Jan Kowalski<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>ul. Przykładowa 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>00-000 Warszawa<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">address</span>></span>\n</code></pre>\n<p><em>Nie używaj do oznaczania lokalizacji geograficznych lub kontaktowych innych niż autor/organizacja strony.</em></p>\n<h2 id=\"ograniczenia-i-wyzwania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#ograniczenia-i-wyzwania\">>></a>Ograniczenia i wyzwania</h2>\n<ul>\n<li><strong>Niewłaściwe użycie elementów:</strong> Błędne stosowanie elementów semantycznych może prowadzić do dezorientacji użytkowników oraz problemów z dostępnością.</li>\n<li><strong>Brak wsparcia w starszych przeglądarkach:</strong> Niektóre starsze przeglądarki mogą nie interpretować poprawnie wszystkich elementów HTML5. Warto wtedy stosować odpowiednie polyfill'e lub style CSS resetujące.</li>\n<li><strong>Wymagana większa precyzja:</strong> Tworzenie semantycznego HTML wymaga dokładnego zrozumienia przeznaczenia każdego elementu i stosowania ich zgodnie z dokumentacją.</li>\n</ul>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Semantyczny HTML to fundament nowoczesnych stron. Umożliwia lepszą strukturę, czytelność kodu, wyższą dostępność oraz skuteczniejsze pozycjonowanie w wyszukiwarkach. Stosowanie odpowiednich elementów semantycznych pozwala tworzyć strony bardziej zrozumiałe zarówno dla użytkowników, jak i maszyn. To inwestycja w przyszłość i jakość Twoich projektów internetowych.</p>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1\">>>></a>Zadanie 1</h3>\n<p>Stwórz prostą stronę HTML, w której znajdą się:</p>\n<ul>\n<li>nagłówek (<code>&#x3C;header></code>)</li>\n<li>główna treść (<code>&#x3C;main></code>)</li>\n<li>nawigacja (<code>&#x3C;nav></code>)</li>\n<li>stopka (<code>&#x3C;footer></code>)</li>\n</ul>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Moja Strona<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#home\"</span>></span>Home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#about\"</span>></span>About<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#contact\"</span>></span>Contact<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Główna treść strony...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-symbol\">&#x26;copy;</span> 2023 Moja Strona. Wszelkie prawa zastrzeżone.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-2\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2\">>>></a>Zadanie 2</h3>\n<p>Rozbuduj stronę z Zadania 1 o:</p>\n<ul>\n<li>sekcję (<code>&#x3C;section></code>) w głównej części,</li>\n<li>artykuł (<code>&#x3C;article></code>) w sekcji,</li>\n<li>blok poboczny (<code>&#x3C;aside></code>) również w sekcji.</li>\n</ul>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Moja Strona<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#home\"</span>></span>Home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#about\"</span>></span>About<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#contact\"</span>></span>Contact<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Artykuł<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Treść artykułu...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">aside</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Blok poboczny<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Informacje poboczne...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">aside</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-symbol\">&#x26;copy;</span> 2023 Moja Strona. Wszelkie prawa zastrzeżone.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-3\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3\">>>></a>Zadanie 3</h3>\n<p>Dodaj do swojej strony ilustrację z podpisem, korzystając z elementów <code>&#x3C;figure></code> i <code>&#x3C;figcaption></code>, umieszczając je wewnątrz sekcji.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Moja Strona<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#home\"</span>></span>Home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#about\"</span>></span>About<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#contact\"</span>></span>Contact<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Artykuł<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Treść artykułu...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">aside</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Blok poboczny<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Informacje poboczne...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">aside</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">figure</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"obrazek.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Opis obrazka\"</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">figcaption</span>></span>Opis obrazka<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">figcaption</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">figure</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-symbol\">&#x26;copy;</span> 2023 Moja Strona. Wszelkie prawa zastrzeżone.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<p>To wszystko w temacie semantycznego HTML! Zachęcam do eksperymentowania, praktycznego stosowania elementów semantycznych oraz dalszego pogłębiania wiedzy na ten temat.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/semantyczny-html.md",{"_8":379,"_10":380,"_12":381,"_22":384,"_24":385,"_34":386,"_26":428,"_28":429,"_30":430,"_32":431},"Renesans w JS, czyli nowoczesny JavaScript","JavaScript jest językiem programowania, który jest powszechnie stosowany do tworzenia dynamicznych i interaktywnych stron internetowych. W ciągu ostatnich lat JavaScript znacznie ewoluował, wprowadzając nowe funkcje i poprawiając istniejące mechanizmy. W tym kursie omówimy najważniejsze elementy nowoczesnego JavaScript, w tym ES6 i nowsze.",[16,161,95,382,383,18,93],"przewodnik","web",[95,16],["D",1719705600000],{"_8":387,"_99":388},"Quiz: Podstawy nowoczesnego JavaScript",[389,397,405,413,421],{"_102":390,"_104":391,"_110":129,"_112":396},"<p>Jaką główną różnicę między <code>let</code> a <code>var</code> podkreśla się w nowoczesnym JavaScript?</p>",[392,393,394,395],"Obie są identyczne","`let` nie pozwala na przyjmowanie wartości domyślnej","Zakres blokowy (`block scope`) w `let`","`var` nie istnieje w nowoczesnym JS","`let` posiada zakres blokowy, podczas gdy `var` ma zakres funkcyjny.",{"_102":398,"_104":399,"_110":147,"_112":404},"<p>Co zwróci poniższy kod?</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> [a, , b] = arr;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a, b);\n</code></pre>",[400,401,402,403],"1 2","2 3","undefined 3","1 3","Drugi element jest pomijany. Wynik to 1 i 3.",{"_102":406,"_104":407,"_110":111,"_112":412},"<p>Co robi operator spread (<code>...</code>)?</p>",[408,409,410,411],"Tworzy nowy Promise","Rozwija elementy tablicy lub właściwości obiektu","Deklaruje zmienną stałą","Łączy Promise'y","Spread operator służy do rozwijania/skopiowania elementów tablicy lub obiektu.",{"_102":414,"_104":415,"_110":147,"_112":420},"<p>Czym różni się funkcja strzałkowa od zwykłej funkcji pod względem <code>this</code>?</p>",[416,417,418,419],"Funkcja strzałkowa tworzy nowy kontekst `this`","Nie ma różnicy","Funkcje strzałkowe nie działają w JS","Funkcja strzałkowa nie ma własnego `this`","Funkcje strzałkowe nie posiadają własnego `this` — dziedziczą go z otoczenia.",{"_102":422,"_104":423,"_110":138,"_112":427},"<p>Jaką wartość zwróci poniższy kod?</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span>; }\n<span class=\"hljs-title function_\">test</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>);\n</code></pre>",[424,425,203,426],"5","Promise {<fulfilled>: 5}","Błąd","Funkcja async zawsze zwraca Promise, ale `then` wypisze wartość 5.","a996b640-89e5-49da-946f-25bc3522dd5c","nowoczesny-javascript","<p>JavaScript to wszechstronny język programowania, kluczowy dla współczesnych aplikacji webowych i nie tylko. Wraz z pojawieniem się standardu ES6 (ECMAScript 2015) oraz kolejnych aktualizacji, JS stał się bardziej ekspresyjny, bezpieczny i wygodny w użyciu. W tym przewodniku poznasz najważniejsze zagadnienia nowoczesnego JavaScriptu, które pozwolą Ci pisać czytelny, skuteczny i łatwo rozwijalny kod.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#zmienne-let-const-i-zakresy-blokowe\">Zmienne: <code>let</code>, <code>const</code> i zakresy blokowe</a></li>\n<li><a href=\"#funkcje-strza%C5%82kowe-i-ich-zastosowania\">Funkcje strzałkowe i ich zastosowania</a></li>\n<li><a href=\"#szablony-string%C3%B3w-template-literals\">Szablony stringów (Template Literals)</a></li>\n<li><a href=\"#destrukturyzacja-tablic-i-obiekt%C3%B3w\">Destrukturyzacja tablic i obiektów</a></li>\n<li><a href=\"#spread-i-rest-operator-\">Spread i rest operator (<code>...</code>)</a></li>\n<li><a href=\"#promise-api-i-obs%C5%82uga-asynchroniczno%C5%9Bci\">Promise API i obsługa asynchroniczności</a></li>\n<li><a href=\"#asyncawait--nowoczesna-obs%C5%82uga-kodu-asynchronicznego\">Async/await – nowoczesna obsługa kodu asynchronicznego</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a></li>\n</ol>\n<hr>\n<h2 id=\"zmienne-let-const-i-zakresy-blokowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zmienne-let-const-i-zakresy-blokowe\">>></a>Zmienne: <code>let</code>, <code>const</code> i zakresy blokowe</h2>\n<h3 id=\"zakres-blokowy-block-scope\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zakres-blokowy-block-scope\">>>></a>Zakres blokowy (<code>block scope</code>)</h3>\n<p>W przeciwieństwie do starszego <code>var</code>, deklaracje <code>let</code> i <code>const</code> są ograniczone do bloku, w którym zostały zadeklarowane (czyli do najbliższych <code>{ ... }</code>). Dzięki temu unikasz tzw. „przecieków zmiennych” (variable hoisting) i niezamierzonych nadpisań.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n  <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n  <span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 5</span>\n}\n<span class=\"hljs-comment\">// console.log(x); // ReferenceError</span>\n</code></pre>\n<h3 id=\"różnice-między-let-const-i-var\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#różnice-między-let-const-i-var\">>>></a>Różnice między <code>let</code>, <code>const</code> i <code>var</code></h3>\n<ul>\n<li><code>let</code> – pozwala na modyfikację wartości, ale nie na ponowną deklarację w tym samym bloku.</li>\n<li><code>const</code> – wymaga przypisania wartości przy deklaracji i nie pozwala na jej zmianę (dotyczy to referencji, niekoniecznie zawartości – patrz poniżej).</li>\n<li><code>var</code> – ma zakres funkcyjny (function scope), podlega hoistingowi, co może prowadzić do nieprzewidzianych rezultatów.</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> tablica = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\ntablica.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// Dozwolone! Zmieniamy zawartość, nie referencję.</span>\n<span class=\"hljs-comment\">// tablica = [1, 2]; // Błąd! Przypisanie nowej referencji jest niedozwolone.</span>\n</code></pre>\n<hr>\n<h2 id=\"funkcje-strzałkowe-i-ich-zastosowania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-strzałkowe-i-ich-zastosowania\">>></a>Funkcje strzałkowe i ich zastosowania</h2>\n<h3 id=\"składnia-funkcji-strzałkowej\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#składnia-funkcji-strzałkowej\">>>></a>Składnia funkcji strzałkowej</h3>\n<ul>\n<li>Szybszy zapis (szczególnie dla funkcji jedno-liniowych).</li>\n<li>Automatyczne wiązanie <code>this</code> do kontekstu, w którym funkcja została zadeklarowana.</li>\n<li>Brak własnego obiektu <code>arguments</code> oraz brak możliwości użycia jako konstruktor.</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dodaj</span> = (<span class=\"hljs-params\">a, b</span>) => a + b;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">powitanie</span> = (<span class=\"hljs-params\">imie</span>) => <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie}</span>!`</span>;\n</code></pre>\n<h3 id=\"funkcje-strzałkowe-a-kontekst-this\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-strzałkowe-a-kontekst-this\">>>></a>Funkcje strzałkowe a kontekst <code>this</code></h3>\n<p>Funkcje strzałkowe nie mają własnego <code>this</code>, przez co bardzo dobrze sprawdzają się w metodach, callbackach czy w obsłudze zdarzeń, gdzie chcemy korzystać z kontekstu obiektu nadrzędnego.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Timer</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sekundy</span> = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sekundy</span>++;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sekundy</span>);\n  }, <span class=\"hljs-number\">1000</span>);\n}\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Timer</span>(); <span class=\"hljs-comment\">// this.sekundy będzie poprawnie zwiększane</span>\n</code></pre>\n<hr>\n<h2 id=\"szablony-stringów-template-literals\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#szablony-stringów-template-literals\">>></a>Szablony stringów (Template Literals)</h2>\n<h3 id=\"interpolacja-i-wielolinijkowość\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#interpolacja-i-wielolinijkowość\">>>></a>Interpolacja i wielolinijkowość</h3>\n<p>Szablony stringów pozwalają na interpolację zmiennych i wyrażeń oraz łatwe tworzenie tekstów wielolinijkowych, co jest szczególnie przydatne np. przy generowaniu HTML-a lub komunikatów:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> imie = <span class=\"hljs-string\">\"Ola\"</span>;\n<span class=\"hljs-keyword\">const</span> wiek = <span class=\"hljs-number\">25</span>;\n<span class=\"hljs-keyword\">const</span> info = <span class=\"hljs-string\">`Mam na imię <span class=\"hljs-subst\">${imie}</span> i mam <span class=\"hljs-subst\">${wiek}</span> lat.`</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(info);\n\n<span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-string\">`\n&#x3C;div>\n  &#x3C;h1><span class=\"hljs-subst\">${imie}</span>&#x3C;/h1>\n  &#x3C;p>Wiek: <span class=\"hljs-subst\">${wiek}</span>&#x3C;/p>\n&#x3C;/div>\n`</span>;\n</code></pre>\n<h3 id=\"dodatkowe-możliwości\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dodatkowe-możliwości\">>>></a>Dodatkowe możliwości</h3>\n<p>Szablony stringów wspierają także tzw. tagowane szablony (<code>tagged templates</code>), które pozwalają na zaawansowaną manipulację tekstem (np. do tłumaczeń, walidacji, formatowania).</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">upper</span>(<span class=\"hljs-params\">strings, ...values</span>) {\n  <span class=\"hljs-keyword\">return</span> strings[<span class=\"hljs-number\">0</span>] + values.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> v.<span class=\"hljs-title function_\">toUpperCase</span>()).<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\"\"</span>);\n}\n<span class=\"hljs-keyword\">const</span> imie = <span class=\"hljs-string\">\"Ania\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(upper<span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie}</span>!`</span>); <span class=\"hljs-comment\">// Cześć, ANIA!</span>\n</code></pre>\n<hr>\n<h2 id=\"destrukturyzacja-tablic-i-obiektów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#destrukturyzacja-tablic-i-obiektów\">>></a>Destrukturyzacja tablic i obiektów</h2>\n<h3 id=\"destrukturyzacja-tablic\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#destrukturyzacja-tablic\">>>></a>Destrukturyzacja tablic</h3>\n<p>Pozwala na szybkie przypisanie wartości z tablicy do zmiennych:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> [pierwszy, drugi, trzeci = <span class=\"hljs-number\">0</span>] = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pierwszy, drugi, trzeci); <span class=\"hljs-comment\">// 10 20 0 (wartość domyślna)</span>\n</code></pre>\n<p>Można pomijać niektóre elementy lub korzystać z reszty:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> [a, , b, ...reszta] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a, b, reszta); <span class=\"hljs-comment\">// 1 3 [4, 5]</span>\n</code></pre>\n<h3 id=\"destrukturyzacja-obiektów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#destrukturyzacja-obiektów\">>>></a>Destrukturyzacja obiektów</h3>\n<p>Do zmiennych przypisywane są wartości na podstawie nazw kluczy:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> osoba = { <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span>, <span class=\"hljs-attr\">kraj</span>: <span class=\"hljs-string\">\"PL\"</span> };\n<span class=\"hljs-keyword\">const</span> { wiek, imie, miasto = <span class=\"hljs-string\">\"nieznane\"</span> } = osoba;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(imie, wiek, miasto); <span class=\"hljs-comment\">// Jan 30 nieznane</span>\n</code></pre>\n<p>Można zmieniać nazwy zmiennych:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">imie</span>: name, <span class=\"hljs-attr\">wiek</span>: age } = osoba;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name, age); <span class=\"hljs-comment\">// Jan 30</span>\n</code></pre>\n<hr>\n<h2 id=\"spread-i-rest-operator-\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spread-i-rest-operator-\">>></a>Spread i rest operator (<code>...</code>)</h2>\n<h3 id=\"spread-operator\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spread-operator\">>>></a>Spread operator</h3>\n<p>Pozwala na rozwinięcie (skopiowanie) elementów tablicy lub właściwości obiektu:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> tablica = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> nowaTablica = [...tablica, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]; <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span>\n\n<span class=\"hljs-keyword\">const</span> obiekt = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> };\n<span class=\"hljs-keyword\">const</span> nowyObiekt = { ...obiekt, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> }; <span class=\"hljs-comment\">// { a: 1, b: 2, c: 3 }</span>\n</code></pre>\n<h3 id=\"rest-operator\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#rest-operator\">>>></a>Rest operator</h3>\n<p>Pozwala na zbieranie wielu wartości w jedną tablicę (lub obiekt):</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">suma</span>(<span class=\"hljs-params\">...liczby</span>) {\n  <span class=\"hljs-keyword\">return</span> liczby.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a + b, <span class=\"hljs-number\">0</span>);\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">suma</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)); <span class=\"hljs-comment\">// 10</span>\n\n<span class=\"hljs-keyword\">const</span> { a, ...reszta } = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> };\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(reszta); <span class=\"hljs-comment\">// { b: 2, c: 3 }</span>\n</code></pre>\n<hr>\n<h2 id=\"promise-api-i-obsługa-asynchroniczności\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#promise-api-i-obsługa-asynchroniczności\">>></a>Promise API i obsługa asynchroniczności</h2>\n<h3 id=\"czym-jest-promise\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-promise\">>>></a>Czym jest Promise?</h3>\n<p>Promise reprezentuje operację asynchroniczną, która może zakończyć się sukcesem (<code>resolve</code>) lub błędem (<code>reject</code>). Stany: <em>pending</em> → <em>fulfilled</em> lub <em>rejected</em>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> obietnica = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> sukces = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() > <span class=\"hljs-number\">0.5</span>;\n    <span class=\"hljs-keyword\">if</span> (sukces) <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">\"Sukces!\"</span>);\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-string\">\"Błąd!\"</span>);\n  }, <span class=\"hljs-number\">1000</span>);\n});\n\nobietnica\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">wynik</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wynik))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">błąd</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(błąd))\n  .<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Gotowe!\"</span>));\n</code></pre>\n<h3 id=\"łańcuchy-promise\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#łańcuchy-promise\">>>></a>Łańcuchy Promise</h3>\n<p>Możesz łączyć wiele operacji asynchronicznych w łańcuch:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"https://jsonplaceholder.typicode.com/users/1\"</span>)\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> response.<span class=\"hljs-title function_\">json</span>())\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">user</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(user))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error));\n</code></pre>\n<hr>\n<h2 id=\"asyncawait--nowoczesna-obsługa-kodu-asynchronicznego\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#asyncawait--nowoczesna-obsługa-kodu-asynchronicznego\">>></a>Async/await – nowoczesna obsługa kodu asynchronicznego</h2>\n<h3 id=\"uproszczenie-pracy-z-promise\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#uproszczenie-pracy-z-promise\">>>></a>Uproszczenie pracy z Promise</h3>\n<p>Słowa kluczowe <code>async</code> i <code>await</code> pozwalają pisać kod asynchroniczny w stylu synchronicznym, co znacząco poprawia czytelność i obsługę błędów.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pobierzDane</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(\n      <span class=\"hljs-string\">\"https://jsonplaceholder.typicode.com/posts/1\"</span>\n    );\n    <span class=\"hljs-keyword\">const</span> post = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(post);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Błąd:\"</span>, error);\n  }\n}\n<span class=\"hljs-title function_\">pobierzDane</span>();\n</code></pre>\n<h3 id=\"zwracanie-wartości-i-obsługa-błędów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zwracanie-wartości-i-obsługa-błędów\">>>></a>Zwracanie wartości i obsługa błędów</h3>\n<p>Wartość zwrócona przez funkcję oznaczoną <code>async</code> jest automatycznie opakowana w Promise.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">zwrocLiczbe</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>;\n}\n<span class=\"hljs-title function_\">zwrocLiczbe</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(val)); <span class=\"hljs-comment\">// 42</span>\n</code></pre>\n<p>Obsługa błędów działa z użyciem standardowego <code>try...catch</code>.</p>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1\">>>></a>Zadanie 1</h3>\n<p>Napisz funkcję strzałkową, która przyjmuje dowolną liczbę argumentów i zwraca ich sumę.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">suma</span> = (<span class=\"hljs-params\">...args</span>) => args.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a + b, <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">suma</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// 6</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2\">>>></a>Zadanie 2</h3>\n<p>Utwórz obiekt reprezentujący użytkownika z kluczami: <code>imie</code>, <code>email</code>, <code>aktywny</code>. Następnie użyj destrukturyzacji, by wyodrębnić te wartości i wyświetlić je w konsoli.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> user = { <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Ewa\"</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"ewa@example.com\"</span>, <span class=\"hljs-attr\">aktywny</span>: <span class=\"hljs-literal\">true</span> };\n<span class=\"hljs-keyword\">const</span> { imie, email, aktywny } = user;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(imie, email, aktywny); <span class=\"hljs-comment\">// Ewa ewa@example.com true</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3\">>>></a>Zadanie 3</h3>\n<p>Stwórz tablicę imion, a następnie utwórz nową tablicę ze wszystkimi tymi imionami plus dodatkowym imieniem na końcu (wykorzystaj spread).</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> imiona = [<span class=\"hljs-string\">\"Anna\"</span>, <span class=\"hljs-string\">\"Bartek\"</span>];\n<span class=\"hljs-keyword\">const</span> wiecejImion = [...imiona, <span class=\"hljs-string\">\"Celina\"</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wiecejImion); <span class=\"hljs-comment\">// [\"Anna\", \"Bartek\", \"Celina\"]</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4\">>>></a>Zadanie 4</h3>\n<p>Napisz funkcję asynchroniczną, która symuluje pobieranie danych z serwera (z użyciem <code>setTimeout</code> i Promise) i po 2 sekundach wyświetla wynik.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">pobierzDane</span> = (<span class=\"hljs-params\"></span>) =>\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =></span> <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">\"Dane pobrane!\"</span>), <span class=\"hljs-number\">2000</span>));\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">asyncFunction</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Pobieram dane...\"</span>);\n  <span class=\"hljs-keyword\">const</span> dane = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">pobierzDane</span>();\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(dane);\n};\n\n<span class=\"hljs-title function_\">asyncFunction</span>();\n</code></pre>\n</details>\n<hr>\n<p>To tylko początek przygody z nowoczesnym JavaScriptem! Zachęcam do dalszego zgłębiania m.in. takich zagadnień jak: klasy ES6, moduły, funkcje wyższego rzędu, obsługa błędów, praca z API, a także frameworków opartych na JS (React, Vue, Svelte).</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/nowoczesny-javascript.md",{"_8":433,"_10":434,"_12":435,"_22":441,"_24":442,"_34":443,"_26":486,"_28":487,"_30":488,"_32":489},"Wprowadzenie do metodyki BEM","Czym jest BEM? BEM (Block, Element, Modifier) to metodyka nazewnictwa klas CSS, która pomaga tworzyć komponenty interfejsu użytkownika w sposób modularny i łatwy do utrzymania. BEM dzieli interfejs na bloki, elementy i modyfikatory, co pozwala na lepszą organizację kodu CSS.",[161,436,437,438,439,440,326,93],"css","bem","metodyka","metodyki","stylowanie",[95,436,326],["D",1719705600000],{"_8":444,"_99":445},"Quiz: Podstawy metodyki BEM",[446,454,462,470,478],{"_102":447,"_104":448,"_110":129,"_112":453},"<p>Co oznaczają skróty BEM w kontekście CSS?</p>",[449,450,451,452],"Basic, Element, Main","Block, Example, Method","Block, Element, Modifier","Base, Extension, Model","BEM to skrót od Block, Element, Modifier.",{"_102":455,"_104":456,"_110":138,"_112":461},"<p>Jaką klasę powinien mieć element będący częścią bloku 'menu' według BEM?</p>",[457,458,459,460],"menu__item","menu-item","item__menu","menu--item","Element w BEM zapisujemy jako blok__element, np. ```menu__item```.",{"_102":463,"_104":464,"_110":111,"_112":469},"<p>W jaki sposób w BEM zapisuje się modyfikator bloku 'button'?</p>",[465,466,467,468],"button__primary","button--primary","button-primary","button:primary","Modyfikator zapisujemy jako blok--modyfikator, np. button--primary.",{"_102":471,"_104":472,"_110":147,"_112":477},"<p>Które z poniższych NIE jest zgodne z zasadami BEM?</p>",[473,474,475,476],"form__input--active","form__group","form--login","form__input__label","form__input__label łamie zasadę: nie zagnieżdżamy elementów w elementach.",{"_102":479,"_104":480,"_110":129,"_112":485},"<p>Dlaczego warto stosować BEM?</p>",[481,482,483,484],"Bo wymusza używanie tylko jednego pliku CSS","Bo jest wymagane przez wszystkie przeglądarki","Bo ułatwia modularność i unikanie konfliktów nazw klas","Bo pozwala pisać CSS wyłącznie w JavaScript","BEM zwiększa modularność, czytelność i pomaga unikać konfliktów w nazwach klas.","4d4a1537-bc52-4a63-8d1b-ae7dd850d322","szybszy-css-czyli-wprowadzenie-do-bem","<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-bem\">Czym jest BEM?</a></li>\n<li><a href=\"#struktura-bem\">Struktura BEM</a>\n<ul>\n<li><a href=\"#blok\">Blok</a></li>\n<li><a href=\"#element\">Element</a></li>\n<li><a href=\"#modyfikator\">Modyfikator</a></li>\n</ul>\n</li>\n<li><a href=\"#przyk%C5%82ad\">Przykład kodu w BEM</a></li>\n<li><a href=\"#zasady-bem\">Zasady BEM</a></li>\n<li><a href=\"#przyk%C5%82ady\">Przykłady</a>\n<ul>\n<li><a href=\"#formularz-logowania\">Formularz logowania</a></li>\n</ul>\n</li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1\">Zadanie 1 – Karta produktu</a></li>\n<li><a href=\"#zadanie-2\">Zadanie 2 – Nawigacja</a></li>\n<li><a href=\"#zadanie-3\">Zadanie 3 – Artykuł</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-bem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-bem\">>></a>Czym jest BEM?</h2>\n<p><strong>BEM</strong> (ang. <em>Block, Element, Modifier</em>) to popularna metodyka nazewnictwa klas CSS, która ułatwia tworzenie modularnych, powtarzalnych i łatwych do utrzymania komponentów interfejsu użytkownika. Dzięki wyraźnemu podziałowi na bloki, elementy i modyfikatory, kod CSS staje się bardziej przewidywalny, przejrzysty oraz mniej podatny na konflikty stylów.</p>\n<p>Główne założenia BEM:</p>\n<ul>\n<li>Każdy komponent traktujemy jako niezależny blok (np. <code>button</code>, <code>form</code>).</li>\n<li>Blok może zawierać elementy, które nie mają sensu poza jego kontekstem (np. <code>button__icon</code>).</li>\n<li>Blok i element mogą przyjmować różne warianty dzięki modyfikatorom (np. <code>button--primary</code>, <code>button__icon--small</code>).</li>\n</ul>\n<hr>\n<h2 id=\"struktura-bem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#struktura-bem\">>></a>Struktura BEM</h2>\n<h3 id=\"blok\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#blok\">>>></a>Blok</h3>\n<p>Blok to główny, niezależny komponent interfejsu (np. przycisk, formularz, menu). Otrzymuje unikalną klasę bez dodatkowych znaków.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block\"</span>></span>Treść bloku<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<h3 id=\"element\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#element\">>>></a>Element</h3>\n<p>Element to część bloku, która nie istnieje samodzielnie. W nazwie klasy po nazwie bloku dodajemy podwójny podkreślnik <code>__</code> i nazwę elementu.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block__element\"</span>></span>Treść elementu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<h3 id=\"modyfikator\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#modyfikator\">>>></a>Modyfikator</h3>\n<p>Modyfikator określa wariant lub stan bloku albo elementu, np. kolor, rozmiar, aktywność. W nazwie klasy po bloku lub elemencie dodajemy podwójny myślnik <code>--</code> i nazwę modyfikatora.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block block--modifier\"</span>></span>Treść zmodyfikowanego bloku<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block__element block__element--modifier\"</span>></span>\n  Treść zmodyfikowanego elementu\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<hr>\n<h2 id=\"przykład\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykład\">>></a>Przykład</h2>\n<p>Komponent przycisku z elementem tekstowym i modyfikatorem:</p>\n<p><strong>HTML:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button button--primary\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button__text\"</span>></span>Kliknij mnie<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<p><strong>CSS:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.button</span> {\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">border</span>: none;\n  <span class=\"hljs-attribute\">cursor</span>: pointer;\n}\n\n<span class=\"hljs-selector-class\">.button--primary</span> {\n  <span class=\"hljs-attribute\">background-color</span>: blue;\n  <span class=\"hljs-attribute\">color</span>: white;\n}\n\n<span class=\"hljs-selector-class\">.button__text</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;\n}\n</code></pre>\n<hr>\n<h2 id=\"zasady-bem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zasady-bem\">>></a>Zasady BEM</h2>\n<ol>\n<li><strong>Nazwa bloku:</strong> Powinna być krótka, jednoznaczna i opisywać funkcję komponentu (np. <code>form</code>, <code>menu</code>, <code>header</code>).</li>\n<li><strong>Nazwa elementu:</strong> Opisuje część bloku w kontekście tego bloku (np. <code>form__input</code>, <code>menu__item</code>).</li>\n<li><strong>Nazwa modyfikatora:</strong> Informuje o dodatkowym stanie lub wariancie (np. <code>form--login</code>, <code>button--disabled</code>, <code>menu__item--active</code>).</li>\n<li><strong>Unikaj zagnieżdżania:</strong> Każdy element odnosi się zawsze do swojego bloku, nie do innych elementów.</li>\n<li><strong>Jasna struktura:</strong> Każdy komponent i jego warianty są łatwe do odnalezienia i przetestowania.</li>\n</ol>\n<hr>\n<h2 id=\"przykłady\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykłady\">>></a>Przykłady</h2>\n<h3 id=\"formularz-logowania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#formularz-logowania\">>>></a>Formularz logowania</h3>\n<p><strong>HTML:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form form--login\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form__group\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form__label\"</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"username\"</span>></span>Nazwa użytkownika<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form__input\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"username\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"username\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form__group\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form__label\"</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"password\"</span>></span>Hasło<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form__input\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"password\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form__button form__button--submit\"</span>></span>Zaloguj się<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n</code></pre>\n<p><strong>CSS:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.form</span> {\n  <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">300px</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n}\n\n<span class=\"hljs-selector-class\">.form--login</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f9f9f9</span>;\n}\n\n<span class=\"hljs-selector-class\">.form__group</span> {\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">15px</span>;\n}\n\n<span class=\"hljs-selector-class\">.form__label</span> {\n  <span class=\"hljs-attribute\">display</span>: block;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">5px</span>;\n  <span class=\"hljs-attribute\">font-weight</span>: bold;\n}\n\n<span class=\"hljs-selector-class\">.form__input</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">8px</span>;\n  <span class=\"hljs-attribute\">box-sizing</span>: border-box;\n}\n\n<span class=\"hljs-selector-class\">.form__button</span> {\n  <span class=\"hljs-attribute\">display</span>: inline-block;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">border</span>: none;\n  <span class=\"hljs-attribute\">cursor</span>: pointer;\n}\n\n<span class=\"hljs-selector-class\">.form__button--submit</span> {\n  <span class=\"hljs-attribute\">background-color</span>: blue;\n  <span class=\"hljs-attribute\">color</span>: white;\n}\n</code></pre>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1--karta-produktu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1--karta-produktu\">>>></a>Zadanie 1 – Karta produktu</h3>\n<p>Utwórz komponent karty produktu (<code>product-card</code>) z elementami dla tytułu (<code>product-card__title</code>), opisu (<code>product-card__description</code>) i ceny (<code>product-card__price</code>). Dodaj modyfikator dla karty wyróżnionej (<code>product-card--featured</code>).</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<p><strong>HTML:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product-card product-card--featured\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product-card__title\"</span>></span>Nazwa produktu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product-card__description\"</span>></span>Opis produktu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product-card__price\"</span>></span>99,99 zł<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<p><strong>CSS:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.product-card</span> {\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">15px</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n}\n\n<span class=\"hljs-selector-class\">.product-card--featured</span> {\n  <span class=\"hljs-attribute\">border-color</span>: gold;\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fffbf0</span>;\n}\n\n<span class=\"hljs-selector-class\">.product-card__title</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">18px</span>;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">10px</span>;\n}\n\n<span class=\"hljs-selector-class\">.product-card__description</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">15px</span>;\n}\n\n<span class=\"hljs-selector-class\">.product-card__price</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;\n  <span class=\"hljs-attribute\">font-weight</span>: bold;\n}\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2--nawigacja\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2--nawigacja\">>>></a>Zadanie 2 – Nawigacja</h3>\n<p>Stwórz nawigację (<code>nav</code>) z elementami dla pozycji nawigacji (<code>nav__item</code>) i linków (<code>nav__link</code>). Dodaj modyfikator dla aktywnego linku (<code>nav__link--active</code>).</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<p><strong>HTML:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav__item\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav__link nav__link--active\"</span>></span>Home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav__item\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav__link\"</span>></span>O nas<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav__item\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav__link\"</span>></span>Kontakt<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n</code></pre>\n<p><strong>CSS:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.nav</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#333</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n}\n\n<span class=\"hljs-selector-class\">.nav__item</span> {\n  <span class=\"hljs-attribute\">display</span>: inline;\n  <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">15px</span>;\n}\n\n<span class=\"hljs-selector-class\">.nav__link</span> {\n  <span class=\"hljs-attribute\">color</span>: white;\n  <span class=\"hljs-attribute\">text-decoration</span>: none;\n}\n\n<span class=\"hljs-selector-class\">.nav__link--active</span> {\n  <span class=\"hljs-attribute\">font-weight</span>: bold;\n  <span class=\"hljs-attribute\">text-decoration</span>: underline;\n}\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3--artykuł\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3--artykuł\">>>></a>Zadanie 3 – Artykuł</h3>\n<p>Utwórz sekcję artykułu (<code>article</code>) z elementami dla nagłówka (<code>article__header</code>), treści (<code>article__content</code>) i stopki (<code>article__footer</code>). Dodaj modyfikator dla nagłówka z obrazkiem (<code>article__header--with-image</code>).</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<p><strong>HTML:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"article\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"article__header article__header--with-image\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Tytuł artykułu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"image.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Obrazek w nagłówku\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"article__content\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Treść artykułu...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"article__footer\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Stopka artykułu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n</code></pre>\n<p><strong>CSS:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.article</span> {\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n}\n\n<span class=\"hljs-selector-class\">.article__header</span> {\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">15px</span>;\n}\n\n<span class=\"hljs-selector-class\">.article__header--with-image</span> <span class=\"hljs-selector-tag\">img</span> {\n  <span class=\"hljs-attribute\">display</span>: block;\n  <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">height</span>: auto;\n}\n\n<span class=\"hljs-selector-class\">.article__content</span> {\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">15px</span>;\n}\n\n<span class=\"hljs-selector-class\">.article__footer</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#777</span>;\n}\n</code></pre>\n</details>\n<hr>\n<p>To wszystko na temat podstaw metodyki BEM! Zachęcam do dalszego eksperymentowania, stosowania BEM w praktyce i pogłębiania wiedzy, aby tworzyć modularne, skalowalne i łatwe do utrzymania arkusze stylów CSS.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/szybszy-css-czyli-wprowadzenie-do-bem.md",{"_8":491,"_10":492,"_12":493,"_22":494,"_24":495,"_34":496,"_26":539,"_28":540,"_30":541,"_32":542},"Wprowadzenie do CSS","CSS (Cascading Style Sheets) to język służący do opisywania wyglądu i formatu dokumentu HTML. CSS pozwala na oddzielenie treści od prezentacji, co umożliwia tworzenie estetycznych i spójnych stron internetowych. W tym kursie omówimy podstawy CSS, w tym selektory, właściwości, sposoby załączania CSS do HTML oraz JavaScript, a także przedstawimy kilka zadań do wykonania.",[436,326,161,95,382,383,18,93],[95,436],["D",1719705600000],{"_8":497,"_99":498},"Quiz: Podstawy CSS",[499,507,515,523,531],{"_102":500,"_104":501,"_110":129,"_112":506},"<p>Co oznacza skrót CSS?</p>",[502,503,504,505],"Creative Style Syntax","Coded Style System","Cascading Style Sheets","Cascaded Sheet System","CSS to Cascading Style Sheets, czyli kaskadowe arkusze stylów.",{"_102":508,"_104":509,"_110":147,"_112":514},"<p>Który sposób załączania stylów CSS do strony jest najbardziej zalecany dla większych projektów?</p>",[510,511,512,513],"Inline CSS","Internal CSS","JavaScript","External CSS (zewnętrzny plik .css)","External CSS pozwala na lepszą organizację i ponowne wykorzystanie stylów.",{"_102":516,"_104":517,"_110":138,"_112":522},"<p>Jak wygląda selektor klasy w CSS?</p>",[518,519,520,521],".nazwa-klasy","#nazwa-klasy","nazwa-klasy","*nazwa-klasy","Selektor klasy zapisujemy z kropką, np. .header.",{"_102":524,"_104":525,"_110":129,"_112":530},"<p>Jak ustawić kolor tła elementu na żółty?</p>",[526,527,528,529],"color: yellow;","background: yellow-text;","background-color: yellow;","border-color: yellow;","Do ustawienia koloru tła służy background-color.",{"_102":532,"_104":533,"_110":111,"_112":538},"<p>Za co odpowiada właściwość 'border-radius'?</p>",[534,535,536,537],"Zmiana koloru ramki","Zaokrąglenie rogów elementu","Zmiana rozmiaru czcionki","Ustawienie tła obrazkowego","border-radius pozwala na zaokrąglenie rogów elementu.","be1510d9-0c51-49e1-b034-3399b9e68ef3","wprowadzenie-do-css","<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-css\">Czym jest CSS?</a></li>\n<li><a href=\"#sposoby-za%C5%82%C4%85czania-css-do-html\">Sposoby załączania CSS do HTML</a>\n<ul>\n<li><a href=\"#inline-css\">Inline CSS</a></li>\n<li><a href=\"#internal-css\">Internal CSS</a></li>\n<li><a href=\"#external-css\">External CSS</a></li>\n</ul>\n</li>\n<li><a href=\"#podstawowe-selektory-css\">Podstawowe selektory CSS</a>\n<ul>\n<li><a href=\"#selektory-elementow\">Selektory elementów</a></li>\n<li><a href=\"#selektory-klas\">Selektory klas</a></li>\n<li><a href=\"#selektory-identyfikatorow\">Selektory identyfikatorów</a></li>\n</ul>\n</li>\n<li><a href=\"#podstawowe-wlasciwosci-css\">Podstawowe właściwości CSS</a>\n<ul>\n<li><a href=\"#kolory\">Kolory</a></li>\n<li><a href=\"#tlo\">Tło</a></li>\n<li><a href=\"#marginesy-i-wypelnienia\">Marginesy i wypełnienia</a></li>\n<li><a href=\"#ramki\">Ramki</a></li>\n</ul>\n</li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1\">Zadanie 1</a></li>\n<li><a href=\"#zadanie-2\">Zadanie 2</a></li>\n<li><a href=\"#zadanie-3\">Zadanie 3</a></li>\n<li><a href=\"#zadanie-4\">Zadanie 4</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-css\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-css\">>></a>Czym jest CSS?</h2>\n<p><strong>CSS</strong> (Cascading Style Sheets, Kaskadowe Arkusze Stylów) to język służący do opisywania wyglądu i formatu dokumentu HTML. Dzięki CSS możesz oddzielić strukturę strony (HTML) od jej prezentacji (wyglądu i stylu). Pozwala to tworzyć estetyczne, przejrzyste i łatwe do utrzymania strony internetowe. CSS umożliwia m.in. definiowanie kolorów, czcionek, układów, odstępów, ramek, tła czy efektów specjalnych.</p>\n<hr>\n<h2 id=\"sposoby-załączania-css-do-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#sposoby-załączania-css-do-html\">>></a>Sposoby załączania CSS do HTML</h2>\n<h3 id=\"inline-css\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#inline-css\">>>></a>Inline CSS</h3>\n<p>Stylowanie pojedynczych elementów bezpośrednio w atrybucie <code>style</code> w kodzie HTML.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Inline CSS<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: blue;\"</span>></span>Witaj, świecie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><em>Stosuj wyłącznie do bardzo prostych i pojedynczych przypadków.</em></p>\n<h3 id=\"internal-css\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#internal-css\">>>></a>Internal CSS</h3>\n<p>Umieszczanie stylów wewnątrz dokumentu HTML, w sekcji <code>&#x3C;head></code>, za pomocą tagu <code>&#x3C;style></code>.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Internal CSS<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n      <span class=\"hljs-selector-tag\">h1</span> {\n        <span class=\"hljs-attribute\">color</span>: blue;\n      }\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Witaj, świecie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><em>Dobre do małych stron lub prototypów.</em></p>\n<h3 id=\"external-css\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#external-css\">>>></a>External CSS</h3>\n<p>Tworzenie osobnego pliku <code>.css</code> i dołączanie go do strony za pomocą tagu <code>&#x3C;link></code>. To najbardziej zalecana metoda.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!-- index.html --></span>\n<span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>External CSS<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Witaj, świecie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* style.css */</span>\n<span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: blue;\n}\n</code></pre>\n<p><em>Umożliwia łatwą aktualizację stylów i ponowne ich wykorzystanie na wielu stronach.</em></p>\n<hr>\n<h2 id=\"podstawowe-selektory-css\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-selektory-css\">>></a>Podstawowe selektory CSS</h2>\n<h3 id=\"selektory-elementów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#selektory-elementów\">>>></a>Selektory elementów</h3>\n<p>Najprostszy selektor – wybiera wszystkie elementy danego typu (np. wszystkie nagłówki <code>&#x3C;h1></code>).</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: blue;\n}\n</code></pre>\n<h3 id=\"selektory-klas\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#selektory-klas\">>>></a>Selektory klas</h3>\n<p>Selektor, który styluje elementy z określoną klasą. Klas można używać wielokrotnie na różnych elementach.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"naglowek\"</span>></span>Witaj, świecie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.naglowek</span> {\n  <span class=\"hljs-attribute\">color</span>: blue;\n}\n</code></pre>\n<h3 id=\"selektory-identyfikatorów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#selektory-identyfikatorów\">>>></a>Selektory identyfikatorów</h3>\n<p>Selektor, który styluje element z unikalnym identyfikatorem (<code>id</code>).</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"naglowek-glowny\"</span>></span>Witaj, świecie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-id\">#naglowek-glowny</span> {\n  <span class=\"hljs-attribute\">color</span>: blue;\n}\n</code></pre>\n<p><em>Identyfikator (<code>id</code>) powinien być unikalny na stronie.</em></p>\n<hr>\n<h2 id=\"podstawowe-właściwości-css\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-właściwości-css\">>></a>Podstawowe właściwości CSS</h2>\n<h3 id=\"kolory\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#kolory\">>>></a>Kolory</h3>\n<p>Definiowanie kolorów może odbywać się na kilka sposobów: nazwy, wartości szesnastkowe, RGB, czy HSL.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: red; <span class=\"hljs-comment\">/* Nazwa koloru */</span>\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#ff0000</span>; <span class=\"hljs-comment\">/* Wartość szesnastkowa */</span>\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">/* RGB */</span>\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">hsl</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100%</span>, <span class=\"hljs-number\">50%</span>); <span class=\"hljs-comment\">/* HSL */</span>\n}\n</code></pre>\n<h3 id=\"tło\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tło\">>>></a>Tło</h3>\n<p>Możesz ustawić kolor tła, obrazek, powtarzanie, pozycję i rozmiar.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background-color</span>: lightgray; <span class=\"hljs-comment\">/* Kolor tła */</span>\n  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">\"tlo.jpg\"</span>); <span class=\"hljs-comment\">/* Obrazek tła */</span>\n  <span class=\"hljs-attribute\">background-repeat</span>: no-repeat; <span class=\"hljs-comment\">/* Brak powtarzania obrazka */</span>\n  <span class=\"hljs-attribute\">background-position</span>: center; <span class=\"hljs-comment\">/* Pozycja obrazka */</span>\n  <span class=\"hljs-attribute\">background-size</span>: cover; <span class=\"hljs-comment\">/* Rozmiar obrazka */</span>\n}\n</code></pre>\n<h3 id=\"marginesy-i-wypełnienia\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#marginesy-i-wypełnienia\">>>></a>Marginesy i wypełnienia</h3>\n<p>Marginesy (<code>margin</code>) określają odstęp na zewnątrz elementu, a wypełnienia (<code>padding</code>) – wewnątrz.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">p</span> {\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">20px</span>; <span class=\"hljs-comment\">/* Odstęp na zewnątrz */</span>\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-comment\">/* Odstęp wewnątrz */</span>\n}\n</code></pre>\n<h3 id=\"ramki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#ramki\">>>></a>Ramki</h3>\n<p>Dzięki właściwościom ramek możesz dodać obramowanie oraz zaokrąglić jego rogi.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid black; <span class=\"hljs-comment\">/* Obramowanie */</span>\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-comment\">/* Zaokrąglone rogi */</span>\n}\n</code></pre>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1\">>>></a>Zadanie 1</h3>\n<p>Stwórz stronę HTML z elementem <code>&#x3C;h1></code>, który ma kolor czerwony przy użyciu External CSS.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!-- index.html --></span>\n<span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red\"</span>></span>Witaj, świecie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* style.css */</span>\n<span class=\"hljs-selector-class\">.red</span> {\n  <span class=\"hljs-attribute\">color</span>: red;\n}\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2\">>>></a>Zadanie 2</h3>\n<p>Utwórz paragraf (<code>&#x3C;p></code>), który ma zielone tło, 20 pikseli wypełnienia i zaokrąglone rogi o promieniu 10 pikseli.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!-- index.html --></span>\n<span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"green-bg\"</span>></span>To jest paragraf<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* style.css */</span>\n<span class=\"hljs-selector-class\">.green-bg</span> {\n  <span class=\"hljs-attribute\">background-color</span>: green;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">10px</span>;\n}\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3\">>>></a>Zadanie 3</h3>\n<p>Stwórz div, który ma niebieską ramkę o grubości 2 pikseli, a wewnątrz niego umieść tekst \"To jest div\".</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!-- index.html --></span>\n<span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blue-border\"</span>></span>To jest div<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* style.css */</span>\n<span class=\"hljs-selector-class\">.blue-border</span> {\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">2px</span> solid blue;\n}\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4\">>>></a>Zadanie 4</h3>\n<p>Utwórz stronę HTML z trzema nagłówkami (<code>&#x3C;h1></code>, <code>&#x3C;h2></code>, <code>&#x3C;h3></code>) o różnych kolorach za pomocą selektorów klas.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!-- index.html --></span>\n<span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 4<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red\"</span>></span>Nagłówek 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blue\"</span>></span>Nagłówek 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"green\"</span>></span>Nagłówek 3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* style.css */</span>\n<span class=\"hljs-selector-class\">.red</span> {\n  <span class=\"hljs-attribute\">color</span>: red;\n}\n\n<span class=\"hljs-selector-class\">.blue</span> {\n  <span class=\"hljs-attribute\">color</span>: blue;\n}\n\n<span class=\"hljs-selector-class\">.green</span> {\n  <span class=\"hljs-attribute\">color</span>: green;\n}\n</code></pre>\n</details>\n<hr>\n<p>To tyle na temat podstaw CSS! Zachęcam do dalszego eksperymentowania i zgłębiania tego tematu, aby tworzyć coraz bardziej zaawansowane i estetyczne strony internetowe.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-css.md",{"_8":544,"_10":545,"_12":546,"_22":549,"_24":550,"_34":551,"_26":594,"_28":595,"_30":596,"_32":597},"Czym jest DOM?","Czym jest DOM? DOM (Document Object Model) to interfejs programistyczny dla dokumentów HTML i XML. Umożliwia dynamiczne manipulowanie strukturą, stylem i treścią dokumentów. DOM reprezentuje dokument jako drzewo obiektów, gdzie każdy element, atrybut i tekst w dokumencie jest węzłem drzewa.",[161,326,547,548,95,93],"dom","struktura",[95,326],["D",1719705600000],{"_8":552,"_99":553},"Quiz: Podstawy DOM",[554,562,570,578,586],{"_102":555,"_104":556,"_110":147,"_112":561},"<p>Co oznacza skrót DOM w kontekście stron internetowych?</p>",[557,558,559,560],"Data Oriented Module","Document Option Method","Dynamic Output Mapper","Document Object Model","DOM to Document Object Model – model obiektowy dokumentu HTML lub XML.",{"_102":563,"_104":564,"_110":138,"_112":569},"<p>Jaką strukturę prezentuje DOM?</p>",[565,566,567,568],"Drzewiastą (hierarchiczną)","Tablicową","Listową","Płaską","DOM przedstawia dokument jako drzewo obiektów (węzłów).",{"_102":571,"_104":572,"_110":138,"_112":577},"<p>Która metoda pozwala pobrać element o określonym identyfikatorze?</p>",[573,574,575,576],"document.getElementById","document.querySelectorAll","document.getElementsByClassName","document.createElement","document.getElementById pobiera element o podanym id.",{"_102":579,"_104":580,"_110":129,"_112":585},"<p>Jak za pomocą DOM dodać nowy element do listy <code>ul</code>?</p>",[581,582,583,584],"Użyć innerHTML na ul","Zmienić atrybut src","Utworzyć element przez createElement i dołączyć przez appendChild","Użyć metody getElementsByTagName","Tworzymy element createElement i dołączamy przez appendChild.",{"_102":587,"_104":588,"_110":111,"_112":593},"<p>Co umożliwia metoda <code>querySelectorAll?</code></p>",[589,590,591,592],"Zmianę tekstu elementu","Wybór wielu elementów za pomocą selektora CSS","Usunięcie elementu","Zmianę atrybutu id","querySelectorAll wybiera wszystkie pasujące elementy zgodnie z selektorem CSS.","1d71b0b3-c03a-409a-9459-af7f09caf04b","wprowadzenie-do-dom","<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#wprowadzenie\">Wprowadzenie</a></li>\n<li><a href=\"#struktura-dom\">Struktura DOM</a></li>\n<li><a href=\"#podstawowe-operacje-na-dom\">Podstawowe operacje na DOM</a>\n<ul>\n<li><a href=\"#wybieranie-elementow\">Wybieranie elementów</a></li>\n<li><a href=\"#manipulacja-elementami\">Manipulacja elementami</a></li>\n</ul>\n</li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1\">Zadanie 1</a></li>\n<li><a href=\"#zadanie-2\">Zadanie 2</a></li>\n<li><a href=\"#zadanie-3\">Zadanie 3</a></li>\n<li><a href=\"#zadanie-4\">Zadanie 4</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"wprowadzenie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wprowadzenie\">>></a>Wprowadzenie</h2>\n<p><strong>DOM</strong> (Document Object Model) to interfejs programistyczny, który pozwala na dynamiczne manipulowanie strukturą, stylem i treścią dokumentów HTML oraz XML. DOM przedstawia dokument jako drzewo obiektów, gdzie każdy element, atrybut czy fragment tekstu jest węzłem. Dzięki temu możemy programistycznie odczytywać, modyfikować, dodawać i usuwać dowolne fragmenty dokumentu w czasie rzeczywistym za pomocą JavaScript.</p>\n<hr>\n<h2 id=\"struktura-dom\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#struktura-dom\">>></a>Struktura DOM</h2>\n<p>DOM reprezentuje dokument HTML jako strukturę drzewiastą, gdzie każdy element jest węzłem połączonym z innymi w hierarchii rodzic-dziecko.</p>\n<p>Przykładowy dokument HTML:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Przykład DOM<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Witaj, świecie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>To jest akapit.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p>W DOM taki dokument zostanie odwzorowany jako:</p>\n<pre><code>#document\n   |\n   +-- html\n        |\n        +-- head\n        |     |\n        |     +-- title\n        |            |\n        |            +-- \"Przykład DOM\"\n        |\n        +-- body\n              |\n              +-- h1\n              |     |\n              |     +-- \"Witaj, świecie!\"\n              |\n              +-- p\n                    |\n                    +-- \"To jest akapit.\"\n</code></pre>\n<hr>\n<h2 id=\"podstawowe-operacje-na-dom\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-operacje-na-dom\">>></a>Podstawowe operacje na DOM</h2>\n<p>DOM udostępnia wiele metod do pobierania, modyfikowania i usuwania elementów. Oto najczęściej używane:</p>\n<h3 id=\"wybieranie-elementów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wybieranie-elementów\">>>></a>Wybieranie elementów</h3>\n<h4 id=\"getelementbyid\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#getelementbyid\">>>>></a><code>getElementById</code></h4>\n<p>Pozwala pobrać element o konkretnym atrybucie <code>id</code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myParagraph\"</span>></span>To jest akapit.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> para = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"myParagraph\"</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(para.<span class=\"hljs-property\">textContent</span>); <span class=\"hljs-comment\">// \"To jest akapit.\"</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h4 id=\"getelementsbyclassname\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#getelementsbyclassname\">>>>></a><code>getElementsByClassName</code></h4>\n<p>Zwraca kolekcję wszystkich elementów z określoną klasą:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"myClass\"</span>></span>Akapit 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"myClass\"</span>></span>Akapit 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> paras = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByClassName</span>(<span class=\"hljs-string\">\"myClass\"</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(paras.<span class=\"hljs-property\">length</span>); <span class=\"hljs-comment\">// 2</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h4 id=\"queryselector-i-queryselectorall\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#queryselector-i-queryselectorall\">>>>></a><code>querySelector</code> i <code>querySelectorAll</code></h4>\n<p>Umożliwiają wybieranie elementów za pomocą selektorów CSS:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"myClass\"</span>></span>Akapit 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"myClass\"</span>></span>Akapit 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> firstPara = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\".myClass\"</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(firstPara.<span class=\"hljs-property\">textContent</span>); <span class=\"hljs-comment\">// \"Akapit 1\"</span>\n\n  <span class=\"hljs-keyword\">const</span> allParas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">\".myClass\"</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allParas.<span class=\"hljs-property\">length</span>); <span class=\"hljs-comment\">// 2</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<hr>\n<h3 id=\"manipulacja-elementami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#manipulacja-elementami\">>>></a>Manipulacja elementami</h3>\n<h4 id=\"zmiana-tekstu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zmiana-tekstu\">>>>></a>Zmiana tekstu</h4>\n<p>Zmiana tekstu wewnątrz elementu:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myParagraph\"</span>></span>To jest akapit.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> para = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"myParagraph\"</span>);\n  para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">\"Zmieniony tekst akapitu.\"</span>;\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h4 id=\"zmiana-atrybutów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zmiana-atrybutów\">>>>></a>Zmiana atrybutów</h4>\n<p>Zmiana dowolnych atrybutów HTML (np. obrazka):</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myImage\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"image.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Obrazek\"</span> /></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> img = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"myImage\"</span>);\n  img.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">\"newImage.jpg\"</span>;\n  img.<span class=\"hljs-property\">alt</span> = <span class=\"hljs-string\">\"Nowy obrazek\"</span>;\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h4 id=\"dodawanie-elementów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dodawanie-elementów\">>>>></a>Dodawanie elementów</h4>\n<p>Tworzenie i dodawanie nowych elementów do strony:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myList\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Element 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"myList\"</span>);\n  <span class=\"hljs-keyword\">const</span> newItem = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"li\"</span>);\n  newItem.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">\"Element 2\"</span>;\n  list.<span class=\"hljs-title function_\">appendChild</span>(newItem);\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h4 id=\"usuwanie-elementów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#usuwanie-elementów\">>>>></a>Usuwanie elementów</h4>\n<p>Usuwanie elementu z drzewa DOM:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myParagraph\"</span>></span>To jest akapit.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> para = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"myParagraph\"</span>);\n  para.<span class=\"hljs-title function_\">remove</span>();\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1\">>>></a>Zadanie 1</h3>\n<p>Stwórz stronę HTML z listą (<code>ul</code>) i trzema elementami (<code>li</code>). Następnie za pomocą JavaScript dodaj czwarty element do listy.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Lista<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myList\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Element 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Element 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Element 3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"myList\"</span>);\n      <span class=\"hljs-keyword\">const</span> newItem = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"li\"</span>);\n      newItem.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">\"Element 4\"</span>;\n      list.<span class=\"hljs-title function_\">appendChild</span>(newItem);\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2\">>>></a>Zadanie 2</h3>\n<p>Utwórz formularz z polem tekstowym i przyciskiem. Po kliknięciu przycisku zmień tekst przycisku na \"Wysłano\".</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Formularz<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myForm\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myInput\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myButton\"</span>></span>Wyślij<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"myButton\"</span>);\n      button.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\">() =></span> {\n        button.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">\"Wysłano\"</span>;\n      });\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3\">>>></a>Zadanie 3</h3>\n<p>Napisz kod HTML z obrazkiem. Za pomocą JavaScript zmień źródło obrazka na nowe po kliknięciu na niego.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Obrazek<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myImage\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"image.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Obrazek\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">const</span> img = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"myImage\"</span>);\n      img.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\">() =></span> {\n        img.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">\"newImage.jpg\"</span>;\n      });\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4\">>>></a>Zadanie 4</h3>\n<p>Utwórz stronę HTML z trzema akapitami. Użyj JavaScript, aby zmienić kolor tekstu wszystkich akapitów na niebieski.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Kolor tekstu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Akapit 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Akapit 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Akapit 3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">const</span> paragraphs = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">\"p\"</span>);\n      paragraphs.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =></span> {\n        p.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">\"blue\"</span>;\n      });\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<p>To tyle na temat podstaw DOM! Zachęcam do dalszego eksperymentowania, praktycznego wykorzystywania JavaScript do manipulacji DOM oraz zgłębiania bardziej zaawansowanych możliwości tej technologii.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-dom.md",{"_8":599,"_10":600,"_12":601,"_22":602,"_24":603,"_34":604,"_26":646,"_28":647,"_30":648,"_32":649},"Wprowadzenie do HTML","Co to jest HTML? HTML (HyperText Markup Language) to podstawowy język wykorzystywany do tworzenia i strukturyzowania stron internetowych. HTML używa elementów, które definiują różne części dokumentu, takie jak nagłówki, akapity, linki, obrazy, i wiele innych.",[161,326,547,548,95,93],[95,326],["D",1719705600000],{"_8":605,"_99":606},"Quiz: Podstawy HTML",[607,615,623,631,638],{"_102":608,"_104":609,"_110":129,"_112":614},"<p>Co oznacza skrót HTML?</p>",[610,611,612,613],"Home Tool Markup Language","Hyperlink Text Management Language","HyperText Markup Language","HyperTool Marked Language","HTML to HyperText Markup Language – język znaczników hipertekstowych.",{"_102":616,"_104":617,"_110":111,"_112":622},"<p>Który znacznik służy do tworzenia akapitu?</p>",[618,619,620,621],"<h1>","<p>","<a>","<li>","<p> służy do oznaczania akapitów tekstu.",{"_102":624,"_104":625,"_110":138,"_112":630},"<p>Jak poprawnie dodać obrazek do strony?</p>",[626,627,628,629],"<img src=\"obrazek.jpg\" alt=\"Opis\" />","<image src=\"obrazek.jpg\">","<picture href=\"obrazek.jpg\">","<src img=\"obrazek.jpg\">","Poprawny sposób to <img src=\"adres\" alt=\"opis\" />.",{"_102":632,"_104":633,"_110":147,"_112":637},"<p>Który element tworzy nieuporządkowaną listę?</p>",[634,621,635,636],"<ol>","<dl>","<ul>","<ul> to lista nieuporządkowana, <ol> – uporządkowana.",{"_102":639,"_104":640,"_110":111,"_112":645},"<p>Za co odpowiada atrybut 'action' w tagu <code>&#x3C;form></code>?</p>",[641,642,643,644],"Włącza walidację formularza","Określa adres, pod który zostaną przesłane dane formularza","Definiuje typ przesyłanych danych","Dodaje pole tekstowe","Atrybut action określa adres, pod który zostaną wysłane dane formularza.","0e77e2df-462d-42ea-bf6f-49380b6abe3c","wprowadzenie-do-html","<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#co-to-jest-html\">Co to jest HTML?</a></li>\n<li><a href=\"#podstawowa-struktura-dokumentu-html\">Podstawowa struktura dokumentu HTML</a>\n<ul>\n<li><a href=\"#wyjasnienie-struktury\">Wyjaśnienie struktury</a></li>\n</ul>\n</li>\n<li><a href=\"#podstawowe-elementy-html\">Podstawowe elementy HTML</a>\n<ul>\n<li><a href=\"#naglowki\">Nagłówki</a></li>\n<li><a href=\"#akapity\">Akapity</a></li>\n<li><a href=\"#linki\">Linki</a></li>\n<li><a href=\"#obrazy\">Obrazy</a></li>\n<li><a href=\"#listy\">Listy</a></li>\n</ul>\n</li>\n<li><a href=\"#formulare\">Formularze</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1\">Zadanie 1</a></li>\n<li><a href=\"#zadanie-2\">Zadanie 2</a></li>\n<li><a href=\"#zadanie-3\">Zadanie 3</a></li>\n<li><a href=\"#zadanie-4\">Zadanie 4</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"co-to-jest-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-html\">>></a>Co to jest HTML?</h2>\n<p><strong>HTML</strong> (HyperText Markup Language) to podstawowy język wykorzystywany do tworzenia i strukturyzowania stron internetowych. Pozwala oznaczać nagłówki, akapity, listy, obrazy, linki i wiele innych elementów. Dzięki niemu przeglądarka wie, jak wyświetlić i zinterpretować treść strony.</p>\n<hr>\n<h2 id=\"podstawowa-struktura-dokumentu-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowa-struktura-dokumentu-html\">>></a>Podstawowa struktura dokumentu HTML</h2>\n<p>Każdy dokument HTML posiada określoną strukturę i kilka kluczowych sekcji:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Tytuł strony<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Witaj, świecie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>To jest przykładowa strona HTML.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h3 id=\"wyjaśnienie-struktury\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wyjaśnienie-struktury\">>>></a>Wyjaśnienie struktury</h3>\n<ul>\n<li><code>&#x3C;!DOCTYPE html></code> – Deklaracja typu dokumentu, sygnalizuje przeglądarce użycie HTML5.</li>\n<li><code>&#x3C;html></code> – Korzeń dokumentu HTML, obejmuje całą zawartość strony.</li>\n<li><code>&#x3C;head></code> – Sekcja z informacjami o stronie (meta dane, tytuł, ustawienia kodowania).</li>\n<li><code>&#x3C;meta charset=\"UTF-8\"></code> – Określa kodowanie znaków na UTF-8 (umożliwia użycie polskich znaków).</li>\n<li><code>&#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></code> – Umożliwia responsywność na urządzeniach mobilnych.</li>\n<li><code>&#x3C;title></code> – Tytuł strony wyświetlany na karcie przeglądarki.</li>\n<li><code>&#x3C;body></code> – Zawiera właściwą treść strony widoczną dla użytkownika.</li>\n</ul>\n<hr>\n<h2 id=\"podstawowe-elementy-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-elementy-html\">>></a>Podstawowe elementy HTML</h2>\n<h3 id=\"nagłówki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#nagłówki\">>>></a>Nagłówki</h3>\n<p>Sześć poziomów nagłówków – od najważniejszego <code>&#x3C;h1></code>, do najmniej ważnego <code>&#x3C;h6></code>. Używaj ich do hierarchizacji treści.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Najważniejszy nagłówek<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Drugi poziom nagłówka<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Trzeci poziom nagłówka<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n</code></pre>\n<h3 id=\"akapity\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#akapity\">>>></a>Akapity</h3>\n<p>Akapity tekstu oznacza się elementem <code>&#x3C;p></code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>To jest akapit tekstu.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n</code></pre>\n<h3 id=\"linki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#linki\">>>></a>Linki</h3>\n<p>Tworzenie odnośników do innych stron lub zasobów za pomocą <code>&#x3C;a href=\"...\"></code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://www.example.com\"</span>></span>Kliknij tutaj, aby przejść do Example<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n</code></pre>\n<h3 id=\"obrazy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#obrazy\">>>></a>Obrazy</h3>\n<p>Wstawianie obrazów za pomocą <code>&#x3C;img></code>, z atrybutami <code>src</code> (adres obrazka) i <code>alt</code> (opis alternatywny):</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"obrazek.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Opis obrazka\"</span> /></span>\n</code></pre>\n<h3 id=\"listy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#listy\">>>></a>Listy</h3>\n<p>Tworzenie list nieuporządkowanych <code>&#x3C;ul></code> i uporządkowanych <code>&#x3C;ol></code>, z elementami <code>&#x3C;li></code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Element listy 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Element listy 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Element listy 3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ol</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Element listy 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Element listy 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Element listy 3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ol</span>></span>\n</code></pre>\n<hr>\n<h2 id=\"formularze\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#formularze\">>></a>Formularze</h2>\n<p>Formularze umożliwiają zbieranie danych od użytkowników. Składają się z różnych pól wejściowych (input), przycisków i etykiet.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"/submit-form\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"name\"</span>></span>Nazwa:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Wyślij\"</span> /></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n</code></pre>\n<ul>\n<li><code>action</code> – adres, pod który zostaną wysłane dane formularza.</li>\n<li><code>method</code> – metoda wysyłki (zazwyczaj <code>post</code> lub <code>get</code>).</li>\n<li><code>&#x3C;label></code> – etykieta powiązana z polem formularza.</li>\n<li><code>&#x3C;input type=\"text\"></code> – pole tekstowe.</li>\n<li><code>&#x3C;input type=\"submit\"></code> – przycisk wysyłający dane.</li>\n</ul>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1\">>>></a>Zadanie 1</h3>\n<p>Utwórz stronę HTML, która zawiera:</p>\n<ul>\n<li>Nagłówek <code>&#x3C;h1></code> z tytułem \"Moja pierwsza strona\".</li>\n<li>Akapit z krótkim opisem.</li>\n<li>Link do dowolnej strony internetowej.</li>\n</ul>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Moja pierwsza strona<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Moja pierwsza strona<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>To jest krótki opis mojej pierwszej strony internetowej.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://www.example.com\"</span>></span>Kliknij tutaj, aby przejść do Example<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2\">>>></a>Zadanie 2</h3>\n<p>Utwórz stronę HTML, która zawiera:</p>\n<ul>\n<li>Obrazek z atrybutem <code>src</code> wskazującym na dowolny obrazek z internetu.</li>\n<li>Alternatywny tekst opisujący obrazek.</li>\n</ul>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Strona z obrazkiem<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://via.placeholder.com/150\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Przykładowy obrazek\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3\">>>></a>Zadanie 3</h3>\n<p>Utwórz stronę HTML, która zawiera:</p>\n<ul>\n<li>Listę nieuporządkowaną z trzema ulubionymi potrawami.</li>\n<li>Listę uporządkowaną z trzema krokami do ugotowania jednego z tych potraw.</li>\n</ul>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Lista potraw<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Moje ulubione potrawy<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Pizza<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Sushi<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Spaghetti<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Jak ugotować spaghetti<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ol</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Ugotuj makaron.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Przygotuj sos pomidorowy.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Wymieszaj makaron z sosem.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ol</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4\">>>></a>Zadanie 4</h3>\n<p>Utwórz formularz HTML, który zawiera:</p>\n<ul>\n<li>Pole tekstowe do wprowadzenia imienia.</li>\n<li>Pole typu radio do wyboru płci.</li>\n<li>Pole typu checkbox do zaznaczenia zgody na przetwarzanie danych.</li>\n<li>Przycisk do wysłania formularza.</li>\n</ul>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Formularz<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"/submit-form\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"name\"</span>></span>Imię:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span> /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>Płeć:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"radio\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"male\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"gender\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"male\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"male\"</span>></span>Mężczyzna<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"radio\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"female\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"gender\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"female\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"female\"</span>></span>Kobieta<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"consent\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"consent\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"consent\"</span>></span>Zgadzam się na przetwarzanie danych osobowych&#x3C;/label\n      ><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Wyślij\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<p>To wszystko na temat podstaw HTML! Zachęcam do dalszego eksperymentowania, poznawania nowych elementów i tworzenia coraz bardziej złożonych oraz interaktywnych stron internetowych.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-html.md",{"_8":651,"_10":652,"_12":653,"_22":654,"_24":655,"_34":656,"_26":697,"_28":698,"_30":699,"_32":700},"Wprowadzenie do JavaScript","JavaScript jest językiem programowania, który jest powszechnie stosowany do tworzenia dynamicznych i interaktywnych stron internetowych. W tym kursie omówimy podstawy JavaScript, w tym zmienne, typy danych, operatory, struktury kontrolne, funkcje oraz obiekty.",[16,161,95,382,383,18,93],[95,16],["D",1719705600000],{"_8":657,"_99":658},"Quiz: Podstawy JavaScript",[659,667,675,683,691],{"_102":660,"_104":661,"_110":129,"_112":666},"<p>Które słowo kluczowe powinieneś użyć do zadeklarowania stałej wartości w JavaScript?</p>",[662,663,664,665],"let","var","const","static","Stałe deklarujemy za pomocą const.",{"_102":668,"_104":669,"_110":129,"_112":674},"<p>Jakie typy danych NIE występują w JavaScript?</p>",[670,671,672,673],"Number","String","Character","Boolean","Typ 'Character' nie istnieje w JavaScript.",{"_102":676,"_104":677,"_110":138,"_112":682},"<p>Jak wygląda przykładowa funkcja strzałkowa, która zwraca sumę dwóch liczb?</p>",[678,679,680,681],"const suma = (a, b) => a + b;","function suma(a, b) { return a + b; }","let suma = add(a, b);","sum(a, b) => a + b;","Funkcja strzałkowa: const suma = (a, b) => a + b;",{"_102":684,"_104":685,"_110":138,"_112":690},"<p>Jak uzyskać długość tablicy w JavaScript?</p>",[686,687,688,689],"array.length","length(array)","array.size()","array.count","array.length zwraca długość tablicy.",{"_102":692,"_104":693,"_110":147,"_112":696},"<p>Co wypisze poniższy kod?</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">if</span> (x > <span class=\"hljs-number\">5</span>) { <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'OK'</span>); } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'NIE'</span>); }\n</code></pre>",[694,203,424,695],"NIE","OK","Ponieważ 10 > 5, warunek jest prawdziwy i wypisze 'OK'.","21e9f7c2-cb9f-40c6-b78f-a6ef5ecfed39","wprowadzenie-do-javascript","<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-javascript\">Czym jest JavaScript?</a></li>\n<li><a href=\"#zmienne\">Zmienne</a></li>\n<li><a href=\"#typy-danych\">Typy danych</a></li>\n<li><a href=\"#operatory\">Operatory</a></li>\n<li><a href=\"#struktury-kontrolne\">Struktury kontrolne</a>\n<ul>\n<li><a href=\"#instrukcja-if\">Instrukcja if</a></li>\n<li><a href=\"#petla-for\">Pętla for</a></li>\n<li><a href=\"#petla-while\">Pętla while</a></li>\n</ul>\n</li>\n<li><a href=\"#funkcje\">Funkcje</a>\n<ul>\n<li><a href=\"#deklaracja-funkcji\">Deklaracja funkcji</a></li>\n<li><a href=\"#funkcje-strzalkowe\">Funkcje strzałkowe</a></li>\n</ul>\n</li>\n<li><a href=\"#obiekty\">Obiekty</a></li>\n<li><a href=\"#tablice\">Tablice</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1\">Zadanie 1</a></li>\n<li><a href=\"#zadanie-2\">Zadanie 2</a></li>\n<li><a href=\"#zadanie-3\">Zadanie 3</a></li>\n<li><a href=\"#zadanie-4\">Zadanie 4</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-javascript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-javascript\">>></a>Czym jest JavaScript?</h2>\n<p><strong>JavaScript</strong> to język programowania, który umożliwia tworzenie dynamicznych i interaktywnych stron internetowych. Jest wykorzystywany zarówno po stronie klienta (w przeglądarce), jak i na serwerze (np. z użyciem Node.js). JavaScript pozwala na reagowanie na akcje użytkownika, manipulowanie elementami HTML, obsługę zdarzeń, walidację formularzy i wiele innych operacji.</p>\n<hr>\n<h2 id=\"zmienne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zmienne\">>></a>Zmienne</h2>\n<p>Zmienne służą do przechowywania danych w programie. W JavaScript zmienne można deklarować za pomocą <code>var</code>, <code>let</code> lub <code>const</code>:</p>\n<ul>\n<li><code>var</code> – starsza forma, o zasięgu funkcyjnym.</li>\n<li><code>let</code> – zalecana do zmiennych, których wartość się zmienia (zasięg blokowy).</li>\n<li><code>const</code> – do stałych, których wartość nie ulega zmianie.</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Zmienna var</span>\n<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">// Zmienna let</span>\n<span class=\"hljs-keyword\">const</span> z = <span class=\"hljs-number\">15</span>; <span class=\"hljs-comment\">// Stała const</span>\n</code></pre>\n<hr>\n<h2 id=\"typy-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typy-danych\">>></a>Typy danych</h2>\n<p>JavaScript obsługuje różne typy danych:</p>\n<ul>\n<li><strong>Number</strong> (liczby): całkowite i zmiennoprzecinkowe</li>\n<li><strong>String</strong> (łańcuchy znaków)</li>\n<li><strong>Boolean</strong> (wartości logiczne: true/false)</li>\n<li><strong>Object</strong> (obiekty)</li>\n<li><strong>Array</strong> (tablice)</li>\n<li><strong>Undefined</strong>, <strong>Null</strong></li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> liczba = <span class=\"hljs-number\">42</span>; <span class=\"hljs-comment\">// Number</span>\n<span class=\"hljs-keyword\">let</span> tekst = <span class=\"hljs-string\">\"Hello, World!\"</span>; <span class=\"hljs-comment\">// String</span>\n<span class=\"hljs-keyword\">let</span> prawda = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Boolean</span>\n<span class=\"hljs-keyword\">let</span> obiekt = { <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span> }; <span class=\"hljs-comment\">// Object</span>\n<span class=\"hljs-keyword\">let</span> tablica = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]; <span class=\"hljs-comment\">// Array</span>\n</code></pre>\n<hr>\n<h2 id=\"operatory\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#operatory\">>></a>Operatory</h2>\n<p>Operatory służą do wykonywania działań na danych.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Arytmetyczne</span>\n<span class=\"hljs-keyword\">let</span> suma = <span class=\"hljs-number\">10</span> + <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">let</span> roznica = <span class=\"hljs-number\">10</span> - <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">let</span> iloczyn = <span class=\"hljs-number\">10</span> * <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">let</span> iloraz = <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">5</span>;\n\n<span class=\"hljs-comment\">// Porównania</span>\n<span class=\"hljs-keyword\">let</span> rowne = <span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">// Porównanie wartości</span>\n<span class=\"hljs-keyword\">let</span> identyczne = <span class=\"hljs-number\">10</span> === <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">// Porównanie wartości i typu</span>\n<span class=\"hljs-keyword\">let</span> nierowne = <span class=\"hljs-number\">10</span> != <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Nierówność</span>\n\n<span class=\"hljs-comment\">// Logiczne</span>\n<span class=\"hljs-keyword\">let</span> iOperator = <span class=\"hljs-literal\">true</span> &#x26;&#x26; <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// AND</span>\n<span class=\"hljs-keyword\">let</span> lubOperator = <span class=\"hljs-literal\">true</span> || <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// OR</span>\n<span class=\"hljs-keyword\">let</span> nieOperator = !<span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// NOT</span>\n\n<span class=\"hljs-comment\">// Przypisania</span>\n<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">10</span>;\na += <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Dodanie i przypisanie</span>\na -= <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Odejmowanie i przypisanie</span>\n</code></pre>\n<hr>\n<h2 id=\"struktury-kontrolne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#struktury-kontrolne\">>></a>Struktury kontrolne</h2>\n<h3 id=\"instrukcja-if\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#instrukcja-if\">>>></a>Instrukcja if</h3>\n<p>Pozwala wykonywać kod warunkowo.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> wiek = <span class=\"hljs-number\">18</span>;\n\n<span class=\"hljs-keyword\">if</span> (wiek >= <span class=\"hljs-number\">18</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Jesteś pełnoletni\"</span>);\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Jesteś niepełnoletni\"</span>);\n}\n</code></pre>\n<h3 id=\"pętla-for\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pętla-for\">>>></a>Pętla for</h3>\n<p>Wielokrotne wykonywanie fragmentu kodu.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">5</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i);\n}\n</code></pre>\n<h3 id=\"pętla-while\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pętla-while\">>>></a>Pętla while</h3>\n<p>Wykonuje kod dopóki warunek jest prawdziwy.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-keyword\">while</span> (i &#x3C; <span class=\"hljs-number\">5</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i);\n  i++;\n}\n</code></pre>\n<hr>\n<h2 id=\"funkcje\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje\">>></a>Funkcje</h2>\n<p>Funkcje umożliwiają grupowanie kodu do wielokrotnego użycia.</p>\n<h3 id=\"deklaracja-funkcji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#deklaracja-funkcji\">>>></a>Deklaracja funkcji</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n\n<span class=\"hljs-keyword\">let</span> wynik = <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wynik); <span class=\"hljs-comment\">// 15</span>\n</code></pre>\n<h3 id=\"funkcje-strzałkowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-strzałkowe\">>>></a>Funkcje strzałkowe</h3>\n<p>Skrócony zapis funkcji.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dodaj</span> = (<span class=\"hljs-params\">a, b</span>) => a + b;\n<span class=\"hljs-keyword\">let</span> wynik = <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wynik); <span class=\"hljs-comment\">// 15</span>\n</code></pre>\n<hr>\n<h2 id=\"obiekty\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#obiekty\">>></a>Obiekty</h2>\n<p>Obiekty służą do grupowania powiązanych danych i funkcji.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> osoba = {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>,\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span>,\n  <span class=\"hljs-attr\">przedstawSie</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, mam na imię <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.imie}</span> i mam <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.wiek}</span> lat.`</span>;\n  },\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(osoba.<span class=\"hljs-title function_\">przedstawSie</span>()); <span class=\"hljs-comment\">// Cześć, mam na imię Jan i mam 30 lat.</span>\n</code></pre>\n<hr>\n<h2 id=\"tablice\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tablice\">>></a>Tablice</h2>\n<p>Tablice przechowują listę wartości.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> liczby = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby[<span class=\"hljs-number\">0</span>]); <span class=\"hljs-comment\">// 1</span>\n\nliczby.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// Dodanie elementu na końcu</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6]</span>\n\nliczby.<span class=\"hljs-title function_\">pop</span>(); <span class=\"hljs-comment\">// Usunięcie ostatniego elementu</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<h3 id=\"zadanie-1\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1\">>>></a>Zadanie 1</h3>\n<p>Napisz funkcję, która przyjmuje dwie liczby jako argumenty i zwraca ich iloczyn.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">iloczyn</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a * b;\n}\n\n<span class=\"hljs-keyword\">let</span> wynik = <span class=\"hljs-title function_\">iloczyn</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wynik); <span class=\"hljs-comment\">// 50</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2\">>>></a>Zadanie 2</h3>\n<p>Utwórz obiekt reprezentujący książkę z atrybutami <code>tytul</code>, <code>autor</code> i <code>rok</code>. Dodaj metodę, która zwraca opis książki.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> ksiazka = {\n  <span class=\"hljs-attr\">tytul</span>: <span class=\"hljs-string\">\"W pustyni i w puszczy\"</span>,\n  <span class=\"hljs-attr\">autor</span>: <span class=\"hljs-string\">\"Henryk Sienkiewicz\"</span>,\n  <span class=\"hljs-attr\">rok</span>: <span class=\"hljs-number\">1911</span>,\n  <span class=\"hljs-attr\">opis</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.tytul}</span> to książka napisana przez <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.autor}</span> w roku <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.rok}</span>.`</span>;\n  },\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ksiazka.<span class=\"hljs-title function_\">opis</span>()); <span class=\"hljs-comment\">// W pustyni i w puszczy to książka napisana przez Henryk Sienkiewicz w roku 1911.</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3\">>>></a>Zadanie 3</h3>\n<p>Napisz funkcję, która przyjmuje tablicę liczb i zwraca największą liczbę z tej tablicy.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">znajdzNajwieksza</span>(<span class=\"hljs-params\">tablica</span>) {\n  <span class=\"hljs-keyword\">let</span> najwieksza = tablica[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &#x3C; tablica.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (tablica[i] > najwieksza) {\n      najwieksza = tablica[i];\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> najwieksza;\n}\n\n<span class=\"hljs-keyword\">let</span> liczby = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">znajdzNajwieksza</span>(liczby)); <span class=\"hljs-comment\">// 5</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4\">>>></a>Zadanie 4</h3>\n<p>Utwórz tablicę z kilkoma imionami. Następnie za pomocą pętli <code>for</code> wyświetl każde imię w konsoli.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> imiona = [<span class=\"hljs-string\">\"Jan\"</span>, <span class=\"hljs-string\">\"Anna\"</span>, <span class=\"hljs-string\">\"Krzysztof\"</span>, <span class=\"hljs-string\">\"Maria\"</span>];\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; imiona.<span class=\"hljs-property\">length</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(imiona[i]);\n}\n<span class=\"hljs-comment\">// Jan</span>\n<span class=\"hljs-comment\">// Anna</span>\n<span class=\"hljs-comment\">// Krzysztof</span>\n<span class=\"hljs-comment\">// Maria</span>\n</code></pre>\n</details>\n<hr>\n<p>To wszystko na temat podstaw JavaScript! Zachęcam do dalszego eksperymentowania, tworzenia własnych funkcji, obiektów i aplikacji oraz zgłębiania bardziej zaawansowanych tematów języka JavaScript.</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-javascript.md","projects",[703,722,733,747,759],{"_8":704,"_10":705,"_12":706,"_713":714,"_24":715,"_716":717,"_26":718,"_28":719,"_30":720,"_32":721,"_34":-7},"👥 Team Support","Aplikacja usprawniająca pracę zespołu. Pozwala na zarządzanie zespołami i użytkownikami, monitorowanie zadaniami i przypisywanie ich do konkretnych osób bądź podzespołów.",[17,707,708,39,709,710,711,712],"e-commerce","projekt","react-router","auth","crud","portfolio","technologies",[17,39,709],["D",1742601600000],"status","IN_PROGRESS","6c79a938-ec24-45c0-b2b4-96d9d417b203","team-support","","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/projects/team-support.md",{"_8":723,"_10":724,"_12":725,"_713":728,"_24":729,"_716":717,"_26":730,"_28":731,"_30":720,"_32":732,"_34":-7},"🩺 E-Przychodnia","Aplikacja typu e-commerce mająca na celu ułatwienie korzystania z dobrodziejstw służby zdrowia. All-in-one, znajdziesz tutaj możliwość umawiania wizyt, wyszukiwania najbliższych placówek zdrowia, podgląd skierowań i recept i wiele innych opcji.",[17,707,708,726,727,711,712],"angular","nestjs",[17,726,727],["D",1740787200000],"e775515c-9862-4bb4-92c8-4192970e1a26","e-przychodnia","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/projects/e-przychodnia.md",{"_8":734,"_10":735,"_12":736,"_713":741,"_24":742,"_716":743,"_26":744,"_28":745,"_30":720,"_32":746,"_34":-7},"🔑 Password Generator","Aplikacja do generowania hasła, wedle podanych wytycznych.",[17,737,738,739,740,712],"aplikacja","hasło","password","generowanie",[17],["D",1740787200000],"COMPLETED","12d8c9ec-65ff-4ba3-bb1f-dbe8f08f7074","password-generator","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/projects/password-generator.md",{"_8":748,"_10":749,"_12":750,"_713":755,"_24":756,"_716":743,"_26":757,"_28":752,"_30":720,"_32":758,"_34":-7},"🪨 Rock-Paper-Scissors","Prosta gra każdemu dobrze znana, czyli papier-kamień-nożyce. Gra wykonana za pomocą React Native",[17,751,752,753,754,712],"gra","rock-paper-scissors","mobile","react-native",[17,754],["D",1740787200000],"2345011b-a4d3-4205-a135-ca430efb1644","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/projects/rock-paper-scissors.md",{"_8":760,"_10":761,"_12":762,"_713":764,"_24":765,"_716":743,"_26":766,"_28":767,"_30":720,"_32":768,"_34":-7},"Strona, na której się znajdujesz 😉","Strona, gdzie znajdziesz blog z artykułami, głównie o tematyce frontendowej, sekcję z kursami, dzięki którym nabędziesz wiedzę i doświadczenie z frontu, jak i portfolio, które przywita Cię moimi ostatnimi projektami.",[17,39,709,21,712,763,93,712],"kursy",[17,39,709],["D",1712880000000],"f1dbe5b7-7531-4a31-b291-9997f2d0e950","jakubszpil.github.io","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/projects/jakubszpil.github.io.md"]
