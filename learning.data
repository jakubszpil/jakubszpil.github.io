[{"_1":2},"course-list",{"_3":4},"data",{"_5":-7,"_6":7,"_18":19},"category","categories",[8,9,10,11,12,13,14,15,16,17],"bazy-danych","html","javascript","typescript","sql","react","css","terminal","wzorce-projektowe","git","courses",[20,101,164,226,289,348,406,465,522,619,738,794,843,906,961,1013,1070,1122,1176],{"_21":22,"_23":24,"_25":26,"_6":35,"_36":37,"_38":39,"_91":92,"_93":94,"_95":96,"_97":98,"_99":100},"title","Wprowadzenie do Reacta","description","React to popularna biblioteka JavaScript do budowania interfejsów użytkownika. Pozwala na tworzenie złożonych aplikacji webowych z komponentów, co ułatwia zarządzanie stanem i renderowanie widoków. Naucz się podstaw Reacta i zacznij tworzyć dynamiczne aplikacje!","keywords",[13,10,27,28,29,30,31,32,33,34],"biblioteka","frontend","komponenty","ui","jsx","hooks","vite","learning",[13,10],"createdAt","2025-07-12T00:00:00.000Z","quiz",{"_21":40,"_41":42},"Quiz: Podstawy Reacta","questions",[43,56,64,73,82],{"_44":45,"_46":47,"_52":53,"_54":55},"question","<p>Czym jest React?</p>","options",[48,49,50,51],"Językiem programowania","Bazą danych","Frameworkiem do budowania backendu","Biblioteką JavaScript do tworzenia interfejsów użytkownika","answer",3,"explanation","React to biblioteka JavaScript skupiająca się na warstwie widoku (interfejsu użytkownika).",{"_44":57,"_46":58,"_52":53,"_54":63},"<p>Co to jest JSX?</p>",[59,60,61,62],"Nowy język programowania","Funkcja do zarządzania stanem w React","Menedżer pakietów dla Reacta","Rozszerzenie składni JavaScript, które pozwala pisać kod podobny do HTML w JavaScripcie","JSX to składniowe rozszerzenie JavaScriptu, ułatwiające pisanie elementów UI.",{"_44":65,"_46":66,"_52":71,"_54":72},"<p>Który z poniższych nie jest metodą cyklu życia komponentu klasowego w React (do React 16.8)?</p>",[67,68,69,70],"useEffect","componentWillUnmount","render","componentDidMount",0,"`useEffect` to Hook używany w komponentach funkcyjnych do zarządzania efektami pobocznymi, nie jest metodą cyklu życia komponentów klasowych.",{"_44":74,"_46":75,"_52":80,"_54":81},"<p>Co to jest komponent w React?</p>",[76,77,78,79],"Plik CSS","Niezależna, wielokrotnego użytku część interfejsu użytkownika","Funkcja do pobierania danych z serwera","Baza danych aplikacji",1,"Komponent to podstawowy budulec aplikacji React, reprezentujący kawałek UI i jego logikę.",{"_44":83,"_46":84,"_52":89,"_54":90},"<p>Do czego służą 'propsy' w React?</p>",[85,86,87,88],"Do stylowania komponentów","Do definiowania routingu w aplikacji","Do przekazywania danych z komponentu nadrzędnego do podrzędnego","Do zmieniania stanu komponentu",2,"Propsy (properties) służą do przekazywania danych z komponentu-rodzica do komponentu-dziecka, jednokierunkowo.","id","f625b04b-9d3a-491f-b585-3617fd15dddd","slug","wprowadzenie-do-react","content","<p>Witaj w świecie <strong>Reacta</strong>! 🚀 Jeśli chcesz tworzyć dynamiczne i interaktywne interfejsy użytkownika, to właśnie znalazłeś/aś odpowiednie narzędzie. React to potężna biblioteka JavaScript, która zmienia podejście do budowania aplikacji webowych, koncentrując się na komponentach – niezależnych, wielokrotnego użytku elementach Twojego interfejsu. Gotowy/a, by zanurzyć się w świat deklaratywnego UI i wirtualnego DOM? Zaczynajmy! ✨</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-react\">Czym jest React?</a></li>\n<li><a href=\"#dlaczego-react-g%C5%82%C3%B3wne-zalety\">Dlaczego React? Główne zalety</a></li>\n<li><a href=\"#podstawowe-poj%C4%99cia-w-react\">Podstawowe pojęcia w React</a>\n<ul>\n<li><a href=\"#komponenty-serce-reacta\">Komponenty: Serce Reacta</a></li>\n<li><a href=\"#jsx-javascript--xmlhtml\">JSX: JavaScript + XML/HTML</a></li>\n<li><a href=\"#propsy-properties-przekazywanie-danych\">Propsy (Properties): Przekazywanie danych</a></li>\n<li><a href=\"#stan-state-zarz%C4%85dzanie-danymi-wewn%C4%99trznymi\">Stan (State): Zarządzanie danymi wewnętrznymi</a></li>\n<li><a href=\"#wirtualny-dom-wydajne-aktualizacje\">Wirtualny DOM: Wydajne aktualizacje</a></li>\n</ul>\n</li>\n<li><a href=\"#tworzenie-pierwszej-aplikacji-react-z-vite\">Tworzenie pierwszej aplikacji React z Vite</a>\n<ul>\n<li><a href=\"#dlaczego-vite\">Dlaczego Vite?</a></li>\n<li><a href=\"#inicjalizacja-projektu\">Inicjalizacja projektu</a></li>\n<li><a href=\"#struktura-projektu\">Struktura projektu</a></li>\n</ul>\n</li>\n<li><a href=\"#komponenty-funkcyjne-i-hooki-hooks\">Komponenty funkcyjne i Hooki (Hooks)</a>\n<ul>\n<li><a href=\"#usestate\"><code>useState</code></a></li>\n<li><a href=\"#useeffect\"><code>useEffect</code></a></li>\n</ul>\n</li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1-komponent-powitania\">Zadanie 1: Komponent Powitania</a></li>\n<li><a href=\"#zadanie-2-licznik-z-przyciskiem\">Zadanie 2: Licznik z przyciskiem</a></li>\n<li><a href=\"#zadanie-3-lista-element%C3%B3w\">Zadanie 3: Lista elementów</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-react\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-react\">>></a>Czym jest React?</h2>\n<p><strong>React</strong> (często nazywany też React.js lub ReactJS) to popularna, otwarta biblioteka JavaScript do <strong>budowania interfejsów użytkownika (UI)</strong>, stworzona i utrzymywana przez Meta (dawniej Facebook). ⚛️ Nie jest to pełnoprawny framework, jak np. Angular, ale skupia się wyłącznie na warstwie widoku w aplikacjach webowych i mobilnych (React Native).</p>\n<p>Jego główną filozofią jest tworzenie interfejsów z małych, <strong>niezależnych i wielokrotnego użytku części</strong>, zwanych <strong>komponentami</strong>. Dzięki temu, budowanie złożonych aplikacji staje się bardziej uporządkowane, modułowe i łatwiejsze w zarządzaniu. React stał się standardem w branży front-endu, wykorzystywanym przez tysiące firm na całym świecie, od małych startupów po gigantów technologicznych.</p>\n<hr>\n<h2 id=\"dlaczego-react-główne-zalety\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-react-główne-zalety\">>></a>Dlaczego React? Główne zalety</h2>\n<p>React zyskał ogromną popularność dzięki wielu korzyściom, które oferuje deweloperom:</p>\n<ol>\n<li><strong>Komponentowa architektura:</strong> Wszystko w React to komponent! 🧱 Dzięki temu możesz dzielić interfejs na małe, izolowane kawałki, które łatwo testować, rozwijać i ponownie wykorzystywać w różnych częściach aplikacji. To promuje podejście \"buduj raz, używaj wszędzie\".</li>\n<li><strong>Deklaratywne podejście:</strong> W React opisujesz, jak powinien wyglądać interfejs w danym stanie, a React zajmuje się resztą. Nie musisz martwić się o kroki manipulacji DOM (Document Object Model) – React zrobi to za Ciebie. To sprawia, że kod jest bardziej przewidywalny i łatwiejszy do debugowania.</li>\n<li><strong>Wydajność dzięki Wirtualnemu DOM:</strong> React używa <strong>Wirtualnego DOM</strong>, czyli lekkiej kopii prawdziwego DOM w pamięci. Kiedy stan aplikacji się zmienia, React najpierw aktualizuje Wirtualny DOM, porównuje go z poprzednim stanem i dopiero wtedy efektywnie aktualizuje tylko te fragmenty prawdziwego DOM, które faktycznie się zmieniły. To minimalizuje kosztowne operacje na DOM i sprawia, że aplikacje są szybkie. ⚡️</li>\n<li><strong>Jednokierunkowy przepływ danych:</strong> Dane w React płyną z góry na dół (od komponentów nadrzędnych do podrzędnych) poprzez tzw. <strong>propsy</strong>. To upraszcza debugowanie i zarządzanie stanem aplikacji, czyniąc ją bardziej przewidywalną.</li>\n<li><strong>Duża społeczność i ekosystem:</strong> React ma ogromną i aktywną społeczność deweloperów. Znajdziesz mnóstwo tutoriali, narzędzi, bibliotek pomocniczych (np. do routingu, zarządzania stanem) i wsparcia. To oznacza, że prawdopodobnie znajdziesz rozwiązanie na każdy problem, jaki napotkasz. 🤝</li>\n<li><strong>JSX:</strong> Specjalna składnia, która pozwala pisać kod przypominający HTML bezpośrednio w plikach JavaScript. Chociaż na początku może wydawać się dziwna, bardzo ułatwia wizualizację, jak dany komponent będzie wyglądał w przeglądarce.</li>\n</ol>\n<hr>\n<h2 id=\"podstawowe-pojęcia-w-react\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-pojęcia-w-react\">>></a>Podstawowe pojęcia w React</h2>\n<p>Zanim zaczniemy pisać kod, poznajmy kluczowe terminy i koncepcje, które stanowią fundament Reacta.</p>\n<h3 id=\"komponenty-serce-reacta\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#komponenty-serce-reacta\">>>></a>Komponenty: Serce Reacta</h3>\n<p>Jak już wspomnieliśmy, <strong>komponenty</strong> są podstawowymi budulcami każdej aplikacji React. Myśl o nich jak o niezależnych, wielokrotnego użytku elementach interfejsu, które mają swoją własną logikę i wygląd. Mogą to być proste elementy, takie jak przycisk czy pole tekstowe, albo bardziej złożone, jak pasek nawigacyjny czy cały formularz logowania.</p>\n<p>W tym wprowadzeniu skupimy się na <strong>komponentach funkcyjnych</strong>, ponieważ są one obecnie standardem i wykorzystują <strong>Hooki</strong>, o których dowiemy się więcej za chwilę.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// Przykład prostego komponentu funkcyjnego</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Welcome</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Komponent funkcyjny, który zwraca JSX</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Welcome to React! 👋<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}\n</code></pre>\n<p>Ten komponent <code>Welcome</code> renderuje prosty nagłówek <code>&#x3C;h1></code>.</p>\n<h3 id=\"jsx-javascript--xmlhtml\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jsx-javascript--xmlhtml\">>>></a>JSX: JavaScript + XML/HTML</h3>\n<p><strong>JSX</strong> (JavaScript XML) to rozszerzenie składni JavaScriptu, które pozwala nam pisać kod przypominający HTML bezpośrednio w plikach JavaScript. To może być mylące na początku, ponieważ miesza logikę JavaScript z deklaracjami UI, ale ma to na celu ułatwienie tworzenia komponentów.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> element = <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, world!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>; <span class=\"hljs-comment\">// To jest JSX</span>\n</code></pre>\n<p><strong>Ważne:</strong> Przeglądarki nie rozumieją JSX. Jest on transpilowany (przetłumaczony) na standardowy JavaScript przez narzędzia takie jak Babel, zanim kod zostanie uruchomiony w przeglądarce. JSX jest konwertowany na wywołania funkcji <code>createElement</code> (z pakietu <code>react</code>).</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// Ten JSX:</span>\n<span class=\"hljs-keyword\">const</span> element = <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, world!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n\n<span class=\"hljs-comment\">// jest transpilowany do (uproszczone):</span>\n<span class=\"hljs-keyword\">const</span> element = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"h1\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"Hello, world!\"</span>);\n</code></pre>\n<p>Dzięki JSX kod jest bardziej intuicyjny i przypomina strukturę, którą widzimy w przeglądarce. ✨</p>\n<h3 id=\"propsy-properties-przekazywanie-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#propsy-properties-przekazywanie-danych\">>>></a>Propsy (Properties): Przekazywanie danych</h3>\n<p><strong>Propsy</strong> (skrót od \"properties\") to sposób na przekazywanie danych z komponentu nadrzędnego (rodzica) do komponentu podrzędnego (dziecka). Działają one podobnie do atrybutów HTML i są <strong>tylko do odczytu</strong> – komponent podrzędny nie powinien modyfikować swoich propsów. To zapewnia jednokierunkowy przepływ danych, co ułatwia zarządzanie stanem aplikacji.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Welcome</span>(<span class=\"hljs-params\">props</span>) {\n  <span class=\"hljs-comment\">// Komponent funkcyjny przyjmuje obiekt props jako argument</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, {props.name}! 👋<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Alice\"</span> /></span> {/* Przekazujemy props 'name' */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Bob\"</span> /></span> {/* Kolejne użycie z innym propsem */}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n<span class=\"hljs-comment\">// Renderowanie komponentu App spowoduje wyświetlenie:</span>\n<span class=\"hljs-comment\">// &#x3C;h1>Hello, Alice!&#x3C;/h1></span>\n<span class=\"hljs-comment\">// &#x3C;h1>Hello, Bob!&#x3C;/h1></span>\n</code></pre>\n<h3 id=\"stan-state-zarządzanie-danymi-wewnętrznymi\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#stan-state-zarządzanie-danymi-wewnętrznymi\">>>></a>Stan (State): Zarządzanie danymi wewnętrznymi</h3>\n<p>Podczas gdy propsy służą do przekazywania danych z zewnątrz, <strong>stan (state)</strong> służy do zarządzania danymi, które są <strong>wewnętrzne</strong> dla komponentu i mogą się zmieniać w czasie. Kiedy stan komponentu się zmienia, React automatycznie ponownie renderuje ten komponent, aby odzwierciedlić nowe dane.</p>\n<p>W komponentach funkcyjnych stan zarządzany jest za pomocą <strong>Hooków</strong>, w szczególności <code>useState</code>.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>; <span class=\"hljs-comment\">// Importujemy Hook useState</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Deklaracja stanu 'count' z początkową wartością 0</span>\n  <span class=\"hljs-comment\">// 'count' to bieżąca wartość, 'setCount' to funkcja do jej aktualizacji</span>\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">setCount</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> prev + <span class=\"hljs-number\">1</span>);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">decrement</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">setCount</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> prev - <span class=\"hljs-number\">1</span>);\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Count: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      {/* Zwiększamy licznik */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{increment}</span>></span>Increment<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      {/* Zmniejszamy licznik */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{decrement}</span>></span>Decrement<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>Kliknięcie przycisków spowoduje zmianę stanu <code>count</code>, co automatycznie zaktualizuje wyświetlaną wartość. 🔢</p>\n<h3 id=\"wirtualny-dom-wydajne-aktualizacje\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wirtualny-dom-wydajne-aktualizacje\">>>></a>Wirtualny DOM: Wydajne aktualizacje</h3>\n<p><strong>Wirtualny DOM</strong> jest jednym z kluczowych powodów, dla których React jest tak wydajny. Zamiast bezpośrednio manipulować prawdziwym DOM (co jest kosztowne), React tworzy jego lekką kopię w pamięci.</p>\n<p><strong>Jak to działa?</strong></p>\n<ol>\n<li>Kiedy stan aplikacji się zmienia, React tworzy <strong>nowy Wirtualny DOM</strong>.</li>\n<li>Porównuje go z <strong>poprzednim Wirtualnym DOM</strong> (proces zwany \"diffing\").</li>\n<li>Oblicza minimalną liczbę zmian potrzebnych do zaktualizowania prawdziwego DOM.</li>\n<li>Wprowadza te minimalne zmiany do <strong>prawdziwego DOM</strong>.</li>\n</ol>\n<p>Dzięki temu React unika zbędnych operacji, co przekłada się na płynniejsze i szybsze działanie aplikacji, nawet przy częstych aktualizacjach. 🚀</p>\n<hr>\n<h2 id=\"tworzenie-pierwszej-aplikacji-react-z-vite\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tworzenie-pierwszej-aplikacji-react-z-vite\">>></a>Tworzenie pierwszej aplikacji React z Vite</h2>\n<p>Nowoczesne aplikacje React rzadko są tworzone od podstaw bez żadnego narzędzia. Zamiast przestarzałego <code>create-react-app</code>, obecnie popularne są szybsze i bardziej elastyczne narzędzia takie jak <strong>Vite</strong>.</p>\n<h3 id=\"dlaczego-vite\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-vite\">>>></a>Dlaczego Vite?</h3>\n<p><strong>Vite</strong> to narzędzie do budowania front-endów, które oferuje bardzo szybkie uruchamianie serwera deweloperskiego (Dev Server) oraz błyskawiczne aktualizacje modułów (HMR - Hot Module Replacement). Dzieje się tak dzięki wykorzystaniu natywnych modułów ES w przeglądarce podczas dewelopmentu, co eliminuje potrzebę pełnej rekompilacji kodu przy każdej zmianie. Dla dewelopera oznacza to znacznie szybsze i przyjemniejsze doświadczenie. ⚡</p>\n<h3 id=\"inicjalizacja-projektu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#inicjalizacja-projektu\">>>></a>Inicjalizacja projektu</h3>\n<p><strong>Kroki do utworzenia nowej aplikacji React z Vite:</strong></p>\n<ol>\n<li>Upewnij się, że masz zainstalowany <strong>Node.js</strong> (wraz z npm lub yarn) na swoim komputerze.</li>\n<li>Otwórz terminal (lub wiersz poleceń).</li>\n<li>Uruchom polecenie:\n<pre><code class=\"hljs language-bash\">npm create vite@latest\n</code></pre>\nlub\n<pre><code class=\"hljs language-bash\">yarn create vite\n</code></pre>\n</li>\n<li>Zostaniesz poproszony/a o podanie nazwy projektu (np. <code>my-react-app</code>).</li>\n<li>Następnie wybierz framework: <code>React</code>.</li>\n<li>Wybierz wariant: <code>JavaScript</code> (lub <code>TypeScript</code>, jeśli znasz).</li>\n<li>Po zakończeniu instalacji, przejdź do katalogu projektu:\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cd</span> my-react-app\n</code></pre>\n</li>\n<li>Zainstaluj zależności:\n<pre><code class=\"hljs language-bash\">npm install\n</code></pre>\nlub\n<pre><code class=\"hljs language-bash\">yarn install\n</code></pre>\n</li>\n<li>Uruchom aplikację:\n<pre><code class=\"hljs language-bash\">npm run dev\n</code></pre>\nlub\n<pre><code class=\"hljs language-bash\">yarn dev\n</code></pre>\nTo uruchomi serwer deweloperski, a Twoja aplikacja będzie dostępna pod adresem <code>http://localhost:5173</code> (lub podobnym). 🎉</li>\n</ol>\n<h3 id=\"struktura-projektu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#struktura-projektu\">>>></a>Struktura projektu</h3>\n<p>Po utworzeniu aplikacji Vite zobaczysz następującą strukturę katalogów (uproszczoną):</p>\n<pre><code>my-react-app/\n├── node_modules/       # Zależności projektu\n├── public/             # Publiczne zasoby (np. favicon.svg)\n├── src/                # Tutaj piszesz swój kod React!\n│   ├── assets/         # Statyczne zasoby (np. logo.svg)\n│   ├── App.css\n│   ├── App.jsx         # Główny komponent Twojej aplikacji (lub App.js jeśli wybrałeś JS)\n│   ├── index.css\n│   └── main.jsx        # Główny plik JavaScript, który renderuje aplikację (lub main.js)\n├── .gitignore\n├── index.html          # Główny plik HTML, do którego React będzie renderować aplikację\n├── package.json        # Informacje o projekcie i zależnościach\n├── vite.config.js      # Konfiguracja Vite\n└── README.md\n</code></pre>\n<p>Najważniejsze pliki na początek to <code>index.html</code> (główny plik, w którym React się \"zakotwiczy\"), <code>src/main.jsx</code> (punkt wejścia aplikacji, gdzie React jest renderowany do DOM) i <code>src/App.jsx</code> (główny komponent Twojej aplikacji).</p>\n<hr>\n<h2 id=\"komponenty-funkcyjne-i-hooki-hooks\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#komponenty-funkcyjne-i-hooki-hooks\">>></a>Komponenty funkcyjne i Hooki (Hooks)</h2>\n<p>Współczesny React opiera się głównie na <strong>komponentach funkcyjnych</strong> i <strong>Hookach</strong>. Hooki to specjalne funkcje, które pozwalają komponentom funkcyjnym \"zahaczać się\" w stan Reacta i cykl życia (life-cycle) bez pisania klas. Są one kluczowe dla zarządzania stanem i efektami pobocznymi.</p>\n<h3 id=\"usestate\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#usestate\">>>></a><code>useState</code></h3>\n<p><code>useState</code> to najczęściej używany Hook. Pozwala komponentom funkcyjnym na dodawanie stanu do komponentów.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>; <span class=\"hljs-comment\">// Pamiętaj o importowaniu tylko tego, czego potrzebujesz</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyComponent</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Deklaracja stanu 'isOn' z początkową wartością 'false'</span>\n  <span class=\"hljs-comment\">// 'isOn' to bieżąca wartość stanu, 'setIsOn' to funkcja do jej aktualizacji</span>\n  <span class=\"hljs-keyword\">const</span> [isOn, setIsOn] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n\n  <span class=\"hljs-comment\">// Funkcja zmieniająca stan</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">toggleStatus</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">setIsOn</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev</span>) =></span> !prev); <span class=\"hljs-comment\">// Zmieniamy stan na przeciwny</span>\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Status: {isOn ? \"On\" : \"Off\"}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleStatus}</span>></span>Toggle<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>Za każdym razem, gdy wywołasz <code>setIsOn</code>, komponent <code>MyComponent</code> zostanie ponownie wyrenderowany z nową wartością stanu <code>isOn</code>.</p>\n<h3 id=\"useeffect\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#useeffect\">>>></a><code>useEffect</code></h3>\n<p><code>useEffect</code> to Hook, który pozwala na wykonywanie <strong>efektów pobocznych</strong> (side effects) w komponentach funkcyjnych. Efekty poboczne to operacje, które wchodzą w interakcję ze światem zewnętrznym, takie jak:</p>\n<ul>\n<li>Pobieranie danych z API 🌐</li>\n<li>Subskrypcje zdarzeń (np. nasłuchiwanie kliknięć)</li>\n<li>Bezpośrednia manipulacja DOM (rzadziej potrzebna w React)</li>\n<li>Ustawianie timerów</li>\n</ul>\n<p><code>useEffect</code> przyjmuje dwa argumenty: funkcję, która zawiera logikę efektu, oraz tablicę zależności (dependency array).</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>; <span class=\"hljs-comment\">// Importujemy potrzebne Hooki</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FetchedData</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n\n  <span class=\"hljs-comment\">// useEffect uruchomi się po pierwszym renderowaniu i za każdym razem,</span>\n  <span class=\"hljs-comment\">// gdy zmieni się któraś z wartości w tablicy zależności (tutaj: pusta tablica oznacza tylko raz)</span>\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// Symulacja pobierania danych</span>\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-title function_\">setData</span>(<span class=\"hljs-string\">\"Data fetched from API! 👍\"</span>);\n      <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n    }, <span class=\"hljs-number\">2000</span>); <span class=\"hljs-comment\">// Po 2 sekundach</span>\n\n    <span class=\"hljs-comment\">// Opcjonalnie: funkcja czyszcząca (cleanup function)</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Component odmontowany lub efekt uruchomiony ponownie.\"</span>);\n    };\n  }, []); <span class=\"hljs-comment\">// Pusta tablica zależności: efekt uruchamia się tylko raz (jak componentDidMount)</span>\n\n  <span class=\"hljs-keyword\">if</span> (loading) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Loading data... ⏳<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>{data}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span></span>;\n}\n</code></pre>\n<p><code>useEffect</code> bez tablicy zależności (<code>useEffect(() => { ... });</code>) uruchamia się po każdym renderowaniu. Z pustą tablicą (<code>useEffect(() => { ... }, []);</code>) uruchamia się tylko raz, po pierwszym renderowaniu. Z tablicą zależności (<code>useEffect(() => { ... }, [variable1, variable2]);</code>) uruchamia się, gdy wartości w tablicy ulegną zmianie.</p>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Gratulacje! Zrobiłeś/aś pierwsze kroki w świecie Reacta. 🎉 Wiesz już, że React to potężna biblioteka do budowania interfejsów użytkownika w oparciu o komponenty. Zrozumiałeś/aś kluczowe koncepcje takie jak <strong>JSX</strong>, <strong>propsy</strong>, <strong>stan</strong> oraz <strong>Wirtualny DOM</strong>. Poznałeś/aś również <strong>komponenty funkcyjne</strong> i podstawowe <strong>Hooki</strong> (<code>useState</code>, <code>useEffect</code>), które są fundamentem nowoczesnego Reacta. Nauczyłeś/aś się także, jak szybko inicjować projekty za pomocą <strong>Vite</strong>.</p>\n<p>To dopiero początek przygody! React oferuje znacznie więcej możliwości, takich jak:</p>\n<ul>\n<li><strong>Routing</strong> (np. React Router) 🧭</li>\n<li>Zaawansowane zarządzanie stanem (np. Context API, Redux, Zustand)</li>\n<li>Formularze i ich walidacja</li>\n<li>Obsługa API i asynchroniczności</li>\n<li>Testowanie komponentów</li>\n</ul>\n<p>Zachęcam do dalszego eksperymentowania i budowania własnych projektów. Praktyka to najlepszy sposób na naukę! 🚀</p>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<p>Poniższe zadania pomogą Ci utrwalić wiedzę o podstawach Reacta. Stwórz nowy projekt React z Vite, a następnie wykonaj w nim poniższe zadania, tworząc osobne komponenty. Pamiętaj, aby importować tylko te Hooki i funkcje, których potrzebujesz!</p>\n<h3 id=\"zadanie-1-komponent-powitania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-komponent-powitania\">>>></a>Zadanie 1: Komponent Powitania</h3>\n<p>Stwórz nowy komponent funkcyjny o nazwie <code>Welcome</code>, który:</p>\n<ol>\n<li>Przyjmuje jeden <strong>prop</strong> o nazwie <code>name</code>.</li>\n<li>Wyświetla nagłówek <code>&#x3C;h1></code> z tekstem \"Hello, [name]!\"</li>\n<li>Wykorzystaj ten komponent dwukrotnie w komponencie <code>App.jsx</code>, przekazując różne imiona.</li>\n</ol>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// src/components/Welcome.jsx</span>\n<span class=\"hljs-comment\">// Stwórz nowy katalog 'components' w 'src' dla lepszej organizacji</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Welcome</span>(<span class=\"hljs-params\">props</span>) {\n  <span class=\"hljs-comment\">// Komponent wyświetlający powitanie na podstawie propsów</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, {props.name}! 👋<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Welcome</span>;\n\n<span class=\"hljs-comment\">// src/App.jsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Welcome</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Welcome'</span>; <span class=\"hljs-comment\">// Pamiętaj o poprawnej ścieżce importu!</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Alice\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Bob\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"World\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-licznik-z-przyciskiem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-licznik-z-przyciskiem\">>>></a>Zadanie 2: Licznik z przyciskiem</h3>\n<p>Stwórz nowy komponent funkcyjny o nazwie <code>Counter</code>, który:</p>\n<ol>\n<li>Używa Hooka <code>useState</code> do zarządzania stanem licznika (początkowa wartość <code>0</code>).</li>\n<li>Wyświetla aktualną wartość licznika w akapicie (<code>&#x3C;p></code>).</li>\n<li>Posiada dwa przyciski: jeden do <strong>zwiększania</strong> licznika o 1, drugi do <strong>zmniejszania</strong> licznika o 1.</li>\n</ol>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// src/components/Counter.jsx</span>\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// Deklaracja stanu licznika</span>\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">increment</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-comment\">// Funkcja zwiększająca licznik</span>\n    <span class=\"hljs-title function_\">setCount</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">prevCount</span> =></span> prevCount + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Najlepsza praktyka: używaj funkcji do aktualizacji stanu</span>\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">decrement</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-comment\">// Funkcja zmniejszająca licznik</span>\n    <span class=\"hljs-title function_\">setCount</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">prevCount</span> =></span> prevCount - <span class=\"hljs-number\">1</span>);\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>My Counter<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Current value: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{increment}</span>></span>Increment<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{decrement}</span>></span>Decrement<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Counter</span>;\n\n<span class=\"hljs-comment\">// src/App.jsx (example usage)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Counter</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Counter'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">textAlign:</span> '<span class=\"hljs-attr\">center</span>', <span class=\"hljs-attr\">marginTop:</span> '<span class=\"hljs-attr\">50px</span>' }}></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Counter</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-lista-elementów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-lista-elementów\">>>></a>Zadanie 3: Lista elementów</h3>\n<p>Stwórz nowy komponent funkcyjny o nazwie <code>ShoppingList</code>, który:</p>\n<ol>\n<li>Używa Hooka <code>useState</code> do przechowywania tablicy elementów zakupów (początkowo pusta, np. <code>[]</code>).</li>\n<li>Wyświetla te elementy jako nieuporządkowaną listę (<code>&#x3C;ul></code>).</li>\n<li>Pobierz dane z tablicy wewnątrz <code>useEffect</code> po pierwszym renderowaniu komponentu, symulując pobieranie z API. W międzyczasie wyświetlaj \"Loading list...\".</li>\n</ol>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// src/components/ShoppingList.jsx</span>\n<span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ShoppingList</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [items, setItems] = <span class=\"hljs-title function_\">useState</span>([]); <span class=\"hljs-comment\">// Stan dla listy zakupów</span>\n  <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// Stan dla statusu ładowania</span>\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// Symulacja pobierania danych z API</span>\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-keyword\">const</span> fetchedItems = [<span class=\"hljs-string\">'Milk 🥛'</span>, <span class=\"hljs-string\">'Bread 🍞'</span>, <span class=\"hljs-string\">'Eggs 🥚'</span>, <span class=\"hljs-string\">'Coffee ☕'</span>];\n      <span class=\"hljs-title function_\">setItems</span>(fetchedItems); <span class=\"hljs-comment\">// Ustawienie pobranych danych</span>\n      <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// Zmiana statusu ładowania</span>\n    }, <span class=\"hljs-number\">1500</span>); <span class=\"hljs-comment\">// Symulacja 1.5 sekundy czasu ładowania</span>\n  }, []); <span class=\"hljs-comment\">// Pusta tablica zależności: efekt uruchamia się tylko raz po zamontowaniu komponentu</span>\n\n  <span class=\"hljs-keyword\">if</span> (loading) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Loading shopping list... ⏳<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>; <span class=\"hljs-comment\">// Wyświetlanie komunikatu ładowania</span>\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Your Shopping List<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        {items.map((item, index) => (\n          // Renderowanie każdego elementu listy\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>></span>{item}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span> // Prop 'key' jest ważny dla list w React!\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ShoppingList</span>;\n\n<span class=\"hljs-comment\">// src/App.jsx (example usage)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ShoppingList</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/ShoppingList'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">textAlign:</span> '<span class=\"hljs-attr\">center</span>', <span class=\"hljs-attr\">marginTop:</span> '<span class=\"hljs-attr\">50px</span>' }}></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ShoppingList</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>","resourceUrl","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-react.md","readingTime","11 minut",{"_21":102,"_23":103,"_25":104,"_6":114,"_36":115,"_38":116,"_91":159,"_93":160,"_95":161,"_97":162,"_99":163},"Wprowadzenie do JavaScript","JavaScript to potężny i wszechstronny język programowania, który stanowi serce interaktywnych stron internetowych. W tym kompleksowym kursie krok po kroku odkryjemy jego podstawy, od zrozumienia czym jest JavaScript, przez kluczowe elementy takie jak zmienne, typy danych, operatory, struktury kontrolne i funkcje, aż po bardziej złożone koncepcje, takie jak obiekty i tablice. Przygotuj się na fascynującą podróż do świata programowania!",[10,105,106,28,107,108,109,110,111,112,113],"kurs dla początkujących","programowanie webowe","nauka javascript","interaktywne strony","zmienne","typy danych","funkcje","obiekty","tablice",[10],"2025-07-06T00:00:00.000Z",{"_21":117,"_41":118},"Quiz: Wprowadzenie do JavaScript",[119,127,135,143,151],{"_44":120,"_46":121,"_52":89,"_54":126},"<p>Które słowo kluczowe powinieneś użyć do zadeklarowania stałej wartości w JavaScript, której nie można później zmienić?</p>",[122,123,124,125],"static","var","const","let","Stałe, czyli wartości, które mają pozostać niezmienne przez cały czas trwania programu, deklarujemy za pomocą słowa kluczowego `const`. To dobra praktyka, aby zapobiegać przypadkowym zmianom.",{"_44":128,"_46":129,"_52":53,"_54":134},"<p>Które z wymienionych typów danych <strong>NIE</strong> występują natywnie (domyślnie) w JavaScript jako osobny, podstawowy typ?</p>",[130,131,132,133],"String","Boolean","Number","Character","W JavaScript nie ma osobnego typu danych 'Character' dla pojedynczych znaków. Pojedyncze znaki są traktowane jako krótkie łańcuchy znaków (String). Pozostałe typy są podstawowymi typami w JS.",{"_44":136,"_46":137,"_52":89,"_54":142},"<p>Jak wygląda poprawna składnia funkcji strzałkowej w JavaScript, która zwraca sumę dwóch liczb <code>a</code> i <code>b</code>?</p>",[138,139,140,141],"function suma(a, b) { return a + b; }","let suma = add(a, b);","const suma = (a, b) => a + b;","sum(a, b) => a + b;","Poprawna składnia funkcji strzałkowej to `const suma = (a, b) => a + b;`. Jest to zwięzła forma deklaracji funkcji, często używana w nowoczesnym JavaScript. Opcja 1 to tradycyjna deklaracja funkcji, a pozostałe są niepoprawne składniowo.",{"_44":144,"_46":145,"_52":89,"_54":150},"<p>W jaki sposób można uzyskać liczbę elementów (długość) tablicy w JavaScript?</p>",[146,147,148,149],"array.size()","length(array)","array.length","array.count","Aby uzyskać długość tablicy w JavaScript, używamy właściwości `.length`, np. `mojaTablica.length`. Jest to standardowy sposób.",{"_44":152,"_46":153,"_52":53,"_54":158},"<p>Co zostanie wypisane w konsoli po wykonaniu poniższego kodu?</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">if</span> (x > <span class=\"hljs-number\">5</span>) { <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'OK'</span>); } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'NIE'</span>); }\n</code></pre>",[154,155,156,157],"NIE","5","undefined","OK","Wartość `x` wynosi 10. Warunek `x > 5` (czyli `10 > 5`) jest prawdziwy, dlatego wykonany zostanie blok kodu wewnątrz `if`, który wypisze w konsoli tekst 'OK'.","f68dbc5a-63ac-4504-8f28-5dbac579a4ac","wprowadzenie-do-javascript","<p>Witaj w ekscytującym świecie <strong>JavaScript (JS)</strong>! 🚀 Ten kurs to Twój przewodnik po fundamentach jednego z najważniejszych języków programowania w sieci. Niezależnie od tego, czy chcesz tworzyć interaktywne strony, czy budować zaawansowane aplikacje, JavaScript to klucz do sukcesu. Przygotuj się na solidną dawkę wiedzy i praktyki! ✨</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-javascript-i-dlaczego-jest-tak-wa%C5%BCny\">Czym jest JavaScript i dlaczego jest tak ważny?</a></li>\n<li><a href=\"#zmienne-szafki-na-twoje-dane\">Zmienne: Szafki na Twoje Dane</a></li>\n<li><a href=\"#typy-danych-co-javascript-potrafi-przechowywa%C4%87\">Typy Danych: Co JavaScript potrafi przechowywać?</a></li>\n<li><a href=\"#operatory-matematyka-i-logika-w-kodzie\">Operatory: Matematyka i Logika w Kodzie</a></li>\n<li><a href=\"#struktury-kontrolne-podejmowanie-decyzji-i-powtarzanie-zada%C5%84\">Struktury Kontrolne: Podejmowanie Decyzji i Powtarzanie Zadań</a>\n<ul>\n<li><a href=\"#instrukcja-ifelse-rozga%C5%82%C4%99zianie-kodu\">Instrukcja <code>if</code>/<code>else</code>: Rozgałęzianie Kodu</a></li>\n<li><a href=\"#p%C4%99tla-for-powtarzaj-od-liczby-do-liczby\">Pętla <code>for</code>: Powtarzaj od Liczby do Liczby</a></li>\n<li><a href=\"#p%C4%99tla-while-powtarzaj-dop%C3%B3ki-prawda\">Pętla <code>while</code>: Powtarzaj, Dopóki Prawda</a></li>\n</ul>\n</li>\n<li><a href=\"#funkcje-bloki-kodu-do-wielokrotnego-u%C5%BCycia\">Funkcje: Bloki Kodu do Wielokrotnego Użycia</a>\n<ul>\n<li><a href=\"#deklaracja-funkcji-klasyczny-spos%C3%B3b\">Deklaracja Funkcji: Klasyczny Sposób</a></li>\n<li><a href=\"#funkcje-strza%C5%82kowe-arrow-functions-nowoczesny-skr%C3%B3t\">Funkcje Strzałkowe (Arrow Functions): Nowoczesny Skrót</a></li>\n</ul>\n</li>\n<li><a href=\"#obiekty-skarbnice-powi%C4%85zanych-informacji\">Obiekty: Skarbnice Powiązanych Informacji</a></li>\n<li><a href=\"#tablice-uporz%C4%85dkowane-listy-danych\">Tablice: Uporządkowane Listy Danych</a></li>\n<li><a href=\"#zadania-do-wykonania-sprawd%C5%BA-swoje-umiej%C4%99tno%C5%9Bci\">Zadania do Wykonania: Sprawdź Swoje Umiejętności!</a>\n<ul>\n<li><a href=\"#zadanie-1-iloczyn-dw%C3%B3ch-liczb\">Zadanie 1: Iloczyn Dwóch Liczb</a></li>\n<li><a href=\"#zadanie-2-obiekt-ksi%C4%85%C5%BCka\">Zadanie 2: Obiekt Książka</a></li>\n<li><a href=\"#zadanie-3-najwi%C4%99ksza-liczba-w-tablicy\">Zadanie 3: Największa Liczba w Tablicy</a></li>\n<li><a href=\"#zadanie-4-wy%C5%9Bwietlanie-imion\">Zadanie 4: Wyświetlanie Imion</a></li>\n</ul>\n</li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-javascript-i-dlaczego-jest-tak-ważny\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-javascript-i-dlaczego-jest-tak-ważny\">>></a>Czym jest JavaScript i dlaczego jest tak ważny?</h2>\n<p>Witaj w fascynującym świecie <strong>JavaScript (JS)</strong>! To język programowania, który jest niezwykle popularny i stanowi fundament większości dynamicznych i interaktywnych stron internetowych, które odwiedzasz każdego dnia. Wyobraź sobie stronę internetową, która nie tylko wyświetla tekst i obrazy, ale także reaguje na Twoje kliknięcia, przewijanie czy wprowadzanie danych w formularzach – to właśnie zasługa JavaScriptu! 🌐</p>\n<h3 id=\"gdzie-spotkasz-javascript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#gdzie-spotkasz-javascript\">>>></a>Gdzie spotkasz JavaScript?</h3>\n<ul>\n<li><strong>W przeglądarce (po stronie klienta):</strong> To jego główne zastosowanie. JavaScript pozwala na:\n<ul>\n<li><strong>Animacje:</strong> Sprawia, że elementy na stronie poruszają się, zanikają lub pojawiają. ✨</li>\n<li><strong>Interaktywne formularze:</strong> Sprawdza, czy dane wpisane w formularzu są poprawne, zanim zostaną wysłane. ✅</li>\n<li><strong>Galerie zdjęć:</strong> Umożliwia płynne przechodzenie między zdjęciami. 🏞️</li>\n<li><strong>Mapy interaktywne:</strong> Pozwala na przybliżanie, oddalanie i przesuwanie map. 🗺️</li>\n<li><strong>Gry przeglądarkowe:</strong> Wiele prostych gier jest w całości napisanych w JS. 🎮</li>\n</ul>\n</li>\n<li><strong>Na serwerze (po stronie serwera):</strong> Dzięki technologiom takim jak <strong>Node.js</strong>, JavaScript może być używany do budowania potężnych aplikacji serwerowych, które obsługują logikę biznesową, bazy danych i komunikację z klientem. Oznacza to, że możesz używać tego samego języka do tworzenia zarówno frontendu (tego, co widzisz w przeglądarce), jak i backendu (logiki działającej na serwerze) aplikacji! 💻</li>\n<li><strong>Aplikacje mobilne i desktopowe:</strong> Istnieją również frameworki (zestawy narzędzi), takie jak React Native czy Electron, które pozwalają pisać aplikacje mobilne i desktopowe przy użyciu JavaScriptu. 📱🖥️</li>\n</ul>\n<p>W tym kursie skupimy się głównie na podstawach JavaScriptu w kontekście przeglądarek internetowych, ponieważ to doskonały punkt wyjścia dla każdego początkującego. Przygotuj się na to, że nauka JavaScriptu otworzy Ci drzwi do tworzenia niesamowitych rzeczy w internecie! 🚀</p>\n<hr>\n<h2 id=\"zmienne-szafki-na-twoje-dane\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zmienne-szafki-na-twoje-dane\">>></a>Zmienne: Szafki na Twoje Dane</h2>\n<p>Wyobraź sobie, że piszesz list, w którym musisz wiele razy powtórzyć swoje imię. Zamiast za każdym razem pisać \"Jan\", możesz użyć zmiennej \"MojeImię\" i włożyć do niej wartość \"Jan\". Później, jeśli zechcesz zmienić imię na \"Krzysztof\", zmienisz je tylko w jednym miejscu – w zmiennej! 📦</p>\n<p>W programowaniu <strong>zmienne</strong> to takie \"pudełka\" lub \"szafki\", w których możemy przechowywać różne dane (liczby, tekst, prawda/fałsz itp.). Te dane mogą się zmieniać w trakcie działania programu.</p>\n<p>W JavaScript zmienne deklarujemy, czyli tworzymy, za pomocą trzech słów kluczowych: <code>var</code>, <code>let</code> lub <code>const</code>. Każde z nich ma nieco inne zastosowanie i zasady:</p>\n<ul>\n<li><code>var</code>: To najstarszy sposób deklarowania zmiennych w JavaScript. Zmienne zadeklarowane za pomocą <code>var</code> mają zasięg <strong>funkcyjny</strong>, co oznacza, że są dostępne w całej funkcji, w której zostały zadeklarowane. Obecnie rzadziej używany w nowym kodzie ze względu na pewne potencjalne problemy (np. możliwość redeklaracji tej samej zmiennej).</li>\n<li><code>let</code>: To nowocześniejszy sposób deklarowania zmiennych, wprowadzony w standardzie ES6 (ECMAScript 2015). Zmienne zadeklarowane za pomocą <code>let</code> mają zasięg <strong>blokowy</strong>. Oznacza to, że są dostępne tylko w bloku kodu (np. wewnątrz <code>if</code>, <code>for</code>, <code>{}</code>) w którym zostały zadeklarowane. Jest to <strong>zalecany</strong> sposób deklarowania zmiennych, których wartość <strong>będzie się zmieniać</strong>.</li>\n<li><code>const</code>: Również wprowadzony w ES6, podobnie jak <code>let</code>, ma zasięg <strong>blokowy</strong>. Kluczowa różnica polega na tym, że <code>const</code> służy do deklarowania <strong>stałych</strong>, czyli wartości, które <strong>nie powinny się zmieniać</strong> po ich pierwszym przypisaniu. Jeśli spróbujesz zmienić wartość stałej, JavaScript zwróci błąd. Jest to świetne do danych, które mają być niezmienne w całym programie. 🔒</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Przykład użycia zmiennych:</span>\n\n<span class=\"hljs-comment\">// Deklaracja zmiennej 'var' (starszy sposób)</span>\n<span class=\"hljs-keyword\">var</span> liczbaSamochodow = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczbaSamochodow); <span class=\"hljs-comment\">// Wypisze: 3</span>\n\n<span class=\"hljs-comment\">// Możesz zmienić jej wartość</span>\nliczbaSamochodow = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczbaSamochodow); <span class=\"hljs-comment\">// Wypisze: 5</span>\n\n<span class=\"hljs-comment\">// Deklaracja zmiennej 'let' (zalecany dla zmiennych, które się zmieniają)</span>\n<span class=\"hljs-keyword\">let</span> imieUzytkownika = <span class=\"hljs-string\">\"Anna\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(imieUzytkownika); <span class=\"hljs-comment\">// Wypisze: Anna</span>\n\n<span class=\"hljs-comment\">// Możesz zmienić jej wartość</span>\nimieUzytkownika = <span class=\"hljs-string\">\"Katarzyna\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(imieUzytkownika); <span class=\"hljs-comment\">// Wypisze: Katarzyna</span>\n\n<span class=\"hljs-comment\">// Deklaracja stałej 'const' (dla wartości, które się nie zmieniają)</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PI</span> = <span class=\"hljs-number\">3.14159</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable constant_\">PI</span>); <span class=\"hljs-comment\">// Wypisze: 3.14159</span>\n\n<span class=\"hljs-comment\">// PRÓBA ZMIANY Wartości const - spowoduje błąd! ❌</span>\n<span class=\"hljs-comment\">// PI = 3.14; // To spowodowałoby błąd w konsoli: \"TypeError: Assignment to constant variable.\"</span>\n</code></pre>\n<p><strong>Wskazówka dla początkujących:</strong> Na początku staraj się używać <code>const</code> zawsze, gdy tylko możesz. Jeśli wiesz, że wartość danej zmiennej będzie się zmieniać, wtedy użyj <code>let</code>. Unikaj <code>var</code> w nowym kodzie, chyba że musisz pracować ze starszymi systemami. 👍</p>\n<hr>\n<h2 id=\"typy-danych-co-javascript-potrafi-przechowywać\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typy-danych-co-javascript-potrafi-przechowywać\">>></a>Typy Danych: Co JavaScript potrafi przechowywać?</h2>\n<p>Zmienne mogą przechowywać różne rodzaje informacji. W programowaniu te rodzaje informacji nazywamy <strong>typami danych</strong>. JavaScript, podobnie jak inne języki, ma kilka podstawowych typów danych, które pozwalają mu rozumieć i przetwarzać różne rodzaje wartości: 💾</p>\n<ul>\n<li><strong>Number (Liczby):</strong> Ten typ służy do przechowywania zarówno liczb całkowitych (np. <code>5</code>, <code>-100</code>), jak i liczb zmiennoprzecinkowych (ułamkowych, np. <code>3.14</code>, <code>0.5</code>). W JavaScript nie ma rozróżnienia na liczby całkowite i zmiennoprzecinkowe – wszystkie są typu <code>Number</code>.\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> calkowita = <span class=\"hljs-number\">123</span>; <span class=\"hljs-comment\">// Liczba całkowita</span>\n<span class=\"hljs-keyword\">let</span> zmiennoprzecinkowa = <span class=\"hljs-number\">3.14</span>; <span class=\"hljs-comment\">// Liczba zmiennoprzecinkowa</span>\n</code></pre>\n</li>\n<li><strong>String (Łańcuchy Znaków / Tekst):</strong> Służy do przechowywania tekstu. Tekst w JavaScript zawsze musi być ujęty w cudzysłowy pojedyncze (<code>'</code>) lub podwójne (<code>\"</code>). 💬\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> imie = <span class=\"hljs-string\">\"Ala\"</span>; <span class=\"hljs-comment\">// Łańcuch znaków w podwójnych cudzysłowach</span>\n<span class=\"hljs-keyword\">let</span> wiadomosc = <span class=\"hljs-string\">\"Cześć, świecie!\"</span>; <span class=\"hljs-comment\">// Łańcuch znaków w pojedynczych cudzysłowach</span>\n</code></pre>\n</li>\n<li><strong>Boolean (Wartości Logiczne):</strong> Ten typ może przyjmować tylko dwie wartości: <code>true</code> (prawda) lub <code>false</code> (fałsz). Jest to niezwykle przydatne do podejmowania decyzji w kodzie (np. \"jeśli jest <code>true</code>, zrób to, w przeciwnym razie zrób coś innego\"). ✅❌\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> czyPadaDeszcz = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Wartość logiczna: prawda</span>\n<span class=\"hljs-keyword\">let</span> czyJestWieczor = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// Wartość logiczna: fałsz</span>\n</code></pre>\n</li>\n<li><strong>Object (Obiekty):</strong> Obiekty to bardziej złożone struktury, które pozwalają grupować ze sobą powiązane dane. Możesz myśleć o nich jak o \"encyklopedii\", gdzie każda strona ma swoją nazwę (klucz) i treść (wartość). Obiekty będziemy omawiać szerzej w dalszej części kursu. 📚\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> osoba = {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Jan\"</span>,\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">30</span>,\n  <span class=\"hljs-attr\">miasto</span>: <span class=\"hljs-string\">\"Warszawa\"</span>,\n}; <span class=\"hljs-comment\">// Obiekt reprezentujący osobę</span>\n</code></pre>\n</li>\n<li><strong>Array (Tablice):</strong> Tablice to specjalny rodzaj obiektu, który służy do przechowywania uporządkowanej listy wartości. Możesz myśleć o nich jak o \"liście zakupów\" lub \"szeregu szuflad\", gdzie każda szuflada ma swój numer (indeks) i przechowuje jedną wartość. Tablice również omówimy szczegółowo później. 🛒\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> kolory = [<span class=\"hljs-string\">\"czerwony\"</span>, <span class=\"hljs-string\">\"niebieski\"</span>, <span class=\"hljs-string\">\"zielony\"</span>]; <span class=\"hljs-comment\">// Tablica kolorów</span>\n</code></pre>\n</li>\n<li><strong>Undefined:</strong> Ten typ oznacza, że zmienna została zadeklarowana, ale <strong>nie przypisano jej jeszcze żadnej wartości</strong>. JavaScript domyślnie przypisuje <code>undefined</code> nowym zmiennym. ❓\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> zmiennaBezWartosci;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(zmiennaBezWartosci); <span class=\"hljs-comment\">// Wypisze: undefined</span>\n</code></pre>\n</li>\n<li><strong>Null:</strong> Ten typ oznacza celowy <strong>brak wartości</strong>. Programista sam przypisuje <code>null</code>, aby wskazać, że dana zmienna (lub obiekt) nie przechowuje obecnie żadnej wartości. 🚫\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> brakDanych = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(brakDanych); <span class=\"hljs-comment\">// Wypisze: null</span>\n</code></pre>\n</li>\n</ul>\n<p>Zrozumienie tych podstawowych typów danych jest kluczowe, ponieważ będą one fundamentem wszystkich operacji, które będziesz wykonywać w JavaScript. 🔑</p>\n<hr>\n<h2 id=\"operatory-matematyka-i-logika-w-kodzie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#operatory-matematyka-i-logika-w-kodzie\">>></a>Operatory: Matematyka i Logika w Kodzie</h2>\n<p>Operatory w JavaScript to specjalne symbole, które pozwalają nam wykonywać różne działania na danych. Możesz myśleć o nich jak o znakach matematycznych (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) lub symbolach logicznych, które pomagają porównywać wartości i podejmować decyzje. ➕➖✖️➗</p>\n<p>Podzielmy je na kilka głównych kategorii:</p>\n<h3 id=\"operatory-arytmetyczne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#operatory-arytmetyczne\">>>></a>Operatory Arytmetyczne</h3>\n<p>Służą do wykonywania podstawowych operacji matematycznych: 셈</p>\n<ul>\n<li><code>+</code> (dodawanie)</li>\n<li><code>-</code> (odejmowanie)</li>\n<li><code>*</code> (mnożenie)</li>\n<li><code>/</code> (dzielenie)</li>\n<li><code>%</code> (reszta z dzielenia, czyli modulo – np. <code>10 % 3</code> da <code>1</code>, bo <code>10</code> podzielone przez <code>3</code> to <code>3</code> reszty <code>1</code>)</li>\n<li><code>**</code> (potęgowanie - np. <code>2 ** 3</code> to <code>8</code>)</li>\n<li><code>++</code> (inkrementacja - zwiększa wartość o 1, np. <code>x++</code> to <code>x = x + 1</code>)</li>\n<li><code>--</code> (dekrementacja - zmniejsza wartość o 1, np. <code>x--</code> to <code>x = x - 1</code>)</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">5</span>;\n\n<span class=\"hljs-keyword\">let</span> suma = a + b; <span class=\"hljs-comment\">// 15</span>\n<span class=\"hljs-keyword\">let</span> roznica = a - b; <span class=\"hljs-comment\">// 5</span>\n<span class=\"hljs-keyword\">let</span> iloczyn = a * b; <span class=\"hljs-comment\">// 50</span>\n<span class=\"hljs-keyword\">let</span> iloraz = a / b; <span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-keyword\">let</span> reszta = a % b; <span class=\"hljs-comment\">// 0 (bo 10 dzieli się przez 5 bez reszty)</span>\n<span class=\"hljs-keyword\">let</span> potega = a ** <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 100 (10 do potęgi 2)</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(suma, roznica, iloczyn, iloraz, reszta, potega);\n</code></pre>\n<h3 id=\"operatory-porównania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#operatory-porównania\">>>></a>Operatory Porównania</h3>\n<p>Służą do porównywania dwóch wartości i zawsze zwracają wartość logiczną: <code>true</code> (prawda) lub <code>false</code> (fałsz). 🤔</p>\n<ul>\n<li><code>==</code> (równe wartości) - <strong>porównuje tylko wartości</strong>, ignorując typy danych.</li>\n<li><code>===</code> (ściśle równe) - <strong>porównuje zarówno wartości, jak i typy danych</strong>. <strong>Zalecane do używania!</strong> 👍</li>\n<li><code>!=</code> (różne wartości) - <strong>sprawdza, czy wartości są różne</strong>, ignorując typy danych.</li>\n<li><code>!==</code> (ściśle różne) - <strong>sprawdza, czy wartości lub typy danych są różne</strong>. <strong>Zalecane do używania!</strong> 👍</li>\n<li><code>></code> (większe niż)</li>\n<li><code>&#x3C;</code> (mniejsze niż)</li>\n<li><code>>=</code> (większe lub równe)</li>\n<li><code>&#x3C;=</code> (mniejsze lub równe)</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-string\">\"10\"</span>; <span class=\"hljs-comment\">// To jest tekst (String), a nie liczba (Number)</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x == y); <span class=\"hljs-comment\">// true (bo wartość 10 jest taka sama, typ ignorowany)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x === y); <span class=\"hljs-comment\">// false (bo wartości są takie same, ale typy są różne: Number vs String)</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x != <span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x !== <span class=\"hljs-string\">\"10\"</span>); <span class=\"hljs-comment\">// true (bo mimo że wartości są takie same, typy są różne)</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x > <span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x &#x3C;= <span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h3 id=\"operatory-logiczne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#operatory-logiczne\">>>></a>Operatory Logiczne</h3>\n<p>Służą do łączenia lub negowania warunków logicznych. 🧠</p>\n<ul>\n<li><code>&#x26;&#x26;</code> (AND / I) - Zwraca <code>true</code>, jeśli <strong>oba</strong> warunki są prawdziwe.</li>\n<li><code>||</code> (OR / LUB) - Zwraca <code>true</code>, jeśli <strong>przynajmniej jeden</strong> warunek jest prawdziwy.</li>\n<li><code>!</code> (NOT / NIE) - Odwraca wartość logiczną (z <code>true</code> na <code>false</code> i z <code>false</code> na <code>true</code>).</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> jestPelnoletni = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-keyword\">let</span> maPrawoJazdy = <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(jestPelnoletni &#x26;&#x26; maPrawoJazdy); <span class=\"hljs-comment\">// false (bo nie ma prawa jazdy)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(jestPelnoletni || maPrawoJazdy); <span class=\"hljs-comment\">// true (bo jest pełnoletni)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(!jestPelnoletni); <span class=\"hljs-comment\">// false (bo jest pełnoletni, a '!' to zaneguje)</span>\n</code></pre>\n<h3 id=\"operatory-przypisania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#operatory-przypisania\">>>></a>Operatory Przypisania</h3>\n<p>Służą do przypisywania wartości do zmiennych. ➡️</p>\n<ul>\n<li><code>=</code> (przypisanie wartości)</li>\n<li><code>+=</code> (dodaj i przypisz, np. <code>a += 5</code> to to samo co <code>a = a + 5</code>)</li>\n<li><code>-=</code> (odejmij i przypisz)</li>\n<li><code>*=</code> (pomnóż i przypisz)</li>\n<li><code>/=</code> (podziel i przypisz)</li>\n<li><code>%=</code> (reszta z dzielenia i przypisz)</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> punkty = <span class=\"hljs-number\">100</span>;\npunkty += <span class=\"hljs-number\">50</span>; <span class=\"hljs-comment\">// punkty = punkty + 50;  teraz punkty to 150</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(punkty); <span class=\"hljs-comment\">// 150</span>\n\npunkty -= <span class=\"hljs-number\">20</span>; <span class=\"hljs-comment\">// punkty = punkty - 20;  teraz punkty to 130</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(punkty); <span class=\"hljs-comment\">// 130</span>\n</code></pre>\n<p>Zrozumienie operatorów jest fundamentalne, ponieważ będziesz ich używać niemal w każdym programie do wykonywania obliczeń, porównywania danych i sterowania logiką działania Twojej aplikacji. 🛠️</p>\n<hr>\n<h2 id=\"struktury-kontrolne-podejmowanie-decyzji-i-powtarzanie-zadań\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#struktury-kontrolne-podejmowanie-decyzji-i-powtarzanie-zadań\">>></a>Struktury Kontrolne: Podejmowanie Decyzji i Powtarzanie Zadań</h2>\n<p>Struktury kontrolne to jak \"drogowskazy\" w Twoim kodzie. Pozwalają one na podejmowanie decyzji (czy coś zrobić, czy nie) oraz na wielokrotne powtarzanie pewnych czynności. Bez nich programy byłyby bardzo liniowe i nudne. 🚦</p>\n<h3 id=\"instrukcja-ifelse-rozgałęzianie-kodu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#instrukcja-ifelse-rozgałęzianie-kodu\">>>></a>Instrukcja <code>if</code>/<code>else</code>: Rozgałęzianie Kodu</h3>\n<p>Instrukcja <code>if</code> (jeśli) pozwala na wykonanie określonego bloku kodu <strong>tylko wtedy, gdy spełniony jest pewien warunek</strong>. Jeśli warunek jest fałszywy, ten blok kodu jest pomijany.\nMożesz również dodać instrukcję <code>else</code> (w przeciwnym razie), aby określić, co ma się stać, gdy warunek w <code>if</code> nie jest spełniony.</p>\n<ul>\n<li><code>if (warunek)</code>: Wykonaj kod, jeśli <code>warunek</code> jest prawdziwy.</li>\n<li><code>else</code>: Wykonaj ten kod, jeśli żaden z poprzedzających warunków <code>if</code> lub <code>else if</code> nie był prawdziwy.</li>\n<li><code>else if (innyWarunek)</code>: Sprawdź kolejny warunek, jeśli poprzedni <code>if</code> (lub <code>else if</code>) był fałszywy.</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> temperatura = <span class=\"hljs-number\">25</span>;\n\n<span class=\"hljs-comment\">// Przykład prostego IF</span>\n<span class=\"hljs-keyword\">if</span> (temperatura > <span class=\"hljs-number\">20</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Jest ciepło!\"</span>); <span class=\"hljs-comment\">// Ten kod zostanie wykonany</span>\n}\n\n<span class=\"hljs-comment\">// Przykład IF-ELSE</span>\n<span class=\"hljs-keyword\">if</span> (temperatura &#x3C; <span class=\"hljs-number\">10</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Jest zimno.\"</span>);\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Nie jest zimno.\"</span>); <span class=\"hljs-comment\">// Ten kod zostanie wykonany</span>\n}\n\n<span class=\"hljs-comment\">// Przykład IF-ELSE IF-ELSE (wiele warunków)</span>\n<span class=\"hljs-keyword\">let</span> godzina = <span class=\"hljs-number\">14</span>;\n\n<span class=\"hljs-keyword\">if</span> (godzina &#x3C; <span class=\"hljs-number\">12</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Dzień dobry!\"</span>);\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (godzina &#x3C; <span class=\"hljs-number\">18</span>) {\n  <span class=\"hljs-comment\">// Jeśli godzina NIE jest mniejsza niż 12, sprawdź, czy jest mniejsza niż 18</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Dzień dobry po południu!\"</span>); <span class=\"hljs-comment\">// Ten kod zostanie wykonany</span>\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// Jeśli żaden z powyższych warunków nie był spełniony</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Dobry wieczór!\"</span>);\n}\n</code></pre>\n<p>Instrukcje <code>if</code> są podstawą logicznych operacji w każdym programie. 🧠</p>\n<h3 id=\"pętla-for-powtarzaj-od-liczby-do-liczby\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pętla-for-powtarzaj-od-liczby-do-liczby\">>>></a>Pętla <code>for</code>: Powtarzaj od Liczby do Liczby</h3>\n<p>Pętla <code>for</code> jest idealna, gdy wiesz, <strong>ile razy</strong> chcesz powtórzyć jakąś czynność. Możesz jej użyć do iteracji (przechodzenia) przez elementy listy, wykonywania akcji określoną liczbę razy, itp. 🔄</p>\n<p>Struktura pętli <code>for</code> składa się z trzech części w nawiasach:</p>\n<ol>\n<li><strong>Inicjalizacja:</strong> Działa tylko raz na początku. Zazwyczaj deklarujesz tutaj zmienną licznika (np. <code>let i = 0;</code>).</li>\n<li><strong>Warunek:</strong> Sprawdzany przed każdym wykonaniem pętli. Jeśli warunek jest <code>true</code>, pętla się wykonuje. Jeśli <code>false</code>, pętla się kończy. (np. <code>i &#x3C; 5;</code>)</li>\n<li><strong>Krok (Iteracja):</strong> Wykonywany po każdym przejściu pętli. Zazwyczaj zwiększasz lub zmniejszasz licznik (np. <code>i++;</code>).</li>\n</ol>\n<!-- end list -->\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Przykład: Wypisz liczby od 0 do 4</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">5</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i); <span class=\"hljs-comment\">// Wypisze kolejno: 0, 1, 2, 3, 4</span>\n}\n<span class=\"hljs-comment\">/*\nJak to działa?\n1. i = 0 (inicjalizacja)\n2. 0 &#x3C; 5? Tak, więc wykonaj kod w nawiasach. Wypisz 0.\n3. i++ (i staje się 1)\n4. 1 &#x3C; 5? Tak, wykonaj. Wypisz 1.\n5. i++ (i staje się 2)\n6. 2 &#x3C; 5? Tak, wykonaj. Wypisz 2.\n7. i++ (i staje się 3)\n8. 3 &#x3C; 5? Tak, wykonaj. Wypisz 3.\n9. i++ (i staje się 4)\n10. 4 &#x3C; 5? Tak, wykonaj. Wypisz 4.\n11. i++ (i staje się 5)\n12. 5 &#x3C; 5? Nie (fałsz), pętla się kończy.\n*/</span>\n</code></pre>\n<h3 id=\"pętla-while-powtarzaj-dopóki-prawda\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pętla-while-powtarzaj-dopóki-prawda\">>>></a>Pętla <code>while</code>: Powtarzaj, Dopóki Prawda</h3>\n<p>Pętla <code>while</code> (dopóki) jest używana, gdy nie wiesz dokładnie, <strong>ile razy</strong> pętla ma się wykonać, ale chcesz, aby wykonywała się tak długo, <strong>jak długo dany warunek jest prawdziwy</strong>. 🔁</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Przykład: Wypisz liczby dopóki j jest mniejsze niż 5</span>\n<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Pamiętaj o inicjalizacji zmiennej licznika PRZED pętlą!</span>\n\n<span class=\"hljs-keyword\">while</span> (j &#x3C; <span class=\"hljs-number\">5</span>) {\n  <span class=\"hljs-comment\">// Warunek jest sprawdzany na początku każdej iteracji</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(j);\n  j++; <span class=\"hljs-comment\">// Ważne: musisz ręcznie zmienić wartość zmiennej, inaczej pętla będzie nieskończona! ❗</span>\n}\n<span class=\"hljs-comment\">/*\nJak to działa?\n1. j = 0\n2. 0 &#x3C; 5? Tak, wykonaj. Wypisz 0. j staje się 1.\n3. 1 &#x3C; 5? Tak, wykonaj. Wypisz 1. j staje się 2.\n4. 2 &#x3C; 5? Tak, wykonaj. Wypisz 2. j staje się 3.\n5. 3 &#x3C; 5? Tak, wykonaj. Wypisz 3. j staje się 4.\n6. 4 &#x3C; 5? Tak, wykonaj. Wypisz 4. j staje się 5.\n7. 5 &#x3C; 5? Nie (fałsz), pętla się kończy.\n*/</span>\n</code></pre>\n<p><strong>Ważne:</strong> Zawsze upewnij się, że w pętli <code>while</code> masz mechanizm, który ostatecznie sprawi, że warunek stanie się fałszywy, inaczej pętla będzie działać w nieskończoność (tzw. \"nieskończona pętla\"), co zablokuje Twój program! 🚨</p>\n<hr>\n<h2 id=\"funkcje-bloki-kodu-do-wielokrotnego-użycia\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-bloki-kodu-do-wielokrotnego-użycia\">>></a>Funkcje: Bloki Kodu do Wielokrotnego Użycia</h2>\n<p>Funkcje to jeden z najważniejszych elementów w programowaniu. Możesz myśleć o nich jak o małych, niezależnych \"maszynkach\" lub \"przepisach\", które wykonują konkretne zadanie. Zamiast powielać ten sam kod wiele razy, możesz zamknąć go w funkcji i po prostu \"wywoływać\" tę funkcję, gdy jej potrzebujesz. ⚙️</p>\n<h3 id=\"po-co-nam-funkcje\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#po-co-nam-funkcje\">>>></a>Po co nam funkcje?</h3>\n<ul>\n<li><strong>Wielokrotne użycie kodu (reusability):</strong> Napisz raz, używaj wiele razy. ♻️</li>\n<li><strong>Organizacja kodu:</strong> Dzielenie dużego programu na mniejsze, zarządzalne fragmenty. 🧩</li>\n<li><strong>Czytelność:</strong> Nazwy funkcji pomagają zrozumieć, co dany fragment kodu robi. 📖</li>\n<li><strong>Łatwość debugowania i modyfikacji:</strong> Jeśli zmienisz coś w funkcji, zmiany te będą obowiązywać wszędzie tam, gdzie funkcja jest używana. 🐛</li>\n</ul>\n<h3 id=\"deklaracja-funkcji-klasyczny-sposób\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#deklaracja-funkcji-klasyczny-sposób\">>>></a>Deklaracja Funkcji: Klasyczny Sposób</h3>\n<p>Najpopularniejszy i najstarszy sposób deklarowania funkcji używa słowa kluczowego <code>function</code>. 📜</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Deklaracja funkcji o nazwie 'powitaj'</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">powitaj</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Kod wewnątrz funkcji, który zostanie wykonany, gdy funkcja zostanie wywołana</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Witaj w świecie JavaScript!\"</span>);\n}\n\n<span class=\"hljs-comment\">// Wywołanie funkcji (sprawienie, aby się wykonała)</span>\n<span class=\"hljs-title function_\">powitaj</span>(); <span class=\"hljs-comment\">// Wypisze: \"Witaj w świecie JavaScript!\"</span>\n\n<span class=\"hljs-comment\">// Funkcja z argumentami (parametrami)</span>\n<span class=\"hljs-comment\">// Argumenty to wartości, które przekazujemy do funkcji, aby mogła na nich pracować.</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dodajDwieLiczby</span>(<span class=\"hljs-params\">liczba1, liczba2</span>) {\n  <span class=\"hljs-keyword\">let</span> suma = liczba1 + liczba2;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Suma wynosi: \"</span> + suma);\n}\n\n<span class=\"hljs-title function_\">dodajDwieLiczby</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// Wypisze: \"Suma wynosi: 12\"</span>\n<span class=\"hljs-title function_\">dodajDwieLiczby</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>); <span class=\"hljs-comment\">// Wypisze: \"Suma wynosi: 30\"</span>\n\n<span class=\"hljs-comment\">// Funkcja zwracająca wartość (return)</span>\n<span class=\"hljs-comment\">// Słowo kluczowe 'return' pozwala funkcji \"oddać\" wynik swojej pracy.</span>\n<span class=\"hljs-comment\">// Dzięki temu możesz użyć wyniku funkcji w innych częściach kodu.</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pomnoz</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a * b; <span class=\"hljs-comment\">// Funkcja zwraca iloczyn 'a' i 'b'</span>\n}\n\n<span class=\"hljs-keyword\">let</span> wynikMnozenia = <span class=\"hljs-title function_\">pomnoz</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// Wynik funkcji (24) jest przypisywany do zmiennej</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wynikMnozenia); <span class=\"hljs-comment\">// Wypisze: 24</span>\n\n<span class=\"hljs-keyword\">let</span> koncowyWynik = <span class=\"hljs-title function_\">pomnoz</span>(wynikMnozenia, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// Możesz użyć wyniku funkcji jako argumentu dla innej</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(koncowyWynik); <span class=\"hljs-comment\">// Wypisze: 48</span>\n</code></pre>\n<h3 id=\"funkcje-strzałkowe-arrow-functions-nowoczesny-skrót\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-strzałkowe-arrow-functions-nowoczesny-skrót\">>>></a>Funkcje Strzałkowe (Arrow Functions): Nowoczesny Skrót</h3>\n<p>Funkcje strzałkowe to nowszy, bardziej zwięzły sposób pisania funkcji w JavaScript, wprowadzony w ES6. Są szczególnie przydatne do krótkich, jednowierszowych funkcji. ➡️🏹</p>\n<p>Ich składnia to: <code>(parametry) => { ciało funkcji }</code></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Przykład prostej funkcji strzałkowej</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">przywitajSie</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Cześć!\"</span>);\n};\n<span class=\"hljs-title function_\">przywitajSie</span>(); <span class=\"hljs-comment\">// Wypisze: \"Cześć!\"</span>\n\n<span class=\"hljs-comment\">// Funkcja strzałkowa z parametrami</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">odejmij</span> = (<span class=\"hljs-params\">a, b</span>) => {\n  <span class=\"hljs-keyword\">return</span> a - b;\n};\n<span class=\"hljs-keyword\">let</span> roznica = <span class=\"hljs-title function_\">odejmij</span>(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">8</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(roznica); <span class=\"hljs-comment\">// Wypisze: 7</span>\n\n<span class=\"hljs-comment\">// Skrócona wersja funkcji strzałkowej (jeśli funkcja zwraca tylko jedną wartość)</span>\n<span class=\"hljs-comment\">// Gdy funkcja strzałkowa ma tylko jedną instrukcję, która jest instrukcją 'return',</span>\n<span class=\"hljs-comment\">// możesz pominąć nawiasy klamrowe `{}` i słowo kluczowe `return`.</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dodajSkrocona</span> = (<span class=\"hljs-params\">a, b</span>) => a + b;\n<span class=\"hljs-keyword\">let</span> sumaSkrocona = <span class=\"hljs-title function_\">dodajSkrocona</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sumaSkrocona); <span class=\"hljs-comment\">// Wypisze: 5</span>\n\n<span class=\"hljs-comment\">// Funkcja strzałkowa z jednym parametrem (nawiasy wokół parametru są opcjonalne)</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">podwoj</span> = (<span class=\"hljs-params\">liczba</span>) => liczba * <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">let</span> podwojonaLiczba = <span class=\"hljs-title function_\">podwoj</span>(<span class=\"hljs-number\">7</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(podwojonaLiczba); <span class=\"hljs-comment\">// Wypisze: 14</span>\n</code></pre>\n<p>Funkcje strzałkowe są bardzo popularne w nowoczesnym JavaScript i będziesz je często widzieć w przykładach kodu. Ważne jest, aby zrozumieć oba sposoby deklarowania funkcji, ponieważ spotkasz się z nimi w różnych projektach. 🎯</p>\n<hr>\n<h2 id=\"obiekty-skarbnice-powiązanych-informacji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#obiekty-skarbnice-powiązanych-informacji\">>></a>Obiekty: Skarbnice Powiązanych Informacji</h2>\n<p>Obiekty w JavaScript to potężne narzędzie do grupowania powiązanych ze sobą danych i funkcji. Pomyśl o obiekcie jak o <strong>rzeczywistym przedmiocie lub koncepcji</strong>, która ma swoje <strong>właściwości</strong> (cechy) i <strong>zachowania</strong> (co potrafi robić, czyli metody). 📦</p>\n<p>Na przykład, jeśli masz obiekt <code>samochod</code>, jego właściwościami mogą być <code>marka</code>, <code>model</code>, <code>rokProdukcji</code>, <code>kolor</code>, a zachowaniami (metodami) mogą być <code>uruchomSilnik()</code>, <code>zatrzymaj()</code>, <code>jedz()</code>. 🚗</p>\n<p>W JavaScript obiekty tworzymy za pomocą nawiasów klamrowych <code>{}</code>. Wewnątrz nich definiujemy <strong>pary klucz-wartość</strong>, gdzie:</p>\n<ul>\n<li><strong>Klucz (lub nazwa właściwości):</strong> Jest to unikalna nazwa, która opisuje daną informację (np. <code>imie</code>, <code>wiek</code>). Zazwyczaj jest to tekst (String).</li>\n<li><strong>Wartość:</strong> Jest to rzeczywista dana przypisana do klucza (np. <code>\"Jan\"</code>, <code>30</code>). Może to być dowolny typ danych: liczba, tekst, wartość logiczna, inna tablica, inny obiekt, a nawet funkcja!</li>\n</ul>\n<p>Jeśli wartość powiązana z kluczem jest funkcją, nazywamy ją <strong>metodą</strong> obiektu.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Tworzenie obiektu 'osoba'</span>\n<span class=\"hljs-keyword\">let</span> osoba = {\n  <span class=\"hljs-comment\">// Właściwości (klucz: wartość)</span>\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Anna\"</span>,\n  <span class=\"hljs-attr\">nazwisko</span>: <span class=\"hljs-string\">\"Kowalska\"</span>,\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">28</span>,\n  <span class=\"hljs-attr\">czyStudent</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">zainteresowania</span>: [<span class=\"hljs-string\">\"czytanie\"</span>, <span class=\"hljs-string\">\"sport\"</span>, <span class=\"hljs-string\">\"gotowanie\"</span>], <span class=\"hljs-comment\">// Wartością może być tablica!</span>\n\n  <span class=\"hljs-comment\">// Metoda (klucz: funkcja) - opisująca zachowanie obiektu</span>\n  <span class=\"hljs-attr\">przedstawSie</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// Używamy `this.imie` i `this.nazwisko`, aby odwołać się do właściwości TEGO obiektu</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, nazywam się <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.imie}</span> <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.nazwisko}</span> i mam <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.wiek}</span> lat.`</span>;\n  },\n\n  <span class=\"hljs-comment\">// Inna metoda, używająca funkcji strzałkowej</span>\n  <span class=\"hljs-attr\">opiszZainteresowania</span>: <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// Ważna uwaga: funkcje strzałkowe inaczej traktują 'this' w kontekście obiektów,</span>\n    <span class=\"hljs-comment\">// dlatego często do odwoływania się do właściwości obiektu w nich</span>\n    <span class=\"hljs-comment\">// używa się tradycyjnych funkcji lub bardziej zaawansowanych technik.</span>\n    <span class=\"hljs-comment\">// Na tym etapie, dla prostoty, użyjemy bezpośredniego odwołania,</span>\n    <span class=\"hljs-comment\">// lub tradycyjnej funkcji jak w 'przedstawSie'.</span>\n    <span class=\"hljs-comment\">// Dla klarowności na początku lepiej używać 'function() {}' jako metod.</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Moje zainteresowania to: <span class=\"hljs-subst\">${osoba.zainteresowania.join(<span class=\"hljs-string\">\", \"</span>)}</span>.`</span>;\n  },\n};\n\n<span class=\"hljs-comment\">// Dostęp do właściwości obiektu (dwa sposoby)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(osoba.<span class=\"hljs-property\">imie</span>); <span class=\"hljs-comment\">// Notacja kropkowa (najczęściej używana) - Wypisze: Anna</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(osoba[<span class=\"hljs-string\">\"wiek\"</span>]); <span class=\"hljs-comment\">// Notacja nawiasów kwadratowych (przydatna, gdy nazwa klucza jest w zmiennej) - Wypisze: 28</span>\n\n<span class=\"hljs-comment\">// Wywołanie metody obiektu</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(osoba.<span class=\"hljs-title function_\">przedstawSie</span>()); <span class=\"hljs-comment\">// Wypisze: \"Cześć, nazywam się Anna Kowalska i mam 28 lat.\"</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(osoba.<span class=\"hljs-title function_\">opiszZainteresowania</span>()); <span class=\"hljs-comment\">// Wypisze: \"Moje zainteresowania to: czytanie, sport, gotowanie.\"</span>\n\n<span class=\"hljs-comment\">// Zmiana wartości właściwości</span>\nosoba.<span class=\"hljs-property\">wiek</span> = <span class=\"hljs-number\">29</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(osoba.<span class=\"hljs-property\">wiek</span>); <span class=\"hljs-comment\">// Wypisze: 29</span>\n\n<span class=\"hljs-comment\">// Dodawanie nowych właściwości</span>\nosoba.<span class=\"hljs-property\">zawod</span> = <span class=\"hljs-string\">\"Programista\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(osoba.<span class=\"hljs-property\">zawod</span>); <span class=\"hljs-comment\">// Wypisze: Programista</span>\n</code></pre>\n<p>Obiekty są fundamentalnym elementem JavaScript i stanowią podstawę do tworzenia bardziej złożonych aplikacji i struktur danych. 🏗️</p>\n<hr>\n<h2 id=\"tablice-uporządkowane-listy-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tablice-uporządkowane-listy-danych\">>></a>Tablice: Uporządkowane Listy Danych</h2>\n<p>Tablice (<code>Array</code>) w JavaScript to specjalny rodzaj obiektu, który pozwala na przechowywanie <strong>uporządkowanej listy wartości</strong>. Pomyśl o tablicy jak o długiej liście zakupów, gdzie każdy element ma swoje miejsce i możesz się do niego odwołać po numerze. 📝</p>\n<p>Każdy element w tablicy ma swój <strong>indeks</strong>, czyli numer pozycji. Ważne jest, aby pamiętać, że <strong>indeksy w JavaScript zawsze zaczynają się od 0!</strong> 🔢</p>\n<ul>\n<li>Pierwszy element ma indeks <code>0</code>.</li>\n<li>Drugi element ma indeks <code>1</code>.</li>\n<li>Trzeci element ma indeks <code>2</code>, i tak dalej.</li>\n</ul>\n<p>Tablice tworzymy za pomocą nawiasów kwadratowych <code>[]</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Tworzenie prostej tablicy liczb</span>\n<span class=\"hljs-keyword\">let</span> liczby = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>];\n\n<span class=\"hljs-comment\">// Dostęp do elementów tablicy za pomocą indeksu</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby[<span class=\"hljs-number\">0</span>]); <span class=\"hljs-comment\">// Wypisze: 10 (pierwszy element)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">// Wypisze: 30 (trzeci element)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby[<span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// Wypisze: 50 (piąty element)</span>\n\n<span class=\"hljs-comment\">// Odczytanie długości tablicy (ile ma elementów) za pomocą właściwości `.length`</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby.<span class=\"hljs-property\">length</span>); <span class=\"hljs-comment\">// Wypisze: 5</span>\n\n<span class=\"hljs-comment\">// Zmiana wartości elementu w tablicy</span>\nliczby[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">25</span>; <span class=\"hljs-comment\">// Zmieniamy drugi element (o indeksie 1) z 20 na 25</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby); <span class=\"hljs-comment\">// Wypisze: [10, 25, 30, 40, 50]</span>\n\n<span class=\"hljs-comment\">// Dodawanie elementów do tablicy</span>\n<span class=\"hljs-comment\">// `push()`: dodaje element na końcu tablicy ➕</span>\nliczby.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">60</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby); <span class=\"hljs-comment\">// Wypisze: [10, 25, 30, 40, 50, 60]</span>\n\n<span class=\"hljs-comment\">// `unshift()`: dodaje element na początku tablicy ➡️</span>\nliczby.<span class=\"hljs-title function_\">unshift</span>(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby); <span class=\"hljs-comment\">// Wypisze: [5, 10, 25, 30, 40, 50, 60]</span>\n\n<span class=\"hljs-comment\">// Usuwanie elementów z tablicy</span>\n<span class=\"hljs-comment\">// `pop()`: usuwa ostatni element z tablicy i zwraca go 🗑️</span>\n<span class=\"hljs-keyword\">let</span> usunietaLiczba = liczby.<span class=\"hljs-title function_\">pop</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(usunietaLiczba); <span class=\"hljs-comment\">// Wypisze: 60</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby); <span class=\"hljs-comment\">// Wypisze: [5, 10, 25, 30, 40, 50]</span>\n\n<span class=\"hljs-comment\">// `shift()`: usuwa pierwszy element z tablicy i zwraca go ⬅️</span>\n<span class=\"hljs-keyword\">let</span> usunietaPierwszaLiczba = liczby.<span class=\"hljs-title function_\">shift</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(usunietaPierwszaLiczba); <span class=\"hljs-comment\">// Wypisze: 5</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liczby); <span class=\"hljs-comment\">// Wypisze: [10, 25, 30, 40, 50]</span>\n\n<span class=\"hljs-comment\">// Iterowanie (przechodzenie) przez elementy tablicy za pomocą pętli for 🚶</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Elementy tablicy:\"</span>);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; liczby.<span class=\"hljs-property\">length</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Element na indeksie <span class=\"hljs-subst\">${i}</span>: <span class=\"hljs-subst\">${liczby[i]}</span>`</span>);\n}\n<span class=\"hljs-comment\">/*\nWypisze:\nElement na indeksie 0: 10\nElement na indeksie 1: 25\nElement na indeksie 2: 30\nElement na indeksie 3: 40\nElement na indeksie 4: 50\n*/</span>\n</code></pre>\n<p>Tablice są niezwykle przydatne w JavaScript, ponieważ pozwalają na efektywne zarządzanie kolekcjami danych, co jest fundamentalne w większości aplikacji. 📊</p>\n<hr>\n<h2 id=\"zadania-do-wykonania-sprawdź-swoje-umiejętności\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania-sprawdź-swoje-umiejętności\">>></a>Zadania do Wykonania: Sprawdź Swoje Umiejętności!</h2>\n<p>Teraz, gdy poznałeś/aś podstawy JavaScript, czas na trochę praktyki! Pamiętaj, że nauka programowania to przede wszystkim pisanie kodu. Spróbuj samodzielnie rozwiązać poniższe zadania, zanim zajrzysz do rozwiązań. To najlepszy sposób, aby utrwalić wiedzę. Powodzenia! 🧑‍💻🌟</p>\n<h3 id=\"zadanie-1-iloczyn-dwóch-liczb\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-iloczyn-dwóch-liczb\">>>></a>Zadanie 1: Iloczyn Dwóch Liczb</h3>\n<p>Napisz funkcję o nazwie <code>obliczIloczyn</code>, która przyjmuje <strong>dwie liczby</strong> jako argumenty (parametry) i <strong>zwraca</strong> ich iloczyn (czyli wynik mnożenia). Następnie wywołaj tę funkcję z dowolnymi dwoma liczbami i wypisz wynik w konsoli.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 1</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">obliczIloczyn</span>(<span class=\"hljs-params\">liczbaA, liczbaB</span>) {\n  <span class=\"hljs-keyword\">return</span> liczbaA * liczbaB; <span class=\"hljs-comment\">// Funkcja zwraca iloczyn dwóch liczb</span>\n}\n\n<span class=\"hljs-comment\">// Przykładowe użycie funkcji</span>\n<span class=\"hljs-keyword\">let</span> wynikZadania1 = <span class=\"hljs-title function_\">obliczIloczyn</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Iloczyn liczb 7 i 8 wynosi: <span class=\"hljs-subst\">${wynikZadania1}</span>`</span>); <span class=\"hljs-comment\">// Oczekiwany wynik: 56</span>\n\n<span class=\"hljs-keyword\">let</span> innyWynik = <span class=\"hljs-title function_\">obliczIloczyn</span>(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Iloczyn liczb 12 i 3 wynosi: <span class=\"hljs-subst\">${innyWynik}</span>`</span>); <span class=\"hljs-comment\">// Oczekiwany wynik: 36</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-obiekt-książka\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-obiekt-książka\">>>></a>Zadanie 2: Obiekt Książka</h3>\n<p>Utwórz obiekt JavaScript o nazwie <code>mojaksiazka</code>, który będzie reprezentował książkę. Obiekt ten powinien mieć następujące <strong>właściwości</strong>:</p>\n<ul>\n<li><code>tytul</code> (typu String)</li>\n<li><code>autor</code> (typu String)</li>\n<li><code>rokWydania</code> (typu Number)</li>\n</ul>\n<p>Dodatkowo, dodaj do tego obiektu <strong>metodę</strong> (funkcję w obiekcie) o nazwie <code>getOpis</code>, która <strong>zwróci</strong> tekst zawierający pełny opis książki, np.: \"Książka 'W pustyni i w puszczy' napisana przez Henryka Sienkiewicza została wydana w roku 1911.\". Następnie wywołaj tę metodę i wypisz jej wynik w konsoli. 📖</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 2</span>\n<span class=\"hljs-keyword\">let</span> mojaksiazka = {\n  <span class=\"hljs-attr\">tytul</span>: <span class=\"hljs-string\">\"Hobbit, czyli tam i z powrotem\"</span>,\n  <span class=\"hljs-attr\">autor</span>: <span class=\"hljs-string\">\"J.R.R. Tolkien\"</span>,\n  <span class=\"hljs-attr\">rokWydania</span>: <span class=\"hljs-number\">1937</span>,\n\n  <span class=\"hljs-comment\">// Metoda zwracająca opis książki</span>\n  <span class=\"hljs-attr\">getOpis</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Książka '<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.tytul}</span>' napisana przez <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.autor}</span> została wydana w roku <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.rokWydania}</span>.`</span>;\n  },\n};\n\n<span class=\"hljs-comment\">// Wywołanie metody i wyświetlenie opisu w konsoli</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(mojaksiazka.<span class=\"hljs-title function_\">getOpis</span>());\n<span class=\"hljs-comment\">// Oczekiwany wynik: Książka 'Hobbit, czyli tam i z powrotem' napisana przez J.R.R. Tolkien została wydana w roku 1937.</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-największa-liczba-w-tablicy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-największa-liczba-w-tablicy\">>>></a>Zadanie 3: Największa Liczba w Tablicy</h3>\n<p>Napisz funkcję o nazwie <code>znajdzNajwiekszaLiczbe</code>, która przyjmuje <strong>tablicę liczb</strong> jako argument i <strong>zwraca największą liczbę</strong> znajdującą się w tej tablicy. Użyj pętli <code>for</code> do przejrzenia wszystkich elementów tablicy. 📈</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 3</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">znajdzNajwiekszaLiczbe</span>(<span class=\"hljs-params\">tablicaLiczb</span>) {\n  <span class=\"hljs-comment\">// Zakładamy, że pierwsza liczba jest największa, a potem ją porównujemy z resztą</span>\n  <span class=\"hljs-keyword\">if</span> (tablicaLiczb.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Tablica jest pusta!\"</span>; <span class=\"hljs-comment\">// Obsługa pustej tablicy</span>\n  }\n\n  <span class=\"hljs-keyword\">let</span> najwieksza = tablicaLiczb[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// Zaczynamy od pierwszego elementu</span>\n\n  <span class=\"hljs-comment\">// Przechodzimy przez resztę tablicy</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &#x3C; tablicaLiczb.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (tablicaLiczb[i] > najwieksza) {\n      najwieksza = tablicaLiczb[i]; <span class=\"hljs-comment\">// Jeśli znajdziemy większą, aktualizujemy</span>\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> najwieksza;\n}\n\n<span class=\"hljs-comment\">// Przykładowe użycie funkcji</span>\n<span class=\"hljs-keyword\">let</span> liczby1 = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n  <span class=\"hljs-string\">`Największa liczba w [<span class=\"hljs-subst\">${liczby1}</span>] to: <span class=\"hljs-subst\">${znajdzNajwiekszaLiczbe(liczby1)}</span>`</span>\n); <span class=\"hljs-comment\">// Oczekiwany wynik: 9</span>\n\n<span class=\"hljs-keyword\">let</span> liczby2 = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n  <span class=\"hljs-string\">`Największa liczba w [<span class=\"hljs-subst\">${liczby2}</span>] to: <span class=\"hljs-subst\">${znajdzNajwiekszaLiczbe(liczby2)}</span>`</span>\n); <span class=\"hljs-comment\">// Oczekiwany wynik: 10</span>\n\n<span class=\"hljs-keyword\">let</span> pustaTablica = [];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n  <span class=\"hljs-string\">`Największa liczba w [<span class=\"hljs-subst\">${pustaTablica}</span>] to: <span class=\"hljs-subst\">${znajdzNajwiekszaLiczbe(\n    pustaTablica\n  )}</span>`</span>\n); <span class=\"hljs-comment\">// Oczekiwany wynik: Tablica jest pusta!</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-wyświetlanie-imion\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-wyświetlanie-imion\">>>></a>Zadanie 4: Wyświetlanie Imion</h3>\n<p>Napisz funkcję o nazwie <code>wyswietlImiona</code>, która przyjmuje <strong>tablicę stringów (imion)</strong> jako argument. Funkcja powinna <strong>wypisać każde imię</strong> w konsoli, poprzedzone tekstem \"Witaj, \". Użyj pętli <code>for</code> lub <code>for...of</code> do iteracji. 👋</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 4</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">wyswietlImiona</span>(<span class=\"hljs-params\">listaImion</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"--- Lista Powitań ---\"</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; listaImion.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Witaj, <span class=\"hljs-subst\">${listaImion[i]}</span>!`</span>);\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"--- Koniec Listy ---\"</span>);\n}\n\n<span class=\"hljs-comment\">// Alternatywnie, używając pętli for...of (nowocześniejsza i często czytelniejsza dla tablic)</span>\n<span class=\"hljs-comment\">/*\nfunction wyswietlImiona(listaImion) {\n  console.log(\"--- Lista Powitań ---\");\n  for (const imie of listaImion) {\n    console.log(`Witaj, ${imie}!`);\n  }\n  console.log(\"--- Koniec Listy ---\");\n}\n*/</span>\n\n<span class=\"hljs-comment\">// Przykładowe użycie funkcji</span>\n<span class=\"hljs-keyword\">let</span> imiona = [<span class=\"hljs-string\">\"Alicja\"</span>, <span class=\"hljs-string\">\"Bartek\"</span>, <span class=\"hljs-string\">\"Cezary\"</span>, <span class=\"hljs-string\">\"Diana\"</span>];\n<span class=\"hljs-title function_\">wyswietlImiona</span>(imiona);\n<span class=\"hljs-comment\">/*\nOczekiwany wynik w konsoli:\n--- Lista Powitań ---\nWitaj, Alicja!\nWitaj, Bartek!\nWitaj, Cezary!\nWitaj, Diana!\n--- Koniec Listy ---\n*/</span>\n</code></pre>\n</details>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Gratulacje! 🎉 Dotarłeś/aś do końca tego wprowadzenia do JavaScript! Nauczyłeś/aś się podstaw, które są fundamentem każdego dewelopera webowego:</p>\n<ul>\n<li>Czym jest JavaScript i dlaczego jest tak wszechstronny.</li>\n<li>Jak deklarować i używać <strong>zmiennych</strong> (<code>var</code>, <code>let</code>, <code>const</code>).</li>\n<li>Poznałeś/aś kluczowe <strong>typy danych</strong> (Number, String, Boolean, Object, Array, Undefined, Null).</li>\n<li>Zrozumiałeś/aś działanie <strong>operatorów</strong> (arytmetycznych, porównania, logicznych, przypisania).</li>\n<li>Nauczyłeś/aś się sterować przepływem programu za pomocą <strong>struktur kontrolnych</strong> (<code>if</code>/<code>else</code>, <code>for</code>, <code>while</code>).</li>\n<li>Opanowałeś/aś tworzenie i używanie <strong>funkcji</strong> (klasyczne i strzałkowe) do organizacji kodu.</li>\n<li>Poznałeś/aś, jak pracować z <strong>obiektami</strong> i <strong>tablicami</strong> do przechowywania złożonych danych.</li>\n</ul>\n<p>To solidny start! Pamiętaj, że nauka programowania to ciągły proces. Nie zniechęcaj się, jeśli coś sprawia Ci trudność. Kluczem jest konsekwencja, praktyka i nieustanne eksperymentowanie z kodem. Im więcej będziesz kodować, tym lepiej będziesz rozumieć i tym swobodniej będziesz się czuć z JavaScriptem. 💪</p>\n<p><strong>Co dalej?</strong></p>\n<p>Teraz, gdy masz mocne podstawy, możesz zagłębić się w bardziej zaawansowane tematy, takie jak:</p>\n<ul>\n<li><strong>DOM Manipulation:</strong> Jak JavaScript \"rozmawia\" ze stroną HTML, by zmieniać jej zawartość, style i strukturę. 🖼️</li>\n<li><strong>Event Handling:</strong> Jak reagować na działania użytkownika (kliknięcia, ruchy myszy, wprowadzanie danych). 🖱️</li>\n<li><strong>Asynchronous JavaScript:</strong> Jak radzić sobie z operacjami, które trwają pewien czas (np. pobieranie danych z internetu). ⏳</li>\n<li><strong>ES6+ Features:</strong> Wiele nowszych funkcji JavaScriptu, które ułatwiają pisanie kodu. ✨</li>\n<li><strong>Frameworks i Biblioteki:</strong> React, Angular, Vue.js – narzędzia, które przyspieszają i ułatwiają budowanie skomplikowanych aplikacji. 🏗️</li>\n</ul>\n<p>Niech Twoja podróż z JavaScriptem będzie ekscytująca i pełna sukcesów! Jeśli masz jakieś pytania, śmiało pytaj! Happy coding! 🚀</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-javascript.md","21 minut",{"_21":165,"_23":166,"_25":167,"_6":177,"_36":115,"_38":178,"_91":221,"_93":222,"_95":223,"_97":224,"_99":225},"Wprowadzenie do TypeScript","Hej, programisto! 👋 Chcesz przenieść swój JavaScript na wyższy poziom? Dowiedz się, czym jest TypeScript, jak go zainstalować, jak zacząć z nim kodować i dlaczego to właśnie on może być Twoim najlepszym kumplem w tworzeniu niezawodnych aplikacji! Przystępny przewodnik dla początkujących z mnóstwem przykładów i praktycznych wskazówek. Gotowy na typowanie? 😉",[11,10,168,28,169,170,171,172,110,173,174,175,176],"programowanie","typowanie statyczne","nauka","przewodnik","web dev","interfejsy","klasy","enums","devtools",[11],{"_21":179,"_41":180},"Quiz: Wprowadzenie do TypeScript - Sprawdź się! 💪",[181,189,197,205,213],{"_44":182,"_46":183,"_52":89,"_54":188},"<p>Czym tak naprawdę jest TypeScript w porównaniu do JavaScriptu?</p>",[184,185,186,187],"Język programowania bazujący na składni Pythona, ale dla frontendu.","System do tworzenia dynamicznych szablonów HTML, alternatywa dla Pug czy Handlebars.","To rozszerzenie JavaScriptu, które dodaje statyczne typowanie i inne bajery dla deweloperów! ✨","To taki super-CSS framework, do stylizacji stron.","Dokładnie tak! TypeScript to JavaScript na sterydach 😎 – rozszerza go o statyczne typowanie, które pomaga łapać błędy zanim kod się uruchomi, a także dostarcza mnóstwo narzędzi wspierających pisanie kodu. To prawdziwy game-changer!",{"_44":190,"_46":191,"_52":71,"_54":196},"<p>Jakie rozszerzenie mają standardowe pliki z kodem TypeScript?</p>",[192,193,194,195],".ts",".cts",".js",".json","Bingo! 🎯 Pliki TypeScript najczęściej mają rozszerzenie **.ts**. Jeśli pracujesz z Reactem, często spotkasz też **.tsx**, który obsługuje składnię JSX (czyli HTML w JS/TS). Po skompilowaniu, zamieniają się w klasyczne pliki **.js**.",{"_44":198,"_46":199,"_52":80,"_54":204},"<p>Które z poniższych sposobów typowania zmiennej <code>liczba</code> na typ liczbowy jest prawidłowe w TypeScript?</p>",[200,201,202,203],"let liczba: 10 = number;","let liczba: number = 10;","var liczba: num = 10;","let liczba = number 10;","Strzał w dziesiątkę! 🎉 Poprawna i najczęściej używana składnia do typowania zmiennej to `let nazwaZmiennej: Typ = wartość;`. Pamiętaj o dwukropku i nazwie typu pisanej małymi literami (np. `number`, `string`, `boolean`).",{"_44":206,"_46":207,"_52":89,"_54":212},"<p>Jaka jest KLUCZOWA różnica między TypeScriptem a JavaScriptem?</p>",[208,209,210,211],"TypeScript nie obsługuje klas, a JavaScript tak.","TypeScript działa tylko w przeglądarce, a JavaScript wszędzie.","TypeScript ma statyczne typowanie (sprawdzanie typów przed uruchomieniem), a JavaScript nie (sprawdza je dopiero w trakcie działania). 🧐","JavaScript nie pozwala na tworzenie funkcji, a TypeScript tak.","Dokładnie tak! To właśnie **statyczne typowanie** jest największą supermocą TypeScripta! 💪 Dzięki niemu Twój edytor kodu (np. VS Code) może wychwycić mnóstwo błędów już podczas pisania, co oszczędza mnóstwo czasu i nerwów.",{"_44":214,"_46":215,"_52":53,"_54":220},"<p>Jak prawidłowo zainstalować kompilator TypeScript globalnie na swoim komputerze za pomocą npm?</p>",[216,217,218,219],"npm get typescript","npm add global typescript","npm install typescript","npm install -g typescript","Brawo! 👍 Polecenie `npm install -g typescript` zainstaluje kompilator `tsc` globalnie, dzięki czemu będziesz mógł go używać z dowolnego miejsca w terminalu. Litera `-g` oznacza 'globalnie'!","b0e3a216-b227-4a1b-9f43-6d47ed3e3a09","wprowadzenie-do-typescript","<p>Cześć! 👋 Słyszałeś/aś kiedyś o <strong>TypeScript</strong>? Jeśli już trochę kodujesz w <strong>JavaScript</strong>, to na pewno docenisz, jak bardzo może ułatwić życie! TypeScript to tak naprawdę <strong>JavaScript na sterydach</strong>, stworzony przez giganta Microsoft. Brzmi poważnie? Może trochę, ale w praktyce to Twój nowy najlepszy przyjaciel w programowaniu! 🧑‍🤝‍🧑</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#co-to-jest-typescript-i-dlaczego-warto-go-zna%C4%87\">Co to jest TypeScript i dlaczego warto go znać?</a></li>\n<li><a href=\"#typescript-vs-javascript-g%C5%82%C3%B3wne-r%C3%B3%C5%BCnice\">TypeScript vs. JavaScript: Główne Różnice</a></li>\n<li><a href=\"#dlaczego-ka%C5%BCdy-programista-powinien-korzysta%C4%87-z-typescript\">Dlaczego każdy programista powinien korzystać z TypeScript?</a></li>\n<li><a href=\"#typescript-od-zera-pierwsze-kroki-w-kodowaniu\">TypeScript od zera: Pierwsze Kroki w Kodowaniu</a>\n<ul>\n<li><a href=\"#instalacja-jak-zacz%C4%85%C4%87-swoj%C4%85-przygod%C4%99\">Instalacja: Jak zacząć swoją przygodę?</a></li>\n<li><a href=\"#kompilacja-magia-przekszta%C5%82cania-ts-w-js\">Kompilacja: Magia przekształcania <code>.ts</code> w <code>.js</code></a></li>\n<li><a href=\"#konfiguracja-projektu-i-tsconfigjson\">Konfiguracja projektu: Tajemnice <code>tsconfig.json</code></a></li>\n<li><a href=\"#tw%C3%B3j-pierwszy-projekt-typescript-hello-types\">Twój pierwszy projekt TypeScript: Hello, Types!</a></li>\n</ul>\n</li>\n<li><a href=\"#podstawy-sk%C5%82adni-typescript-typowanie-w-praktyce\">Podstawy Składni TypeScript: Typowanie w Praktyce!</a>\n<ul>\n<li><a href=\"#typowanie-zmiennych-koniec-z-niespodziankami\">Typowanie zmiennych: Koniec z niespodziankami!</a></li>\n<li><a href=\"#typowanie-funkcji-precyzyjne-wej%C5%9Bcia-i-wyj%C5%9Bcia\">Typowanie funkcji: Precyzyjne wejścia i wyjścia</a></li>\n<li><a href=\"#interfejsy-szablony-dla-twoich-obiekt%C3%B3w\">Interfejsy: Szablony dla Twoich obiektów</a></li>\n<li><a href=\"#typy-z%C5%82o%C5%BCone-gdy-jeden-typ-to-za-ma%C5%82o\">Typy złożone: Gdy jeden typ to za mało!</a></li>\n<li><a href=\"#klasy-i-dziedziczenie-oop-z-supermocami\">Klasy i dziedziczenie: OOP z supermocami</a></li>\n<li><a href=\"#enumy-%C5%82atwiejsze-zarz%C4%85dzanie-sta%C5%82ymi-warto%C5%9Bciami\">Enumy: Łatwiejsze zarządzanie stałymi wartościami</a></li>\n<li><a href=\"#alias-typ%C3%B3w-nadawanie-imion-z%C5%82o%C5%BConym-typom\">Alias typów: Nadawanie imion złożonym typom</a></li>\n</ul>\n</li>\n<li><a href=\"#jak-u%C5%BCywa%C4%87-typ%C3%B3w-w-praktyce-codzienne-scenariusze\">Jak używać typów w praktyce? Codzienne Scenariusze</a></li>\n<li><a href=\"#narz%C4%99dzia-i-integracje-twoi-pomocnicy-w-rozwoju\">Narzędzia i Integracje: Twoi Pomocnicy w Rozwoju</a></li>\n<li><a href=\"#cz%C4%99ste-pu%C5%82apki-i-praktyczne-wskaz%C3%B3wki-jak-unika%C4%87-problem%C3%B3w\">Częste Pułapki i Praktyczne Wskazówki: Jak Unikać Problemów?</a>\n<ul>\n<li><a href=\"#najcz%C4%99stsze-b%C5%82%C4%99dy-i-jak-je-naprawi%C4%87-nie-b%C3%B3j-si%C4%99-czerwonych-podkre%C5%9Ble%C5%84\">Najczęstsze błędy i jak je naprawić: Nie bój się czerwonych podkreśleń!</a></li>\n</ul>\n</li>\n<li><a href=\"#typescript-w-projektach-open-source-i-pracy-zespo%C5%82owej-graj-zespo%C5%82owo\">TypeScript w Projektach Open-Source i Pracy Zespołowej: Graj zespołowo!</a></li>\n<li><a href=\"#gdzie-znale%C5%BA%C4%87-deklaracje-typ%C3%B3w-do-bibliotek-js\">Gdzie znaleźć deklaracje typów do bibliotek JS?</a></li>\n<li><a href=\"#gdzie-szuka%C4%87-pomocy-nie-jeste%C5%9B-sam\">Gdzie szukać pomocy? Nie jesteś sam!</a></li>\n<li><a href=\"#zadania-praktyczne-%C4%87wicz-%C4%87wicz-%C4%87wicz\">Zadania Praktyczne: Ćwicz, ćwicz, ćwicz!</a></li>\n<li><a href=\"#podsumowanie-czas-na-typescript\">Podsumowanie: Czas na TypeScript!</a></li>\n</ol>\n<hr>\n<h2 id=\"co-to-jest-typescript-i-dlaczego-warto-go-znać\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-typescript-i-dlaczego-warto-go-znać\">>></a>Co to jest TypeScript i dlaczego warto go znać?</h2>\n<p>Co to znaczy, że jest \"nadzbiorem\" JavaScriptu? To proste: każdy poprawny kod, który napiszesz w <strong>JavaScript</strong>, jest również poprawnym kodem <strong>TypeScript</strong>! 🤯 To tak, jakby TypeScript był JavaScriptem, ale z dodatkowymi supermocami.</p>\n<p>Główna z tych supermocy to <strong>statyczne typowanie</strong>. Czym to jest? 🤔 Normalnie w JavaScript możesz przypisać cokolwiek do zmiennej, a błędy wyjdą dopiero, gdy program się uruchomi (czasem w najmniej odpowiednim momencie! 😱). TypeScript działa inaczej – sprawdza typy danych (czyli to, czy dana zmienna to liczba, tekst, czy może coś innego) <strong>już podczas pisania kodu</strong>. Dzięki temu, jeśli popełnisz błąd (np. spróbujesz dodać tekst do liczby), Twój edytor kodu od razu Cię o tym poinformuje, zanim w ogóle uruchomisz program! To jak mieć osobistego asystenta, który wyłapuje literówki i pomyłki za Ciebie! ✨</p>\n<p>Zapamiętaj:</p>\n<ul>\n<li><strong>JavaScript + Typy = TypeScript</strong> 🤩</li>\n<li>Pliki TypeScript poznasz po rozszerzeniu <strong><code>.ts</code></strong> (zamiast klasycznego <code>.js</code>).</li>\n<li>TypeScript nie działa bezpośrednio w przeglądarce czy Node.js. Musi być najpierw <strong>skompiowany</strong> (czyli przetłumaczony) na czysty JavaScript. Ale spokojnie, kompilator zrobi to za Ciebie! 😉</li>\n</ul>\n<hr>\n<h2 id=\"typescript-vs-javascript-główne-różnice\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typescript-vs-javascript-główne-różnice\">>></a>TypeScript vs. JavaScript: Główne Różnice</h2>\n<p>No dobrze, wiemy już, że TypeScript to JavaScript z bajerami. Ale jakie dokładnie są te różnice i dlaczego są one tak istotne dla każdego, kto chce pisać solidny kod? 🤔</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Cecha</th><th align=\"left\">JavaScript</th><th align=\"left\">TypeScript</th></tr></thead><tbody><tr><td align=\"left\"><strong>Typowanie</strong></td><td align=\"left\"><strong>Dynamiczne</strong> (sprawdza typy w trakcie działania programu)</td><td align=\"left\"><strong>Statyczne</strong> (sprawdza typy podczas pisania kodu/kompilacji)</td></tr><tr><td align=\"left\"><strong>Błędy</strong></td><td align=\"left\">Często wychodzą dopiero w czasie działania (runtime errors)</td><td align=\"left\">Wykrywane już na etapie pisania kodu (compile-time errors)</td></tr><tr><td align=\"left\"><strong>Kompilacja</strong></td><td align=\"left\">Nie wymaga kompilacji (jest interpretowany)</td><td align=\"left\">Wymaga <strong>kompilacji (transpilacji)</strong> do JavaScriptu</td></tr><tr><td align=\"left\"><strong>Wsparcie narzędzi</strong></td><td align=\"left\">Dobre, ale bez pełnej wiedzy o typach</td><td align=\"left\"><strong>Doskonałe!</strong> Podpowiedzi, autouzupełnianie, refaktoryzacje na wyższym poziomie 🚀</td></tr><tr><td align=\"left\"><strong>Pliki</strong></td><td align=\"left\"><code>.js</code> (lub <code>.jsx</code> dla Reacta)</td><td align=\"left\"><code>.ts</code> (lub <code>.tsx</code> dla Reacta)</td></tr></tbody></table>\n<p><strong>Kompilacja</strong>: To kluczowa sprawa! 🔑 Twój kod TypeScript (<code>.ts</code>) musi zostać <strong>przetłumaczony</strong> (technicznie to się nazywa <strong>transpilacja</strong>, bo to z jednego języka JavaScriptu na inną, starszą wersję JavaScriptu) na czysty JavaScript (<code>.js</code>), zanim przeglądarka albo Node.js będzie mogła go zrozumieć i uruchomić. To jak z przetłumaczeniem książki na inny język – najpierw tłumacz, potem czytaj. Kompilator TypeScripta (<code>tsc</code>) robi to błyskawicznie! ⚡️</p>\n<p><strong>Typowanie</strong>: To serce TypeScripta! ❤️ Dzięki niemu możesz określić, jakiego typu danych spodziewasz się w danym miejscu (np. <code>ta zmienna zawsze będzie liczbą</code>, <code>ta funkcja zawsze zwróci tekst</code>). Jeśli spróbujesz przypisać coś innego, TypeScript natychmiast Cię o tym poinformuje. W JavaScript takie błędy wychodzą na jaw dopiero, gdy użytkownik kliknie coś na stronie, co może doprowadzić do nieprzewidzianych crashy. 💥 W TypeScript błędy wyłapywane są <strong>wcześniej</strong>, co oszczędza mnóstwo czasu na debugowanie (czyli szukanie i naprawianie błędów)! 🕵️‍♀️</p>\n<p><strong>Lepsze wsparcie dla narzędzi</strong>: Wyobraź sobie, że Twój edytor kodu (np. super popularny VS Code) wie absolutnie wszystko o Twoim kodzie. Wie, jakie masz zmienne, jakich typów są, jakie funkcje przyjmują argumenty i co zwracają. Dzięki temu może Ci podpowiadać nazwy zmiennych, autouzupełniać kod, a nawet automatycznie refaktoryzować (czyli bezpiecznie zmieniać strukturę kodu) duże fragmenty! To jak mieć magiczną różdżkę! 🪄</p>\n<hr>\n<h2 id=\"dlaczego-każdy-programista-powinien-korzystać-z-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-każdy-programista-powinien-korzystać-z-typescript\">>></a>Dlaczego każdy programista powinien korzystać z TypeScript?</h2>\n<p>Okej, TypeScript to JavaScript z typami, rozumiem. Ale czy to naprawdę jest takie \"must-have\"? Moja odpowiedź brzmi: <strong>ZDECYDOWANIE TAK!</strong> 🙌 Oto dlaczego:</p>\n<ul>\n<li><strong>Bezpieczeństwo przede wszystkim!</strong> 🛡️ Statyczne typowanie to Twoja tarcza ochronna. Pomaga unikać tych irytujących błędów, które w JavaScript pojawiają się dopiero w trakcie działania aplikacji. Myślisz, że wysyłasz liczbę, a wysyłasz <code>undefined</code>? TypeScript powie Ci o tym od razu!</li>\n<li><strong>Kod czyta się jak dobrą książkę!</strong> 📖 Typy są jak darmowa, zawsze aktualna dokumentacja Twojego kodu. Kiedy patrzysz na funkcję <code>obliczPodatek(kwota: number, stawka: number): number</code>, od razu wiesz, że przyjmuje dwie liczby i zwraca liczbę. Koniec z zgadywaniem i przekopywaniem się przez dziesiątki linii kodu, żeby zrozumieć, co dana funkcja robi!</li>\n<li><strong>Twoje narzędzia (edytory) pokochają Cię!</strong> ❤️ VS Code (i inne edytory) z TypeScriptem to prawdziwy dream team. Dostajesz inteligentne podpowiedzi, autouzupełnianie, łatwe przechodzenie do definicji funkcji czy zmiennych. To przyspiesza pisanie kodu i zmniejsza liczbę literówek do minimum.</li>\n<li><strong>Skalowalność to podstawa dużych projektów!</strong> 📈 W małym skrypcie JavaScript brak typów może nie być problemem. Ale wyobraź sobie projekt z tysiącami linii kodu, nad którym pracuje wielu ludzi! Bez TypeScriptu taki projekt szybko staje się koszmarem. Z typami kod jest łatwiejszy do utrzymania, rozwijania i refaktoryzowania.</li>\n<li><strong>Łatwa Integracja: Nie musisz zaczynać od nowa!</strong> 🔄 Masz już istniejący projekt w JavaScript? Spokojnie! TypeScript jest tak zaprojektowany, że możesz go wprowadzać stopniowo. Możesz zmieniać pliki na <code>.ts</code> jeden po drugim, naprawiając typy w miarę potrzeb. To nie jest rewolucja, to ewolucja!</li>\n<li><strong>Popularność i Społeczność: Jesteś w dobrym towarzystwie!</strong> 🤝 TypeScript jest używany w olbrzymich projektach, takich jak Angular, Visual Studio Code, czy nawet Deno (środowisko uruchomieniowe dla JavaScriptu i TypeScriptu!). Znajomość TypeScripta to mega atut na rynku pracy!</li>\n<li><strong>Korzystaj z najnowszych funkcji JS... już dziś!</strong> 🔮 TypeScript pozwala pisać kod, używając najnowszych funkcji JavaScript (nawet tych, które jeszcze nie są wspierane przez wszystkie przeglądarki!). Kompilator zadba o to, żeby Twój kod został przetłumaczony na starszą wersję JavaScriptu, która działa wszędzie. Fajnie, prawda?</li>\n</ul>\n<p>Podsumowując, TypeScript to inwestycja w jakość, efektywność i przyszłość Twojego kodu. Warto! ✨</p>\n<hr>\n<h2 id=\"typescript-od-zera-pierwsze-kroki-w-kodowaniu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typescript-od-zera-pierwsze-kroki-w-kodowaniu\">>></a>TypeScript od zera: Pierwsze Kroki w Kodowaniu</h2>\n<p>Zacznijmy naszą przygodę z TypeScriptem! Nie martw się, to prostsze niż myślisz. Potrzebujemy tylko kilku narzędzi.</p>\n<h3 id=\"instalacja-jak-zacząć-swoją-przygodę\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#instalacja-jak-zacząć-swoją-przygodę\">>>></a>Instalacja: Jak zacząć swoją przygodę?</h3>\n<p>Zanim zaczniemy pisać kod, musimy zainstalować <strong>kompilator TypeScript</strong>. Najłatwiej zrobić to za pomocą <strong>npm</strong> (Node Package Manager), który jest instalowany razem z Node.js. Jeśli nie masz jeszcze Node.js, pobierz go stąd: <a href=\"https://nodejs.org/\">https://nodejs.org/</a>.</p>\n<p>Kiedy masz już Node.js i npm, otwórz terminal (lub wiersz poleceń) i wpisz to proste polecenie:</p>\n<pre><code class=\"hljs language-bash\">npm install -g typescript\n</code></pre>\n<p>Co tu się dzieje?</p>\n<ul>\n<li><code>npm install</code>: To standardowe polecenie do instalacji pakietów.</li>\n<li><code>-g</code>: To flaga oznacza \"globalnie\". Zainstalowanie TypeScripta globalnie pozwoli Ci używać kompilatora <code>tsc</code> (TypeScript Compiler) z dowolnego miejsca w systemie, a nie tylko w konkretnym projekcie. Mega wygodne!</li>\n<li><code>typescript</code>: To nazwa pakietu, który chcemy zainstalować.</li>\n</ul>\n<p>Po instalacji możesz sprawdzić, czy wszystko poszło gładko, wpisując:</p>\n<pre><code class=\"hljs language-bash\">tsc --version\n</code></pre>\n<p>Jeśli zobaczysz numer wersji (np. <code>Version 5.x.x</code>), to znaczy, że jesteś gotowy/a do kodowania! 🎉</p>\n<p><strong>Alternatywa: Instalacja lokalna w projekcie</strong>\nMożesz też zainstalować TypeScript tylko dla konkretnego projektu. To dobra praktyka, gdy pracujesz w zespole i chcesz, żeby wszyscy używali tej samej wersji TypeScriptu.</p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev typescript\n</code></pre>\n<p>W tym przypadku będziesz musiał/a używać <code>npx tsc</code> zamiast samego <code>tsc</code>, aby uruchomić kompilator (bo <code>tsc</code> nie będzie dostępne globalnie).</p>\n<h3 id=\"kompilacja-magia-przekształcania-ts-w-js\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#kompilacja-magia-przekształcania-ts-w-js\">>>></a>Kompilacja: Magia przekształcania <code>.ts</code> w <code>.js</code></h3>\n<p>Jak już wiesz, przeglądarki nie rozumieją TypeScriptu. Rozumieją tylko JavaScript. Dlatego nasz kod <code>.ts</code> musi zostać <strong>skompliowany</strong> (lub <strong>transpilowany</strong>) na <code>.js</code>. Robi to właśnie kompilator <code>tsc</code>.</p>\n<p>Załóżmy, że masz plik <code>moja-apka.ts</code> z takim kodem:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// moja-apka.ts</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">wiadomosc</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Cześć, świecie z TypeScript!\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wiadomosc);\n</code></pre>\n<p>Aby go skompilować, użyj polecenia w terminalu (w katalogu, gdzie jest plik <code>moja-apka.ts</code>):</p>\n<pre><code class=\"hljs language-bash\">tsc moja-apka.ts\n</code></pre>\n<p>Po wykonaniu tego polecenia, obok pliku <code>moja-apka.ts</code> pojawi się nowy plik o nazwie <code>moja-apka.js</code>, który będzie wyglądał tak:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// moja-apka.js (wygenerowany automatycznie!)</span>\n<span class=\"hljs-keyword\">var</span> wiadomosc = <span class=\"hljs-string\">\"Cześć, świecie z TypeScript!\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wiadomosc);\n</code></pre>\n<p>Widzisz? Czysty JavaScript, gotowy do uruchomienia! 🤩</p>\n<h3 id=\"konfiguracja-projektu-i-tsconfigjson\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#konfiguracja-projektu-i-tsconfigjson\">>>></a>Konfiguracja projektu i <code>tsconfig.json</code></h3>\n<p>W małych projektach kompilowanie pojedynczych plików to pestka. Ale w większych aplikacjach, gdzie masz wiele plików i folderów, ręczne kompilowanie każdego z osobna to katorga. 😩 Tu z pomocą przychodzi plik <strong><code>tsconfig.json</code></strong>! To plik konfiguracyjny, który mówi kompilatorowi TypeScripta, jak ma się zachować – jakie pliki kompilować, gdzie je umieścić, do jakiej wersji JavaScriptu konwertować i wiele, wiele więcej.</p>\n<p>Aby wygenerować podstawowy plik <code>tsconfig.json</code> w swoim projekcie, przejdź do głównego katalogu projektu w terminalu i wpisz:</p>\n<pre><code class=\"hljs language-bash\">tsc --init\n</code></pre>\n<p>To polecenie stworzy plik <code>tsconfig.json</code> z domyślnymi, często używanymi ustawieniami. Otwórz go w edytorze kodu – zobaczysz mnóstwo skomentowanych opcji. Na początek skupmy się na kilku kluczowych:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"compilerOptions\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"target\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"es2016\"</span> <span class=\"hljs-comment\">/* Określa docelową wersję ECMAScript (JavaScript). Np. \"es5\", \"es6\" (lub \"es2015\"), \"es2016\", \"esnext\".  Ustawienie na \"es2016\" (lub nowsze) oznacza, że kompilator wygeneruje JavaScript z nowoczesną składnią. */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"module\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"commonjs\"</span> <span class=\"hljs-comment\">/* Określa system modułów dla wygenerowanego JavaScriptu. \"commonjs\" jest popularne w Node.js, \"esnext\" dla nowoczesnych przeglądarek. */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"strict\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-comment\">/* Włącza wszystkie rygorystyczne opcje sprawdzania typów. BARDZO zalecane dla większego bezpieczeństwa! 🔒 */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"outDir\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"./dist\"</span> <span class=\"hljs-comment\">/* Określa katalog wyjściowy dla skompilowanych plików .js. Cały nasz skompilowany kod trafi do folderu 'dist'. */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"esModuleInterop\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-comment\">/* Pozwala na lepszą współpracę między CommonJS i ES Modules. Warto włączyć. */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"forceConsistentCasingInFileNames\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-comment\">/* Wymusza spójność w nazwach plików (np. `mojaKlasa.ts` vs `mojaklasa.ts`). Zapobiega błędom na różnych systemach operacyjnych. */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"skipLibCheck\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span> <span class=\"hljs-comment\">/* Pomija sprawdzanie typów w plikach deklaracji bibliotek (np. node_modules/@types). Przydatne, aby uniknąć błędów z typami z zewnętrznych bibliotek. */</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"include\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">\"src/**/*\"</span> <span class=\"hljs-comment\">/* Określa, które pliki i foldery mają być kompilowane. Tutaj: wszystkie pliki we folderze 'src' i jego podfolderach. */</span>\n  <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"exclude\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">\"node_modules\"</span> <span class=\"hljs-comment\">/* Określa, które pliki i foldery mają być IGNOROWANE podczas kompilacji. */</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">\"**/*.spec.ts\"</span> <span class=\"hljs-comment\">/* Typowy wzorzec wykluczania plików testowych */</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>Po utworzeniu pliku <code>tsconfig.json</code> wystarczy wpisać samo <code>tsc</code> w terminalu (w katalogu projektu), a kompilator automatycznie znajdzie ten plik i skompiluje wszystko zgodnie z jego wytycznymi! Magia! ✨</p>\n<h3 id=\"twój-pierwszy-projekt-typescript-hello-types\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#twój-pierwszy-projekt-typescript-hello-types\">>>></a>Twój pierwszy projekt TypeScript: Hello, Types!</h3>\n<p>No to jedziemy! Stwórzmy nasz pierwszy mały projekt TypeScript.</p>\n<ol>\n<li>\n<p><strong>Stwórz nowy folder projektu i wejdź do niego:</strong></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> moj-pierwszy-projekt-ts\n<span class=\"hljs-built_in\">cd</span> moj-pierwszy-projekt-ts\n</code></pre>\n</li>\n<li>\n<p><strong>Zainicjuj npm (stworzy plik <code>package.json</code>):</strong></p>\n<pre><code class=\"hljs language-bash\">npm init -y\n</code></pre>\n<p>Flaga <code>-y</code> oznacza, że zgadzasz się na domyślne ustawienia i nie będziesz musiał/a klikać Enter wiele razy.</p>\n</li>\n<li>\n<p><strong>Zainstaluj TypeScript jako zależność deweloperską:</strong></p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev typescript\n</code></pre>\n<p><code>--save-dev</code> oznacza, że TypeScript jest potrzebny tylko podczas rozwoju, a nie w finalnej wersji aplikacji.</p>\n</li>\n<li>\n<p><strong>Wygeneruj plik <code>tsconfig.json</code>:</strong></p>\n<pre><code class=\"hljs language-bash\">npx tsc --init\n</code></pre>\n<p><code>npx</code> pozwala uruchomić polecenie <code>tsc</code> zainstalowane lokalnie w projekcie (zamiast globalnie).\nOtwórz <code>tsconfig.json</code> i upewnij się, że <code>outDir</code> jest ustawione na <code>./dist</code> i <code>include</code> na <code>\"src/**/*\"</code>. Możesz też zmienić <code>target</code> na <code>es2020</code> dla nowocześniejszego kodu wyjściowego.</p>\n</li>\n<li>\n<p><strong>Stwórz folder <code>src</code> i plik <code>index.ts</code> w środku:</strong></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> src\n<span class=\"hljs-comment\"># Teraz otwórz ten folder w swoim edytorze kodu (np. VS Code) i stwórz plik src/index.ts</span>\n</code></pre>\n<p>W <code>src/index.ts</code> dodaj taki kod:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// src/index.ts</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">powitajUzytkownika</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-keyword\">if</span> (wiek &#x3C; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Wiek nie może być ujemny! 😡\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Wystąpił błąd.\"</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie}</span>! Masz <span class=\"hljs-subst\">${wiek}</span> lat. Fajnie, że jesteś! 🎉`</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> wiadomoscPowitalna = <span class=\"hljs-title function_\">powitajUzytkownika</span>(<span class=\"hljs-string\">\"Alicja\"</span>, <span class=\"hljs-number\">25</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wiadomoscPowitalna);\n\n<span class=\"hljs-comment\">// Spróbujmy wywołać z błędem, zobacz co się stanie w edytorze!</span>\n<span class=\"hljs-comment\">// const bladWiadomosc = powitajUzytkownika(\"Marcin\", \"dwadzieścia\"); // TypeScript od razu zakrzyczy! 🚨</span>\n</code></pre>\n</li>\n<li>\n<p><strong>Skompiluj swój kod:</strong>\nW terminalu, będąc w głównym katalogu projektu, wpisz:</p>\n<pre><code class=\"hljs language-bash\">npx tsc\n</code></pre>\n<p>Powinien pojawić się nowy folder <code>dist</code> z plikiem <code>index.js</code> w środku.</p>\n</li>\n<li>\n<p><strong>Uruchom skompilowany kod JavaScript:</strong></p>\n<pre><code class=\"hljs language-bash\">node dist/index.js\n</code></pre>\n<p>Powinieneś/Powinnaś zobaczyć w konsoli: <code>Cześć, Alicja! Masz 25 lat. Fajnie, że jesteś! 🎉</code>.</p>\n</li>\n</ol>\n<p>Gratulacje! Właśnie skompilowałeś/aś i uruchomiłeś/aś swój pierwszy kod TypeScript! 🥳</p>\n<hr>\n<h2 id=\"podstawy-składni-typescript-typowanie-w-praktyce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawy-składni-typescript-typowanie-w-praktyce\">>></a>Podstawy Składni TypeScript: Typowanie w Praktyce!</h2>\n<p>Teraz, gdy wiesz, jak ustawić projekt, zanurkujmy głębiej w sam język! Poznasz kluczowe elementy składni TypeScript, które sprawiają, że pisanie kodu jest bezpieczniejsze i przyjemniejsze.</p>\n<h3 id=\"typowanie-zmiennych-koniec-z-niespodziankami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-zmiennych-koniec-z-niespodziankami\">>>></a>Typowanie zmiennych: Koniec z niespodziankami!</h3>\n<p>W TypeScript możesz jawnie określić, jakiego typu danych spodziewasz się po zmiennej. Robisz to za pomocą dwukropka (<code>:</code>) po nazwie zmiennej, a następnie nazwy typu.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Typy podstawowe:</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">30</span>; <span class=\"hljs-comment\">// Zmienna 'wiek' musi być liczbą</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Adam\"</span>; <span class=\"hljs-comment\">// Zmienna 'imie' musi być tekstem</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">czyAktywny</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Zmienna 'czyAktywny' musi być wartością logiczną (prawda/fałsz)</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">nicNieMa</span>: <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// Zmienna 'nicNieMa' może przyjąć tylko null</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">nieOkreslone</span>: <span class=\"hljs-literal\">undefined</span> = <span class=\"hljs-literal\">undefined</span>; <span class=\"hljs-comment\">// Zmienna 'nieOkreslone' może przyjąć tylko undefined</span>\n\n<span class=\"hljs-comment\">// Co się stanie, jeśli spróbujesz przypisać zły typ?</span>\n<span class=\"hljs-comment\">// wiek = \"trzydzieści\"; // 🚨 Błąd kompilacji: Type 'string' is not assignable to type 'number'.</span>\n<span class=\"hljs-comment\">// imie = 123;         // 🚨 Błąd kompilacji: Type 'number' is not assignable to type 'string'.</span>\n\n<span class=\"hljs-comment\">// TypeScript potrafi też WYWNIOSKOWAĆ typ!</span>\n<span class=\"hljs-comment\">// Jeśli od razu przypiszesz wartość, TypeScript sam zgadnie typ.</span>\n<span class=\"hljs-keyword\">let</span> miasto = <span class=\"hljs-string\">\"Kraków\"</span>; <span class=\"hljs-comment\">// TypeScript wie, że to jest typu 'string'</span>\n<span class=\"hljs-comment\">// miasto = 123; // 🚨 Błąd, bo 'miasto' zostało wywnioskowane jako string!</span>\n\n<span class=\"hljs-comment\">// Typ 'any' - ucieczka od typowania (ale używaj ostrożnie!)</span>\n<span class=\"hljs-comment\">// Czasami potrzebujesz zmiennej, która może przyjąć DOWOLNY typ.</span>\n<span class=\"hljs-comment\">// Typ 'any' wyłącza sprawdzanie typów dla tej zmiennej.</span>\n<span class=\"hljs-comment\">// Używaj go tylko wtedy, gdy naprawdę wiesz, co robisz!</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">dowolnyTyp</span>: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-string\">\"Może być tekst\"</span>;\ndowolnyTyp = <span class=\"hljs-number\">123</span>; <span class=\"hljs-comment\">// OK</span>\ndowolnyTyp = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// OK</span>\n</code></pre>\n<p><strong>Wskazówka:</strong> Chociaż <code>any</code> daje elastyczność, to jest to trochę \"oszustwo\" w świecie typowania. Staraj się go unikać, chyba że naprawdę nie masz innej opcji (np. pracujesz z bardzo starym kodem JS bez typów). Celem TypeScripta jest właśnie bezpieczeństwo typów! 👮‍♂️</p>\n<h3 id=\"typowanie-funkcji-precyzyjne-wejścia-i-wyjścia\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-funkcji-precyzyjne-wejścia-i-wyjścia\">>>></a>Typowanie funkcji: Precyzyjne wejścia i wyjścia</h3>\n<p>Funkcje w TypeScript mogą być bardzo precyzyjnie typowane. Możesz określić typy dla:</p>\n<ul>\n<li><strong>Argumentów (parametrów)</strong> funkcji: Co funkcja przyjmuje?</li>\n<li><strong>Wartości zwracanej</strong> przez funkcję: Co funkcja oddaje?</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Funkcja przyjmująca dwie liczby i zwracająca liczbę</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>)); <span class=\"hljs-comment\">// Wypisze: 15</span>\n\n<span class=\"hljs-comment\">// console.log(dodaj(\"5\", 10)); // 🚨 Błąd: Argument of type 'string' is not assignable to parameter of type 'number'.</span>\n\n<span class=\"hljs-comment\">// Funkcja, która nic nie zwraca (typ 'void')</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">wyswietlWiadomosc</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">wiadomosc</span>: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">void</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Wiadomość: <span class=\"hljs-subst\">${wiadomosc}</span>`</span>);\n}\n\n<span class=\"hljs-title function_\">wyswietlWiadomosc</span>(<span class=\"hljs-string\">\"Halo, świat!\"</span>); <span class=\"hljs-comment\">// Wypisze: Wiadomość: Halo, świat!</span>\n\n<span class=\"hljs-comment\">// Funkcje strzałkowe (Arrow Functions) z typowaniem</span>\n<span class=\"hljs-keyword\">const</span> pomnoz = (<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">number</span> =></span> x * y;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">pomnoz</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>)); <span class=\"hljs-comment\">// Wypisze: 20</span>\n\n<span class=\"hljs-comment\">// Parametry opcjonalne (z '?' przed dwukropkiem)</span>\n<span class=\"hljs-comment\">// Możesz nie podawać wartości dla parametru opcjonalnego.</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">przywitaj</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">wiek</span>?: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-keyword\">if</span> (wiek) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie}</span>! Masz <span class=\"hljs-subst\">${wiek}</span> lat.`</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie}</span>!`</span>;\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">przywitaj</span>(<span class=\"hljs-string\">\"Kasia\"</span>)); <span class=\"hljs-comment\">// Wypisze: Cześć, Kasia!</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">przywitaj</span>(<span class=\"hljs-string\">\"Piotr\"</span>, <span class=\"hljs-number\">40</span>)); <span class=\"hljs-comment\">// Wypisze: Cześć, Piotr! Masz 40 lat.</span>\n\n<span class=\"hljs-comment\">// Parametry z wartościami domyślnymi</span>\n<span class=\"hljs-comment\">// Jeśli nie podasz wartości dla takiego parametru, zostanie użyta wartość domyślna.</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">obliczPoleKola</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">promien</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">PI</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">3.14</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable constant_\">PI</span> * promien * promien;\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">obliczPoleKola</span>(<span class=\"hljs-number\">5</span>)); <span class=\"hljs-comment\">// Użyje PI = 3.14</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">obliczPoleKola</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3.14159</span>)); <span class=\"hljs-comment\">// Użyje podanej wartości PI</span>\n</code></pre>\n<p>Typowanie funkcji jest niezwykle przydatne, zwłaszcza gdy pracujesz w zespole. Od razu widać, czego funkcja oczekuje i co zwróci, co minimalizuje błędy i nieporozumienia. 🙌</p>\n<h3 id=\"interfejsy-szablony-dla-twoich-obiektów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#interfejsy-szablony-dla-twoich-obiektów\">>>></a>Interfejsy: Szablony dla Twoich obiektów</h3>\n<p>Interfejsy (<code>interface</code>) to jeden z najpotężniejszych narzędzi w TypeScript! Pozwalają one <strong>opisać strukturę obiektów</strong>. Możesz myśleć o interfejsie jak o <strong>umowie</strong> lub <strong>szablonie</strong>, który mówi: \"każdy obiekt, który będzie tego typu, musi mieć takie i takie właściwości o takich i takich typach\".</p>\n<p>To super przydatne, gdy pracujesz z danymi, które mają określoną strukturę, np. dane pobrane z API (jakieś informacje o użytkowniku, produkcie itp.).</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Definiowanie interfejsu 'Uzytkownik'</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Uzytkownik</span> {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// Właściwość 'imie' musi być typu string</span>\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-comment\">// Właściwość 'wiek' musi być typu number</span>\n  <span class=\"hljs-attr\">email</span>?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// Właściwość 'email' jest OPCJONALNA (znak '?'). Może być stringiem lub w ogóle jej nie być.</span>\n  <span class=\"hljs-attr\">jestAktywny</span>: <span class=\"hljs-built_in\">boolean</span>; <span class=\"hljs-comment\">// Właściwość 'jestAktywny' musi być booleanem</span>\n  <span class=\"hljs-attr\">zainteresowania</span>: <span class=\"hljs-built_in\">string</span>[]; <span class=\"hljs-comment\">// Właściwość 'zainteresowania' to tablica stringów</span>\n}\n\n<span class=\"hljs-comment\">// Tworzenie obiektu, który SPEŁNIA interfejs 'Uzytkownik'</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">nowyUzytkownik</span>: <span class=\"hljs-title class_\">Uzytkownik</span> = {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Ewa\"</span>,\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">28</span>,\n  <span class=\"hljs-attr\">jestAktywny</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">zainteresowania</span>: [<span class=\"hljs-string\">\"czytanie\"</span>, <span class=\"hljs-string\">\"góry\"</span>, <span class=\"hljs-string\">\"programowanie\"</span>],\n  <span class=\"hljs-comment\">// 'email' jest opcjonalny, więc nie musimy go tu podawać</span>\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(nowyUzytkownik.<span class=\"hljs-property\">imie</span>); <span class=\"hljs-comment\">// Wypisze: Ewa</span>\n\n<span class=\"hljs-comment\">// Tworzenie obiektu z mailem</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">uzytkownikZMailem</span>: <span class=\"hljs-title class_\">Uzytkownik</span> = {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Marek\"</span>,\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">35</span>,\n  <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"marek@example.com\"</span>,\n  <span class=\"hljs-attr\">jestAktywny</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">zainteresowania</span>: [<span class=\"hljs-string\">\"gry\"</span>, <span class=\"hljs-string\">\"muzyka\"</span>],\n};\n\n<span class=\"hljs-comment\">// Co się stanie, jeśli obiekt NIE SPEŁNIA interfejsu?</span>\n<span class=\"hljs-comment\">// const zlyUzytkownik: Uzytkownik = {</span>\n<span class=\"hljs-comment\">//     imie: \"Kamil\",</span>\n<span class=\"hljs-comment\">//     wiek: \"dwadzieścia\", // 🚨 Błąd: Type 'string' is not assignable to type 'number'.</span>\n<span class=\"hljs-comment\">//     jestAktywny: true</span>\n<span class=\"hljs-comment\">//     // 🚨 Błąd: Property 'zainteresowania' is missing in type...</span>\n<span class=\"hljs-comment\">// };</span>\n</code></pre>\n<p>Interfejsy są fundamentem dla pisania czytelnego i bezpiecznego kodu, zwłaszcza w większych aplikacjach, gdzie struktury danych są skomplikowane. Używaj ich często! 💪</p>\n<h3 id=\"typy-złożone-gdy-jeden-typ-to-za-mało\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typy-złożone-gdy-jeden-typ-to-za-mało\">>>></a>Typy złożone: Gdy jeden typ to za mało!</h3>\n<p>Czasami potrzebujesz typów, które łączą w sobie cechy kilku innych. TypeScript oferuje świetne narzędzia do tworzenia takich \"hybryd\":</p>\n<ul>\n<li>\n<p><strong>Unie Typów (<code>|</code>)</strong>: Pozwalają zmiennej przyjmować wartości jednego z kilku określonych typów. To jak znak \"LUB\" – zmienna może być <em>albo</em> tym, <em>albo</em> tym.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-comment\">// 'id' może być stringiem LUB liczbą</span>\nid = <span class=\"hljs-string\">\"abc-123\"</span>; <span class=\"hljs-comment\">// OK</span>\nid = <span class=\"hljs-number\">456</span>; <span class=\"hljs-comment\">// OK</span>\n<span class=\"hljs-comment\">// id = true;    // 🚨 Błąd: Type 'boolean' is not assignable to type 'string | number'.</span>\n</code></pre>\n<p>To bardzo przydatne, gdy np. identyfikatory (ID) mogą być zarówno tekstami, jak i liczbami.</p>\n</li>\n<li>\n<p><strong>Typy Literalne</strong>: Możesz określić, że zmienna może przyjąć tylko konkretne wartości (np. tylko jeden z kilku tekstów lub liczb).</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Kierunek</span> = <span class=\"hljs-string\">\"północ\"</span> | <span class=\"hljs-string\">\"południe\"</span> | <span class=\"hljs-string\">\"wschód\"</span> | <span class=\"hljs-string\">\"zachód\"</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">obecnyKierunek</span>: <span class=\"hljs-title class_\">Kierunek</span> = <span class=\"hljs-string\">\"północ\"</span>; <span class=\"hljs-comment\">// OK</span>\n<span class=\"hljs-comment\">// obecnyKierunek = \"góra\"; // 🚨 Błąd: Type '\"góra\"' is not assignable to type 'Kierunek'.</span>\n</code></pre>\n<p>To świetnie sprawdza się w przypadku stałych wartości, np. statusów, poziomów dostępu czy właśnie kierunków.</p>\n</li>\n<li>\n<p><strong>Typy Połączeń (Intersection Types) (<code>&#x26;</code>)</strong>: Pozwalają połączyć ze sobą właściwości wielu typów w jeden nowy typ. To jak znak \"I\" – nowy typ musi mieć właściwości <em>zarówno</em> tego, <em>jak i</em> tego typu.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Admin</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>;\n  <span class=\"hljs-attr\">uprawnienia</span>: <span class=\"hljs-built_in\">string</span>[];\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UzytkownikZwykly</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"user\"</span>;\n  <span class=\"hljs-attr\">nick</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-comment\">// Typ 'Osoba' to ALBO Admin, ALBO UzytkownikZwykly (Unia typów)</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Osoba</span> = <span class=\"hljs-title class_\">Admin</span> | <span class=\"hljs-title class_\">UzytkownikZwykly</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">admin</span>: <span class=\"hljs-title class_\">Osoba</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>,\n  <span class=\"hljs-attr\">uprawnienia</span>: [<span class=\"hljs-string\">\"moderacja\"</span>, <span class=\"hljs-string\">\"raporty\"</span>],\n};\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">user</span>: <span class=\"hljs-title class_\">Osoba</span> = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-attr\">nick</span>: <span class=\"hljs-string\">\"gracz123\"</span> };\n\n<span class=\"hljs-comment\">// Typ 'AdministratorKonta' musi mieć WSZYSTKIE cechy Admin ORAZ UzytkownikZwykly (nie jest to często spotykane)</span>\n<span class=\"hljs-comment\">// Lepszym przykładem na Intersection Types byłoby połączenie interfejsu Person (imię, nazwisko) z interfejsem Employee (pensja, stanowisko)</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Pracownik</span> {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">nazwisko</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">DetalePracy</span> {\n  <span class=\"hljs-attr\">stanowisko</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">pensja</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-comment\">// Pracownik firmy musi mieć cechy Pracownika ORAZ DetaliPracy</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">PracownikFirmy</span> = <span class=\"hljs-title class_\">Pracownik</span> &#x26; <span class=\"hljs-title class_\">DetalePracy</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">nowyPracownik</span>: <span class=\"hljs-title class_\">PracownikFirmy</span> = {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Anna\"</span>,\n  <span class=\"hljs-attr\">nazwisko</span>: <span class=\"hljs-string\">\"Nowak\"</span>,\n  <span class=\"hljs-attr\">stanowisko</span>: <span class=\"hljs-string\">\"Developer\"</span>,\n  <span class=\"hljs-attr\">pensja</span>: <span class=\"hljs-number\">8000</span>,\n};\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(nowyPracownik);\n</code></pre>\n</li>\n</ul>\n<p>To tylko wierzchołek góry lodowej, jeśli chodzi o złożone typy, ale te podstawowe konstrukcje pozwolą Ci pisać bardzo elastyczny i bezpieczny kod! 🏔️</p>\n<h3 id=\"klasy-i-dziedziczenie-oop-z-supermocami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#klasy-i-dziedziczenie-oop-z-supermocami\">>>></a>Klasy i dziedziczenie: OOP z supermocami</h3>\n<p>Jeśli znasz inne języki programowania obiektowego (OOP) takie jak Java czy C#, klasy w TypeScript będą dla Ciebie znajome. TypeScript mocno wspiera koncepcje takie jak <strong>klasy</strong>, <strong>dziedziczenie</strong>, <strong>interfejsy</strong> i <strong>modyfikatory dostępu</strong> (public, private, protected), które są rozszerzeniem tego, co oferuje \"czysty\" JavaScript.</p>\n<p>Klasy to szablony do tworzenia obiektów. Dziedziczenie pozwala tworzyć nowe klasy na podstawie istniejących, dziedzicząc ich właściwości i metody.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Klasa bazowa 'Zwierze'</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Zwierze</span> {\n  <span class=\"hljs-comment\">// Konstruktor to specjalna metoda, która jest wywoływana podczas tworzenia nowego obiektu.</span>\n  <span class=\"hljs-comment\">// 'public nazwa: string' to skrót, który automatycznie deklaruje i przypisuje właściwość 'nazwa'.</span>\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">nazwa</span> = nazwa; <span class=\"hljs-comment\">// 'this' odnosi się do bieżącego obiektu klasy</span>\n  }\n\n  <span class=\"hljs-comment\">// Metoda klasy</span>\n  <span class=\"hljs-title function_\">wydajDzwiek</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Dźwięk zwierzęcia!\"</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Klasa 'Pies' dziedzicząca po 'Zwierze'</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pies</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Zwierze</span> {\n  <span class=\"hljs-comment\">// Słowo kluczowe 'extends' oznacza dziedziczenie</span>\n  <span class=\"hljs-comment\">// Konstruktor klasy potomnej</span>\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">rasa</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">super</span>(nazwa); <span class=\"hljs-comment\">// 'super()' wywołuje konstruktor klasy bazowej (Zwierze)</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rasa</span> = rasa;\n  }\n\n  <span class=\"hljs-comment\">// Nadpisanie metody z klasy bazowej (polimorfizm)</span>\n  <span class=\"hljs-title function_\">wydajDzwiek</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Hau hau! 🐕\"</span>);\n  }\n\n  <span class=\"hljs-title function_\">aportuj</span>(<span class=\"hljs-attr\">przedmiot</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.nazwa}</span> aportuje <span class=\"hljs-subst\">${przedmiot}</span>.`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Tworzenie obiektów (instancji klas)</span>\n<span class=\"hljs-keyword\">const</span> zwierze = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Zwierze</span>(<span class=\"hljs-string\">\"Ogólne zwierzę\"</span>);\nzwierze.<span class=\"hljs-title function_\">wydajDzwiek</span>(); <span class=\"hljs-comment\">// Wypisze: Dźwięk zwierzęcia!</span>\n\n<span class=\"hljs-keyword\">const</span> burek = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Pies</span>(<span class=\"hljs-string\">\"Burek\"</span>, <span class=\"hljs-string\">\"Kundel\"</span>);\nburek.<span class=\"hljs-title function_\">wydajDzwiek</span>(); <span class=\"hljs-comment\">// Wypisze: Hau hau! 🐕 (nadpisana metoda!)</span>\nburek.<span class=\"hljs-title function_\">aportuj</span>(<span class=\"hljs-string\">\"patyk\"</span>); <span class=\"hljs-comment\">// Wypisze: Burek aportuje patyk.</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(burek.<span class=\"hljs-property\">nazwa</span>); <span class=\"hljs-comment\">// Wypisze: Burek (dziedziczona właściwość)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(burek.<span class=\"hljs-property\">rasa</span>); <span class=\"hljs-comment\">// Wypisze: Kundel (właściwość specyficzna dla Pies)</span>\n</code></pre>\n<p>Klasy w TypeScript to potężne narzędzie do organizacji kodu w sposób obiektowy, co jest szczególnie cenne w dużych i złożonych aplikacjach. 🏗️</p>\n<h3 id=\"enumy-łatwiejsze-zarządzanie-stałymi-wartościami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#enumy-łatwiejsze-zarządzanie-stałymi-wartościami\">>>></a>Enumy: Łatwiejsze zarządzanie stałymi wartościami</h3>\n<p><strong>Enumy (typy wyliczeniowe)</strong> to specjalny typ w TypeScript, który pozwala zdefiniować zbiór nazwanych stałych wartości. Są super przydatne, gdy masz ograniczony zestaw opcji do wyboru (np. statusy, dni tygodnia, kolory). Zamiast używać \"magicznych stringów\" (<code>\"pending\"</code>, <code>\"success\"</code>), możesz użyć nazwanych, czytelnych wartości.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Definiowanie Enum Kolor</span>\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Kolor</span> {\n  <span class=\"hljs-title class_\">Czerwony</span>, <span class=\"hljs-comment\">// Domyślnie 0</span>\n  <span class=\"hljs-title class_\">Zielony</span>, <span class=\"hljs-comment\">// Domyślnie 1</span>\n  <span class=\"hljs-title class_\">Niebieski</span>, <span class=\"hljs-comment\">// Domyślnie 2</span>\n}\n\n<span class=\"hljs-comment\">// Użycie Enuma</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">ulubionyKolor</span>: <span class=\"hljs-title class_\">Kolor</span> = <span class=\"hljs-title class_\">Kolor</span>.<span class=\"hljs-property\">Zielony</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ulubionyKolor); <span class=\"hljs-comment\">// Wypisze: 1 (bo Zielony to druga wartość, indeks 1)</span>\n\n<span class=\"hljs-comment\">// Możesz przypisać własne wartości (np. tekstowe)</span>\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">StatusZamowienia</span> {\n  <span class=\"hljs-variable constant_\">W_OCZEKIWANIU</span> = <span class=\"hljs-string\">\"W_OCZEKIWANIU\"</span>,\n  <span class=\"hljs-variable constant_\">W_REALIZACJI</span> = <span class=\"hljs-string\">\"W_REALIZACJI\"</span>,\n  <span class=\"hljs-variable constant_\">ZREALIZOWANE</span> = <span class=\"hljs-string\">\"ZREALIZOWANE\"</span>,\n  <span class=\"hljs-variable constant_\">ANULOWANE</span> = <span class=\"hljs-string\">\"ANULOWANE\"</span>,\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">statusZamowienia</span>: <span class=\"hljs-title class_\">StatusZamowienia</span> = <span class=\"hljs-title class_\">StatusZamowienia</span>.<span class=\"hljs-property\">W_OCZEKIWANIU</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(statusZamowienia); <span class=\"hljs-comment\">// Wypisze: W_OCZEKIWANIU</span>\n\n<span class=\"hljs-keyword\">if</span> (statusZamowienia === <span class=\"hljs-title class_\">StatusZamowienia</span>.<span class=\"hljs-property\">W_OCZEKIWANIU</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Czekamy na potwierdzenie zamówienia... ⏳\"</span>);\n}\n</code></pre>\n<p>Enumy zwiększają czytelność kodu i minimalizują ryzyko literówek. Zamiast pisać <code>\"czerwony\"</code>, piszesz <code>Kolor.Czerwony</code> – od razu widać, że to jeden z predefiniowanych kolorów. 👍</p>\n<h3 id=\"alias-typów-nadawanie-imion-złożonym-typom\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#alias-typów-nadawanie-imion-złożonym-typom\">>>></a>Alias typów: Nadawanie imion złożonym typom</h3>\n<p>Czasami tworzysz złożone typy, używając unii, połączeń czy obiektów, a ich definicja staje się długa i powtarzalna. <strong>Alias typów (<code>type</code>)</strong> pozwala nadać tym złożonym typom prostą, zrozumiałą nazwę. To jak tworzenie własnych, niestandardowych typów!</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Złożony typ, który oznacza, że ID może być liczbą LUB stringiem</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-variable constant_\">ID</span> = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;\n\n<span class=\"hljs-comment\">// Użycie aliasu typu</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userId</span>: <span class=\"hljs-variable constant_\">ID</span> = <span class=\"hljs-number\">12345</span>; <span class=\"hljs-comment\">// OK, bo numer</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">productId</span>: <span class=\"hljs-variable constant_\">ID</span> = <span class=\"hljs-string\">\"prod-A7B\"</span>; <span class=\"hljs-comment\">// OK, bo string</span>\n\n<span class=\"hljs-comment\">// let orderId: ID = true; // 🚨 Błąd: Type 'boolean' is not assignable to type 'ID'.</span>\n\n<span class=\"hljs-comment\">// Alias dla obiektu</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Punkt2D</span> = {\n  <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mojPunkt</span>: <span class=\"hljs-title class_\">Punkt2D</span> = { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">20</span> };\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(mojPunkt); <span class=\"hljs-comment\">// Wypisze: { x: 10, y: 20 }</span>\n\n<span class=\"hljs-comment\">// Alias dla funkcji</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">FunkcjaMatematyczna</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-built_in\">number</span></span>) =></span> <span class=\"hljs-built_in\">number</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">dodawanie</span>: <span class=\"hljs-title class_\">FunkcjaMatematyczna</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">num1, num2</span>) =></span> num1 + num2;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">odejmowanie</span>: <span class=\"hljs-title class_\">FunkcjaMatematyczna</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">num1, num2</span>) =></span> num1 - num2;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">dodawanie</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// Wypisze: 8</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">odejmowanie</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>)); <span class=\"hljs-comment\">// Wypisze: 6</span>\n</code></pre>\n<p>Aliasy typów sprawiają, że Twój kod jest bardziej czytelny, łatwiejszy do refaktoryzacji i ogólnie przyjemniejszy w obsłudze. Kiedy widzisz <code>ID</code> zamiast <code>string | number</code>, od razu wiesz, o co chodzi! ✨</p>\n<hr>\n<h2 id=\"jak-używać-typów-w-praktyce-codzienne-scenariusze\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-używać-typów-w-praktyce-codzienne-scenariusze\">>></a>Jak używać typów w praktyce? Codzienne Scenariusze</h2>\n<p>Teraz, gdy znasz podstawy składni, zobaczmy, jak możesz je wykorzystać w codziennej pracy programisty!</p>\n<h3 id=\"funkcje-z-typami-zwracanymi-i-parametrami-opcjonalnymi\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-z-typami-zwracanymi-i-parametrami-opcjonalnymi\">>>></a>Funkcje z typami zwracanymi i parametrami opcjonalnymi</h3>\n<p>Często zdarza się, że funkcja może, ale nie musi, przyjąć pewien argument, albo że jeden z jej argumentów ma wartość domyślną. TypeScript świetnie sobie z tym radzi.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Parametr opcjonalny 'imie' - oznaczony znakiem '?'</span>\n<span class=\"hljs-comment\">// Wartość zwracana funkcji to 'string'</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">powiedzCzesc</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">imie</span>?: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-comment\">// Operator '??' (nullish coalescing) to super sprawa!</span>\n  <span class=\"hljs-comment\">// Jeśli 'imie' jest 'null' lub 'undefined', użyje \"nieznajomy\", w przeciwnym razie użyje 'imie'.</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie ?? <span class=\"hljs-string\">\"nieznajomy\"</span>}</span>!`</span>;\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">powiedzCzesc</span>(<span class=\"hljs-string\">\"Ania\"</span>)); <span class=\"hljs-comment\">// Wypisze: Cześć, Ania!</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">powiedzCzesc</span>()); <span class=\"hljs-comment\">// Wypisze: Cześć, nieznajomy!</span>\n<span class=\"hljs-comment\">// console.log(powiedzCzesc(123)); // 🚨 Błąd: Argument of type 'number' is not assignable to parameter of type 'string | undefined'.</span>\n</code></pre>\n<h3 id=\"łączenie-kilku-typów-unie-typów-w-akcji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#łączenie-kilku-typów-unie-typów-w-akcji\">>>></a>Łączenie kilku typów (Unie Typów w akcji!)</h3>\n<p>Gdy masz dane, które mogą przyjmować różne, ale określone formy, unie typów są Twoim przyjacielem.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Typy reprezentujące różne role użytkownika</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Admin</span> = {\n  <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>; <span class=\"hljs-comment\">// Literalny typ string</span>\n  <span class=\"hljs-attr\">poziomUprawnien</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">panelDostepu</span>: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Uzytkownik</span> = {\n  <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"user\"</span>; <span class=\"hljs-comment\">// Literalny typ string</span>\n  <span class=\"hljs-attr\">nazwaUzytkownika</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">ostatnieLogowanie</span>: <span class=\"hljs-title class_\">Date</span>; <span class=\"hljs-comment\">// Używamy wbudowanego typu Date</span>\n};\n\n<span class=\"hljs-comment\">// Typ 'OsobaNaPlatformie' może być ALBO Adminem, ALBO Uzytkownikiem</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">OsobaNaPlatformie</span> = <span class=\"hljs-title class_\">Admin</span> | <span class=\"hljs-title class_\">Uzytkownik</span>;\n\n<span class=\"hljs-comment\">// Tworzymy tablicę, która może zawierać obiekty obu typów</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">listaOsob</span>: <span class=\"hljs-title class_\">OsobaNaPlatformie</span>[] = [\n  { <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>, <span class=\"hljs-attr\">poziomUprawnien</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">panelDostepu</span>: <span class=\"hljs-string\">\"/admin/dashboard\"</span> },\n  {\n    <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"user\"</span>,\n    <span class=\"hljs-attr\">nazwaUzytkownika</span>: <span class=\"hljs-string\">\"super_gracz\"</span>,\n    <span class=\"hljs-attr\">ostatnieLogowanie</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(),\n  },\n  { <span class=\"hljs-attr\">rola</span>: <span class=\"hljs-string\">\"admin\"</span>, <span class=\"hljs-attr\">poziomUprawnien</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">panelDostepu</span>: <span class=\"hljs-string\">\"/admin/stats\"</span> },\n];\n\n<span class=\"hljs-comment\">// Możemy iterować po liście i sprawdzić typ obiektu (tzw. \"type guarding\")</span>\nlistaOsob.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">osoba</span>) =></span> {\n  <span class=\"hljs-keyword\">if</span> (osoba.<span class=\"hljs-property\">rola</span> === <span class=\"hljs-string\">\"admin\"</span>) {\n    <span class=\"hljs-comment\">// W tym bloku TypeScript wie, że 'osoba' to typ 'Admin'</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n      <span class=\"hljs-string\">`Administrator: <span class=\"hljs-subst\">${osoba.panelDostepu}</span> (poziom: <span class=\"hljs-subst\">${osoba.poziomUprawnien}</span>)`</span>\n    );\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Tutaj TypeScript wie, że 'osoba' to typ 'Uzytkownik'</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n      <span class=\"hljs-string\">`Użytkownik: <span class=\"hljs-subst\">${\n        osoba.nazwaUzytkownika\n      }</span> (logował się: <span class=\"hljs-subst\">${osoba.ostatnieLogowanie.toLocaleDateString()}</span>)`</span>\n    );\n  }\n});\n</code></pre>\n<p>To podejście sprawia, że kod jest bardziej odporny na błędy i łatwiejszy do zrozumienia dla innych programistów (i dla Ciebie za kilka miesięcy! 😉).</p>\n<hr>\n<h2 id=\"narzędzia-i-integracje-twoi-pomocnicy-w-rozwoju\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#narzędzia-i-integracje-twoi-pomocnicy-w-rozwoju\">>></a>Narzędzia i Integracje: Twoi Pomocnicy w Rozwoju</h2>\n<p>TypeScript to nie tylko sam język, ale też cały ekosystem narzędzi, które ułatwiają życie programistom.</p>\n<ul>\n<li><strong>VS Code (Visual Studio Code)</strong>: To absolutny król wśród edytorów kodu dla TypeScripta! 👑 Jest stworzony przez Microsoft (tak jak TypeScript!) i ma wbudowane, doskonałe wsparcie dla typowania. Oznacza to, że dostajesz inteligentne podpowiedzi (IntelliSense), automatyczne uzupełnianie kodu, wykrywanie błędów na bieżąco, refaktoryzację, a wszystko to działa jak marzenie! Jeśli jeszcze nie używasz VS Code, to jest to moment, by spróbować.</li>\n<li><strong><code>tsconfig.json</code></strong>: Już o nim mówiliśmy, ale warto podkreślić, że to serce konfiguracji Twojego projektu TypeScript. Dzięki niemu możesz precyzyjnie dostosować, jak kompilator ma przetwarzać Twój kod. To jak centrala sterowania! 🎛️</li>\n<li><strong>Integracja z narzędziami budującymi (Build Tools)</strong>: TypeScript bez problemu integruje się z najpopularniejszymi narzędziami do budowania aplikacji, takimi jak:\n<ul>\n<li><strong>Webpack</strong>: Pakowanie modułów, transformacje kodu.</li>\n<li><strong>Babel</strong>: Transpilacja (konwersja kodu na starsze wersje JS). Często używa się Babel razem z TypeScriptem, aby skorzystać z najnowszych funkcji JS, które TypeScript jeszcze nie w pełni obsługuje w kompilacji.</li>\n<li><strong>ESLint</strong>: Narzędzie do statycznej analizy kodu, które pomaga utrzymać jego jakość i spójność (np. wymusza określony styl pisania).</li>\n<li><strong>Vite / Parcel</strong>: Szybkie i nowoczesne bundlery, które mają wbudowane wsparcie dla TypeScripta.</li>\n</ul>\n</li>\n<li><strong>Systemy CI/CD (Continuous Integration/Continuous Deployment)</strong>: TypeScript świetnie wpisuje się w nowoczesne procesy wytwarzania oprogramowania. Łatwo zintegrujesz kompilację TypeScripta z pipeline’ami takimi jak GitHub Actions, GitLab CI czy Jenkins. Oznacza to, że Twoje typy będą sprawdzane automatycznie przy każdym wgraniu kodu, zanim trafi on na produkcję! 🤖</li>\n</ul>\n<p>TypeScript jest domyślnym językiem dla wielu popularnych frameworków frontendowych, takich jak <strong>Angular</strong>. Coraz więcej projektów w <strong>React</strong> i <strong>Vue</strong> również przechodzi na TypeScript. To oznacza, że znajomość tego języka to <strong>ogromny plus</strong> na rynku pracy! 📈</p>\n<hr>\n<h2 id=\"częste-pułapki-i-praktyczne-wskazówki-jak-unikać-problemów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#częste-pułapki-i-praktyczne-wskazówki-jak-unikać-problemów\">>></a>Częste Pułapki i Praktyczne Wskazówki: Jak Unikać Problemów?</h2>\n<p>Nauka nowego języka (a w zasadzie \"rozszerzenia\" języka) zawsze wiąże się z pewnymi wyzwaniami. Oto kilka częstych pułapek i wskazówek, które pomogą Ci szybko stać się ninja TypeScripta! 🥷</p>\n<h3 id=\"nie-musisz-typować-wszystkiego-od-razu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#nie-musisz-typować-wszystkiego-od-razu\">>>></a>Nie musisz typować wszystkiego od razu!</h3>\n<p>To jest jedna z najważniejszych rad! Nie czuj presji, żeby od razu typować każdą zmienną, każdy parametr i każdą funkcję w swoim projekcie. Możesz zacząć od typowania kluczowych fragmentów kodu (np. interfejsów dla danych z API, typów dla skomplikowanych funkcji). Stopniowo rozszerzaj typowanie w miarę, jak czujesz się pewniej. Małe kroki to klucz do sukcesu! 🚶‍♀️</p>\n<h3 id=\"stopniowa-migracja-powoli-ale-skutecznie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#stopniowa-migracja-powoli-ale-skutecznie\">>>></a>Stopniowa migracja: Powoli, ale skutecznie!</h3>\n<p>Jeśli masz już duży projekt w JavaScript, nie musisz go przepisywać od nowa! Możesz migrować go na TypeScript krok po kroku. Po prostu zacznij zmieniać rozszerzenia plików z <code>.js</code> na <code>.ts</code> (lub <code>.tsx</code> dla Reacta). Kompilator TypeScripta potraktuje czysty JavaScript jako poprawny kod, a Ty będziesz mógł/mogła stopniowo dodawać typy i naprawiać błędy kompilatora. To jak renowacja, a nie budowa od podstaw! 🏡</p>\n<h3 id=\"współpraca-z-bibliotekami-js-poznaj-types\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#współpraca-z-bibliotekami-js-poznaj-types\">>>></a>Współpraca z bibliotekami JS: Poznaj <code>@types/</code>!</h3>\n<p>Co zrobić, jeśli używasz popularnej biblioteki JavaScript (np. Lodash, jQuery, Express), która nie jest napisana w TypeScript? Czy stracisz korzyści z typowania? Absolutnie nie! Istnieje specjalne repozytorium <strong>DefinitelyTyped</strong>, które zawiera pliki deklaracji typów (<code>.d.ts</code>) dla tysięcy bibliotek JavaScript.</p>\n<p>Wystarczy zainstalować odpowiedni pakiet z typami (zazwyczaj zaczyna się od <code>@types/</code>):</p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev @types/lodash\nnpm install --save-dev @types/jquery\nnpm install --save-dev @types/express\n</code></pre>\n<p>Po zainstalowaniu takiego pakietu, Twój edytor kodu (np. VS Code) będzie magicznie rozumiał typy z tych bibliotek, dając Ci podpowiedzi i wyłapując błędy, tak jakby były napisane w TypeScript! 🧙‍♀️</p>\n<h3 id=\"wyłączaj-sprawdzanie-niektórych-plików-dla-ekstremalnych-przypadków\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wyłączaj-sprawdzanie-niektórych-plików-dla-ekstremalnych-przypadków\">>>></a>Wyłączaj sprawdzanie niektórych plików (dla ekstremalnych przypadków)</h3>\n<p>Jeśli natrafisz na plik JavaScript, który jest absolutnym bałaganem i nie masz czasu go typować, a TypeScript ciągle krzyczy błędami, możesz go tymczasowo wyciszyć. Dodaj na górze pliku:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// @ts-nocheck</span>\n</code></pre>\n<p>To polecenie mówi kompilatorowi TypeScripta, żeby zignorował sprawdzanie typów w tym konkretnym pliku. Używaj tego oszczędnie, bo tracisz wtedy korzyści z typowania! To taka \"ostatnia deska ratunku\". 😉</p>\n<h3 id=\"czytaj-błędy-kompilatora-to-twoi-nauczyciele\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czytaj-błędy-kompilatora-to-twoi-nauczyciele\">>>></a>Czytaj błędy kompilatora: To Twoi nauczyciele!</h3>\n<p>Na początku komunikaty o błędach z TypeScripta mogą wydawać się straszne. Pełno czerwonych podkreśleń i długich wiadomości. Ale prawda jest taka, że błędy TypeScripta są zazwyczaj <strong>bardzo pomocne</strong>! Dokładnie wskazują, gdzie jest problem i często sugerują, jak go naprawić.</p>\n<h3 id=\"najczęstsze-błędy-i-jak-je-naprawić-nie-bój-się-czerwonych-podkreśleń\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#najczęstsze-błędy-i-jak-je-naprawić-nie-bój-się-czerwonych-podkreśleń\">>>></a>Najczęstsze błędy i jak je naprawić: Nie bój się czerwonych podkreśleń!</h3>\n<p>Początki bywają trudne, ale z każdym błędem uczysz się czegoś nowego! Oto kilka typowych błędów, które możesz napotkać, i jak sobie z nimi radzić:</p>\n<ul>\n<li>\n<p><strong>Błąd typowania: Typ X nie jest przypisywalny do typu Y.</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-string\">\"dwadzieścia pięć\"</span>; <span class=\"hljs-comment\">// 🚨 Błąd: Type 'string' is not assignable to type 'number'.</span>\n</code></pre>\n<p><strong>Naprawa:</strong> Upewnij się, że przypisujesz wartość odpowiedniego typu.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">25</span>; <span class=\"hljs-comment\">// Poprawnie!</span>\n</code></pre>\n</li>\n<li>\n<p><strong>Brak typu dla zwracanej wartości funkcji (albo niezgodność)</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">zwrocTekst</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>; <span class=\"hljs-comment\">// 🚨 Błąd: Type 'number' is not assignable to type 'string'.</span>\n}\n</code></pre>\n<p><strong>Naprawa:</strong> Upewnij się, że funkcja zwraca wartość zgodną z zadeklarowanym typem zwracanym.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">zwrocTekst</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-built_in\">string</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"To jest tekst.\"</span>; <span class=\"hljs-comment\">// Poprawnie!</span>\n}\n</code></pre>\n</li>\n<li>\n<p><strong>Brakujące właściwości w interfejsie</strong></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Produkt</span> {\n  <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">cena</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">dostepny</span>: <span class=\"hljs-built_in\">boolean</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mojProdukt</span>: <span class=\"hljs-title class_\">Produkt</span> = {\n  <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-string\">\"Książka\"</span>,\n  <span class=\"hljs-attr\">cena</span>: <span class=\"hljs-number\">50</span>, <span class=\"hljs-comment\">// 🚨 Błąd: Property 'dostepny' is missing in type '{ nazwa: string; cena: number; }' but required in type 'Produkt'.</span>\n};\n</code></pre>\n<p><strong>Naprawa:</strong> Dodaj wszystkie wymagane właściwości z interfejsu (lub oznacz je jako opcjonalne w interfejsie <code>?</code>).</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mojProdukt</span>: <span class=\"hljs-title class_\">Produkt</span> = {\n  <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-string\">\"Książka\"</span>,\n  <span class=\"hljs-attr\">cena</span>: <span class=\"hljs-number\">50</span>,\n  <span class=\"hljs-attr\">dostepny</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// Poprawnie!</span>\n};\n</code></pre>\n</li>\n<li>\n<p><strong>Próba użycia <code>null</code> lub <code>undefined</code> tam, gdzie nie powinno być</strong>\nW trybie <code>strict: true</code> (który jest bardzo zalecany!), TypeScript jest bardzo restrykcyjny, jeśli chodzi o <code>null</code> i <code>undefined</code>.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">nazwisko</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 🚨 Błąd: Type 'null' is not assignable to type 'string'.</span>\n</code></pre>\n<p><strong>Naprawa:</strong> Jeśli zmienna może być <code>null</code> lub <code>undefined</code>, musisz to jawnie określić za pomocą unii typów:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">nazwisko</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// Poprawnie!</span>\n</code></pre>\n</li>\n</ul>\n<p>Pamiętaj, że każdy błąd to szansa na naukę! Nie zniechęcaj się, analizuj komunikaty, a szybko zobaczysz, jak Twój kod staje się coraz bardziej solidny. 💪</p>\n<hr>\n<h2 id=\"typescript-w-projektach-open-source-i-pracy-zespołowej-graj-zespołowo\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typescript-w-projektach-open-source-i-pracy-zespołowej-graj-zespołowo\">>></a>TypeScript w Projektach Open-Source i Pracy Zespołowej: Graj zespołowo!</h2>\n<p>TypeScript to prawdziwy game-changer, jeśli chodzi o pracę w zespole i duże projekty! 🕹️ Dlaczego?</p>\n<ul>\n<li><strong>Ułatwia współpracę:</strong> Kiedy wielu programistów pracuje nad tym samym kodem, typy są jak uniwersalny język. Każdy od razu wie, jakiego typu danych spodziewać się po funkcji czy obiekcie, bez potrzeby ciągłego dopytywania. To minimalizuje nieporozumienia i przyspiesza development! 🧑‍💻👩‍💻</li>\n<li><strong>Poprawia czytelność i utrzymanie kodu:</strong> W dużych bazach kodu, gdzie funkcje i moduły mają wiele zależności, typy pełnią rolę żywej dokumentacji. Zmiana czegoś w jednym miejscu? TypeScript od razu pokaże, gdzie indziej ta zmiana może mieć wpływ. To jak mieć mapę skarbów w gęstej dżungli kodu! 🗺️</li>\n<li><strong>Zwiększa pewność siebie podczas refaktoryzacji:</strong> Refaktoryzacja (czyli restrukturyzacja kodu w celu poprawy jego czytelności i utrzymywalności, bez zmiany jego funkcjonalności) jest znacznie bezpieczniejsza z TypeScriptem. Jeśli zmienisz nazwę właściwości obiektu lub zmienisz typ zwracany przez funkcję, kompilator natychmiast wskaże wszystkie miejsca, które wymagają aktualizacji. Koniec z obawami, że coś się zepsuje po małej zmianie! 👷‍♀️</li>\n<li><strong>Standard w Open-Source i Enterprise:</strong> Jak już wspomniano, wiele gigantów technologicznych i popularnych bibliotek (Angular, React, Vue, NestJS, Express, VSCode, Deno) jest napisanych w TypeScript. Oznacza to, że jeśli chcesz wnieść wkład w projekty open-source lub pracować w dużej firmie, znajomość TypeScripta to praktycznie standard. Otwiera Ci to wiele drzwi! 🚪</li>\n</ul>\n<hr>\n<h2 id=\"gdzie-znaleźć-deklaracje-typów-do-bibliotek-js\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#gdzie-znaleźć-deklaracje-typów-do-bibliotek-js\">>></a>Gdzie znaleźć deklaracje typów do bibliotek JS?</h2>\n<p>To pytanie, które zadaje sobie każdy początkujący z TypeScriptem: \"Skoro używam biblioteki X napisanej w JavaScript, to czy tracę wszystkie zalety typowania?\" Na szczęście odpowiedź brzmi: <strong>NIE!</strong> 🎉</p>\n<p>Dzięki społeczności TypeScripta i projektowi <strong>DefinitelyTyped</strong>, dla większości popularnych bibliotek JavaScript istnieją tzw. <strong>pliki deklaracji typów</strong>. Są to pliki z rozszerzeniem <code>.d.ts</code>, które nie zawierają kodu wykonawczego, a jedynie opisują struktury typów (interfejsy, typy funkcji itp.) danej biblioteki.</p>\n<p>Instaluje się je bardzo prosto za pomocą npm, dodając przed nazwą biblioteki prefiks <code>@types/</code>. Przykłady:</p>\n<ul>\n<li><strong>Dla biblioteki <code>lodash</code>:</strong>\n<pre><code class=\"hljs language-bash\">npm install --save-dev @types/lodash\n</code></pre>\n</li>\n<li><strong>Dla biblioteki <code>jquery</code>:</strong>\n<pre><code class=\"hljs language-bash\">npm install --save-dev @types/jquery\n</code></pre>\n</li>\n<li><strong>Dla frameworka <code>express</code>:</strong>\n<pre><code class=\"hljs language-bash\">npm install --save-dev @types/express\n</code></pre>\n</li>\n</ul>\n<p>Po zainstalowaniu odpowiedniego pakietu <code>@types/</code>, Twój edytor kodu (szczególnie VS Code!) zacznie \"rozumieć\" strukturę typów z tej biblioteki, dając Ci pełne wsparcie IntelliSense, podpowiedzi i wykrywanie błędów, tak jakby sama biblioteka była napisana w TypeScript! To jest po prostu magiczne! 🪄</p>\n<hr>\n<h2 id=\"gdzie-szukać-pomocy-nie-jesteś-sam\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#gdzie-szukać-pomocy-nie-jesteś-sam\">>></a>Gdzie szukać pomocy? Nie jesteś sam!</h2>\n<p>Nauka programowania, zwłaszcza tak rozbudowanego języka jak TypeScript, to długa podróż. Ale nie musisz iść nią samotnie! Społeczność TypeScripta jest ogromna i bardzo pomocna.</p>\n<p>Oto miejsca, gdzie zawsze znajdziesz wsparcie:</p>\n<ul>\n<li>\n<p><strong>Oficjalna Dokumentacja TypeScript:</strong> To najlepsze miejsce, aby zacząć i pogłębić wiedzę. Dokumentacja jest świetnie napisana, pełna przykładów i regularnie aktualizowana.</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/\">TypeScript: The starting point for learning TypeScript</a> (anglojęzyczna, ale bardzo przystępna)</li>\n</ul>\n</li>\n<li>\n<p><strong>TypeScript Playground Online:</strong> To super narzędzie! Możesz w nim pisać kod TypeScript bezpośrednio w przeglądarce, zobaczyć, jak jest kompilowany do JavaScriptu i od razu sprawdzić błędy typów. Idealne do szybkich eksperymentów i testowania małych fragmentów kodu.</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/play\">TypeScript: TS Playground - An online editor for exploring TypeScript and JavaScript</a></li>\n</ul>\n</li>\n<li>\n<p><strong>Stack Overflow:</strong> To prawdziwa skarbnica wiedzy dla programistów! Jeśli masz konkretne pytanie lub natkniesz się na błąd, szanse są ogromne, że ktoś już miał podobny problem i rozwiązanie jest dostępne. Używaj tagu <code>[typescript]</code> w swoich pytaniach.</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/tagged/typescript\">Newest 'typescript' Questions - Stack Overflow</a></li>\n</ul>\n</li>\n<li>\n<p><strong>Społeczności na Discordzie i Forach:</strong> Istnieje wiele aktywnych społeczności, gdzie możesz zadawać pytania i dyskutować z innymi deweloperami. Poszukaj serwerów Discord poświęconych JavaScriptowi, Node.js czy frontendowi – na pewno znajdziesz tam kanały poświęcone TypeScriptowi.</p>\n</li>\n<li>\n<p><strong>GitHub:</strong> Przeglądaj projekty open-source napisane w TypeScript! To świetny sposób, aby zobaczyć, jak inni deweloperzy używają typów w praktyce i jakie wzorce stosują. Możesz też zadawać pytania w sekcji \"Issues\" danego projektu.</p>\n</li>\n<li>\n<p><strong>Kursy online i YouTube:</strong> Mnóstwo darmowych i płatnych kursów, a także kanałów na YouTube, oferuje świetne samouczki dotyczące TypeScripta. Znajdź styl nauki, który najbardziej Ci odpowiada! 🎬</p>\n</li>\n</ul>\n<p>Pamiętaj, że każdy kiedyś zaczynał! Nie krępuj się zadawać pytań, nawet jeśli wydają Ci się proste. Wzajemna pomoc to podstawa silnej społeczności programistów. Działaj! 💪</p>\n<hr>\n<h2 id=\"zadania-praktyczne-ćwicz-ćwicz-ćwicz\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-praktyczne-ćwicz-ćwicz-ćwicz\">>></a>Zadania Praktyczne: Ćwicz, ćwicz, ćwicz!</h2>\n<p>Teoria to jedno, ale prawdziwa nauka dzieje się, gdy piszesz kod! Spróbuj samodzielnie rozwiązać poniższe zadania. Nie bój się popełniać błędów – to najlepszy sposób na naukę! Zanim zajrzysz do rozwiązań, spróbuj pogłówkować trochę sam/a. Powodzenia! 🍀</p>\n<hr>\n<h3 id=\"zadanie-1-typowanie-zmiennych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-typowanie-zmiennych\">>>></a>Zadanie 1: Typowanie zmiennych</h3>\n<p>Zadeklaruj trzy zmienne z jawnym typowaniem:</p>\n<ul>\n<li><code>mojaLiczba</code> typu <code>number</code> i przypisz jej dowolną liczbę.</li>\n<li><code>mojTekst</code> typu <code>string</code> i przypisz jej dowolny tekst.</li>\n<li><code>czyJestSlonce</code> typu <code>boolean</code> i przypisz jej wartość logiczną.</li>\n</ul>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">mojaLiczba</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">77</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">mojTekst</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"TypeScript jest super!\"</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">czyJestSlonce</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(mojaLiczba, mojTekst, czyJestSlonce);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-funkcja-z-typowanymi-argumentami-i-wartością-zwracaną\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-funkcja-z-typowanymi-argumentami-i-wartością-zwracaną\">>>></a>Zadanie 2: Funkcja z typowanymi argumentami i wartością zwracaną</h3>\n<p>Napisz funkcję o nazwie <code>pomnozDwieLiczby</code>, która:</p>\n<ul>\n<li>Przyjmuje dwa argumenty: <code>parametr1</code> i <code>parametr2</code>, oba typu <code>number</code>.</li>\n<li>Zwraca ich iloczyn (wynik mnożenia), który również powinien być typu <code>number</code>.</li>\n<li>Wywołaj tę funkcję i wypisz wynik w konsoli.</li>\n</ul>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 2</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pomnozDwieLiczby</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">parametr1</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">parametr2</span>: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> parametr1 * parametr2;\n}\n\n<span class=\"hljs-keyword\">const</span> wynikMnozenia = <span class=\"hljs-title function_\">pomnozDwieLiczby</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Wynik mnożenia to: <span class=\"hljs-subst\">${wynikMnozenia}</span>`</span>); <span class=\"hljs-comment\">// Powinno wypisać: Wynik mnożenia to: 54</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-interfejs-i-obiekt-użytkownika\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-interfejs-i-obiekt-użytkownika\">>>></a>Zadanie 3: Interfejs i obiekt użytkownika</h3>\n<p>Zdefiniuj interfejs <code>UzytkownikProfil</code> z następującymi polami:</p>\n<ul>\n<li><code>id</code>: typu <code>number</code></li>\n<li><code>nazwa</code>: typu <code>string</code></li>\n<li><code>email</code>: typu <code>string</code> (opcjonalny, użyj <code>?</code>)</li>\n<li><code>czyAktywny</code>: typu <code>boolean</code></li>\n</ul>\n<p>Następnie utwórz obiekt o nazwie <code>mojProfil</code> typu <code>UzytkownikProfil</code>, który będzie miał wszystkie wymagane pola oraz jedno opcjonalne.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 3</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UzytkownikProfil</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">email</span>?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// Opcjonalne pole</span>\n  <span class=\"hljs-attr\">czyAktywny</span>: <span class=\"hljs-built_in\">boolean</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mojProfil</span>: <span class=\"hljs-title class_\">UzytkownikProfil</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1234</span>,\n  <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-string\">\"programistaJunior\"</span>,\n  <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"junior@example.com\"</span>, <span class=\"hljs-comment\">// Możesz dodać, ale nie musisz</span>\n  <span class=\"hljs-attr\">czyAktywny</span>: <span class=\"hljs-literal\">true</span>,\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(mojProfil);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-alias-typu-i-unia-typów-dla-statusu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-alias-typu-i-unia-typów-dla-statusu\">>>></a>Zadanie 4: Alias typu i unia typów dla statusu</h3>\n<p>Zdefiniuj alias typu o nazwie <code>StatusOperacji</code>, który może przyjąć jedną z trzech wartości tekstowych: <code>\"oczekujący\"</code>, <code>\"udany\"</code> lub <code>\"nieudany\"</code>. Następnie zadeklaruj zmienną <code>biezacyStatus</code> i przypisz jej jedną z tych wartości.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 4</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">StatusOperacji</span> = <span class=\"hljs-string\">\"oczekujący\"</span> | <span class=\"hljs-string\">\"udany\"</span> | <span class=\"hljs-string\">\"nieudany\"</span>;\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">biezacyStatus</span>: <span class=\"hljs-title class_\">StatusOperacji</span> = <span class=\"hljs-string\">\"udany\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Aktualny status: <span class=\"hljs-subst\">${biezacyStatus}</span>`</span>);\n\n<span class=\"hljs-comment\">// biezacyStatus = \"w toku\"; // 🚨 Błąd! Typ '\"w toku\"' nie jest przypisywalny do typu 'StatusOperacji'.</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-5-klasa-z-dziedziczeniem-i-metodą\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-klasa-z-dziedziczeniem-i-metodą\">>>></a>Zadanie 5: Klasa z dziedziczeniem i metodą</h3>\n<p>Stwórz klasę <code>Pojazd</code> z polem <code>marka</code> (string) i metodą <code>jedz()</code>, która wypisuje komunikat \"Pojazd jedzie.\".\nNastępnie utwórz klasę <code>Samochod</code> dziedziczącą po <code>Pojazd</code>. W klasie <code>Samochod</code> dodaj pole <code>model</code> (string) i nadpisz metodę <code>jedz()</code>, aby wypisywała np. \"Samochód [marka] [model] jedzie z piskiem opon!\".\nUtwórz instancję klasy <code>Samochod</code> i wywołaj jej metodę <code>jedz()</code>.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Rozwiązanie Zadania 5</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pojazd</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">marka</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n\n  <span class=\"hljs-title function_\">jedz</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Pojazd jedzie.\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Samochod</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Pojazd</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">marka</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">model</span>: <span class=\"hljs-built_in\">string</span></span>) {\n    <span class=\"hljs-variable language_\">super</span>(marka); <span class=\"hljs-comment\">// Wywołanie konstruktora klasy bazowej</span>\n  }\n\n  <span class=\"hljs-comment\">// Nadpisanie metody jedz()</span>\n  <span class=\"hljs-title function_\">jedz</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n      <span class=\"hljs-string\">`Samochód <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.marka}</span> <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.model}</span> jedzie z piskiem opon! 🚗💨`</span>\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> mojSamochod = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Samochod</span>(<span class=\"hljs-string\">\"Tesla\"</span>, <span class=\"hljs-string\">\"Model 3\"</span>);\nmojSamochod.<span class=\"hljs-title function_\">jedz</span>(); <span class=\"hljs-comment\">// Oczekiwany wynik: Samochód Tesla Model 3 jedzie z piskiem opon! 🚗💨</span>\n</code></pre>\n</details>\n<hr>\n<h2 id=\"podsumowanie-czas-na-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie-czas-na-typescript\">>></a>Podsumowanie: Czas na TypeScript!</h2>\n<p>Mega robota! Dotarłeś/aś do końca wprowadzenia do TypeScript! 🥳 Mam nadzieję, że teraz rozumiesz, czym jest TypeScript, dlaczego jest tak potężnym narzędziem i jak możesz go wykorzystać w swoich projektach. Statyczne typowanie, lepsze narzędzia deweloperskie i czytelniejszy kod to tylko niektóre z jego zalet.</p>\n<p>TypeScript to nie tylko język, to filozofia pisania kodu, która promuje bezpieczeństwo, przewidywalność i łatwość współpracy. Jeśli chcesz pisać nowoczesny, bezpieczny i skalowalny kod JavaScript, TypeScript jest Twoim sprzymierzeńcem.</p>\n<p><strong>Moja rada na koniec:</strong> Zacznij używać TypeScripta w swoich małych projektach. Eksperymentuj, popełniaj błędy i ucz się na nich. Tylko w ten sposób naprawdę zrozumiesz jego moc. A jeśli masz jakieś pytania – wiesz, gdzie mnie szukać! 😉</p>\n<p>Gotowy/a na kolejne wyzwania z TypeScriptem, czy może masz już jakiś pomysł na swój pierwszy projekt z jego wykorzystaniem? Daj znać! 👇</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-typescript.md","29 minut",{"_21":227,"_23":228,"_25":229,"_6":239,"_36":240,"_38":241,"_91":284,"_93":285,"_95":286,"_97":287,"_99":288},"Bezpieczeństwo baz danych","Dowiedz się, jak chronić bazę danych przed atakami, utratą danych i nieautoryzowanym dostępem. Poznaj najlepsze praktyki, typowe zagrożenia, narzędzia i praktyczne przykłady zabezpieczania baz danych. Kurs dla każdego, kto zarządza danymi.",[230,231,232,233,234,235,236,237,238,34],"bezpieczeństwo","baza danych","ochrona","uprawnienia","backup","sql injection","szyfrowanie","audyt","praktyka",[8],"2025-07-05T00:00:00.000Z",{"_21":242,"_41":243},"Quiz: Bezpieczeństwo baz danych",[244,252,260,268,276],{"_44":245,"_46":246,"_52":80,"_54":251},"<p>Czym jest SQL Injection?</p>",[247,248,249,250],"Legalnym sposobem na szybkie pobieranie danych","Rodzajem ataku polegającym na wstrzykiwaniu złośliwych zapytań SQL","Metodą szyfrowania bazy danych","Funkcją przyspieszającą zapytania","SQL Injection to atak polegający na wstrzyknięciu złośliwego kodu SQL przez podatne zapytania.",{"_44":253,"_46":254,"_52":89,"_54":259},"<p>Dlaczego warto regularnie wykonywać kopie zapasowe bazy danych?</p>",[255,256,257,258],"Aby mieć więcej kopii danych do analizy","Aby przyspieszyć działanie bazy","Aby móc przywrócić dane w razie awarii, ataku lub błędu","Aby zwiększyć liczbę użytkowników","Kopie zapasowe pozwalają odtworzyć dane po awarii lub ataku.",{"_44":261,"_46":262,"_52":89,"_54":267},"<p>Jakie uprawnienia powinien mieć użytkownik aplikacyjny w bazie?</p>",[263,264,265,266],"Brak uprawnień","Pełny dostęp do bazy","Tylko te, które są niezbędne do działania aplikacji","Dostęp tylko do backupów","Zasada minimalnych uprawnień zwiększa bezpieczeństwo bazy danych.",{"_44":269,"_46":270,"_52":89,"_54":275},"<p>Co to jest szyfrowanie danych w bazie?</p>",[271,272,273,274],"Zmiana tabel na indeksy","Metoda importu danych","Zabezpieczenie danych przed nieautoryzowanym odczytem","Usuwanie danych","Szyfrowanie pozwala chronić dane przed odczytem przez osoby niepowołane.",{"_44":277,"_46":278,"_52":89,"_54":283},"<p>Czym jest audyt w bazie danych?</p>",[279,280,281,282],"Sposób na optymalizację zapytań","Kopia zapasowa","Proces monitorowania i rejestrowania operacji na bazie","Rodzaj indeksu","Audyt to rejestrowanie dostępu i operacji na danych – kluczowy element bezpieczeństwa.","a2380fd5-6a39-42d5-8a52-b62e13f2ff26","bezpieczenstwo-baz-danych","<p>Bezpieczeństwo bazy danych to podstawa ochrony danych osobowych, firmowych i finansowych. Nawet najlepsza baza jest podatna na ataki, błędy użytkowników czy awarie sprzętu, jeśli nie zadbamy o jej zabezpieczenie. Poznaj praktyczne zasady, narzędzia i realne przykłady, które pomogą Ci zabezpieczyć Twoją bazę!</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#dlaczego-bezpiecze%C5%84stwo-baz-danych-jest-wa%C5%BCne\">Dlaczego bezpieczeństwo baz danych jest ważne?</a></li>\n<li><a href=\"#typowe-zagro%C5%BCenia\">Typowe zagrożenia</a>\n<ul>\n<li><a href=\"#sql-injection\">SQL Injection</a></li>\n<li><a href=\"#utrata-danych\">Utrata danych</a></li>\n<li><a href=\"#nieautoryzowany-dost%C4%99p\">Nieautoryzowany dostęp</a></li>\n<li><a href=\"#wycieki-i-kradzie%C5%BC-danych\">Wycieki i kradzież danych</a></li>\n<li><a href=\"#ataki-typu-ransomware-i-ddos\">Ataki typu ransomware i DDoS</a></li>\n</ul>\n</li>\n<li><a href=\"#uprawnienia-i-zarz%C4%85dzanie-u%C5%BCytkownikami\">Uprawnienia i zarządzanie użytkownikami</a>\n<ul>\n<li><a href=\"#przyk%C5%82ady-nadawania-uprawnie%C5%84\">Przykłady nadawania uprawnień</a></li>\n<li><a href=\"#zasada-minimalnych-uprawnie%C5%84\">Zasada minimalnych uprawnień</a></li>\n</ul>\n</li>\n<li><a href=\"#szyfrowanie-danych\">Szyfrowanie danych</a>\n<ul>\n<li><a href=\"#szyfrowanie-w-spoczynku\">Szyfrowanie \"w spoczynku\"</a></li>\n<li><a href=\"#szyfrowanie-w-tranzycie\">Szyfrowanie \"w tranzycie\"</a></li>\n<li><a href=\"#szyfrowanie-wybranych-p%C3%B3l-danych-wra%C5%BCliwych\">Szyfrowanie wybranych pól (danych wrażliwych)</a></li>\n</ul>\n</li>\n<li><a href=\"#kopie-zapasowe-backup-i-odtwarzanie-danych\">Kopie zapasowe (backup) i odtwarzanie danych</a>\n<ul>\n<li><a href=\"#rodzaje-backup%C3%B3w\">Rodzaje backupów</a></li>\n<li><a href=\"#bezpieczne-przechowywanie-backup%C3%B3w\">Bezpieczne przechowywanie backupów</a></li>\n</ul>\n</li>\n<li><a href=\"#audyt-i-monitorowanie\">Audyt i monitorowanie</a>\n<ul>\n<li><a href=\"#rejestrowanie-operacji-logi\">Rejestrowanie operacji (logi)</a></li>\n<li><a href=\"#przyk%C5%82ady-alert%C3%B3w-i-monitoringu\">Przykłady alertów i monitoringu</a></li>\n</ul>\n</li>\n<li><a href=\"#bezpieczne-praktyki-programistyczne\">Bezpieczne praktyki programistyczne</a>\n<ul>\n<li><a href=\"#przyk%C5%82ady-kodu-bezpiecznego-i-podatnego\">Przykłady kodu bezpiecznego i podatnego</a></li>\n<li><a href=\"#walidacja-i-sanityzacja-danych\">Walidacja i sanityzacja danych</a></li>\n</ul>\n</li>\n<li><a href=\"#aktualizacje-i-zarz%C4%85dzanie-podatno%C5%9Bciami\">Aktualizacje i zarządzanie podatnościami</a>\n<ul>\n<li><a href=\"#cve-i-%C5%9Bledzenie-luk-bezpiecze%C5%84stwa\">CVE i śledzenie luk bezpieczeństwa</a></li>\n</ul>\n</li>\n<li><a href=\"#bezpiecze%C5%84stwo-fizyczne-i-sieciowe\">Bezpieczeństwo fizyczne i sieciowe</a></li>\n<li><a href=\"#praktyczne-zadania\">Praktyczne zadania</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"dlaczego-bezpieczeństwo-baz-danych-jest-ważne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-bezpieczeństwo-baz-danych-jest-ważne\">>></a>Dlaczego bezpieczeństwo baz danych jest ważne?</h2>\n<ul>\n<li>Przechowujesz wrażliwe dane (osobowe, finansowe, firmowe, medyczne).</li>\n<li>Utrata lub wyciek danych = straty finansowe, wizerunkowe, prawne (RODO/GDPR, kary).</li>\n<li>Ataki na bazy danych są jednym z najczęstszych celów cyberprzestępców.</li>\n<li>Odpowiednia ochrona pozwala zminimalizować skutki błędów i awarii.</li>\n</ul>\n<hr>\n<h2 id=\"typowe-zagrożenia\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowe-zagrożenia\">>></a>Typowe zagrożenia</h2>\n<h3 id=\"sql-injection\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#sql-injection\">>>></a>SQL Injection</h3>\n<p><strong>Opis:</strong><br>\nNajpopularniejszy atak na aplikacje korzystające z baz – polega na przesłaniu złośliwego fragmentu SQL np. przez formularz. Może prowadzić do kradzieży lub usunięcia danych, modyfikacji kont czy przejęcia kontroli nad bazą.</p>\n<p><strong>Przykład ataku:</strong><br>\nZałóżmy, że użytkownik podaje login, a aplikacja wykonuje zapytanie (NIEBEZPIECZNE!):</p>\n<pre><code class=\"hljs language-python\">query = <span class=\"hljs-string\">\"SELECT * FROM Uzytkownicy WHERE login = '\"</span> + login + <span class=\"hljs-string\">\"';\"</span>\n</code></pre>\n<p>Jeśli użytkownik wpisze <code>admin' OR '1'='1</code>, zapytanie stanie się:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> Uzytkownicy <span class=\"hljs-keyword\">WHERE</span> login <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'admin'</span> <span class=\"hljs-keyword\">OR</span> <span class=\"hljs-string\">'1'</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'1'</span>;\n</code></pre>\n<p>Co zwróci wszystkich użytkowników!</p>\n<p><strong>Bezpieczna wersja (parametryzacja):</strong></p>\n<pre><code class=\"hljs language-python\">cursor.execute(<span class=\"hljs-string\">\"SELECT * FROM Uzytkownicy WHERE login = %s;\"</span>, (login,))\n</code></pre>\n<p><strong>Dodatkowe przykłady:</strong></p>\n<ul>\n<li><code>DROP TABLE Uzytkownicy; --</code> jako login może usunąć całą tabelę!</li>\n<li>Zmiana hasła administratora przez podatne zapytania UPDATE.</li>\n</ul>\n<p><strong>Jak się bronić?</strong></p>\n<ul>\n<li>Używaj zapytań parametryzowanych (prepared statements).</li>\n<li>Waliduj i filtruj dane wejściowe.</li>\n<li>Ograniczaj uprawnienia użytkowników bazodanowych.</li>\n</ul>\n<hr>\n<h3 id=\"utrata-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#utrata-danych\">>>></a>Utrata danych</h3>\n<ul>\n<li>Awaria sprzętu, błąd człowieka (np. przypadkowe usunięcie tabeli), atak (np. ransomware).</li>\n<li>Brak kopii zapasowej = trwała utrata danych!</li>\n<li>Przykład: awaria dysku, pożar serwerowni, błąd w aplikacji masowo kasujący dane.</li>\n</ul>\n<hr>\n<h3 id=\"nieautoryzowany-dostęp\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#nieautoryzowany-dostęp\">>>></a>Nieautoryzowany dostęp</h3>\n<ul>\n<li>Używanie domyślnych lub prostych haseł.</li>\n<li>Nieusuwanie starych kont.</li>\n<li>Brak ograniczeń adresów IP, z których można się połączyć.</li>\n<li>Przykład: administrator zapomniał odebrać uprawnienia byłemu pracownikowi.</li>\n</ul>\n<hr>\n<h3 id=\"wycieki-i-kradzież-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wycieki-i-kradzież-danych\">>>></a>Wycieki i kradzież danych</h3>\n<ul>\n<li>Uprawnienia nadane zbyt szeroko (każdy widzi wszystko).</li>\n<li>Błędy konfiguracyjne: baza dostępna z internetu bez zabezpieczeń.</li>\n<li>Przykład: publicznie dostępna baza MongoDB z danymi klientów.</li>\n</ul>\n<hr>\n<h3 id=\"ataki-typu-ransomware-i-ddos\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#ataki-typu-ransomware-i-ddos\">>>></a>Ataki typu ransomware i DDoS</h3>\n<ul>\n<li>Zaszyfrowanie bazy i żądanie okupu.</li>\n<li>Przeciążenie serwera bazą fałszywych zapytań (brak limitów i zabezpieczeń).</li>\n</ul>\n<hr>\n<h2 id=\"uprawnienia-i-zarządzanie-użytkownikami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#uprawnienia-i-zarządzanie-użytkownikami\">>></a>Uprawnienia i zarządzanie użytkownikami</h2>\n<h3 id=\"przykłady-nadawania-uprawnień\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykłady-nadawania-uprawnień\">>>></a>Przykłady nadawania uprawnień</h3>\n<ul>\n<li>\n<p><strong>Zła praktyka:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">ALL</span> PRIVILEGES <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-operator\">*</span>.<span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">'app'</span>@<span class=\"hljs-string\">'%'</span>;\n</code></pre>\n<p>(pełne uprawnienia dla wszystkich z każdego adresu IP!)</p>\n</li>\n<li>\n<p><strong>Dobra praktyka:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">SELECT</span>, <span class=\"hljs-keyword\">INSERT</span>, <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">ON</span> moja_baza.<span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">'app'</span>@<span class=\"hljs-string\">'localhost'</span> IDENTIFIED <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'silnehaslo'</span>;\n</code></pre>\n<p>(tylko potrzebne uprawnienia, tylko z lokalnego serwera)</p>\n</li>\n</ul>\n<h3 id=\"zasada-minimalnych-uprawnień\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zasada-minimalnych-uprawnień\">>>></a>Zasada minimalnych uprawnień</h3>\n<ul>\n<li>Przydzielaj tylko niezbędne prawa (np. brak CREATE/DROP dla użytkownika aplikacyjnego).</li>\n<li>Różnicuj konta: inne dla developerów, inne dla produkcji.</li>\n<li>Regularnie audytuj i usuwaj nieużywane konta.</li>\n</ul>\n<hr>\n<h2 id=\"szyfrowanie-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#szyfrowanie-danych\">>></a>Szyfrowanie danych</h2>\n<h3 id=\"szyfrowanie-w-spoczynku\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#szyfrowanie-w-spoczynku\">>>></a>Szyfrowanie \"w spoczynku\"</h3>\n<ul>\n<li>Szyfrowanie plików bazy na dysku (np. TDE – Transparent Data Encryption).</li>\n<li>Przykład: dane na skradzionym dysku nie są czytelne bez klucza.</li>\n</ul>\n<h3 id=\"szyfrowanie-w-tranzycie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#szyfrowanie-w-tranzycie\">>>></a>Szyfrowanie \"w tranzycie\"</h3>\n<ul>\n<li>Używanie połączeń szyfrowanych (SSL/TLS) między aplikacją a serwerem bazy.</li>\n<li>Przykład: przechwycenie ruchu sieciowego nie ujawnia haseł/danych.</li>\n</ul>\n<h3 id=\"szyfrowanie-wybranych-pól-danych-wrażliwych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#szyfrowanie-wybranych-pól-danych-wrażliwych\">>>></a>Szyfrowanie wybranych pól (danych wrażliwych)</h3>\n<ul>\n<li>Szyfruj tylko kluczowe dane (np. PESEL, numer karty).</li>\n<li>Przykład (PostgreSQL, funkcja pgcrypto):\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">UPDATE</span> klienci <span class=\"hljs-keyword\">SET</span> pesel <span class=\"hljs-operator\">=</span> pgp_sym_encrypt(<span class=\"hljs-string\">'12345678901'</span>, <span class=\"hljs-string\">'tajny_klucz'</span>);\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id=\"kopie-zapasowe-backup-i-odtwarzanie-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#kopie-zapasowe-backup-i-odtwarzanie-danych\">>></a>Kopie zapasowe (backup) i odtwarzanie danych</h2>\n<h3 id=\"rodzaje-backupów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#rodzaje-backupów\">>>></a>Rodzaje backupów</h3>\n<ul>\n<li><strong>Pełny:</strong> cała baza, wykonywany regularnie (np. co noc).</li>\n<li><strong>Przyrostowy/delta:</strong> tylko zmiany od ostatniego backupu.</li>\n<li><strong>Automatyczny:</strong> narzędzia typu cron, narzędzia DBMS.</li>\n</ul>\n<h3 id=\"bezpieczne-przechowywanie-backupów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#bezpieczne-przechowywanie-backupów\">>>></a>Bezpieczne przechowywanie backupów</h3>\n<ul>\n<li>Przechowuj kopie poza głównym serwerem (np. inny serwer, chmura).</li>\n<li>Szyfruj backupy!</li>\n<li>Testuj przywracanie danych – backup bez testu = brak backupu.</li>\n</ul>\n<p><strong>Przykład backupu MySQL:</strong></p>\n<pre><code class=\"hljs language-bash\">mysqldump -u user -p baza > baza_backup.sql\n</code></pre>\n<hr>\n<h2 id=\"audyt-i-monitorowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#audyt-i-monitorowanie\">>></a>Audyt i monitorowanie</h2>\n<h3 id=\"rejestrowanie-operacji-logi\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#rejestrowanie-operacji-logi\">>>></a>Rejestrowanie operacji (logi)</h3>\n<ul>\n<li>Loguj: logowania, próby nieautoryzowanego dostępu, zmiany danych, nadania uprawnień.</li>\n<li>Przykład:\n<ul>\n<li>Kto i kiedy zmienił rekord?</li>\n<li>Ile razy próbowano zalogować się z błędnym hasłem?</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"przykłady-alertów-i-monitoringu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykłady-alertów-i-monitoringu\">>>></a>Przykłady alertów i monitoringu</h3>\n<ul>\n<li>Alert na przekroczenie liczby nieudanych logowań.</li>\n<li>Alert na próbę usunięcia większej liczby rekordów niż zazwyczaj.</li>\n<li>Monitorowanie czasu odpowiedzi bazy i liczby aktywnych połączeń.</li>\n</ul>\n<hr>\n<h2 id=\"bezpieczne-praktyki-programistyczne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#bezpieczne-praktyki-programistyczne\">>></a>Bezpieczne praktyki programistyczne</h2>\n<h3 id=\"przykłady-kodu-bezpiecznego-i-podatnego\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykłady-kodu-bezpiecznego-i-podatnego\">>>></a>Przykłady kodu bezpiecznego i podatnego</h3>\n<p><strong>Podatny na SQL Injection:</strong></p>\n<pre><code class=\"hljs language-python\">login = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Podaj login: \"</span>)\nquery = <span class=\"hljs-string\">\"SELECT * FROM Uzytkownicy WHERE login = '\"</span> + login + <span class=\"hljs-string\">\"';\"</span>\ncursor.execute(query)\n</code></pre>\n<p><strong>Bezpieczny:</strong></p>\n<pre><code class=\"hljs language-python\">login = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Podaj login: \"</span>)\ncursor.execute(<span class=\"hljs-string\">\"SELECT * FROM Uzytkownicy WHERE login = %s;\"</span>, (login,))\n</code></pre>\n<h3 id=\"walidacja-i-sanityzacja-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#walidacja-i-sanityzacja-danych\">>>></a>Walidacja i sanityzacja danych</h3>\n<ul>\n<li>Sprawdzaj, czy dane mają oczekiwany typ i format (np. e-mail, liczba).</li>\n<li>Ogranicz długość danych wejściowych.</li>\n<li>Odrzucaj dane zawierające podejrzane znaki lub sekwencje.</li>\n</ul>\n<hr>\n<h2 id=\"aktualizacje-i-zarządzanie-podatnościami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#aktualizacje-i-zarządzanie-podatnościami\">>></a>Aktualizacje i zarządzanie podatnościami</h2>\n<ul>\n<li>Regularnie aktualizuj silnik bazy, oprogramowanie serwera, aplikacje.</li>\n<li>Śledź CVE (Common Vulnerabilities and Exposures) oraz biuletyny bezpieczeństwa dostawców.</li>\n<li>Szybko reaguj na publikowane luki bezpieczeństwa.</li>\n<li>Używaj narzędzi do skanowania podatności (np. Nessus, OpenVAS).</li>\n</ul>\n<hr>\n<h2 id=\"bezpieczeństwo-fizyczne-i-sieciowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#bezpieczeństwo-fizyczne-i-sieciowe\">>></a>Bezpieczeństwo fizyczne i sieciowe</h2>\n<ul>\n<li>Ogranicz dostęp do serwera bazy (np. tylko z wybranych adresów IP, VPN).</li>\n<li>Stosuj zapory sieciowe (firewall) oraz segmentację sieci.</li>\n<li>Serwer bazy nie powinien być dostępny z publicznego internetu!</li>\n<li>Zabezpiecz serwer fizycznie (zamykane serwerownie, monitoring).</li>\n</ul>\n<hr>\n<h2 id=\"praktyczne-zadania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#praktyczne-zadania\">>></a>Praktyczne zadania</h2>\n<h3 id=\"zadanie-1-sql-injection\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-sql-injection\">>>></a>Zadanie 1: SQL Injection</h3>\n<p>Zidentyfikuj i popraw podatny na SQL Injection fragment kodu:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># NIEBEZPIECZNE!</span>\nquery = <span class=\"hljs-string\">\"SELECT * FROM Uzytkownicy WHERE login = '\"</span> + login + <span class=\"hljs-string\">\"';\"</span>\n</code></pre>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<p><strong>Bezpieczne rozwiązanie (przykład w Pythonie z parametryzacją):</strong></p>\n<pre><code class=\"hljs language-python\">cursor.execute(<span class=\"hljs-string\">\"SELECT * FROM Uzytkownicy WHERE login = %s;\"</span>, (login,))\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nParametryzacja przekazuje dane osobno od zapytania – nawet jeśli użytkownik wpisze złośliwy kod, nie zostanie on wykonany jako SQL.</p>\n</details>\n<hr>\n<h3 id=\"zadanie-2-uprawnienia\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-uprawnienia\">>>></a>Zadanie 2: Uprawnienia</h3>\n<p>Zaproponuj sposób nadania tylko niezbędnych uprawnień użytkownikowi aplikacyjnemu w MySQL.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">SELECT</span>, <span class=\"hljs-keyword\">INSERT</span>, <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">ON</span> baza.<span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">'app_user'</span>@<span class=\"hljs-string\">'localhost'</span> IDENTIFIED <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'silnehaslo'</span>;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nUżytkownik nie może kasować ani zmieniać struktury bazy – tylko podstawowe operacje.</p>\n</details>\n<hr>\n<h3 id=\"zadanie-3-backup-i-odtwarzanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-backup-i-odtwarzanie\">>>></a>Zadanie 3: Backup i odtwarzanie</h3>\n<p>Wypisz polecenie do stworzenia backupu bazy \"sklep\" w MySQL oraz opisz, gdzie bezpiecznie go przechować.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-bash\">mysqldump -u user -p sklep > sklep_backup.sql\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nBackup najlepiej przechowywać na zaszyfrowanym dysku w innej lokalizacji niż produkcyjny serwer.</p>\n</details>\n<hr>\n<h3 id=\"zadanie-4-audyt\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-audyt\">>>></a>Zadanie 4: Audyt</h3>\n<p>Opisz, jakie informacje warto logować w bazie w celach bezpieczeństwa.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<ul>\n<li>Logi logowania i wylogowania użytkowników</li>\n<li>Próby nieautoryzowanego dostępu</li>\n<li>Operacje modyfikujące dane (INSERT, UPDATE, DELETE)</li>\n<li>Zmiany uprawnień i konfiguracji\n<strong>Wyjaśnienie:</strong><br>\nTakie logi pozwalają wykryć ataki, nadużycia i szybciej reagować na incydenty.</li>\n</ul>\n</details>\n<hr>\n<h3 id=\"zadanie-5-szyfrowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-szyfrowanie\">>>></a>Zadanie 5: Szyfrowanie</h3>\n<p>Podaj dwa przykłady zastosowania szyfrowania w bazie danych.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<ul>\n<li>Szyfrowanie połączenia klient-serwer (SSL/TLS), np. <code>mysql --ssl-mode=REQUIRED</code></li>\n<li>Szyfrowanie danych na dysku (np. TDE – Transparent Data Encryption w MS SQL, MariaDB)\n<strong>Wyjaśnienie:</strong><br>\nSzyfrowanie chroni przed kradzieżą danych podczas transmisji i fizycznego dostępu do dysków.</li>\n</ul>\n</details>\n<hr>\n<h3 id=\"zadanie-6-przykład-walidacji-danych-wejściowych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-6-przykład-walidacji-danych-wejściowych\">>>></a>Zadanie 6: Przykład walidacji danych wejściowych</h3>\n<p>Podaj przykład sprawdzania poprawności adresu e-mail przed zapisaniem do bazy.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<p><strong>W Pythonie:</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">valid_email</span>(<span class=\"hljs-params\">email</span>):\n    <span class=\"hljs-keyword\">return</span> re.<span class=\"hljs-keyword\">match</span>(<span class=\"hljs-string\">r\"^[^@]+@[^@]+\\.[^@]+$\"</span>, email)\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nAkceptujemy tylko dane zgodne z ustalonym wzorcem – minimalizujemy ryzyko wstrzyknięcia niepożądanych znaków.</p>\n</details>\n<hr>\n<h3 id=\"zadanie-7-przykład-ograniczenia-dostępu-sieciowego\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-7-przykład-ograniczenia-dostępu-sieciowego\">>>></a>Zadanie 7: Przykład ograniczenia dostępu sieciowego</h3>\n<p>Jak ograniczyć dostęp do bazy tylko z określonych adresów IP?</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<ul>\n<li>W MySQL przy tworzeniu użytkownika określ w host: <code>'app_user'@'192.168.1.100'</code></li>\n<li>Skonfiguruj firewall (iptables, security group w chmurze), by akceptował ruch tylko z zaufanych adresów.\n<strong>Wyjaśnienie:</strong><br>\nTylko aplikacja działająca na wybranym serwerze może połączyć się z bazą, ataki z zewnątrz są blokowane.</li>\n</ul>\n</details>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Bezpieczeństwo baz danych wymaga ciągłej uwagi, aktualizacji i stosowania dobrych praktyk. Najlepsza ochrona to połączenie technologii, kontroli dostępu, backupów, szyfrowania, audytu oraz świadomych użytkowników i programistów. Nawet najprostsze rozwiązania mogą zapobiec poważnym konsekwencjom wycieku lub utraty danych!</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/bezpieczenstwo-baz-danych.md","5 minut",{"_21":290,"_23":291,"_25":292,"_6":299,"_36":240,"_38":300,"_91":343,"_93":344,"_95":345,"_97":346,"_99":347},"Optymalizacja baz danych i zapytań SQL","Dowiedz się, jak przyspieszyć działanie baz danych i zapytań SQL. Poznaj techniki indeksowania, optymalizacji zapytań, analizy wydajności oraz dobre praktyki projektowe. Przewodnik dla średniozaawansowanych i zaawansowanych.",[293,294,295,296,297,298,12,34],"optymalizacja","bazy danych","indeksy","wydajność","explain","tuning",[12,8],{"_21":301,"_41":302},"Quiz: Optymalizacja baz danych i zapytań SQL",[303,311,319,327,335],{"_44":304,"_46":305,"_52":53,"_54":310},"<p>Czym jest indeks w bazie danych?</p>",[306,307,308,309],"Typ połączenia sieciowego","Dodatkowa tabela przechowująca kopie rekordów","Kod służący do tworzenia backupów","Struktura danych przyspieszająca wyszukiwanie i sortowanie","Indeks to struktura umożliwiająca szybkie wyszukiwanie i sortowanie danych.",{"_44":312,"_46":313,"_52":80,"_54":318},"<p>Jak sprawdzić plan wykonania zapytania SQL?</p>",[314,315,316,317],"Dodać WHERE 1=1","Użyć polecenia EXPLAIN lub EXPLAIN ANALYZE","Użyć DELETE","Zwiększyć ilość RAM","Polecenie EXPLAIN pozwala sprawdzić, jak baza danych wykona zapytanie.",{"_44":320,"_46":321,"_52":80,"_54":326},"<p>Które z poniższych NIE jest dobrym sposobem na poprawę wydajności zapytań?</p>",[322,323,324,325],"Tworzenie odpowiednich indeksów","Dodawanie zbędnych podzapytań","Filtrowanie danych w WHERE","Unikanie SELECT *","Zbędne podzapytania mogą spowalniać zapytania.",{"_44":328,"_46":329,"_52":80,"_54":334},"<p>Czym jest denormalizacja?</p>",[330,331,332,333],"Zwiększanie liczby indeksów","Proces łączenia danych w celu poprawy wydajności","Usuwanie kluczy głównych","Proces dzielenia tabel na mniejsze","Denormalizacja to łączenie danych, by przyspieszyć odczyt kosztem powielania informacji.",{"_44":336,"_46":337,"_52":89,"_54":342},"<p>Jakie zapytanie może być szczególnie niebezpieczne wydajnościowo?</p>",[338,339,340,341],"SELECT z JOIN na dużych tabelach bez indeksów","UPDATE bez WHERE","Wszystkie powyższe","DELETE z podzapytaniami bez filtrów","Brak ograniczeń i indeksów w dużych zapytaniach może prowadzić do spadku wydajności lub błędów.","c7ed9a61-e382-43f7-b04f-c762bbea60da","optymalizacja-baz-danych-i-zapytan-sql","<p>Optymalizacja baz danych i zapytań SQL to kluczowy element sprawnego działania aplikacji, szczególnie gdy ilość danych rośnie. Nawet dobrze zaprojektowana baza może działać wolno bez odpowiednich technik optymalizacyjnych. Ten kurs pokaże Ci, jak analizować, wykrywać i rozwiązywać najczęstsze problemy z wydajnością.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#dlaczego-optymalizacja-jest-wa%C5%BCna\">Dlaczego optymalizacja jest ważna?</a></li>\n<li><a href=\"#indeksowanie-danych\">Indeksowanie danych</a>\n<ul>\n<li><a href=\"#rodzaje-indeks%C3%B3w\">Rodzaje indeksów</a></li>\n<li><a href=\"#tworzenie-i-usuwanie-indeks%C3%B3w\">Tworzenie i usuwanie indeksów</a></li>\n<li><a href=\"#kiedy-indeksy-przeszkadzaj%C4%85\">Kiedy indeksy przeszkadzają?</a></li>\n</ul>\n</li>\n<li><a href=\"#optymalizacja-zapyta%C5%84-sql\">Optymalizacja zapytań SQL</a>\n<ul>\n<li><a href=\"#analiza-planu-wykonania-explain\">Analiza planu wykonania (EXPLAIN)</a></li>\n<li><a href=\"#unikanie-typowych-b%C5%82%C4%99d%C3%B3w\">Unikanie typowych błędów</a></li>\n<li><a href=\"#pisanie-wydajnych-zapyta%C5%84\">Pisanie wydajnych zapytań</a></li>\n</ul>\n</li>\n<li><a href=\"#normalizacja-a-denormalizacja-danych\">Normalizacja a denormalizacja danych</a></li>\n<li><a href=\"#tuning-bazy-danych-i-parametry-konfiguracyjne\">Tuning bazy danych i parametry konfiguracyjne</a></li>\n<li><a href=\"#monitorowanie-wydajno%C5%9Bci\">Monitorowanie wydajności</a></li>\n<li><a href=\"#praktyczne-zadania\">Praktyczne zadania</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"dlaczego-optymalizacja-jest-ważna\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-optymalizacja-jest-ważna\">>></a>Dlaczego optymalizacja jest ważna?</h2>\n<ul>\n<li><strong>Duże ilości danych</strong> mogą znacząco spowolnić nawet dobrze zaprojektowaną bazę.</li>\n<li><strong>Wydajne zapytania</strong> to krótszy czas odpowiedzi i mniejsze zużycie zasobów serwera.</li>\n<li>Niska wydajność bazy może prowadzić do spadku satysfakcji użytkowników, błędów i kosztów utrzymania.</li>\n</ul>\n<hr>\n<h2 id=\"indeksowanie-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#indeksowanie-danych\">>></a>Indeksowanie danych</h2>\n<p>Indeks to specjalna struktura danych (np. drzewo B-drzewiaste), która przyspiesza wyszukiwanie i sortowanie danych w tabeli. Działa jak spis treści w książce.</p>\n<h3 id=\"rodzaje-indeksów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#rodzaje-indeksów\">>>></a>Rodzaje indeksów</h3>\n<ul>\n<li><strong>Indeks podstawowy (PRIMARY)</strong> – na kluczu głównym, zawsze unikalny.</li>\n<li><strong>Indeksy unikalne (UNIQUE)</strong> – zapewniają unikalność wartości w kolumnie.</li>\n<li><strong>Indeksy zwykłe</strong> – przyspieszają wyszukiwanie, ale mogą mieć powtarzające się wartości.</li>\n<li><strong>Indeksy złożone (wielokolumnowe)</strong> – na kilku kolumnach jednocześnie.</li>\n<li><strong>Indeksy pełnotekstowe</strong> – do wyszukiwania tekstów.</li>\n</ul>\n<h3 id=\"tworzenie-i-usuwanie-indeksów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tworzenie-i-usuwanie-indeksów\">>>></a>Tworzenie i usuwanie indeksów</h3>\n<p><strong>Tworzenie indeksu:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE</span> INDEX idx_nazwisko <span class=\"hljs-keyword\">ON</span> Pracownik(nazwisko);\n</code></pre>\n<ul>\n<li><code>CREATE INDEX</code> – polecenie tworzące indeks.</li>\n<li><code>idx_nazwisko</code> – nazwa indeksu.</li>\n<li><code>ON Pracownik(nazwisko)</code> – tabela i kolumna, na której tworzony jest indeks.</li>\n</ul>\n<p><strong>Usuwanie indeksu:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DROP</span> INDEX idx_nazwisko <span class=\"hljs-keyword\">ON</span> Pracownik;\n</code></pre>\n<h3 id=\"kiedy-indeksy-przeszkadzają\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#kiedy-indeksy-przeszkadzają\">>>></a>Kiedy indeksy przeszkadzają?</h3>\n<ul>\n<li>Zbyt wiele indeksów spowalnia operacje INSERT, UPDATE, DELETE (każda zmiana wymaga aktualizacji indeksów).</li>\n<li>Indeksy zajmują dodatkowe miejsce na dysku.</li>\n<li>Indeksy nie pomagają przy operacjach na małych tabelach.</li>\n</ul>\n<hr>\n<h2 id=\"optymalizacja-zapytań-sql\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#optymalizacja-zapytań-sql\">>></a>Optymalizacja zapytań SQL</h2>\n<h3 id=\"analiza-planu-wykonania-explain\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#analiza-planu-wykonania-explain\">>>></a>Analiza planu wykonania (EXPLAIN)</h3>\n<p>Polecenie <strong>EXPLAIN</strong> pokazuje, jak baza zamierza wykonać zapytanie – czy użyje indeksu, jak będzie łączyć tabele itd.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\">EXPLAIN <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> Pracownik <span class=\"hljs-keyword\">WHERE</span> nazwisko <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'Kowalski'</span>;\n</code></pre>\n<ul>\n<li>Sprawdź, czy w kolumnie \"key\" pojawia się nazwa indeksu.</li>\n</ul>\n<h3 id=\"unikanie-typowych-błędów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#unikanie-typowych-błędów\">>>></a>Unikanie typowych błędów</h3>\n<ul>\n<li>SELECT * (wszystkie kolumny) – pobieraj tylko potrzebne kolumny.</li>\n<li>Brak WHERE – zapytania bez warunków mogą przetwarzać całą tabelę.</li>\n<li>Zbyt złożone podzapytania lub zagnieżdżone JOINy bez indeksów.</li>\n<li>Filtrowanie po kolumnie bez indeksu.</li>\n</ul>\n<h3 id=\"pisanie-wydajnych-zapytań\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pisanie-wydajnych-zapytań\">>>></a>Pisanie wydajnych zapytań</h3>\n<ul>\n<li>Używaj WHERE, by ograniczyć liczbę przetwarzanych rekordów.</li>\n<li>Łącz tabele po indeksowanych kolumnach (kluczach głównych/obcych).</li>\n<li>Unikaj funkcji na kolumnach w WHERE (np. WHERE LOWER(nazwisko) = 'kowalski') – indeksy wtedy nie działają.</li>\n<li>Stosuj LIMIT, jeśli nie potrzebujesz wszystkich wyników.</li>\n</ul>\n<hr>\n<h2 id=\"normalizacja-a-denormalizacja-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#normalizacja-a-denormalizacja-danych\">>></a>Normalizacja a denormalizacja danych</h2>\n<ul>\n<li><strong>Normalizacja</strong> – dzielenie danych na tabele, by unikać powielania informacji i zapewnić spójność (zazwyczaj do 3NF).</li>\n<li><strong>Denormalizacja</strong> – celowe powielanie danych w tabelach (np. trzymanie nazwy produktu przy zamówieniu) w celu przyspieszenia odczytu danych, kosztem spójności i miejsca.</li>\n</ul>\n<p><strong>Kiedy warto denormalizować?</strong></p>\n<ul>\n<li>Gdy odczyty są znacznie częstsze niż zapisy.</li>\n<li>Gdy optymalizacja zapytań jest ważniejsza niż minimalizacja powielania danych.</li>\n</ul>\n<hr>\n<h2 id=\"tuning-bazy-danych-i-parametry-konfiguracyjne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tuning-bazy-danych-i-parametry-konfiguracyjne\">>></a>Tuning bazy danych i parametry konfiguracyjne</h2>\n<ul>\n<li><strong>Cache (buforowanie)</strong> – bazy danych posiadają wbudowane mechanizmy buforowania wyników zapytań i stron danych.</li>\n<li><strong>Konfiguracja pamięci operacyjnej</strong> – wielkość buforów, liczba połączeń.</li>\n<li><strong>Partycjonowanie tabel</strong> – dzielenie dużych tabel na mniejsze części (np. wg daty).</li>\n<li><strong>Replikacja</strong> – kopiowanie danych na różne serwery, by rozłożyć obciążenie.</li>\n</ul>\n<hr>\n<h2 id=\"monitorowanie-wydajności\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#monitorowanie-wydajności\">>></a>Monitorowanie wydajności</h2>\n<ul>\n<li>Używaj wbudowanych narzędzi (np. <code>SHOW PROCESSLIST</code>, <code>pg_stat_activity</code>).</li>\n<li>Loguj czas wykonania zapytań.</li>\n<li>Analizuj statystyki indeksów i fragmentację tabel.</li>\n<li>Wdrażaj alerty przy długotrwałych zapytaniach.</li>\n</ul>\n<hr>\n<h2 id=\"praktyczne-zadania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#praktyczne-zadania\">>></a>Praktyczne zadania</h2>\n<h3 id=\"zadanie-1-tworzenie-indeksu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-tworzenie-indeksu\">>>></a>Zadanie 1: Tworzenie indeksu</h3>\n<p>Stwórz indeks na kolumnie \"email\" w tabeli \"Uzytkownicy\".</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE</span> INDEX idx_email <span class=\"hljs-keyword\">ON</span> Uzytkownicy(email);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-analiza-zapytania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-analiza-zapytania\">>>></a>Zadanie 2: Analiza zapytania</h3>\n<p>Sprawdź plan wykonania poniższego zapytania:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> Produkty <span class=\"hljs-keyword\">WHERE</span> nazwa <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'Laptop'</span>;\n</code></pre>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\">EXPLAIN <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> Produkty <span class=\"hljs-keyword\">WHERE</span> nazwa <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'Laptop'</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-optymalizacja-zapytania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-optymalizacja-zapytania\">>>></a>Zadanie 3: Optymalizacja zapytania</h3>\n<p>Masz zapytanie:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> Zamowienie <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-keyword\">YEAR</span>(data_zamowienia) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2025</span>;\n</code></pre>\n<p>Jak je poprawić, by lepiej wykorzystać indeks na kolumnie data_zamowienia?</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> Zamowienie <span class=\"hljs-keyword\">WHERE</span> data_zamowienia <span class=\"hljs-operator\">>=</span> <span class=\"hljs-string\">'2025-01-01'</span> <span class=\"hljs-keyword\">AND</span> data_zamowienia <span class=\"hljs-operator\">&#x3C;</span> <span class=\"hljs-string\">'2026-01-01'</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-wydajność-a-liczba-indeksów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-wydajność-a-liczba-indeksów\">>>></a>Zadanie 4: Wydajność a liczba indeksów</h3>\n<p>Wyjaśnij, dlaczego zbyt wiele indeksów może negatywnie wpłynąć na wydajność bazy.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<p>Każdy INSERT, UPDATE lub DELETE wymaga aktualizacji wszystkich indeksów, co spowalnia operacje modyfikujące dane.</p>\n</details>\n<hr>\n<h3 id=\"zadanie-5-denormalizacja\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-denormalizacja\">>>></a>Zadanie 5: Denormalizacja</h3>\n<p>Podaj przykład sytuacji, kiedy warto zastosować denormalizację.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<p>Gdy bardzo często wyświetlamy raporty sprzedaży, możemy przechowywać sumę sprzedaży w tabeli, zamiast za każdym razem ją wyliczać.</p>\n</details>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Optymalizacja baz danych i zapytań SQL pozwala obsługiwać większą ilość danych szybciej i taniej. Korzystaj z indeksów, analizuj plany wykonania, dbaj o strukturę bazy i monitoruj jej działanie – to klucz do sukcesu każdego większego projektu informatycznego!</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/optymalizacja-baz-danych-i-zapytan-sql.md","3 minuty",{"_21":349,"_23":350,"_25":351,"_6":357,"_36":240,"_38":358,"_91":401,"_93":402,"_95":403,"_97":404,"_99":405},"Podstawy projektowania baz danych","Dowiedz się, jak projektować efektywne, czytelne i bezpieczne bazy danych. Poznaj zasady normalizacji, diagramy ERD, relacje, dobre praktyki projektowe oraz liczne przykłady i zadania praktyczne. Kurs teoretyczno-praktyczny dla początkujących.",[231,352,353,354,355,356,238,34],"projektowanie","normalizacja","erd","relacje","modelowanie",[8],{"_21":359,"_41":360},"Quiz: Podstawy projektowania baz danych",[361,369,377,385,393],{"_44":362,"_46":363,"_52":71,"_54":368},"<p>Czym jest modelowanie danych?</p>",[364,365,366,367],"Proces odwzorowania rzeczywistości w strukturze bazy danych","Szyfrowanie danych","Proces tworzenia stron internetowych","Tworzenie kopii zapasowych danych","Modelowanie danych to odwzorowanie rzeczywistych obiektów i zależności w strukturze bazy.",{"_44":370,"_46":371,"_52":53,"_54":376},"<p>Co przedstawia diagram ERD?</p>",[372,373,374,375],"Schemat działania serwera WWW","Struktury kodu źródłowego","Zasady bezpieczeństwa","Relacje między encjami w bazie danych","ERD (Entity-Relationship Diagram) to graficzne przedstawienie encji i relacji między nimi.",{"_44":378,"_46":379,"_52":53,"_54":384},"<p>Czym jest klucz główny (Primary Key)?</p>",[380,381,382,383],"Pole przechowujące hasło","Kolumna służąca do sortowania","Nazwa tabeli","Unikalnym identyfikatorem rekordu w tabeli","Klucz główny (Primary Key) jednoznacznie identyfikuje każdy rekord w tabeli.",{"_44":386,"_46":387,"_52":71,"_54":392},"<p>Na czym polega normalizacja danych?</p>",[388,389,390,391],"Na podziale danych na tabele w celu eliminacji nadmiarowości i zapewnienia spójności","Na kompresji plików","Na szyfrowaniu rekordów","Na sortowaniu danych","Normalizacja to proces dzielenia danych na mniejsze, powiązane tabele, by uniknąć powielania informacji.",{"_44":394,"_46":395,"_52":80,"_54":400},"<p>Jaką relację opisuje połączenie jeden-do-wielu?</p>",[396,397,398,399],"Wiele rekordów w jednej tabeli odpowiada wielu w drugiej","Każdy rekord w jednej tabeli może być powiązany z wieloma rekordami w drugiej tabeli","Każdy rekord w jednej tabeli odpowiada dokładnie jednemu rekordowi w drugiej","Tabele nie są powiązane","Relacja jeden-do-wielu oznacza, że jeden rekord z tabeli A może być powiązany z wieloma rekordami z tabeli B.","a16b7c88-1ddb-4e6d-89ef-77f1390de7cc","podstawy-projektowania-baz-danych","<p>Projektowanie bazy danych to sztuka zamieniania rzeczywistych problemów na logiczne, czytelne i wydajne struktury danych. Dobrze zaprojektowana baza ułatwia przechowywanie, wyszukiwanie i analizę informacji, a także minimalizuje błędy i powielanie danych.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-projektowanie-bazy-danych\">Czym jest projektowanie bazy danych?</a></li>\n<li><a href=\"#modelowanie-danych-i-diagramy-erd\">Modelowanie danych i diagramy ERD</a>\n<ul>\n<li><a href=\"#przyk%C5%82ad-praktyczny-minidiagram-erd-dla-sklepu\">Przykład praktyczny: minidiagram ERD dla sklepu</a></li>\n</ul>\n</li>\n<li><a href=\"#podstawowe-poj%C4%99cia-encja-atrybut-relacja\">Podstawowe pojęcia: encja, atrybut, relacja</a>\n<ul>\n<li><a href=\"#przyk%C5%82ad-encji-z-atrybutami\">Przykład encji z atrybutami</a></li>\n</ul>\n</li>\n<li><a href=\"#rodzaje-relacji-mi%C4%99dzy-tabelami\">Rodzaje relacji między tabelami</a>\n<ul>\n<li><a href=\"#jeden-do-jednego-11\">Jeden do jednego (1:1)</a></li>\n<li><a href=\"#jeden-do-wielu-1n\">Jeden do wielu (1:N)</a></li>\n<li><a href=\"#wiele-do-wielu-nm\">Wiele do wielu (N:M)</a></li>\n<li><a href=\"#przyk%C5%82ady-relacji-i-ich-implementacja\">Przykłady relacji i ich implementacja</a></li>\n</ul>\n</li>\n<li><a href=\"#klucze-g%C5%82%C3%B3wne-i-obce\">Klucze główne i obce</a>\n<ul>\n<li><a href=\"#przyk%C5%82ad-praktyczny-klucz-g%C5%82%C3%B3wny-i-obcy\">Przykład praktyczny: klucz główny i obcy</a></li>\n</ul>\n</li>\n<li><a href=\"#normalizacja-danych\">Normalizacja danych</a>\n<ul>\n<li><a href=\"#pierwsza-posta%C4%87-normalna-1nf\">Pierwsza postać normalna (1NF)</a></li>\n<li><a href=\"#druga-posta%C4%87-normalna-2nf\">Druga postać normalna (2NF)</a></li>\n<li><a href=\"#trzecia-posta%C4%87-normalna-3nf\">Trzecia postać normalna (3NF)</a></li>\n<li><a href=\"#przyk%C5%82ad-normalizacji-krok-po-kroku\">Przykład normalizacji krok po kroku</a></li>\n</ul>\n</li>\n<li><a href=\"#typowe-b%C5%82%C4%99dy-projektowe\">Typowe błędy projektowe</a>\n<ul>\n<li><a href=\"#przyk%C5%82ady-b%C5%82%C4%99d%C3%B3w-i-ich-skutki\">Przykłady błędów i ich skutki</a></li>\n</ul>\n</li>\n<li><a href=\"#dobre-praktyki-projektowe\">Dobre praktyki projektowe</a>\n<ul>\n<li><a href=\"#praktyczne-wskaz%C3%B3wki\">Praktyczne wskazówki</a></li>\n</ul>\n</li>\n<li><a href=\"#praktyczne-zadania\">Praktyczne zadania</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-projektowanie-bazy-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-projektowanie-bazy-danych\">>></a>Czym jest projektowanie bazy danych?</h2>\n<p>Projektowanie bazy danych polega na przemyślanym zaplanowaniu, jakie informacje będą przechowywane, jak będą powiązane oraz jak zapewnić spójność i efektywność przechowywania danych. To proces analizy rzeczywistego problemu, wydzielenia kluczowych obiektów (encje), ich cech (atrybuty) i wzajemnych powiązań (relacje).</p>\n<hr>\n<h2 id=\"modelowanie-danych-i-diagramy-erd\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#modelowanie-danych-i-diagramy-erd\">>></a>Modelowanie danych i diagramy ERD</h2>\n<p><strong>Modelowanie danych</strong> to proces odwzorowania rzeczywistości na strukturę bazy. W praktyce używamy do tego <em>diagramów ERD</em> (Entity-Relationship Diagram), które graficznie przedstawiają encje oraz relacje między nimi.</p>\n<ul>\n<li><strong>Encja</strong> – np. Użytkownik, Zamówienie, Produkt.</li>\n<li><strong>Atrybut</strong> – cecha encji np. imię, data zamówienia, cena produktu.</li>\n<li><strong>Relacja</strong> – powiązanie między encjami, np. \"Użytkownik składa Zamówienie\".</li>\n</ul>\n<h3 id=\"przykład-praktyczny-minidiagram-erd-dla-sklepu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykład-praktyczny-minidiagram-erd-dla-sklepu\">>>></a>Przykład praktyczny: minidiagram ERD dla sklepu</h3>\n<p>Wyobraź sobie sklep internetowy.</p>\n<pre><code>[Klient] 1---N [Zamówienie] N---M [Produkt]\n</code></pre>\n<ul>\n<li>Klient składa wiele zamówień.</li>\n<li>Zamówienie może dotyczyć wielu produktów (i odwrotnie: produkt może być w wielu zamówieniach).</li>\n</ul>\n<hr>\n<h2 id=\"podstawowe-pojęcia-encja-atrybut-relacja\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-pojęcia-encja-atrybut-relacja\">>></a>Podstawowe pojęcia: encja, atrybut, relacja</h2>\n<ul>\n<li><strong>Encja</strong> (entity): reprezentuje obiekt rzeczywisty lub pojęciowy, np. Klient, Produkt, Faktura.</li>\n<li><strong>Atrybut</strong>: pojedyncza informacja opisująca encję, np. imię, cena, numer faktury.</li>\n<li><strong>Relacja</strong>: związek między encjami, np. klient składa zamówienie.</li>\n</ul>\n<h3 id=\"przykład-encji-z-atrybutami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykład-encji-z-atrybutami\">>>></a>Przykład encji z atrybutami</h3>\n<p><strong>Encja:</strong> Klient<br>\n<strong>Atrybuty:</strong> id_klienta, imie, email, adres</p>\n<p><strong>Encja:</strong> Produkt<br>\n<strong>Atrybuty:</strong> id_produktu, nazwa, cena</p>\n<hr>\n<h2 id=\"rodzaje-relacji-między-tabelami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#rodzaje-relacji-między-tabelami\">>></a>Rodzaje relacji między tabelami</h2>\n<h3 id=\"jeden-do-jednego-11\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jeden-do-jednego-11\">>>></a>Jeden do jednego (1:1)</h3>\n<p>Każdemu rekordowi z jednej tabeli odpowiada dokładnie jeden rekord z drugiej tabeli.</p>\n<p><strong>Przykład:</strong> Każdy użytkownik ma jeden profil.</p>\n<p><strong>Implementacja:</strong> najczęściej przez dzielenie rzadko używanych danych na osobną tabelę np.<br>\nTabela <code>Uzytkownik</code> i tabela <code>Profil</code> powiązana polem <code>id</code>.</p>\n<h3 id=\"jeden-do-wielu-1n\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jeden-do-wielu-1n\">>>></a>Jeden do wielu (1:N)</h3>\n<p>Jeden rekord z pierwszej tabeli może być powiązany z wieloma rekordami z drugiej tabeli.</p>\n<p><strong>Przykład:</strong> Jeden klient może złożyć wiele zamówień.</p>\n<p><strong>Implementacja:</strong><br>\nTabela <code>Klient</code> (id)<br>\nTabela <code>Zamowienie</code> (id, klient_id)</p>\n<h3 id=\"wiele-do-wielu-nm\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wiele-do-wielu-nm\">>>></a>Wiele do wielu (N:M)</h3>\n<p>Wiele rekordów z jednej tabeli może być powiązanych z wieloma rekordami z drugiej tabeli.<br>\n<strong>Przykład:</strong> Studenci zapisani na wiele kursów, kursy mają wielu studentów.</p>\n<p><strong>Implementacja:</strong><br>\nTabela pośrednicząca, np. <code>Student_Kurs</code> (student_id, kurs_id)</p>\n<h4 id=\"przykłady-relacji-i-ich-implementacja\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykłady-relacji-i-ich-implementacja\">>>>></a>Przykłady relacji i ich implementacja</h4>\n<pre><code class=\"hljs language-mermaid\">erDiagram\n    KLIENT ||--o{ ZAMOWIENIE : składa\n    ZAMOWIENIE }o--o{ PRODUKT : zawiera\n</code></pre>\n<hr>\n<h2 id=\"klucze-główne-i-obce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#klucze-główne-i-obce\">>></a>Klucze główne i obce</h2>\n<ul>\n<li><strong>Klucz główny (Primary Key):</strong> unikalny identyfikator rekordu w tabeli, np. id.</li>\n<li><strong>Klucz obcy (Foreign Key):</strong> pole wskazujące na klucz główny rekordu w innej tabeli, używany do tworzenia relacji.</li>\n</ul>\n<h3 id=\"przykład-praktyczny-klucz-główny-i-obcy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykład-praktyczny-klucz-główny-i-obcy\">>>></a>Przykład praktyczny: klucz główny i obcy</h3>\n<p>Tabela <code>Klient</code></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>id</th><th>imie</th><th>email</th></tr></thead><tbody><tr><td>1</td><td>Jan</td><td><code>jan@ex.com</code></td></tr></tbody></table>\n<p>Tabela <code>Zamowienie</code></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>id</th><th>data</th><th>klient_id</th></tr></thead><tbody><tr><td>1</td><td>2025-07-05</td><td>1</td></tr></tbody></table>\n<p>Tutaj <code>klient_id</code> w <code>Zamowienie</code> to klucz obcy wskazujący na <code>id</code> w <code>Klient</code>.</p>\n<hr>\n<h2 id=\"normalizacja-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#normalizacja-danych\">>></a>Normalizacja danych</h2>\n<p>Normalizacja to proces podziału danych na tabele w taki sposób, aby:</p>\n<ul>\n<li>unikać powielania informacji (redukcja nadmiarowości),</li>\n<li>zapewnić spójność i łatwość utrzymania danych.</li>\n</ul>\n<h3 id=\"pierwsza-postać-normalna-1nf\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pierwsza-postać-normalna-1nf\">>>></a>Pierwsza postać normalna (1NF)</h3>\n<ul>\n<li>Każda kolumna przechowuje tylko jedną wartość (brak list/pól wielowartościowych).</li>\n<li>Każdy rekord jest unikalny.</li>\n</ul>\n<p><strong>Błąd:</strong></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>id</th><th>imie</th><th>telefony</th></tr></thead><tbody><tr><td>1</td><td>Jan</td><td>123456, 987654</td></tr></tbody></table>\n<p><strong>Poprawnie:</strong></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>id</th><th>imie</th><th>telefon</th></tr></thead><tbody><tr><td>1</td><td>Jan</td><td>123456</td></tr><tr><td>1</td><td>Jan</td><td>987654</td></tr></tbody></table>\n<h3 id=\"druga-postać-normalna-2nf\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#druga-postać-normalna-2nf\">>>></a>Druga postać normalna (2NF)</h3>\n<ul>\n<li>Spełnia 1NF.</li>\n<li>Każdy atrybut niebędący częścią klucza zależy w pełni od klucza głównego.</li>\n</ul>\n<p><strong>Przykład błędu:</strong><br>\nTabela <code>Zamowienie_Produkt</code> (zamowienie_id, produkt_id, nazwa_produktu, cena)<br>\nNazwa produktu zależy od produktu, nie od zamówienia!</p>\n<p><strong>Poprawnie:</strong><br>\nTabela <code>Produkt</code> (id, nazwa_produktu, cena)<br>\nTabela <code>Zamowienie_Produkt</code> (zamowienie_id, produkt_id)</p>\n<h3 id=\"trzecia-postać-normalna-3nf\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#trzecia-postać-normalna-3nf\">>>></a>Trzecia postać normalna (3NF)</h3>\n<ul>\n<li>Spełnia 2NF.</li>\n<li>Każdy atrybut niebędący kluczem nie zależy od innych atrybutów niebędących kluczem.</li>\n</ul>\n<p><strong>Przykład błędu:</strong><br>\nTabela <code>Klient</code> (id, imie, kod_pocztowy, miasto) – miasto zależy od kodu pocztowego, nie od klienta.</p>\n<p><strong>Poprawnie:</strong><br>\nTabela <code>Kod_Pocztowy</code> (kod, miasto)<br>\nTabela <code>Klient</code> (id, imie, kod_pocztowy)</p>\n<h3 id=\"przykład-normalizacji-krok-po-kroku\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykład-normalizacji-krok-po-kroku\">>>></a>Przykład normalizacji krok po kroku</h3>\n<p>Masz tabelę:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>id</th><th>imie</th><th>adres</th><th>miasto</th><th>nazwa_produktu</th><th>cena</th></tr></thead><tbody><tr><td>1</td><td>Jan</td><td>ul. Kwiatowa 1</td><td>Kraków</td><td>Laptop</td><td>3000</td></tr><tr><td>2</td><td>Anna</td><td>ul. Polna 2</td><td>Warszawa</td><td>Telefon</td><td>1000</td></tr></tbody></table>\n<p><strong>Krok 1:</strong> Podziel na Klient i Produkt<br>\nTabela Klient: (id, imie, adres, miasto)<br>\nTabela Produkt: (id, nazwa_produktu, cena)<br>\nTabela Zakup: (id_klienta, id_produktu)</p>\n<hr>\n<h2 id=\"typowe-błędy-projektowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowe-błędy-projektowe\">>></a>Typowe błędy projektowe</h2>\n<ul>\n<li>Nadmiarowość danych (te same informacje w wielu miejscach)</li>\n<li>Brak kluczy głównych lub obcych</li>\n<li>Zbyt duże tabele (brak podziału na logiczne encje)</li>\n<li>Błędne relacje (np. wiele do wielu bez tabeli pośredniczącej)</li>\n<li>Brak normalizacji</li>\n</ul>\n<h3 id=\"przykłady-błędów-i-ich-skutki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przykłady-błędów-i-ich-skutki\">>>></a>Przykłady błędów i ich skutki</h3>\n<ul>\n<li>Powielanie danych: trudność w aktualizacji, różne wersje tej samej informacji.</li>\n<li>Brak kluczy: możliwość wprowadzenia duplikatów lub \"sierot\" w relacjach.</li>\n<li>Brak relacji wiele-do-wielu: niemożność odwzorowania rzeczywistego powiązania.</li>\n</ul>\n<hr>\n<h2 id=\"dobre-praktyki-projektowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dobre-praktyki-projektowe\">>></a>Dobre praktyki projektowe</h2>\n<ul>\n<li>Zawsze stosuj klucze główne i obce.</li>\n<li>Stosuj normalizację do 3NF (chyba, że uzasadnione jest inaczej).</li>\n<li>Czytelnie nazywaj tabele i kolumny (np. klient_id, produkt_id).</li>\n<li>Twórz diagramy ERD przed implementacją.</li>\n<li>Dokumentuj strukturę bazy danych.</li>\n<li>Przemyśl przyszły rozwój bazy (możliwość rozszerzenia).</li>\n</ul>\n<h3 id=\"praktyczne-wskazówki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#praktyczne-wskazówki\">>>></a>Praktyczne wskazówki</h3>\n<ul>\n<li>Wyobraź sobie przykładowe dane i sprawdź, czy struktura pozwala na ich przechowywanie bez powielania.</li>\n<li>Zastanów się, czy łatwo będzie wyciągnąć potrzebne informacje (np. wszystkich klientów, którzy kupili dany produkt).</li>\n<li>Konsultuj projekt z innymi – świeże spojrzenie może ujawnić ukryte problemy.</li>\n</ul>\n<hr>\n<h2 id=\"praktyczne-zadania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#praktyczne-zadania\">>></a>Praktyczne zadania</h2>\n<h3 id=\"zadanie-1-identyfikacja-encji-i-relacji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-identyfikacja-encji-i-relacji\">>>></a>Zadanie 1: Identyfikacja encji i relacji</h3>\n<p>W sklepie internetowym mamy: Klienta, Zamówienie, Produkt. Zidentyfikuj encje, ich atrybuty i relacje.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<p>Encje:</p>\n<ul>\n<li>Klient (id, imie, email)</li>\n<li>Zamówienie (id, data, klient_id)</li>\n<li>Produkt (id, nazwa, cena)</li>\n</ul>\n<p>Relacje:</p>\n<ul>\n<li>Klient składa Zamówienie (1:N)</li>\n<li>Zamówienie obejmuje Produkty (N:M, przez tabelę pośredniczącą)</li>\n</ul>\n</details>\n<hr>\n<h3 id=\"zadanie-2-diagram-erd\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-diagram-erd\">>>></a>Zadanie 2: Diagram ERD</h3>\n<p>Narysuj (lub opisz tekstowo) diagram ERD dla powyższego sklepu.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code>[Klient] 1---N [Zamówienie] N---M [Produkt]\n</code></pre>\n<p>Tabele:</p>\n<ul>\n<li>Klient (id, imie, email)</li>\n<li>Zamówienie (id, data, klient_id)</li>\n<li>Produkt (id, nazwa, cena)</li>\n<li>Zamowienie_Produkt (zamowienie_id, produkt_id, ilosc)</li>\n</ul>\n</details>\n<hr>\n<h3 id=\"zadanie-3-normalizacja\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-normalizacja\">>>></a>Zadanie 3: Normalizacja</h3>\n<p>Masz tabelę:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>id</th><th>imie</th><th>adres</th><th>miasto</th><th>nazwa_produktu</th><th>cena</th></tr></thead><tbody><tr><td>1</td><td>Jan</td><td>ul. Kwiatowa 1</td><td>Kraków</td><td>Laptop</td><td>3000</td></tr><tr><td>2</td><td>Anna</td><td>ul. Polna 2</td><td>Warszawa</td><td>Telefon</td><td>1000</td></tr></tbody></table>\n<p>Podziel ją na znormalizowane tabele.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<p>Tabela Klient: (id, imie, adres, miasto)<br>\nTabela Produkt: (id, nazwa_produktu, cena)<br>\nTabela Zakup: (id_klienta, id_produktu)</p>\n</details>\n<hr>\n<h3 id=\"zadanie-4-rodzaje-relacji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-rodzaje-relacji\">>>></a>Zadanie 4: Rodzaje relacji</h3>\n<p>Opisz, czym różni się relacja jeden-do-wielu od wiele-do-wielu i podaj przykład.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<p>Jeden-do-wielu: jeden klient może mieć wiele zamówień, ale każde zamówienie należy do jednego klienta.<br>\nWiele-do-wielu: jeden student może być zapisany na wiele kursów i jeden kurs może mieć wielu studentów.</p>\n</details>\n<hr>\n<h3 id=\"zadanie-5-przykład-złego-i-dobrego-projektu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-przykład-złego-i-dobrego-projektu\">>>></a>Zadanie 5: Przykład złego i dobrego projektu</h3>\n<p>Podaj przykład tabeli z powielaniem danych oraz jej poprawnej wersji po normalizacji.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<p><strong>Zły projekt:</strong></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>id</th><th>imie</th><th>produkt1</th><th>produkt2</th><th>produkt3</th></tr></thead><tbody><tr><td>1</td><td>Jan</td><td>Laptop</td><td>Telefon</td><td>Tablet</td></tr></tbody></table>\n<p><strong>Dobry projekt:</strong></p>\n<p>Tabela Klient: (id, imie)<br>\nTabela Produkt: (id, nazwa)<br>\nTabela Klient_Produkt: (id_klienta, id_produktu)</p>\n<p><strong>Wyjaśnienie:</strong><br>\nZamiast wielu kolumn dla produktów, każda relacja klient-produkt to osobny rekord w tabeli pośredniczącej.</p>\n</details>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Projektowanie bazy danych to kluczowy etap w każdym projekcie IT opartym o dane. Przemyślana struktura, normalizacja i dobre praktyki zapewnią łatwość rozwoju, wydajność i bezpieczeństwo systemu. Analiza, przykłady i praktyczne zadania pomagają zrozumieć, jakie decyzje podjąć, by Twoja baza była solidna i przyszłościowa!</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/podstawy-projektowania-baz-danych.md","4 minuty",{"_21":407,"_23":408,"_25":409,"_6":417,"_36":240,"_38":418,"_91":461,"_93":462,"_95":463,"_97":464,"_99":405},"Poczuć się jak w Matrixie, czyli wprowadzenie do terminala","Terminal krok po kroku dla zupełnych początkujących – praktyczne wyjaśnienia, przykłady, najważniejsze komendy, tłumaczenie pojęć i typowe błędy. Naucz się korzystać z terminala bez stresu!",[15,410,411,412,413,170,414,415,416,34],"wiersz poleceń","shell","bash","podstawy","początkujący","komendy","wyjaśnienia",[15],{"_21":419,"_41":420},"Quiz: Wprowadzenie do terminala",[421,429,437,445,453],{"_44":422,"_46":423,"_52":71,"_54":428},"<p>Czym jest terminal?</p>",[424,425,426,427],"Interfejs tekstowy do komunikacji z systemem operacyjnym","Przeglądarka internetowa","Program do rysowania","Typ pliku","Terminal to tekstowy interfejs do wydawania poleceń systemowi operacyjnemu.",{"_44":430,"_46":431,"_52":80,"_54":436},"<p>Jaką komendą wyświetlisz zawartość katalogu?</p>",[432,433,434,435],"pwd","ls","cat","cd","'ls' wyświetla pliki i katalogi w bieżącym folderze.",{"_44":438,"_46":439,"_52":53,"_54":444},"<p>Czym różni się 'cd ..' od 'cd /'?</p>",[440,441,442,443],"Nie ma różnicy","'cd /' cofa o jeden katalog","'cd ..' przechodzi do katalogu głównego","'cd ..' cofa o jeden katalog w górę, 'cd /' przechodzi do katalogu głównego","'cd ..' to katalog wyżej, 'cd /' to katalog główny systemu.",{"_44":446,"_46":447,"_52":53,"_54":452},"<p>Jak zakończyć proces w terminalu skrótem klawiszowym?</p>",[448,449,450,451],"Ctrl + X","Alt + F4","Ctrl + S","Ctrl + C","Ctrl+C kończy bieżący proces w terminalu.",{"_44":454,"_46":455,"_52":71,"_54":460},"<p>Co robi komenda 'clear'?</p>",[456,457,458,459],"Czyści ekran terminala","Usuwa pliki","Zmienia katalog roboczy","Kończy połączenie z internetem","'clear' czyści wyświetlane linie w terminalu.","0999b6c5-0441-411e-9264-f6023da02399","wprowadzenie-do-terminala","<p>Terminal (czyli wiersz poleceń) to okienko, w którym rozmawiasz z komputerem za pomocą komend tekstowych.<br>\nDla początkujących może wydawać się tajemniczy, ale już po kilku lekcjach zobaczysz, że to bardzo potężne i wygodne narzędzie.<br>\nPoniżej znajdziesz <strong>szczegółowe wyjaśnienia</strong> – każda komenda i pojęcie jest wytłumaczona, a przykłady pokazują, jak działa terminal w praktyce.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-terminal-i-shell\">Czym jest terminal i shell?</a></li>\n<li><a href=\"#dlaczego-warto-uczy%C4%87-si%C4%99-terminala\">Dlaczego warto uczyć się terminala?</a></li>\n<li><a href=\"#jak-otworzy%C4%87-terminal-na-swoim-komputerze\">Jak otworzyć terminal na swoim komputerze?</a></li>\n<li><a href=\"#pierwsze-spojrzenie-jak-wygl%C4%85da-terminal\">Pierwsze spojrzenie: jak wygląda terminal?</a></li>\n<li><a href=\"#podstawowe-komendy-terminalowe-z-wyja%C5%9Bnieniami\">Podstawowe komendy terminalowe z wyjaśnieniami</a>\n<ul>\n<li><a href=\"#nawigacja-po-katalogach\">Nawigacja po katalogach</a></li>\n<li><a href=\"#wy%C5%9Bwietlanie-plik%C3%B3w-i-katalog%C3%B3w\">Wyświetlanie plików i katalogów</a></li>\n<li><a href=\"#tworzenie-kopiowanie-i-usuwanie-plik%C3%B3w\">Tworzenie, kopiowanie i usuwanie plików</a></li>\n<li><a href=\"#podgl%C4%85d-zawarto%C5%9Bci-plik%C3%B3w\">Podgląd zawartości plików</a></li>\n<li><a href=\"#skr%C3%B3t-klawiszowe-i-przydatne-triki\">Skróty klawiszowe i przydatne triki</a></li>\n</ul>\n</li>\n<li><a href=\"#jak-czyta%C4%87-b%C5%82%C4%99dy-i-komunikaty-terminala\">Jak czytać błędy i komunikaty terminala</a></li>\n<li><a href=\"#pierwsze-proste-skrypty-%E2%80%93-automatyzacja\">Pierwsze proste skrypty – automatyzacja</a></li>\n<li><a href=\"#najcz%C4%99stsze-b%C5%82%C4%99dy-pocz%C4%85tkuj%C4%85cych-i-jak-ich-unika%C4%87\">Najczęstsze błędy początkujących i jak ich unikać</a></li>\n<li><a href=\"#praktyczne-zadania-%E2%80%93-%C4%87wicz-krok-po-kroku\">Praktyczne zadania – ćwicz krok po kroku</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-terminal-i-shell\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-terminal-i-shell\">>></a>Czym jest terminal i shell?</h2>\n<p><strong>Terminal</strong> to program (okno), w którym wpisujesz polecenia. Jest jak czat z komputerem, ale zamiast emoji i gifów, używasz prostych komend!</p>\n<p><strong>Shell</strong> (np. Bash, Zsh, PowerShell) to „tłumacz” – komputer rozumie Twoje polecenia dzięki shellowi.</p>\n<p><strong>Przykład:</strong><br>\nWyobraź sobie, że terminal to telefon, a shell to operator, który przekazuje Twoje polecenie komputerowi.</p>\n<hr>\n<h2 id=\"dlaczego-warto-uczyć-się-terminala\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-warto-uczyć-się-terminala\">>></a>Dlaczego warto uczyć się terminala?</h2>\n<ul>\n<li><strong>Szybkość</strong> – wiele rzeczy zrobisz szybciej niż klikając po folderach.</li>\n<li><strong>Automatyzacja</strong> – możesz napisać skrypt, który powtarza czynność za Ciebie.</li>\n<li><strong>Większa kontrola</strong> – dostęp do narzędzi, które nie mają „okienek”.</li>\n<li><strong>Przydatność w pracy programisty, administratora, a nawet zwykłego użytkownika</strong> – terminal przyda się każdemu!</li>\n</ul>\n<hr>\n<h2 id=\"jak-otworzyć-terminal-na-swoim-komputerze\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-otworzyć-terminal-na-swoim-komputerze\">>></a>Jak otworzyć terminal na swoim komputerze?</h2>\n<p>🔹 <strong>Linux / Mac</strong></p>\n<ul>\n<li>Najczęściej skrót klawiszowy: <code>Ctrl + Alt + T</code></li>\n<li>Albo szukaj aplikacji o nazwie „Terminal”.</li>\n</ul>\n<p>🔹 <strong>Windows</strong></p>\n<ul>\n<li>Wyszukaj „cmd”, „PowerShell” lub „Windows Terminal” w menu Start.</li>\n<li>Możesz też zainstalować WSL (Windows Subsystem for Linux), aby mieć terminal podobny do Linuksa.</li>\n</ul>\n<hr>\n<h2 id=\"pierwsze-spojrzenie-jak-wygląda-terminal\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pierwsze-spojrzenie-jak-wygląda-terminal\">>></a>Pierwsze spojrzenie: jak wygląda terminal?</h2>\n<ul>\n<li>Zobaczysz coś w stylu:\n<pre><code>jakub@pc:~$\n</code></pre>\n</li>\n<li>To jest <strong>prompt</strong> – miejsce, gdzie wpisujesz komendy.</li>\n<li>Miga kursor, czeka na Twój ruch!</li>\n</ul>\n<hr>\n<h2 id=\"podstawowe-komendy-terminalowe-z-wyjaśnieniami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-komendy-terminalowe-z-wyjaśnieniami\">>></a>Podstawowe komendy terminalowe z wyjaśnieniami</h2>\n<p>Każda komenda ma swoją logikę. Poniżej wyjaśnienia i przykłady.</p>\n<h3 id=\"nawigacja-po-katalogach\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#nawigacja-po-katalogach\">>>></a>Nawigacja po katalogach</h3>\n<ul>\n<li><code>pwd</code><br>\n<strong>Co robi?</strong> Pokazuje, w jakim katalogu teraz jesteś (pełna ścieżka).<br>\n<strong>Przykład:</strong>\n<pre><code>/home/jakub/Dokumenty\n</code></pre>\n</li>\n<li><code>ls</code><br>\n<strong>Co robi?</strong> Wyświetla listę plików i folderów w bieżącym katalogu.<br>\n<strong>Przykład:</strong>\n<pre><code>ls\n</code></pre>\n</li>\n<li><code>cd NAZWA_KATALOGU</code><br>\n<strong>Co robi?</strong> Przechodzi do wskazanego katalogu.<br>\n<strong>Przykład:</strong>\n<pre><code>cd Dokumenty\n</code></pre>\nTeraz jesteś w katalogu „Dokumenty”.</li>\n<li><code>cd ..</code><br>\n<strong>Co robi?</strong> Przechodzi o jeden katalog wyżej (do „rodzica”).<br>\n<strong>Przykład:</strong>\n<pre><code>cd ..\n</code></pre>\n</li>\n<li><code>cd /</code><br>\n<strong>Co robi?</strong> Przechodzi do głównego katalogu systemu (root).</li>\n</ul>\n<hr>\n<h3 id=\"wyświetlanie-plików-i-katalogów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wyświetlanie-plików-i-katalogów\">>>></a>Wyświetlanie plików i katalogów</h3>\n<ul>\n<li><code>ls -l</code><br>\n<strong>Co robi?</strong> Wyświetla pliki z dodatkowymi informacjami (rozmiar, data, uprawnienia).</li>\n<li><code>ls -a</code><br>\n<strong>Co robi?</strong> Pokazuje również pliki ukryte (takie, które zaczynają się od kropki).</li>\n<li><code>tree</code><br>\n<strong>Co robi?</strong> Pokazuje strukturę katalogów w formie „drzewka”.<br>\n<em>(Może wymagać instalacji: <code>sudo apt install tree</code>)</em></li>\n</ul>\n<hr>\n<h3 id=\"tworzenie-kopiowanie-i-usuwanie-plików\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tworzenie-kopiowanie-i-usuwanie-plików\">>>></a>Tworzenie, kopiowanie i usuwanie plików</h3>\n<ul>\n<li><code>touch NAZWA.txt</code><br>\n<strong>Co robi?</strong> Tworzy nowy, pusty plik tekstowy.</li>\n<li><code>mkdir NAZWA_FOLDERU</code><br>\n<strong>Co robi?</strong> Tworzy nowy folder.</li>\n<li><code>cp plik.txt kopia.txt</code><br>\n<strong>Co robi?</strong> Kopiuje plik.</li>\n<li><code>mv plik.txt nowa_nazwa.txt</code><br>\n<strong>Co robi?</strong> Zmienia nazwę pliku lub przenosi go.</li>\n<li><code>rm plik.txt</code><br>\n<strong>Co robi?</strong> Usuwa plik (na zawsze!).<br>\n❗️Uwaga: nie trafia do kosza – usuwaj ostrożnie!</li>\n<li><code>rm -r folder</code><br>\n<strong>Co robi?</strong> Usuwa cały folder i wszystko, co jest w środku.</li>\n</ul>\n<hr>\n<h3 id=\"podgląd-zawartości-plików\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podgląd-zawartości-plików\">>>></a>Podgląd zawartości plików</h3>\n<ul>\n<li><code>cat plik.txt</code><br>\n<strong>Co robi?</strong> Wyświetla cały plik na ekranie.</li>\n<li><code>less plik.txt</code><br>\n<strong>Co robi?</strong> Umożliwia wygodne przeglądanie długiego pliku (strzałki, <code>q</code> by wyjść).</li>\n<li><code>head -n 5 plik.txt</code><br>\n<strong>Co robi?</strong> Pokazuje pierwsze 5 linii pliku.</li>\n<li><code>tail -n 5 plik.txt</code><br>\n<strong>Co robi?</strong> Pokazuje ostatnie 5 linii pliku.</li>\n</ul>\n<hr>\n<h3 id=\"skrót-klawiszowe-i-przydatne-triki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#skrót-klawiszowe-i-przydatne-triki\">>>></a>Skrót klawiszowe i przydatne triki</h3>\n<ul>\n<li><code>Tab</code><br>\n<strong>Co robi?</strong> Autouzupełnia nazwę pliku lub folderu (bardzo pomaga!).</li>\n<li><code>Ctrl + C</code><br>\n<strong>Co robi?</strong> Przerywa działanie aktualnej komendy (np. jeśli coś się zawiesi).</li>\n<li><code>Ctrl + L</code><br>\n<strong>Co robi?</strong> Czyści ekran terminala (to samo co <code>clear</code>).</li>\n<li><code>Strzałki w górę/dół</code><br>\n<strong>Co robi?</strong> Poruszasz się po historii wpisywanych komend.</li>\n<li><code>Ctrl + A</code><br>\n<strong>Co robi?</strong> Skaczesz na początek linii.</li>\n<li><code>Ctrl + E</code><br>\n<strong>Co robi?</strong> Skaczesz na koniec linii.</li>\n</ul>\n<hr>\n<h2 id=\"jak-czytać-błędy-i-komunikaty-terminala\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-czytać-błędy-i-komunikaty-terminala\">>></a>Jak czytać błędy i komunikaty terminala</h2>\n<p>Nie bój się błędów!<br>\nTerminal grzecznie powie, co poszło nie tak:</p>\n<ul>\n<li><strong>\"No such file or directory\"</strong> – nie ma takiego pliku/katalogu. Sprawdź literówki!</li>\n<li><strong>\"Permission denied\"</strong> – brak uprawnień. Może spróbuj z <code>sudo</code> (na własną odpowiedzialność)?</li>\n<li><strong>\"Command not found\"</strong> – nie ma takiej komendy. Może się pomyliłeś?</li>\n<li><strong>\"Is a directory\"</strong> – próbujesz np. wyświetlić katalog jak plik, co nie ma sensu.</li>\n</ul>\n<hr>\n<h2 id=\"pierwsze-proste-skrypty--automatyzacja\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pierwsze-proste-skrypty--automatyzacja\">>></a>Pierwsze proste skrypty – automatyzacja</h2>\n<p>Skrypt to lista poleceń, które komputer wykona jedno po drugim.</p>\n<p><strong>Przykład prostego skryptu:</strong></p>\n<p><strong>powitanie.sh</strong></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Cześć! To Twój pierwszy skrypt.\"</span>\n</code></pre>\n<p>Jak uruchomić:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">chmod</span> +x powitanie.sh    <span class=\"hljs-comment\"># nadaje uprawnienie do uruchamiania</span>\n./powitanie.sh           <span class=\"hljs-comment\"># uruchamia skrypt</span>\n</code></pre>\n<p><em>To świetne do automatycznego kopiowania plików, porządkowania katalogów i wielu innych rzeczy!</em></p>\n<hr>\n<h2 id=\"najczęstsze-błędy-początkujących-i-jak-ich-unikać\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#najczęstsze-błędy-początkujących-i-jak-ich-unikać\">>></a>Najczęstsze błędy początkujących i jak ich unikać</h2>\n<ul>\n<li><strong>Literówki</strong> – sprawdzaj dokładnie, co wpisujesz.</li>\n<li><strong>Nie ten katalog</strong> – zanim coś zrobisz, sprawdź gdzie jesteś (<code>pwd</code>).</li>\n<li><strong>Uprawnienia</strong> – nie wszystko można robić bez „superpraw” (<code>sudo</code>).</li>\n<li><strong>Usuwanie plików</strong> – ostrożnie z <code>rm</code>! Nie ma kosza.</li>\n<li>**Mylenie / i ** – na Linux/Mac zawsze używaj „/” w ścieżkach.</li>\n</ul>\n<hr>\n<h2 id=\"praktyczne-zadania--ćwicz-krok-po-kroku\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#praktyczne-zadania--ćwicz-krok-po-kroku\">>></a>Praktyczne zadania – ćwicz krok po kroku</h2>\n<h3 id=\"zadanie-1-wyświetl-zawartość-swojego-katalogu-domowego-utwórz-folder-przejdź-do-niego-i-utwórz-pusty-plik\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-wyświetl-zawartość-swojego-katalogu-domowego-utwórz-folder-przejdź-do-niego-i-utwórz-pusty-plik\">>>></a>Zadanie 1: Wyświetl zawartość swojego katalogu domowego, utwórz folder, przejdź do niego i utwórz pusty plik.</h3>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<ol>\n<li><code>ls ~</code> – pokazuje, co masz w katalogu domowym.</li>\n<li><code>mkdir ~/nauka_terminala</code> – tworzy folder o nazwie „nauka_terminala”.</li>\n<li><code>cd ~/nauka_terminala</code> – wchodzi do tego folderu.</li>\n<li><code>touch pierwszy_plik.txt</code> – tworzy pusty plik.</li>\n<li><code>ls</code> – sprawdza, czy plik się pojawił.</li>\n</ol>\n</details>\n<hr>\n<h3 id=\"zadanie-2-wyświetl-5-pierwszych-linii-pliku-systemowego-np-etcpasswd\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-wyświetl-5-pierwszych-linii-pliku-systemowego-np-etcpasswd\">>>></a>Zadanie 2: Wyświetl 5 pierwszych linii pliku systemowego (np. <code>/etc/passwd</code>).</h3>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<p><code>head -n 5 /etc/passwd</code><br>\n<em>(„head” pokazuje początek pliku, „-n 5” – ile linii)</em></p>\n</details>\n<hr>\n<h3 id=\"zadanie-3-skopiuj-plik-a-potem-zmień-jego-nazwę\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-skopiuj-plik-a-potem-zmień-jego-nazwę\">>>></a>Zadanie 3: Skopiuj plik, a potem zmień jego nazwę.</h3>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<ol>\n<li><code>cp pierwszy_plik.txt kopia.txt</code> – tworzy kopię pliku.</li>\n<li><code>mv kopia.txt nowa_nazwa.txt</code> – zmienia nazwę kopii.</li>\n<li><code>ls</code> – sprawdza, czy oba pliki są w folderze.</li>\n</ol>\n</details>\n<hr>\n<h3 id=\"zadanie-4-napisz-i-uruchom-prosty-skrypt-powitalny\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-napisz-i-uruchom-prosty-skrypt-powitalny\">>>></a>Zadanie 4: Napisz i uruchom prosty skrypt powitalny.</h3>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<ol>\n<li>Otwórz edytor (np. <code>nano powitanie.sh</code>).</li>\n<li>Wklej:\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Witaj w terminalu!\"</span>\n</code></pre>\n</li>\n<li>Zapisz i wyjdź (<code>Ctrl+O</code>, potem <code>Ctrl+X</code> w nano).</li>\n<li>Nadaj uprawnienia:<br>\n<code>chmod +x powitanie.sh</code></li>\n<li>Uruchom:<br>\n<code>./powitanie.sh</code></li>\n</ol>\n</details>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Terminal to nie czarna magia – to bardzo logiczne narzędzie, które pozwala szybciej i wygodniej korzystać z komputera.<br>\nKrok po kroku, z wyjaśnieniami i praktyką, każdy może nauczyć się podstaw.<br>\nNie bój się eksperymentować – komputer nie wybuchnie, a Ty zyskasz nową supermoc! 💪</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-terminala.md",{"_21":466,"_23":467,"_25":468,"_6":475,"_36":240,"_38":476,"_91":518,"_93":519,"_95":520,"_97":521,"_99":288},"Zaawansowane zapytania SQL","Poznaj techniki budowania bardziej złożonych zapytań SQL. Naucz się korzystać z JOIN, agregacji, podzapytań, funkcji i zaawansowanych operacji na danych. Praktyczny przewodnik po zaawansowanym SQL z przykładami i szczegółowymi wyjaśnieniami.",[12,469,470,471,472,473,474,416,238,34],"join","group by","having","podzapytania","agregacja","zaawansowane zapytania",[12,8],{"_21":477,"_41":478},"Quiz: Zaawansowane zapytania SQL",[479,487,494,502,510],{"_44":480,"_46":481,"_52":80,"_54":486},"<p>Do czego służy polecenie JOIN?</p>",[482,483,484,485],"Do tworzenia nowych tabel","Do pobierania danych z kilku tabel powiązanych relacjami","Do usuwania danych","Do sortowania wyników","JOIN pozwala łączyć dane z kilku tabel na podstawie relacji.",{"_44":488,"_46":489,"_52":53,"_54":493},"<p>Czym różni się INNER JOIN od LEFT JOIN?</p>",[490,440,491,492],"INNER JOIN sortuje dane","LEFT JOIN zawsze łączy wszystkie rekordy obu tabel","INNER JOIN zwraca tylko pasujące rekordy, LEFT JOIN zwraca też te bez dopasowania z lewej tabeli","INNER JOIN zwraca tylko pasujące rekordy, LEFT JOIN także te z lewej tabeli bez dopasowania.",{"_44":495,"_46":496,"_52":71,"_54":501},"<p>Jakie polecenie agreguje dane według zadanej kolumny?</p>",[497,498,499,500],"GROUP BY","ORDER BY","JOIN","UNION","GROUP BY grupuje dane według wybranej kolumny.",{"_44":503,"_46":504,"_52":53,"_54":509},"<p>Czym jest podzapytanie (subquery)?</p>",[505,506,507,508],"Kolejną tabelą","Sortowaniem wyników","Funkcją matematyczną","Zapytaniem wewnątrz innego zapytania","Podzapytanie to zapytanie zagnieżdżone w innym zapytaniu SQL.",{"_44":511,"_46":512,"_52":71,"_54":517},"<p>Do czego służy HAVING?</p>",[513,514,515,516],"Do filtrowania grup po agregacji (po GROUP BY)","Do filtrowania całej tabeli","Do łączenia tabel","Do zmiany struktury tabeli","HAVING filtruje wyniki po agregacji i grupowaniu.","83b71fdc-886d-4cfa-b83d-ea979c10f767","zaawansowane-zapytania-sql","<p>SQL pozwala nie tylko pobierać i modyfikować proste dane, ale również realizować bardzo złożone analizy, łączyć wiele tabel, grupować, sumować i filtrować rekordy na różne sposoby. Poznaj zaawansowane techniki, które otworzą przed Tobą nowe możliwości!<br>\nW tym kursie znajdziesz nie tylko przykłady, ale także szczegółowe wyjaśnienia, co robi każda komenda i jak działa składnia.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#%C5%82%C4%85czenie-tabel-join\">Łączenie tabel (JOIN)</a>\n<ul>\n<li><a href=\"#czym-jest-join-i-po-co-go-u%C5%BCywa%C4%87\">Czym jest JOIN i po co go używać?</a></li>\n<li><a href=\"#inner-join\">INNER JOIN</a></li>\n<li><a href=\"#left-join-right-join-full-join\">LEFT JOIN, RIGHT JOIN, FULL JOIN</a></li>\n<li><a href=\"#samoz%C5%82%C4%85czenia-self-join\">Samozłączenia (SELF JOIN)</a></li>\n</ul>\n</li>\n<li><a href=\"#agregacje-i-grupowanie-danych\">Agregacje i grupowanie danych</a>\n<ul>\n<li><a href=\"#group-by\">GROUP BY</a></li>\n<li><a href=\"#funkcje-agreguj%C4%85ce\">Funkcje agregujące</a></li>\n<li><a href=\"#having\">HAVING</a></li>\n</ul>\n</li>\n<li><a href=\"#podzapytania-subqueries\">Podzapytania (subqueries)</a>\n<ul>\n<li><a href=\"#podzapytania-w-select\">Podzapytania w SELECT</a></li>\n<li><a href=\"#podzapytania-w-where-i-having\">Podzapytania w WHERE i HAVING</a></li>\n<li><a href=\"#podzapytania-skorelowane\">Podzapytania skorelowane</a></li>\n</ul>\n</li>\n<li><a href=\"#operacje-na-zbiorach-union-intersect-except\">Operacje na zbiorach (UNION, INTERSECT, EXCEPT)</a></li>\n<li><a href=\"#funkcje-wbudowane-w-sql\">Funkcje wbudowane w SQL</a>\n<ul>\n<li><a href=\"#funkcje-tekstowe\">Funkcje tekstowe</a></li>\n<li><a href=\"#funkcje-daty-i-czasu\">Funkcje daty i czasu</a></li>\n<li><a href=\"#funkcje-warunkowe\">Funkcje warunkowe</a></li>\n</ul>\n</li>\n<li><a href=\"#widoki-view-i-ich-zastosowania\">Widoki (VIEW) i ich zastosowania</a></li>\n<li><a href=\"#praktyczne-zadania\">Praktyczne zadania</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"łączenie-tabel-join\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#łączenie-tabel-join\">>></a>Łączenie tabel (JOIN)</h2>\n<h3 id=\"czym-jest-join-i-po-co-go-używać\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-join-i-po-co-go-używać\">>>></a>Czym jest JOIN i po co go używać?</h3>\n<p>JOIN pozwala połączyć dane z kilku tabel w jednym zapytaniu – jest to niezbędne, jeśli chcesz łączyć informacje rozdzielone na logiczne części (np. dane klienta i jego zamówienia).<br>\nBez JOIN musiałbyś pisać wiele zapytań lub duplikować dane w jednej tabeli.</p>\n<hr>\n<h3 id=\"inner-join\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#inner-join\">>>></a>INNER JOIN</h3>\n<p><strong>Opis:</strong><br>\nZwraca tylko te rekordy, które mają dopasowanie w obu łączonych tabelach (czyli tylko pasujące pary).</p>\n<p><strong>Składnia:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> tabela1.kolumnaA, tabela2.kolumnaB\n<span class=\"hljs-keyword\">FROM</span> tabela1\n<span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> tabela2 <span class=\"hljs-keyword\">ON</span> tabela1.klucz <span class=\"hljs-operator\">=</span> tabela2.klucz_obcy;\n</code></pre>\n<ul>\n<li><code>INNER JOIN</code> – typ złączenia.</li>\n<li><code>ON tabela1.klucz = tabela2.klucz_obcy</code> – warunek, określający, które rekordy mają być połączone.</li>\n</ul>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> Klient.imie, Zamowienie.data\n<span class=\"hljs-keyword\">FROM</span> Klient\n<span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> Zamowienie <span class=\"hljs-keyword\">ON</span> Klient.id <span class=\"hljs-operator\">=</span> Zamowienie.klient_id;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nPobierz imię klienta oraz datę jego zamówienia. Rekord zostanie zwrócony tylko, jeśli klient ma zamówienia.</p>\n<hr>\n<h3 id=\"left-join-right-join-full-join\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#left-join-right-join-full-join\">>>></a>LEFT JOIN, RIGHT JOIN, FULL JOIN</h3>\n<h4 id=\"left-join\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#left-join\">>>>></a>LEFT JOIN</h4>\n<p><strong>Opis:</strong><br>\nZwraca wszystkie rekordy z lewej tabeli oraz dopasowania z prawej, a jeśli ich nie ma – wstawia NULL.</p>\n<p><strong>Składnia:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> Klient.imie, Zamowienie.data\n<span class=\"hljs-keyword\">FROM</span> Klient\n<span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> Zamowienie <span class=\"hljs-keyword\">ON</span> Klient.id <span class=\"hljs-operator\">=</span> Zamowienie.klient_id;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nZwraca wszystkich klientów, niezależnie czy mają zamówienia. Jeśli nie mają, w kolumnie <code>data</code> pojawi się NULL.</p>\n<h4 id=\"right-join\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#right-join\">>>>></a>RIGHT JOIN</h4>\n<p><strong>Opis:</strong><br>\nDziała jak LEFT JOIN, ale odwrotnie – zwraca wszystkie rekordy z prawej tabeli.</p>\n<h4 id=\"full-join\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#full-join\">>>>></a>FULL JOIN</h4>\n<p><strong>Opis:</strong><br>\nZwraca wszystkie rekordy z obu tabel, dopasowane lub nie.</p>\n<p><strong>Przykład porównania wyników:</strong></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Klient.imie</th><th>Zamowienie.data</th></tr></thead><tbody><tr><td>Jan</td><td>2025-01-01</td></tr><tr><td>Anna</td><td>NULL</td></tr></tbody></table>\n<hr>\n<h3 id=\"samozłączenia-self-join\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#samozłączenia-self-join\">>>></a>Samozłączenia (SELF JOIN)</h3>\n<p>Czasem trzeba połączyć tabelę samą z sobą (np. struktura przełożonych i pracowników).</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> A.imie <span class=\"hljs-keyword\">AS</span> pracownik, B.imie <span class=\"hljs-keyword\">AS</span> przelozony\n<span class=\"hljs-keyword\">FROM</span> Pracownik A\n<span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> Pracownik B <span class=\"hljs-keyword\">ON</span> A.przelozony_id <span class=\"hljs-operator\">=</span> B.id;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nKażdy pracownik ma przełożonego – łączymy tabelę Pracownik z samą sobą, by uzyskać imię szefa.</p>\n<hr>\n<h2 id=\"agregacje-i-grupowanie-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#agregacje-i-grupowanie-danych\">>></a>Agregacje i grupowanie danych</h2>\n<h3 id=\"group-by\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#group-by\">>>></a>GROUP BY</h3>\n<p><strong>Opis:</strong><br>\nGROUP BY służy do grupowania rekordów wg wskazanej kolumny, np. pokazania liczby zamówień dla każdego klienta.</p>\n<p><strong>Składnia:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> kolumna_grupujaca, funkcja_agregujaca(kolumna)\n<span class=\"hljs-keyword\">FROM</span> tabela\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> kolumna_grupujaca;\n</code></pre>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> miasto, <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">AS</span> liczba_klientow\n<span class=\"hljs-keyword\">FROM</span> Klient\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> miasto;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nZlicz ilu klientów pochodzi z każdego miasta.</p>\n<hr>\n<h3 id=\"funkcje-agregujące\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-agregujące\">>>></a>Funkcje agregujące</h3>\n<ul>\n<li><code>COUNT(*)</code> – zlicza wszystkie rekordy w grupie.</li>\n<li><code>SUM(kolumna)</code> – suma wartości z danej kolumny.</li>\n<li><code>AVG(kolumna)</code> – średnia wartość.</li>\n<li><code>MIN(kolumna)</code> / <code>MAX(kolumna)</code> – najmniejsza/największa wartość.</li>\n</ul>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> produkt_id, <span class=\"hljs-built_in\">SUM</span>(ilosc) <span class=\"hljs-keyword\">AS</span> sprzedano\n<span class=\"hljs-keyword\">FROM</span> Zamowienie_Produkt\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> produkt_id;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nIle sztuk każdego produktu sprzedano w sumie?</p>\n<hr>\n<h3 id=\"having\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#having\">>>></a>HAVING</h3>\n<p><strong>Opis:</strong><br>\nHAVING filtruje wyniki po agregacji (po GROUP BY), czego nie można zrobić za pomocą WHERE.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> miasto, <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">AS</span> liczba\n<span class=\"hljs-keyword\">FROM</span> Klient\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> miasto\n<span class=\"hljs-keyword\">HAVING</span> <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-operator\">></span> <span class=\"hljs-number\">5</span>;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nWyświetl tylko te miasta, w których liczba klientów jest większa niż 5.</p>\n<hr>\n<h2 id=\"podzapytania-subqueries\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podzapytania-subqueries\">>></a>Podzapytania (subqueries)</h2>\n<p>Podzapytanie to zapytanie SQL „wewnątrz” innego zapytania.</p>\n<hr>\n<h3 id=\"podzapytania-w-select\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podzapytania-w-select\">>>></a>Podzapytania w SELECT</h3>\n<p><strong>Opis:</strong><br>\nMożesz użyć podzapytania, by wyliczyć wartość dla każdego rekordu.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> imie,\n  (<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">FROM</span> Zamowienie <span class=\"hljs-keyword\">WHERE</span> Zamowienie.klient_id <span class=\"hljs-operator\">=</span> Klient.id) <span class=\"hljs-keyword\">AS</span> liczba_zamowien\n<span class=\"hljs-keyword\">FROM</span> Klient;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nPobierz imię klienta i liczbę jego zamówień – dla każdego klienta osobno liczymy zamówienia.</p>\n<hr>\n<h3 id=\"podzapytania-w-where-i-having\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podzapytania-w-where-i-having\">>>></a>Podzapytania w WHERE i HAVING</h3>\n<p><strong>Opis:</strong><br>\nPodzapytania mogą służyć jako warunek wyboru rekordów.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> imie <span class=\"hljs-keyword\">FROM</span> Klient\n<span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-keyword\">IN</span> (<span class=\"hljs-keyword\">SELECT</span> klient_id <span class=\"hljs-keyword\">FROM</span> Zamowienie <span class=\"hljs-keyword\">WHERE</span> data <span class=\"hljs-operator\">></span> <span class=\"hljs-string\">'2025-01-01'</span>);\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nWyświetl tylko klientów, którzy złożyli zamówienie po 1 stycznia 2025.</p>\n<hr>\n<h3 id=\"podzapytania-skorelowane\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podzapytania-skorelowane\">>>></a>Podzapytania skorelowane</h3>\n<p><strong>Opis:</strong><br>\nPodzapytanie odwołuje się do wartości z zewnętrznego zapytania.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> imie\n<span class=\"hljs-keyword\">FROM</span> Klient k\n<span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-keyword\">EXISTS</span> (\n  <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">FROM</span> Zamowienie z <span class=\"hljs-keyword\">WHERE</span> z.klient_id <span class=\"hljs-operator\">=</span> k.id <span class=\"hljs-keyword\">AND</span> z.data <span class=\"hljs-operator\">></span> <span class=\"hljs-string\">'2025-01-01'</span>\n);\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nSprawdzamy dla każdego klienta, czy istnieje zamówienie po podanej dacie.</p>\n<hr>\n<h2 id=\"operacje-na-zbiorach-union-intersect-except\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#operacje-na-zbiorach-union-intersect-except\">>></a>Operacje na zbiorach (UNION, INTERSECT, EXCEPT)</h2>\n<ul>\n<li><strong>UNION:</strong> łączy wyniki wielu zapytań, eliminując duplikaty.</li>\n<li><strong>UNION ALL:</strong> jak UNION, ale zachowuje duplikaty.</li>\n<li><strong>INTERSECT:</strong> zwraca wspólne rekordy.</li>\n<li><strong>EXCEPT:</strong> zwraca rekordy z pierwszego zapytania, których nie ma w drugim.</li>\n</ul>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> imie <span class=\"hljs-keyword\">FROM</span> Klient\n<span class=\"hljs-keyword\">UNION</span>\n<span class=\"hljs-keyword\">SELECT</span> imie <span class=\"hljs-keyword\">FROM</span> Pracownik;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nPobierz listę wszystkich imion – zarówno klientów, jak i pracowników (bez powtórzeń).</p>\n<hr>\n<h2 id=\"funkcje-wbudowane-w-sql\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-wbudowane-w-sql\">>></a>Funkcje wbudowane w SQL</h2>\n<h3 id=\"funkcje-tekstowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-tekstowe\">>>></a>Funkcje tekstowe</h3>\n<ul>\n<li><code>LOWER(tekst)</code> – zamienia tekst na małe litery.</li>\n<li><code>UPPER(tekst)</code> – na wielkie litery.</li>\n<li><code>CONCAT(a, b)</code> – łączy teksty.</li>\n<li><code>SUBSTRING(tekst, start, długość)</code> – wycina fragment tekstu.</li>\n<li><code>LENGTH(tekst)</code> – długość tekstu.</li>\n</ul>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> CONCAT(imie, <span class=\"hljs-string\">' '</span>, nazwisko) <span class=\"hljs-keyword\">AS</span> pelne_imie <span class=\"hljs-keyword\">FROM</span> Klient;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nTworzy pełne imię i nazwisko klienta.</p>\n<hr>\n<h3 id=\"funkcje-daty-i-czasu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-daty-i-czasu\">>>></a>Funkcje daty i czasu</h3>\n<ul>\n<li><code>NOW()</code> – aktualna data i czas.</li>\n<li><code>DATE()</code> – wydobywa datę z pola daty/czasu.</li>\n<li><code>YEAR(data)</code> – wyciąga rok z daty.</li>\n</ul>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> imie, <span class=\"hljs-keyword\">YEAR</span>(data_urodzenia) <span class=\"hljs-keyword\">AS</span> rok_urodzenia <span class=\"hljs-keyword\">FROM</span> Klient;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nWyświetla imię klienta i rok jego urodzenia.</p>\n<hr>\n<h3 id=\"funkcje-warunkowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-warunkowe\">>>></a>Funkcje warunkowe</h3>\n<ul>\n<li><code>CASE WHEN ... THEN ... ELSE ... END</code> – pozwala warunkowo zmieniać wartości.</li>\n</ul>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> imie,\n  <span class=\"hljs-keyword\">CASE</span>\n    <span class=\"hljs-keyword\">WHEN</span> wiek <span class=\"hljs-operator\">&#x3C;</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-keyword\">THEN</span> <span class=\"hljs-string\">'niepełnoletni'</span>\n    <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-string\">'pełnoletni'</span>\n  <span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> status\n<span class=\"hljs-keyword\">FROM</span> Klient;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nDla każdego klienta określa status na podstawie wieku.</p>\n<hr>\n<h2 id=\"widoki-view-i-ich-zastosowania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#widoki-view-i-ich-zastosowania\">>></a>Widoki (VIEW) i ich zastosowania</h2>\n<p><strong>Opis:</strong><br>\nWidok (VIEW) to „wirtualna tabela” będąca wynikiem zapytania. Widoki upraszczają kod, mogą ukrywać złożoność i zabezpieczać dane.</p>\n<p><strong>Tworzenie widoku:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">VIEW</span> Klienci_aktywni <span class=\"hljs-keyword\">AS</span>\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> Klient <span class=\"hljs-keyword\">WHERE</span> aktywny <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nTworzymy widok z aktywnymi klientami. Potem używamy go jak zwykłej tabeli:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> Klienci_aktywni;\n</code></pre>\n<hr>\n<h2 id=\"praktyczne-zadania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#praktyczne-zadania\">>></a>Praktyczne zadania</h2>\n<h3 id=\"zadanie-1-złączenia\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-złączenia\">>>></a>Zadanie 1: Złączenia</h3>\n<p>Pobierz imię klienta oraz datę każdego jego zamówienia.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> Klient.imie, Zamowienie.data\n<span class=\"hljs-keyword\">FROM</span> Klient\n<span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> Zamowienie <span class=\"hljs-keyword\">ON</span> Klient.id <span class=\"hljs-operator\">=</span> Zamowienie.klient_id;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nŁączymy tabelę Klient z Zamówienie po kluczu głównym Klient.id i kluczu obcym Zamowienie.klient_id.</p>\n</details>\n<hr>\n<h3 id=\"zadanie-2-agregacja\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-agregacja\">>>></a>Zadanie 2: Agregacja</h3>\n<p>Wyświetl liczbę zamówień złożonych przez każdego klienta.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> Klient.imie, <span class=\"hljs-built_in\">COUNT</span>(Zamowienie.id) <span class=\"hljs-keyword\">AS</span> liczba_zamowien\n<span class=\"hljs-keyword\">FROM</span> Klient\n<span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> Zamowienie <span class=\"hljs-keyword\">ON</span> Klient.id <span class=\"hljs-operator\">=</span> Zamowienie.klient_id\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> Klient.imie;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nŁączymy tabele i grupujemy po imieniu klienta. LEFT JOIN pozwala pokazać także tych, którzy nie mają zamówień (liczba_zamowien = 0).</p>\n</details>\n<hr>\n<h3 id=\"zadanie-3-podzapytanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-podzapytanie\">>>></a>Zadanie 3: Podzapytanie</h3>\n<p>Wyświetl produkty zamówione przez klientów z miasta \"Warszawa\".</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> Produkt.nazwa\n<span class=\"hljs-keyword\">FROM</span> Produkt\n<span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> Zamowienie_Produkt <span class=\"hljs-keyword\">ON</span> Produkt.id <span class=\"hljs-operator\">=</span> Zamowienie_Produkt.produkt_id\n<span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> Zamowienie <span class=\"hljs-keyword\">ON</span> Zamowienie_Produkt.zamowienie_id <span class=\"hljs-operator\">=</span> Zamowienie.id\n<span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> Klient <span class=\"hljs-keyword\">ON</span> Zamowienie.klient_id <span class=\"hljs-operator\">=</span> Klient.id\n<span class=\"hljs-keyword\">WHERE</span> Klient.miasto <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'Warszawa'</span>;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nŁączymy cztery tabele, by uzyskać produkty z zamówień klientów z Warszawy.</p>\n</details>\n<hr>\n<h3 id=\"zadanie-4-operacje-na-zbiorach\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-operacje-na-zbiorach\">>>></a>Zadanie 4: Operacje na zbiorach</h3>\n<p>Wyświetl imiona osób będących zarówno klientami, jak i pracownikami.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> imie <span class=\"hljs-keyword\">FROM</span> Klient\n<span class=\"hljs-keyword\">INTERSECT</span>\n<span class=\"hljs-keyword\">SELECT</span> imie <span class=\"hljs-keyword\">FROM</span> Pracownik;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nINTERSECT zwraca tylko te imiona, które są jednocześnie w obu tabelach.</p>\n</details>\n<hr>\n<h3 id=\"zadanie-5-widoki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-widoki\">>>></a>Zadanie 5: Widoki</h3>\n<p>Stwórz widok prezentujący tylko klientów, którzy mają więcej niż 2 zamówienia.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">VIEW</span> Klienci_czesto_zamawiajacy <span class=\"hljs-keyword\">AS</span>\n<span class=\"hljs-keyword\">SELECT</span> Klient.id, Klient.imie\n<span class=\"hljs-keyword\">FROM</span> Klient\n<span class=\"hljs-keyword\">JOIN</span> Zamowienie <span class=\"hljs-keyword\">ON</span> Klient.id <span class=\"hljs-operator\">=</span> Zamowienie.klient_id\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> Klient.id, Klient.imie\n<span class=\"hljs-keyword\">HAVING</span> <span class=\"hljs-built_in\">COUNT</span>(Zamowienie.id) <span class=\"hljs-operator\">></span> <span class=\"hljs-number\">2</span>;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nWidok zawiera tylko tych klientów, którzy mają więcej niż dwa zamówienia (dzięki HAVING).</p>\n</details>\n<hr>\n<h3 id=\"zadanie-6-funkcje-tekstowe-i-warunkowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-6-funkcje-tekstowe-i-warunkowe\">>>></a>Zadanie 6: Funkcje tekstowe i warunkowe</h3>\n<p>Wyświetl imię i status pełnoletności każdego klienta (pełnoletni/niepełnoletni), imię wypisz wielkimi literami.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">UPPER</span>(imie) <span class=\"hljs-keyword\">AS</span> imie,\n  <span class=\"hljs-keyword\">CASE</span> <span class=\"hljs-keyword\">WHEN</span> wiek <span class=\"hljs-operator\">&#x3C;</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-keyword\">THEN</span> <span class=\"hljs-string\">'niepełnoletni'</span> <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-string\">'pełnoletni'</span> <span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> status\n<span class=\"hljs-keyword\">FROM</span> Klient;\n</code></pre>\n<p><strong>Wyjaśnienie:</strong><br>\nUPPER konwertuje imię na wielkie litery, CASE określa status na podstawie wieku.</p>\n</details>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Zaawansowane zapytania SQL pozwalają na efektywną analizę i przetwarzanie dużych zbiorów danych. Łączenie tabel, agregacje, podzapytania i widoki otwierają szerokie możliwości analityczne i raportowe. Szczegółowe zrozumienie składni i działania każdej komendy to klucz do budowania profesjonalnych rozwiązań bazodanowych!</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/zaawansowane-zapytania-sql.md",{"_21":523,"_23":524,"_25":525,"_6":532,"_36":533,"_38":534,"_91":615,"_93":616,"_95":617,"_97":618,"_99":288},"Wprowadzenie do SQL","Dowiedz się czym jest SQL, do czego służy, poznaj podstawowe polecenia i naucz się wykonywać pierwsze zapytania do bazy danych. Kurs praktyczny dla początkujących z wyjaśnieniami i przykładami.",[12,231,526,527,528,529,530,531,238,34],"zapytania","select","insert","update","delete","wprowadzenie",[12,8],"2025-07-04T00:00:00.000Z",{"_21":535,"_41":536},"Quiz: Podstawy SQL",[537,545,553,561,568,576,584,592,599,607],{"_44":538,"_46":539,"_52":89,"_54":544},"<p>Czym jest SQL?</p>",[540,541,542,543],"Język programowania ogólnego przeznaczenia","System operacyjny","Język zapytań do relacyjnych baz danych","Edytor tekstów","SQL (Structured Query Language) to język zapytań używany do komunikacji z relacyjnymi bazami danych.",{"_44":546,"_46":547,"_52":53,"_54":552},"<p>Jakie polecenie służy do pobierania danych z bazy?</p>",[548,549,550,551],"GET","REMOVE","FETCH","SELECT","SELECT służy do pobierania (wybierania) danych z bazy.",{"_44":554,"_46":555,"_52":71,"_54":560},"<p>Które polecenie służy do wstawiania nowych rekordów?</p>",[556,557,558,559],"INSERT","UPDATE","APPEND","ADD","INSERT INTO pozwala dodać nowe rekordy do tabeli.",{"_44":562,"_46":563,"_52":53,"_54":567},"<p>Jak usunąć dane z tabeli?</p>",[564,549,565,566],"ERASE","DROP","DELETE","DELETE służy do usuwania rekordów z tabeli.",{"_44":569,"_46":570,"_52":53,"_54":575},"<p>Co oznacza WHERE w poleceniach SQL?</p>",[571,572,573,574],"Tworzy nową tabelę","Zmienia nazwę bazy danych","Sortuje dane","Określa warunek, który muszą spełnić wybrane rekordy","WHERE zawęża operację do rekordów spełniających wskazany warunek.",{"_44":577,"_46":578,"_52":53,"_54":583},"<p>Co zrobi polecenie: SELECT * FROM Uzytkownicy WHERE wiek > 18?</p>",[579,580,581,582],"Usunie użytkowników starszych niż 18 lat","Zaktualizuje wiek użytkowników","Doda użytkowników starszych niż 18 lat","Wyświetli wszystkich użytkowników starszych niż 18 lat","Wyświetli wszystkie rekordy, gdzie wiek jest większy niż 18.",{"_44":585,"_46":586,"_52":71,"_54":591},"<p>Czym jest klucz podstawowy (PRIMARY KEY) w tabeli?</p>",[587,588,589,590],"Kolumna, która jednoznacznie identyfikuje każdy rekord w tabeli","Pole, które zawsze musi być puste","Kolumna przechowująca wyłącznie tekst","Specjalny typ zapytania","Klucz podstawowy to unikalny identyfikator rekordu w tabeli.",{"_44":593,"_46":594,"_52":71,"_54":598},"<p>Jaka jest różnica między DELETE a DROP?</p>",[595,440,596,597],"DELETE usuwa rekordy z tabeli, DROP usuwa całą tabelę","DELETE sortuje dane, DROP je filtruje","DELETE tworzy kopię zapasową, DROP ją przywraca","DELETE usuwa pojedyncze rekordy, DROP usuwa całą tabelę lub bazę danych.",{"_44":600,"_46":601,"_52":89,"_54":606},"<p>Jak posortować wyniki według kolumny 'nazwisko' rosnąco?</p>",[602,603,604,605],"SELECT nazwisko","GROUP BY nazwisko","ORDER BY nazwisko ASC","SORT nazwisko","ORDER BY nazwisko ASC sortuje rosnąco po kolumnie nazwisko.",{"_44":608,"_46":609,"_52":80,"_54":614},"<p>Jak ograniczyć liczbę zwracanych wyników do 10?</p>",[610,611,612,613],"MAX 10","LIMIT 10","RANGE 10","TOP 10","LIMIT 10 ogranicza liczbę wyników do 10 (np. w MySQL, PostgreSQL).","358e12e6-9585-4042-ae02-b567d1759664","wprowadzenie-do-sql","<p>SQL (Structured Query Language) to język, który pozwala komunikować się z relacyjnymi bazami danych. Dzięki SQL możesz pobierać, dodawać, zmieniać i usuwać dane, a także zarządzać strukturą bazy. To jedno z najważniejszych narzędzi każdego, kto pracuje z danymi!</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-sql\">Czym jest SQL?</a></li>\n<li><a href=\"#do-czego-s%C5%82u%C5%BCy-sql\">Do czego służy SQL?</a></li>\n<li><a href=\"#typowe-zastosowania-sql\">Typowe zastosowania SQL</a></li>\n<li><a href=\"#podstawowe-elementy-sk%C5%82adni-sql\">Podstawowe elementy składni SQL</a></li>\n<li><a href=\"#podstawowe-polecenia-sql-szczegolowo\">Podstawowe polecenia SQL (szczegółowo)</a>\n<ul>\n<li><a href=\"#select\">SELECT</a></li>\n<li><a href=\"#insert\">INSERT</a></li>\n<li><a href=\"#update\">UPDATE</a></li>\n<li><a href=\"#delete\">DELETE</a></li>\n</ul>\n</li>\n<li><a href=\"#warunki-i-filtrowanie-danych-where\">Warunki i filtrowanie danych (WHERE)</a></li>\n<li><a href=\"#sortowanie-wynik%C3%B3w-order-by\">Sortowanie wyników (ORDER BY)</a></li>\n<li><a href=\"#ograniczanie-wynik%C3%B3w-limit\">Ograniczanie wyników (LIMIT)</a></li>\n<li><a href=\"#tworzenie-i-modyfikacja-tabel\">Tworzenie i modyfikacja tabel</a></li>\n<li><a href=\"#klucze-i-relacje\">Klucze i relacje</a></li>\n<li><a href=\"#dobre-praktyki-w-sql\">Dobre praktyki w SQL</a></li>\n<li><a href=\"#praktyczne-zadania\">Praktyczne zadania</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-sql\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-sql\">>></a>Czym jest SQL?</h2>\n<p>SQL (Structured Query Language) to standardowy język zapytań służący do pracy z relacyjnymi bazami danych (np. MySQL, PostgreSQL, SQLite, Oracle). Pozwala na:</p>\n<ul>\n<li>pobieranie danych (wyszukiwanie, filtrowanie, sortowanie),</li>\n<li>dodawanie i edycję informacji,</li>\n<li>usuwanie danych,</li>\n<li>zarządzanie strukturą bazy (tworzenie i modyfikacja tabel).</li>\n</ul>\n<p>Jest wykorzystywany na całym świecie przez programistów, analityków, administratorów baz danych i naukowców danych.</p>\n<hr>\n<h2 id=\"do-czego-służy-sql\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#do-czego-służy-sql\">>></a>Do czego służy SQL?</h2>\n<ul>\n<li><strong>Pobieranie danych</strong> – m.in. wyświetlanie listy klientów, produktów, zamówień.</li>\n<li><strong>Wyszukiwanie i filtrowanie</strong> – np. znajdź wszystkich użytkowników powyżej 18 lat.</li>\n<li><strong>Dodawanie nowych danych</strong> – np. rejestracja nowego klienta.</li>\n<li><strong>Aktualizacja danych</strong> – np. zmiana adresu e-mail lub stanu zamówienia.</li>\n<li><strong>Usuwanie danych</strong> – np. usunięcie nieaktualnych rekordów.</li>\n<li><strong>Tworzenie i zmienianie struktury</strong> – zakładanie nowych tabel, dodawanie kolumn.</li>\n</ul>\n<hr>\n<h2 id=\"typowe-zastosowania-sql\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowe-zastosowania-sql\">>></a>Typowe zastosowania SQL</h2>\n<ul>\n<li>Systemy sklepów internetowych</li>\n<li>Systemy bankowości i finansów</li>\n<li>Zarządzanie zasobami przedsiębiorstw (ERP)</li>\n<li>Aplikacje społecznościowe</li>\n<li>Analiza i raportowanie danych (Business Intelligence, Data Science)</li>\n<li>Systemy rejestracji użytkowników i ich autoryzacja</li>\n</ul>\n<hr>\n<h2 id=\"podstawowe-elementy-składni-sql\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-elementy-składni-sql\">>></a>Podstawowe elementy składni SQL</h2>\n<ul>\n<li>SQL nie rozróżnia wielkości liter (SELECT, select, Select są równoważne), ale zwykle używa się wielkich liter dla poleceń.</li>\n<li>Każde polecenie kończy się średnikiem (<code>;</code>).</li>\n<li>Nazwy tabel i kolumn są podawane bez cudzysłowów (chyba, że zawierają znaki specjalne).</li>\n<li>Łańcuchy znaków (teksty) zapisujemy w pojedynczych apostrofach, np. <code>'Jan'</code>.</li>\n</ul>\n<hr>\n<h2 id=\"podstawowe-polecenia-sql-szczegółowo\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-polecenia-sql-szczegółowo\">>></a>Podstawowe polecenia SQL (szczegółowo)</h2>\n<h3 id=\"select\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#select\">>>></a>SELECT</h3>\n<p><strong>Opis:</strong> Służy do pobierania danych z jednej lub więcej tabel.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> imie, nazwisko <span class=\"hljs-keyword\">FROM</span> Uzytkownicy <span class=\"hljs-keyword\">WHERE</span> wiek <span class=\"hljs-operator\">></span> <span class=\"hljs-number\">18</span>;\n</code></pre>\n<p><strong>Wyjaśnienie składni:</strong></p>\n<ul>\n<li><code>SELECT</code> – rozpoczyna zapytanie pobierające dane.</li>\n<li><code>imie, nazwisko</code> – nazwy kolumn, które chcesz pobrać (możesz użyć <code>*</code>, by pobrać wszystkie).</li>\n<li><code>FROM Uzytkownicy</code> – nazwa tabeli, z której pobierane są dane.</li>\n<li><code>WHERE wiek > 18</code> – warunek wyboru (możesz go pominąć, by pobrać wszystkie rekordy).</li>\n</ul>\n<hr>\n<h3 id=\"insert\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#insert\">>>></a>INSERT</h3>\n<p><strong>Opis:</strong> Dodaje nowe rekordy do wybranej tabeli.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT INTO</span> Uzytkownicy (imie, nazwisko, wiek) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">'Anna'</span>, <span class=\"hljs-string\">'Nowak'</span>, <span class=\"hljs-number\">25</span>);\n</code></pre>\n<p><strong>Wyjaśnienie składni:</strong></p>\n<ul>\n<li><code>INSERT INTO</code> – rozpoczyna polecenie dodania rekordu.</li>\n<li><code>Uzytkownicy</code> – nazwa tabeli.</li>\n<li><code>(imie, nazwisko, wiek)</code> – lista kolumn, do których będą przypisane wartości.</li>\n<li><code>VALUES ('Anna', 'Nowak', 25)</code> – wartości przypisane odpowiednio do wskazanych kolumn.</li>\n</ul>\n<hr>\n<h3 id=\"update\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#update\">>>></a>UPDATE</h3>\n<p><strong>Opis:</strong> Zmienia dane w istniejących rekordach.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">UPDATE</span> Uzytkownicy <span class=\"hljs-keyword\">SET</span> wiek <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">26</span> <span class=\"hljs-keyword\">WHERE</span> imie <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'Anna'</span> <span class=\"hljs-keyword\">AND</span> nazwisko <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'Nowak'</span>;\n</code></pre>\n<p><strong>Wyjaśnienie składni:</strong></p>\n<ul>\n<li><code>UPDATE Uzytkownicy</code> – wskazanie tabeli, w której chcesz zmienić dane.</li>\n<li><code>SET wiek = 26</code> – określenie nowej wartości dla kolumny.</li>\n<li><code>WHERE imie = 'Anna' AND nazwisko = 'Nowak'</code> – warunek, które rekordy mają zostać zmienione (bardzo ważne, by nie pominąć WHERE!).</li>\n</ul>\n<hr>\n<h3 id=\"delete\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#delete\">>>></a>DELETE</h3>\n<p><strong>Opis:</strong> Usuwa rekordy z wybranej tabeli.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> Uzytkownicy <span class=\"hljs-keyword\">WHERE</span> wiek <span class=\"hljs-operator\">&#x3C;</span> <span class=\"hljs-number\">18</span>;\n</code></pre>\n<p><strong>Wyjaśnienie składni:</strong></p>\n<ul>\n<li><code>DELETE FROM Uzytkownicy</code> – wskazanie tabeli, z której rekordy mają być usunięte.</li>\n<li><code>WHERE wiek &#x3C; 18</code> – warunek wyboru rekordów do usunięcia.</li>\n</ul>\n<hr>\n<h2 id=\"warunki-i-filtrowanie-danych-where\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#warunki-i-filtrowanie-danych-where\">>></a>Warunki i filtrowanie danych (WHERE)</h2>\n<p><strong>Opis:</strong> WHERE pozwala określić, które rekordy mają zostać wybrane, zmienione lub usunięte.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> Uzytkownicy <span class=\"hljs-keyword\">WHERE</span> miasto <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'Warszawa'</span> <span class=\"hljs-keyword\">AND</span> wiek <span class=\"hljs-operator\">></span> <span class=\"hljs-number\">18</span>;\n</code></pre>\n<ul>\n<li><code>miasto = 'Warszawa'</code> – wybiera tylko rekordy, gdzie miasto to Warszawa.</li>\n<li><code>AND wiek > 18</code> – dodatkowy warunek: tylko osoby powyżej 18 roku życia.</li>\n</ul>\n<p>Możliwe operatory:</p>\n<ul>\n<li>=, != (&#x3C;>), >, &#x3C;, >=, &#x3C;=</li>\n<li>AND, OR, NOT</li>\n<li>LIKE (dopasowanie wzorca), IN (lista wartości), BETWEEN (zakres)</li>\n</ul>\n<hr>\n<h2 id=\"sortowanie-wyników-order-by\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#sortowanie-wyników-order-by\">>></a>Sortowanie wyników (ORDER BY)</h2>\n<p><strong>Opis:</strong> Pozwala posortować wyniki według jednej lub więcej kolumn.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> imie, nazwisko <span class=\"hljs-keyword\">FROM</span> Uzytkownicy <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> nazwisko <span class=\"hljs-keyword\">ASC</span>, imie <span class=\"hljs-keyword\">DESC</span>;\n</code></pre>\n<ul>\n<li><code>ORDER BY nazwisko ASC</code> – posortuj alfabetycznie po nazwisku rosnąco</li>\n<li><code>imie DESC</code> – jeśli nazwiska się powtarzają, sortuj po imieniu malejąco</li>\n</ul>\n<hr>\n<h2 id=\"ograniczanie-wyników-limit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#ograniczanie-wyników-limit\">>></a>Ograniczanie wyników (LIMIT)</h2>\n<p><strong>Opis:</strong> LIMIT służy do ograniczenia liczby zwracanych wyników.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> Produkty <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> cena <span class=\"hljs-keyword\">DESC</span> LIMIT <span class=\"hljs-number\">3</span>;\n</code></pre>\n<ul>\n<li>Wyświetli 3 najdroższe produkty.</li>\n</ul>\n<hr>\n<h2 id=\"tworzenie-i-modyfikacja-tabel\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tworzenie-i-modyfikacja-tabel\">>></a>Tworzenie i modyfikacja tabel</h2>\n<p><strong>Tworzenie tabeli:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE TABLE</span> Produkty (\n  id <span class=\"hljs-type\">INT</span> <span class=\"hljs-keyword\">PRIMARY KEY</span>,\n  nazwa <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">100</span>),\n  cena <span class=\"hljs-type\">DECIMAL</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2</span>)\n);\n</code></pre>\n<ul>\n<li><code>CREATE TABLE Produkty</code> – utwórz nową tabelę o nazwie Produkty.</li>\n<li><code>id INT PRIMARY KEY</code> – kolumna \"id\" typu liczba całkowita, klucz główny (unikalny identyfikator).</li>\n<li><code>nazwa VARCHAR(100)</code> – kolumna \"nazwa\" typu tekstowego o maks. długości 100 znaków.</li>\n<li><code>cena DECIMAL(10,2)</code> – kolumna \"cena\" typu liczba zmiennoprzecinkowa (10 cyfr, w tym 2 po przecinku).</li>\n</ul>\n<p><strong>Dodawanie kolumny:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">ALTER TABLE</span> Produkty <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">COLUMN</span> opis TEXT;\n</code></pre>\n<p><strong>Usuwanie tabeli:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> Produkty;\n</code></pre>\n<hr>\n<h2 id=\"klucze-i-relacje\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#klucze-i-relacje\">>></a>Klucze i relacje</h2>\n<ul>\n<li><strong>Klucz podstawowy (PRIMARY KEY):</strong> Unikalnie identyfikuje każdy rekord w tabeli (np. id).</li>\n<li><strong>Klucz obcy (FOREIGN KEY):</strong> Tworzy powiązanie między dwiema tabelami.</li>\n</ul>\n<p><strong>Przykład relacji:</strong></p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE TABLE</span> Zamowienia (\n  id <span class=\"hljs-type\">INT</span> <span class=\"hljs-keyword\">PRIMARY KEY</span>,\n  id_produktu <span class=\"hljs-type\">INT</span>,\n  ilosc <span class=\"hljs-type\">INT</span>,\n  <span class=\"hljs-keyword\">FOREIGN KEY</span> (id_produktu) <span class=\"hljs-keyword\">REFERENCES</span> Produkty(id)\n);\n</code></pre>\n<ul>\n<li><code>id</code> – unikalny identyfikator zamówienia.</li>\n<li><code>id_produktu</code> – odwołanie do kolumny \"id\" w tabeli Produkty.</li>\n<li><code>FOREIGN KEY...</code> – definiuje powiązanie (relację) między tabelami.</li>\n</ul>\n<hr>\n<h2 id=\"dobre-praktyki-w-sql\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dobre-praktyki-w-sql\">>></a>Dobre praktyki w SQL</h2>\n<ul>\n<li>Zawsze używaj klauzuli WHERE, jeśli chcesz zmieniać lub usuwać tylko wybrane rekordy.</li>\n<li>Używaj czytelnych nazw tabel i kolumn.</li>\n<li>Twórz kopie zapasowe bazy przed poważnymi zmianami.</li>\n<li>Testuj zapytania SELECT przed wykonaniem UPDATE lub DELETE.</li>\n<li>Unikaj SELECT * w dużych projektach – wybieraj konkretne kolumny.</li>\n<li>Dokumentuj nietypowe zapytania i modyfikacje struktury bazy.</li>\n</ul>\n<hr>\n<h2 id=\"praktyczne-zadania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#praktyczne-zadania\">>></a>Praktyczne zadania</h2>\n<h3 id=\"zadanie-1-pobieranie-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-pobieranie-danych\">>>></a>Zadanie 1: Pobieranie danych</h3>\n<p>Wyświetl wszystkie dane z tabeli \"Uzytkownicy\".</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> Uzytkownicy;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-wstawianie-nowych-rekordów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-wstawianie-nowych-rekordów\">>>></a>Zadanie 2: Wstawianie nowych rekordów</h3>\n<p>Dodaj nowego użytkownika o imieniu \"Anna\", nazwisku \"Nowak\" i wieku 25.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT INTO</span> Uzytkownicy (imie, nazwisko, wiek) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">'Anna'</span>, <span class=\"hljs-string\">'Nowak'</span>, <span class=\"hljs-number\">25</span>);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-filtrowanie-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-filtrowanie-danych\">>>></a>Zadanie 3: Filtrowanie danych</h3>\n<p>Wyświetl imiona i nazwiska użytkowników, którzy mają więcej niż 18 lat.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> imie, nazwisko <span class=\"hljs-keyword\">FROM</span> Uzytkownicy <span class=\"hljs-keyword\">WHERE</span> wiek <span class=\"hljs-operator\">></span> <span class=\"hljs-number\">18</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-aktualizacja-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-aktualizacja-danych\">>>></a>Zadanie 4: Aktualizacja danych</h3>\n<p>Zmień wiek użytkownika \"Anna Nowak\" na 26.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">UPDATE</span> Uzytkownicy <span class=\"hljs-keyword\">SET</span> wiek <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">26</span> <span class=\"hljs-keyword\">WHERE</span> imie <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'Anna'</span> <span class=\"hljs-keyword\">AND</span> nazwisko <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'Nowak'</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-5-usuwanie-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-usuwanie-danych\">>>></a>Zadanie 5: Usuwanie danych</h3>\n<p>Usuń wszystkich użytkowników o wieku poniżej 18 lat.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> Uzytkownicy <span class=\"hljs-keyword\">WHERE</span> wiek <span class=\"hljs-operator\">&#x3C;</span> <span class=\"hljs-number\">18</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-6-tworzenie-tabeli\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-6-tworzenie-tabeli\">>>></a>Zadanie 6: Tworzenie tabeli</h3>\n<p>Utwórz tabelę \"Produkty\" z polami: id (liczba całkowita, klucz podstawowy), nazwa (tekst), cena (liczba zmiennoprzecinkowa).</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE TABLE</span> Produkty (\n  id <span class=\"hljs-type\">INT</span> <span class=\"hljs-keyword\">PRIMARY KEY</span>,\n  nazwa <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">100</span>),\n  cena <span class=\"hljs-type\">DECIMAL</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2</span>)\n);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-7-relacja-między-tabelami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-7-relacja-między-tabelami\">>>></a>Zadanie 7: Relacja między tabelami</h3>\n<p>Utwórz tabelę \"Zamowienia\" zawierającą klucz obcy do \"Produktów\".</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE TABLE</span> Zamowienia (\n  id <span class=\"hljs-type\">INT</span> <span class=\"hljs-keyword\">PRIMARY KEY</span>,\n  id_produktu <span class=\"hljs-type\">INT</span>,\n  ilosc <span class=\"hljs-type\">INT</span>,\n  <span class=\"hljs-keyword\">FOREIGN KEY</span> (id_produktu) <span class=\"hljs-keyword\">REFERENCES</span> Produkty(id)\n);\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-8-sortowanie-i-ograniczanie-wyników\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-8-sortowanie-i-ograniczanie-wyników\">>>></a>Zadanie 8: Sortowanie i ograniczanie wyników</h3>\n<p>Wyświetl 5 najstarszych użytkowników (imie, nazwisko, wiek).</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> imie, nazwisko, wiek <span class=\"hljs-keyword\">FROM</span> Uzytkownicy <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> wiek <span class=\"hljs-keyword\">DESC</span> LIMIT <span class=\"hljs-number\">5</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-9-łączenie-warunków\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-9-łączenie-warunków\">>>></a>Zadanie 9: Łączenie warunków</h3>\n<p>Wyświetl wszystkich użytkowników z miasta \"Warszawa\" w wieku powyżej 18 lat.</p>\n<details>\n  <summary>\n    <span>Pokaż rozwiązanie</span>\n  </summary>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> Uzytkownicy <span class=\"hljs-keyword\">WHERE</span> miasto <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'Warszawa'</span> <span class=\"hljs-keyword\">AND</span> wiek <span class=\"hljs-operator\">></span> <span class=\"hljs-number\">18</span>;\n</code></pre>\n</details>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>SQL to potężne i uniwersalne narzędzie do pracy z danymi w relacyjnych bazach danych. Pozwala efektywnie pobierać, modyfikować i zarządzać informacją. Warto poznać zarówno podstawy, jak i bardziej zaawansowane możliwości tego języka – to inwestycja, która przyda się w niemal każdej dziedzinie IT!</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-sql.md",{"_21":620,"_23":621,"_25":622,"_6":626,"_36":627,"_38":628,"_91":734,"_93":735,"_95":736,"_97":737,"_99":347},"Wprowadzenie do baz danych","Poznaj podstawowe pojęcia i koncepcje związane z bazami danych. Dowiedz się czym są bazy danych, jakie są ich rodzaje, gdzie są stosowane i dlaczego są kluczowe w informatyce. Kurs teoretyczny dla początkujących.",[294,623,624,625,531,413,34],"teoria","relacyjne","noSQL",[8],"2025-07-03T00:00:00.000Z",{"_21":629,"_41":630},"Quiz: Podstawy baz danych (teoria)",[631,638,646,654,662,670,678,685,693,700,704,710,718,726],{"_44":632,"_46":633,"_52":71,"_54":637},"<p>Czym jest baza danych?</p>",[634,635,636,541],"Zorganizowany zbiór danych przechowywany i zarządzany komputerowo","Gra komputerowa","Język programowania","Baza danych to uporządkowany, zarządzany komputerowo zbiór informacji.",{"_44":639,"_46":640,"_52":80,"_54":645},"<p>Który z poniższych jest przykładem systemu zarządzania bazą danych (DBMS)?</p>",[641,642,643,644],"Apache","MySQL","Excel","Photoshop","MySQL to popularny system zarządzania relacyjną bazą danych.",{"_44":647,"_46":648,"_52":89,"_54":653},"<p>Dlaczego bazy danych są ważne w informatyce?</p>",[649,650,651,652],"Nie mają większego znaczenia","Pozwalają programować w języku Java","Ponieważ umożliwiają efektywne przechowywanie i wyszukiwanie dużych ilości danych","Są podstawą do tworzenia gier komputerowych","Bazy danych umożliwiają skuteczne zarządzanie informacją w wielu zastosowaniach.",{"_44":655,"_46":656,"_52":71,"_54":661},"<p>Czym charakteryzuje się relacyjna baza danych?</p>",[657,658,659,660],"Dane przechowywane są w tabelach powiązanych relacjami","Relacyjne bazy danych nie istnieją","Służą tylko do grafiki komputerowej","Dane przechowywane są tylko w plikach tekstowych","Relacyjne bazy danych przechowują dane w tabelach i umożliwiają powiązania pomiędzy nimi.",{"_44":663,"_46":664,"_52":89,"_54":669},"<p>Które z poniższych NIE jest przykładem bazy NoSQL?</p>",[665,666,667,668],"Cassandra","MongoDB","PostgreSQL","Redis","PostgreSQL to relacyjny system bazodanowy, a nie NoSQL.",{"_44":671,"_46":672,"_52":71,"_54":677},"<p>Do czego służy język SQL?</p>",[673,674,675,676],"Do tworzenia i zarządzania danymi w relacyjnych bazach danych","Do analizy grafiki 3D","Do projektowania stron internetowych","Do modyfikowania zdjęć","SQL służy do tworzenia, zarządzania i wyszukiwania danych w relacyjnych bazach danych.",{"_44":679,"_46":680,"_52":80,"_54":684},"<p>Czym jest tabela w relacyjnej bazie danych?</p>",[681,682,683,48],"Zbiornikiem na obrazy","Zbiorem rekordów o tej samej strukturze, przypominającym arkusz kalkulacyjny","Rodzajem klucza","Tabela to zbiór rekordów (wierszy) o tej samej strukturze.",{"_44":686,"_46":687,"_52":80,"_54":692},"<p>Czym jest rekord (wiersz) w bazie danych?</p>",[688,689,690,691],"Jednym polem w tabeli","Pojedynczym wpisem, np. informacjami o jednym obiekcie","Całą tabelą","Typem kolumny","Rekord to pojedynczy wpis w tabeli, np. dane jednego klienta.",{"_44":694,"_46":695,"_52":71,"_54":699},"<p>Czym jest kolumna w bazie danych?</p>",[696,697,683,698],"Pole opisujące cechę wszystkich rekordów w tabeli","Systemem operacyjnym","Jednym wpisem w tabeli","Kolumna to jedno pole w tabeli, opisujące daną cechę wszystkich rekordów.",{"_44":701,"_46":702,"_52":53,"_54":703},"<p>Wskaż przykład relacyjnej bazy danych:</p>",[668,665,666,642],"MySQL to relacyjny system bazodanowy.",{"_44":705,"_46":706,"_52":71,"_54":709},"<p>Wskaż przykład nierelacyjnej bazy danych (NoSQL):</p>",[666,707,708,667],"Oracle","SQLite","MongoDB to dokumentowa baza NoSQL.",{"_44":711,"_46":712,"_52":89,"_54":717},"<p>Podaj przykład zastosowania bazy danych w codziennym życiu:</p>",[713,714,715,716],"Pisanie wierszy","Tworzenie muzyki","Przechowywanie danych klientów w sklepie internetowym","Rysowanie grafiki komputerowej","Przechowywanie danych klientów to jedno z typowych zastosowań baz danych.",{"_44":719,"_46":720,"_52":80,"_54":725},"<p>Dlaczego tworzenie kopii zapasowej bazy danych jest ważne?</p>",[721,722,723,724],"Backup zwiększa prędkość działania bazy","Backup chroni dane przed utratą w razie awarii, ataku lub przypadkowego usunięcia","Backup umożliwia programowanie w JavaScript","Backup służy do szyfrowania obrazków","Kopie zapasowe chronią dane przed utratą.",{"_44":727,"_46":728,"_52":80,"_54":733},"<p>Które z poniższych NIE jest cechą bazy relacyjnej?</p>",[729,730,731,732],"Możliwość definiowania relacji między danymi","Przechowywanie danych w dokumentach JSON","Przechowywanie danych w tabelach","Unikalne identyfikowanie rekordów kluczem podstawowym","Przechowywanie danych w dokumentach JSON to cecha baz NoSQL (np. MongoDB).","016c1720-96e3-44bb-aaa5-6d59b0b52f4e","wprowadzenie-do-baz-danych","<p>Bazy danych są nieodłączną częścią współczesnej informatyki. Przechowują, organizują i umożliwiają szybki dostęp do ogromnych ilości informacji – od danych klientów w sklepach internetowych, przez posty w mediach społecznościowych, aż po dane telemetryczne z urządzeń IoT. Nawet jeśli nie widzisz ich na co dzień, korzystasz z nich niemal w każdej aplikacji! 🗃️</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#co-to-jest-baza-danych\">Co to jest baza danych?</a></li>\n<li><a href=\"#dlaczego-korzystamy-z-baz-danych\">Dlaczego korzystamy z baz danych?</a></li>\n<li><a href=\"#systemy-zarz%C4%85dzania-baz%C4%85-danych-dbms\">Systemy zarządzania bazą danych (DBMS)</a></li>\n<li><a href=\"#rodzaje-baz-danych\">Rodzaje baz danych</a>\n<ul>\n<li><a href=\"#relacyjne-bazy-danych\">Relacyjne bazy danych</a></li>\n<li><a href=\"#nosql\">NoSQL</a></li>\n<li><a href=\"#inne-rodzaje-baz-danych\">Inne rodzaje baz danych</a></li>\n</ul>\n</li>\n<li><a href=\"#podstawowe-poj%C4%99cia-tabele-rekordy-kolumny\">Podstawowe pojęcia: tabele, rekordy, kolumny</a></li>\n<li><a href=\"#co-to-jest-sql-i-do-czego-s%C5%82u%C5%BCy\">Co to jest SQL i do czego służy?</a></li>\n<li><a href=\"#gdzie-stosuje-si%C4%99-bazy-danych\">Gdzie stosuje się bazy danych?</a></li>\n<li><a href=\"#bezpiecze%C5%84stwo-i-kopie-zapasowe\">Bezpieczeństwo i kopie zapasowe</a></li>\n<li><a href=\"#popularne-systemy-bazodanowe\">Popularne systemy bazodanowe</a></li>\n<li><a href=\"#gdzie-szuka%C4%87-pomocy-i-materia%C5%82%C3%B3w\">Gdzie szukać pomocy i materiałów?</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"co-to-jest-baza-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-baza-danych\">>></a>Co to jest baza danych?</h2>\n<p>Baza danych to zorganizowany zbiór informacji przechowywany komputerowo. Pozwala na efektywne gromadzenie, przetwarzanie, wyszukiwanie i zarządzanie danymi. Może to być lista klientów, produktów, zamówień, ale też ogromne zbiory informacji o użytkownikach serwisów społecznościowych czy transakcjach bankowych.</p>\n<hr>\n<h2 id=\"dlaczego-korzystamy-z-baz-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-korzystamy-z-baz-danych\">>></a>Dlaczego korzystamy z baz danych?</h2>\n<ul>\n<li><strong>Bezpieczeństwo i integralność danych</strong> – bazy danych minimalizują ryzyko utraty danych i dbają o ich poprawność.</li>\n<li><strong>Wydajność</strong> – umożliwiają szybkie wyszukiwanie i operacje na dużych zbiorach informacji.</li>\n<li><strong>Organizacja</strong> – pozwalają poukładać dane w logiczne struktury.</li>\n<li><strong>Skalowalność</strong> – obsługują rosnącą ilość danych i użytkowników.</li>\n<li><strong>Współbieżność</strong> – wielu użytkowników może pracować z tymi samymi danymi w tym samym czasie.</li>\n</ul>\n<hr>\n<h2 id=\"systemy-zarządzania-bazą-danych-dbms\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#systemy-zarządzania-bazą-danych-dbms\">>></a>Systemy zarządzania bazą danych (DBMS)</h2>\n<p>DBMS (Database Management System) to specjalne oprogramowanie, które umożliwia łatwe tworzenie, przechowywanie i zarządzanie bazami danych. DBMS odpowiada m.in. za:</p>\n<ul>\n<li>przechowywanie i organizację danych,</li>\n<li>kontrolę dostępu i uprawnień,</li>\n<li>zapewnienie spójności i integralności danych,</li>\n<li>obsługę wielu użytkowników jednocześnie,</li>\n<li>wykonywanie kopii zapasowych i odzyskiwanie danych.</li>\n</ul>\n<hr>\n<h2 id=\"rodzaje-baz-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#rodzaje-baz-danych\">>></a>Rodzaje baz danych</h2>\n<h3 id=\"relacyjne-bazy-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#relacyjne-bazy-danych\">>>></a>Relacyjne bazy danych</h3>\n<p>Najpopularniejszy typ baz. Dane są zorganizowane w <strong>tabelach</strong> (wiersze i kolumny), a relacje między tabelami pozwalają na powiązanie danych z różnych zbiorów. Stosowane są tam, gdzie ważna jest struktura i spójność danych – np. bankowość, e-commerce, systemy ERP.</p>\n<h3 id=\"nosql\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#nosql\">>>></a>NoSQL</h3>\n<p>Bazy nierelacyjne, zaprojektowane do przechowywania dużych, zróżnicowanych i często nieustrukturyzowanych danych. Zamiast tabel, wykorzystują inne struktury: dokumenty (np. JSON), pary klucz-wartość, grafy czy szerokie kolumny. Sprawdzają się np. w mediach społecznościowych, IoT, big data.</p>\n<h3 id=\"inne-rodzaje-baz-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#inne-rodzaje-baz-danych\">>>></a>Inne rodzaje baz danych</h3>\n<ul>\n<li><strong>Bazy obiektowe</strong> – przechowują dane jako obiekty, podobnie jak w programowaniu obiektowym.</li>\n<li><strong>Bazy grafowe</strong> – idealne do przechowywania sieci powiązań, np. relacje między użytkownikami.</li>\n<li><strong>Bazy czasowe (time-series)</strong> – zoptymalizowane do przechowywania danych zmieniających się w czasie, np. pomiarów sensorów.</li>\n</ul>\n<hr>\n<h2 id=\"podstawowe-pojęcia-tabele-rekordy-kolumny\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-pojęcia-tabele-rekordy-kolumny\">>></a>Podstawowe pojęcia: tabele, rekordy, kolumny</h2>\n<p>W relacyjnych bazach danych dane są przechowywane w strukturze tabelarycznej. Oto najważniejsze pojęcia:</p>\n<ul>\n<li><strong>Tabela</strong> – zbiór rekordów (wierszy) o tej samej strukturze. Tabela przypomina arkusz kalkulacyjny, gdzie każdy wiersz to inny obiekt, a każda kolumna opisuje konkretną cechę tych obiektów.</li>\n<li><strong>Rekord (wiersz)</strong> – pojedynczy wpis w tabeli, czyli komplet informacji o jednym obiekcie (np. jeden klient).</li>\n<li><strong>Kolumna</strong> – jedno pole o określonym typie danych, np. imię, nazwisko, wiek. Każda kolumna opisuje jedną cechę wszystkich rekordów w tabeli.</li>\n</ul>\n<p><strong>Przykład:</strong></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>id</th><th>imie</th><th>nazwisko</th><th>wiek</th></tr></thead><tbody><tr><td>1</td><td>Jan</td><td>Kowalski</td><td>30</td></tr><tr><td>2</td><td>Anna</td><td>Nowak</td><td>25</td></tr></tbody></table>\n<p>W powyższej tabeli:</p>\n<ul>\n<li>Każdy wiersz to rekord (informacje o jednej osobie),</li>\n<li>Kolumny to cechy (id, imie, nazwisko, wiek),</li>\n<li>Całość to tabela (np. \"Użytkownicy\").</li>\n</ul>\n<hr>\n<h2 id=\"co-to-jest-sql-i-do-czego-służy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-sql-i-do-czego-służy\">>></a>Co to jest SQL i do czego służy?</h2>\n<p><strong>SQL</strong> (Structured Query Language) to specjalny język służący do komunikacji z relacyjnymi bazami danych. Umożliwia:</p>\n<ul>\n<li>definiowanie struktury bazy (np. tworzenie tabel),</li>\n<li>wprowadzanie i modyfikowanie danych,</li>\n<li>wyszukiwanie i filtrowanie informacji,</li>\n<li>zarządzanie użytkownikami i uprawnieniami.</li>\n</ul>\n<p>SQL jest standardem w pracy z relacyjnymi bazami danych – znajomość podstawowych pojęć i poleceń SQL jest niezbędna dla każdego, kto chce pracować z danymi.</p>\n<blockquote>\n<p><strong>Uwaga:</strong> W tym kursie nie będziemy omawiać składni SQL – temu poświęcony będzie osobny kurs.</p>\n</blockquote>\n<hr>\n<h2 id=\"gdzie-stosuje-się-bazy-danych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#gdzie-stosuje-się-bazy-danych\">>></a>Gdzie stosuje się bazy danych?</h2>\n<ul>\n<li>Sklepy internetowe (produkty, zamówienia, klienci)</li>\n<li>Media społecznościowe (profile, posty, relacje)</li>\n<li>Systemy rejestracji (szkoły, uczelnie, konferencje)</li>\n<li>Zarządzanie magazynem, finansami, logistyką</li>\n<li>Systemy bankowe, medyczne, rządowe</li>\n<li>Przechowywanie danych telemetrycznych, analitycznych, IoT</li>\n</ul>\n<hr>\n<h2 id=\"bezpieczeństwo-i-kopie-zapasowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#bezpieczeństwo-i-kopie-zapasowe\">>></a>Bezpieczeństwo i kopie zapasowe</h2>\n<ul>\n<li><strong>Uprawnienia i autoryzacja</strong> – kontrola dostępu do danych.</li>\n<li><strong>Kopie zapasowe</strong> – regularne tworzenie backupów na wypadek awarii.</li>\n<li><strong>Szyfrowanie</strong> – ochrona danych przed nieautoryzowanym dostępem.</li>\n<li><strong>Integracja z systemami monitoringu i logowania operacji.</strong></li>\n</ul>\n<hr>\n<h2 id=\"popularne-systemy-bazodanowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#popularne-systemy-bazodanowe\">>></a>Popularne systemy bazodanowe</h2>\n<ul>\n<li><strong>MySQL</strong> – popularny, darmowy, relacyjny DBMS.</li>\n<li><strong>PostgreSQL</strong> – zaawansowany, relacyjny, open-source.</li>\n<li><strong>Oracle Database</strong> – komercyjny, relacyjny, szeroko stosowany w korporacjach.</li>\n<li><strong>MongoDB</strong> – dokumentowa baza NoSQL.</li>\n<li><strong>Redis</strong> – szybka baza klucz-wartość (NoSQL).</li>\n<li><strong>SQLite</strong> – lekka baza do aplikacji lokalnych.</li>\n<li><strong>Neo4j</strong> – grafowa baza danych.</li>\n</ul>\n<hr>\n<h2 id=\"gdzie-szukać-pomocy-i-materiałów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#gdzie-szukać-pomocy-i-materiałów\">>></a>Gdzie szukać pomocy i materiałów?</h2>\n<ul>\n<li>Kursy online (np. Udemy, Coursera, YouTube)</li>\n<li>Dokumentacje oficjalne systemów DBMS (np. MySQL, PostgreSQL, MongoDB)</li>\n<li>Społeczności: Stack Overflow, grupy na Discord/Slack, fora tematyczne</li>\n<li>Książki: \"Bazy danych. Systemy rozproszone\" – A. Silberschatz, \"Bazy danych. Wprowadzenie\" – J. Date</li>\n</ul>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Bazy danych to podstawa współczesnych systemów informatycznych, pozwalająca na skuteczne i bezpieczne zarządzanie informacją. Znajomość ich rodzajów, pojęć i zastosowań jest kluczowa dla każdego, kto chce rozpocząć przygodę z IT, programowaniem lub analizą danych. Kolejnym krokiem może być nauka praktycznego wykorzystania baz danych i języków zapytań!</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-baz-danych.md",{"_21":739,"_23":740,"_25":741,"_6":745,"_36":746,"_38":747,"_91":789,"_93":790,"_95":791,"_97":792,"_99":793},"Pierwsze kroki z TypeScript w React – praktyczne podstawy","Zrozum podstawy TypeScript w środowisku React – prostym językiem i na praktycznych przykładach.",[11,13,28,170,29,742,743,744,34],"props","state","kurs",[11,13],"2025-06-22T00:00:00.000Z",{"_21":748,"_41":749},"Quiz: TypeScript w React – podstawy",[750,758,766,774,782],{"_44":751,"_46":752,"_52":89,"_54":757},"<p>Które zdanie najlepiej opisuje główną zaletę TypeScript w projektach React?</p>",[753,754,755,756],"Generuje automatycznie dokumentację komponentów.","Zamienia kod na czysty CSS.","Pozwala na typowanie propsów i stanu, zwiększając bezpieczeństwo kodu.","Eliminuje konieczność używania npm.","Największą zaletą jest wprowadzenie typów w propsach, stanie i API komponentów.",{"_44":759,"_46":760,"_52":89,"_54":765},"<p>Jak poprawnie zadeklarować stan liczbowy w komponencie funkcyjnym z użyciem useState?</p>",[761,762,763,764],"const [count, setCount] = useState(0: number);","const [count, setCount] = useState<string>(0);","const [count, setCount] = useState<number>(0);","let count = useState(0);","Poprawna składnia to useState<number>(0).",{"_44":767,"_46":768,"_52":89,"_54":773},"<p>Jak opisać typ propsów w komponencie funkcyjnym?</p>",[769,770,771,772],"Tylko poprzez klasę.","Wyłącznie przez any.","Przez interface lub type i przekazać go do propsów funkcji.","Nie trzeba typować propsów w TS.","Propsy typujemy przez interface lub type i używamy ich w definicji funkcji.",{"_44":775,"_46":776,"_52":89,"_54":781},"<p>Który kod prawidłowo typuje referencję do przycisku?</p>",[777,778,779,780],"const ref = useRef<Button>(null);","const ref = useRef<HTMLDivElement>(null);","const ref = useRef<HTMLButtonElement>(null);","const ref = useRef(null);","Poprawny typ dla referencji do buttona to HTMLButtonElement.",{"_44":783,"_46":784,"_52":80,"_54":788},"<p>Co wyświetli poniższy komponent?nn<code>tsxntype WelcomeProps = { name: string };nconst Welcome = ({ name }: WelcomeProps) => &#x3C;p>Cześć, {name}!&#x3C;/p>;n</code>nJeśli wywołasz <code>&#x3C;Welcome name='Ala' /></code></p>",[156,785,786,787],"Cześć, Ala!","Witaj, Ala!","Błąd kompilacji","Komponent wyświetli 'Cześć, Ala!'.","6f206d33-c6a0-423e-b0a5-ab18d65b8206","pierwsze-kroki-z-typescript-w-react","<p>Witaj w świecie <strong>Reacta</strong> połączonego z <strong>TypeScriptem</strong>! 🚀 Jeśli chcesz pisać nowoczesne aplikacje i mieć pewność, że Twój kod jest czysty, bezpieczny i przyszłościowy, to właśnie znalazłeś/aś odpowiednie narzędzie. TypeScript w połączeniu z React to duet, który pokochasz od pierwszego projektu! Ten przewodnik przeprowadzi Cię krok po kroku przez najważniejsze podstawy – bez zbędnych teorii, za to z praktycznymi przykładami i zadaniami, które pomogą Ci naprawdę zrozumieć temat. ✨</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#dlaczego-warto-u%C5%BCywa%C4%87-typescript-w-react\">Dlaczego warto używać TypeScript w React?</a></li>\n<li><a href=\"#podstawowe-typy-w-typescript\">Podstawowe typy w TypeScript</a></li>\n<li><a href=\"#tworzenie-komponent%C3%B3w-funkcyjnych-z-typami\">Tworzenie komponentów funkcyjnych z typami</a></li>\n<li><a href=\"#props-i-typowanie-props%C3%B3w\">Props i typowanie propsów</a></li>\n<li><a href=\"#typowanie-stanu-usestate\">Typowanie stanu (useState)</a></li>\n<li><a href=\"#typowanie-referencji-useref\">Typowanie referencji (useRef)</a></li>\n<li><a href=\"#przydatne-narz%C4%99dzia-i-wskaz%C3%B3wki\">Przydatne narzędzia i wskazówki</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1-prosty-komponent-powitalny\">Zadanie 1: Prosty komponent powitalny</a></li>\n<li><a href=\"#zadanie-2-typowanie-tablicy-liczb\">Zadanie 2: Typowanie tablicy liczb</a></li>\n<li><a href=\"#zadanie-3-komponent-z-typowanymi-propsami-i-zdarzeniem\">Zadanie 3: Komponent z typowanymi propsami i zdarzeniem</a></li>\n<li><a href=\"#zadanie-4-typowanie-obiektu-w-stanie\">Zadanie 4: Typowanie obiektu w stanie</a></li>\n<li><a href=\"#zadanie-5-lista-komponent%C3%B3w-na-podstawie-tablicy-obiekt%C3%B3w\">Zadanie 5: Lista komponentów na podstawie tablicy obiektów</a></li>\n</ul>\n</li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n</ol>\n<hr>\n<h2 id=\"dlaczego-warto-używać-typescript-w-react\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-warto-używać-typescript-w-react\">>></a>Dlaczego warto używać TypeScript w React?</h2>\n<p>TypeScript to nie tylko “lepszy JavaScript” – to Twoja tajna broń na błędy w kodzie! Dzięki niemu:</p>\n<ul>\n<li>🛡️ <strong>Kod jest bardziej przewidywalny i bezpieczniejszy</strong> – typy wykrywają literówki i błędy logiczne już podczas pisania. To jak posiadanie prywatnego asystenta, który sprawdza Twój kod na bieżąco!</li>\n<li>⚡ <strong>Praca w zespole staje się łatwiejsza</strong> – czytelny kod, lepsze podpowiedzi w edytorze (IntelliSense), szybkie ogarnianie cudzych projektów. Koniec z \"zgadywaniem\" jakie dane funkcja przyjmuje!</li>\n<li>🔄 <strong>Refaktoryzacje nie są już straszne</strong> – zmiany w typach wymuszają poprawki w całym projekcie, więc nic Ci nie umknie. TypeScript prowadzi Cię za rękę przez proces zmian.</li>\n<li>📖 <strong>Typy to żywa dokumentacja</strong> – od razu wiesz, co i gdzie przekazujesz do komponentów oraz funkcji. Twój kod staje się samoopisujący.</li>\n</ul>\n<p>W React TypeScript to must-have, jeśli chcesz:</p>\n<ul>\n<li>jasno typować <strong>propsy</strong> i <strong>stan</strong> (<code>useState</code>, <code>useReducer</code>),</li>\n<li>wygodnie pracować z <strong>referencjami</strong> (<code>useRef</code>),</li>\n<li>bez obaw korzystać z zewnętrznych bibliotek i API.</li>\n</ul>\n<hr>\n<h2 id=\"podstawowe-typy-w-typescript\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-typy-w-typescript\">>></a>Podstawowe typy w TypeScript</h2>\n<p>Najczęściej spotkasz się z podstawowymi typami, które pomogą Ci kontrolować dane w Twojej aplikacji:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userName</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"Alice\"</span>; <span class=\"hljs-comment\">// Tekst</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userAge</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">25</span>; <span class=\"hljs-comment\">// Liczba</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">isActive</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Wartość logiczna (prawda/fałsz)</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">primes</span>: <span class=\"hljs-built_in\">number</span>[] = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>]; <span class=\"hljs-comment\">// Tablica liczb</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userProfile</span>: { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span> } = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> }; <span class=\"hljs-comment\">// Obiekt</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">anyValue</span>: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-string\">\"Can be anything!\"</span>; <span class=\"hljs-comment\">// Typ 'any' - używaj z ostrożnością! Wyłącza sprawdzanie typów.</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">unknownValue</span>: <span class=\"hljs-built_in\">unknown</span> = <span class=\"hljs-number\">123</span>; <span class=\"hljs-comment\">// Typ 'unknown' - bezpieczniejsza alternatywa dla 'any', wymaga sprawdzenia typu.</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userStatus</span>: <span class=\"hljs-string\">\"active\"</span> | <span class=\"hljs-string\">\"inactive\"</span> = <span class=\"hljs-string\">\"active\"</span>; <span class=\"hljs-comment\">// Literał (union type) - tylko te dwie wartości są dozwolone.</span>\n</code></pre>\n<p>Chcesz być PRO? Twórz własne <strong>typy</strong> i <strong>interfejsy</strong> – kod będzie czytelniejszy i łatwiejszy do rozbudowy:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Przykład użycia 'type'</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">User</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">email</span>?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// Opcjonalne pole</span>\n};\n\n<span class=\"hljs-comment\">// Przykład użycia 'interface'</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Product</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">description</span>?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// Opcjonalne pole</span>\n  <span class=\"hljs-attr\">onSale</span>: <span class=\"hljs-built_in\">boolean</span>;\n}\n</code></pre>\n<p><strong><code>type</code> vs <code>interface</code></strong>\nChoć często używane zamiennie, istnieją pewne różnice. <code>interface</code> może być rozszerzany i implementowany przez klasy, <code>type</code> jest bardziej elastyczny do tworzenia aliasów typów złożonych (np. unii). W prostych przypadkach, takich jak definicja propsów, wybór między <code>type</code> a <code>interface</code> często sprowadza się do preferencji.</p>\n<blockquote>\n<p>💡 <strong>TIP:</strong> Korzystaj z własnych typów (<code>type</code> lub <code>interface</code>) zawsze, gdy masz złożone obiekty, struktury danych lub korzystasz z API! Ułatwi to debugowanie i utrzymanie kodu.</p>\n</blockquote>\n<hr>\n<h2 id=\"tworzenie-komponentów-funkcyjnych-z-typami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tworzenie-komponentów-funkcyjnych-z-typami\">>></a>Tworzenie komponentów funkcyjnych z typami</h2>\n<p>Najprostszy komponent funkcyjny w TypeScript, który nie przyjmuje żadnych propsów, nie wymaga jawnego typowania:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">HelloWorld</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, World!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}\n</code></pre>\n<p>Jeśli komponent nie przyjmuje żadnych propsów, TypeScript sam to zrozumie. Jeśli jednak chcesz być super precyzyjny (i czasami jest to wymagane przez lintery lub pewne schematy projektowe), możesz użyć typu <code>React.FC</code> (Functional Component) lub <code>React.FunctionComponent</code>.</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">FC</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SimpleComponent</span>: <span class=\"hljs-variable constant_\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>This is a simple component.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n};\n\n<span class=\"hljs-comment\">// lub bardziej zwięźle</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">AnotherSimpleComponent</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Another simple component.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n};\n</code></pre>\n<p>Zauważ, że importujemy <code>FC</code> bezpośrednio z pakietu <code>react</code>, a nie cały obiekt <code>React</code>.</p>\n<hr>\n<h2 id=\"props-i-typowanie-propsów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#props-i-typowanie-propsów\">>></a>Props i typowanie propsów</h2>\n<p>Propsy to podstawa przekazywania danych do komponentów w React! W TypeScript opisujesz je przez <strong>interfejs</strong> lub <strong>typ</strong>, a następnie wskazujesz ten typ jako argument komponentu.</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">WelcomeProps</span> {\n  <span class=\"hljs-attr\">userName</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>?: <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-comment\">// Opcjonalny prop</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Welcome</span>(<span class=\"hljs-params\">{ userName, age }: <span class=\"hljs-title class_\">WelcomeProps</span></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n      Hello, {userName}! {age &#x26;&#x26; `You are ${age} years old.`} 👋\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n  );\n}\n\n<span class=\"hljs-comment\">// Użycie komponentu:</span>\n<span class=\"hljs-comment\">// &#x3C;Welcome userName=\"Alice\" /></span>\n<span class=\"hljs-comment\">// &#x3C;Welcome userName=\"Bob\" age={30} /></span>\n</code></pre>\n<p><strong>Co zyskujesz?</strong></p>\n<ul>\n<li><strong>IntelliSense:</strong> Edytor podpowiada, jakie propsy są dostępne i jakiego są typu, gdy piszesz <code>&#x3C;Welcome ...</code>.</li>\n<li><strong>Wykrywanie błędów na etapie kompilacji:</strong> Jeśli zapomnisz przekazać wymagany prop, lub przekazujesz go z niewłaściwym typem, TypeScript od razu Cię o tym poinformuje.</li>\n<li><strong>Samodokumentujący się kod:</strong> Definicja interfejsu propsów służy jako jasna dokumentacja dla każdego, kto używa Twojego komponentu.</li>\n</ul>\n<hr>\n<h2 id=\"typowanie-stanu-usestate\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-stanu-usestate\">>></a>Typowanie stanu (useState)</h2>\n<p>Hook <code>useState</code> pozwala komponentom funkcyjnym zarządzać ich wewnętrznym stanem. Z TypeScriptem możesz jasno określić, co przechowujesz w stanie, zwiększając tym samym bezpieczeństwo i czytelność kodu.</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState&#x3C;<span class=\"hljs-built_in\">number</span>>(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// Jawnie typujemy stan jako 'number'</span>\n  <span class=\"hljs-keyword\">const</span> [message, setMessage] = useState&#x3C;<span class=\"hljs-built_in\">string</span>>(<span class=\"hljs-string\">\"Hello\"</span>); <span class=\"hljs-comment\">// Jawnie typujemy stan jako 'string'</span>\n  <span class=\"hljs-keyword\">const</span> [isActive, setIsActive] = useState&#x3C;<span class=\"hljs-built_in\">boolean</span>>(<span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// Jawnie typujemy stan jako 'boolean'</span>\n\n  <span class=\"hljs-comment\">// Przykład złożonego stanu: obiekt</span>\n  <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserProfile</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-attr\">email</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-attr\">isLoggedIn</span>: <span class=\"hljs-built_in\">boolean</span>;\n  }\n  <span class=\"hljs-keyword\">const</span> [user, setUser] = useState&#x3C;<span class=\"hljs-title class_\">UserProfile</span>>({\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John Doe\"</span>,\n    <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"john@example.com\"</span>,\n    <span class=\"hljs-attr\">isLoggedIn</span>: <span class=\"hljs-literal\">false</span>,\n  });\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Counter:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Current count: {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount((prevCount) => prevCount - 1)}>\n        Decrement\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount((prevCount) => prevCount + 1)}>\n        Increment\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Message:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{message}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setMessage(\"Updated message!\")}>\n        Update Message\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>User Profile:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Name: {user.name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Email: {user.email}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Logged In: {user.isLoggedIn ? \"Yes\" : \"No\"}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setUser({ ...user, isLoggedIn: !user.isLoggedIn })}\n      >\n        Toggle Login Status\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<blockquote>\n<p>⭐ <strong>Pro tip:</strong> Przy bardziej złożonych stanach (np. obiekty, tablice) – zawsze jawnie wpisuj typ. Nawet jeśli TypeScript czasem sam się domyśli (tzw. inferencja typów), jawne typowanie jest bardziej czytelne i odporne na błędy, zwłaszcza gdy stan może być początkowo <code>null</code> lub pustą tablicą.</p>\n</blockquote>\n<hr>\n<h2 id=\"typowanie-referencji-useref\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#typowanie-referencji-useref\">>></a>Typowanie referencji (useRef)</h2>\n<p>Hook <code>useRef</code> służy do tworzenia referencji do elementów DOM lub do przechowywania wartości, które mają przetrwać ponowne renderowanie komponentu, ale nie wywołują go. Z TypeScriptem musisz jawnie określić, do jakiego typu elementu lub wartości odwołuje się referencja.</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { useRef, useCallback } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FocusButton</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Typujemy ref jako referencję do elementu HTMLButtonElement,</span>\n  <span class=\"hljs-comment\">// która może być null, zanim ref zostanie przypisany do elementu DOM.</span>\n  <span class=\"hljs-keyword\">const</span> buttonRef = useRef&#x3C;<span class=\"hljs-title class_\">HTMLButtonElement</span>>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-keyword\">const</span> handleClick = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// Używamy operatora łańcuchowania opcjonalnego (?.) aby upewnić się,</span>\n    <span class=\"hljs-comment\">// że buttonRef.current nie jest null przed wywołaniem focus().</span>\n    buttonRef.<span class=\"hljs-property\">current</span>?.<span class=\"hljs-title function_\">focus</span>();\n  }, []); <span class=\"hljs-comment\">// useCallback bez zależności, ponieważ buttonRef jest stały.</span>\n\n  <span class=\"hljs-comment\">// Przykład referencji do przechowywania wartości, która nie jest elementem DOM</span>\n  <span class=\"hljs-keyword\">const</span> counterRef = useRef&#x3C;<span class=\"hljs-built_in\">number</span>>(<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Current value in counterRef:\"</span>, counterRef.<span class=\"hljs-property\">current</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">incrementCounter</span> = (<span class=\"hljs-params\"></span>) => {\n    counterRef.<span class=\"hljs-property\">current</span> += <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"New value in counterRef:\"</span>, counterRef.<span class=\"hljs-property\">current</span>);\n    <span class=\"hljs-comment\">// Zauważ, że zmiana counterRef.current nie spowoduje ponownego renderowania!</span>\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Focus Button Example:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleClick}</span>></span>Click to focus the other button<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{buttonRef}</span>></span>Another Button<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Ref for value storage:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Check console for counterRef value. It won't update UI directly.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{incrementCounter}</span>></span>Increment Counter in Ref<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>Dzięki typowaniu masz pewność, do jakiego elementu się odwołujesz (<code>HTMLButtonElement</code>) i jakie ma on właściwości/metody. Typy <code>HTMLElement</code>, <code>HTMLDivElement</code>, <code>HTMLInputElement</code> itp. są wbudowane w bibliotekę DOM.</p>\n<hr>\n<h2 id=\"przydatne-narzędzia-i-wskazówki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przydatne-narzędzia-i-wskazówki\">>></a>Przydatne narzędzia i wskazówki</h2>\n<ul>\n<li><strong>TSX (lub JSX z TypeScriptem)</strong> – Twoje pliki React powinny mieć rozszerzenie <code>.tsx</code> (lub <code>.jsx</code> jeśli używasz React w trybie TypeScript, ale <code>.tsx</code> jest standardem). Pozwalają one na mieszanie składni JSX z typami TypeScript!</li>\n<li><strong>TypeScript Playground</strong> – idealne narzędzie do szybkiego testowania kodu TypeScript online bez konfiguracji środowiska:\n<code>https://www.typescriptlang.org/play</code></li>\n<li><strong>Oficjalna dokumentacja React + TypeScript:</strong> Zawsze warto zajrzeć do źródła – dokumentacja Reacta ma dedykowaną sekcję o TypeScript:\n<code>https://react.dev/learn/typescript</code></li>\n<li><strong>Chcesz szybko wystartować z nowym projektem?</strong> Użyj Vite z szablonem React + TypeScript:\n<pre><code class=\"hljs language-bash\">npm create vite@latest my-react-ts-app -- --template react-ts\n</code></pre>\nTo polecenie automatycznie skonfiguruje projekt z Vite, Reactem i TypeScriptem, gotowy do pracy od razu.</li>\n</ul>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<p>Poniższe zadania pomogą Ci utrwalić wiedzę o podstawach typowania w React z TypeScriptem. Stwórz nowy projekt React z Vite (jeśli jeszcze tego nie zrobiłeś/aś za pomocą polecenia <code>npm create vite@latest my-react-ts-app -- --template react-ts</code>), a następnie wykonaj w nim poniższe zadania, tworząc osobne komponenty w katalogu <code>src/components</code>. Pamiętaj, aby importować tylko te Hooki i funkcje, których potrzebujesz!</p>\n<h3 id=\"zadanie-1-prosty-komponent-powitalny\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-prosty-komponent-powitalny\">>>></a>Zadanie 1: Prosty komponent powitalny</h3>\n<p>Stwórz komponent funkcyjny <code>Greeting</code>, który przyjmuje przez props imię użytkownika (<code>userName</code> typu <code>string</code>) i wyświetla komunikat \"Hello, [userName]!\".</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// src/components/Greeting.tsx</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">GreetingProps</span> {\n  <span class=\"hljs-attr\">userName</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Greeting</span> = (<span class=\"hljs-params\">{ userName }: <span class=\"hljs-title class_\">GreetingProps</span></span>) => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Hello, {userName}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Greeting</span>;\n\n<span class=\"hljs-comment\">// src/App.tsx (przykładowe użycie)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Greeting</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/Greeting\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Greeting</span> <span class=\"hljs-attr\">userName</span>=<span class=\"hljs-string\">\"Alice\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Greeting</span> <span class=\"hljs-attr\">userName</span>=<span class=\"hljs-string\">\"Bob\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-typowanie-tablicy-liczb\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-typowanie-tablicy-liczb\">>>></a>Zadanie 2: Typowanie tablicy liczb</h3>\n<p>Zadeklaruj w komponencie <code>NumberList</code> tablicę liczb jako stan przy użyciu <code>useState</code> oraz odpowiedniego typu. Wyświetl te liczby.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// src/components/NumberList.tsx</span>\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">NumberList</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [numbers, setNumbers] = useState&#x3C;<span class=\"hljs-built_in\">number</span>[]>([<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Numbers:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        {numbers.map((num, index) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>></span>{num}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">NumberList</span>;\n\n<span class=\"hljs-comment\">// src/App.tsx (przykładowe użycie)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">NumberList</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/NumberList\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">NumberList</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-komponent-z-typowanymi-propsami-i-zdarzeniem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-komponent-z-typowanymi-propsami-i-zdarzeniem\">>>></a>Zadanie 3: Komponent z typowanymi propsami i zdarzeniem</h3>\n<p>Stwórz komponent <code>ClickableButton</code>, który przyjmuje przez props <code>label</code> (tekst do wyświetlenia na przycisku, <code>string</code>) oraz <code>onClick</code> (funkcję, która ma być wywołana po kliknięciu). Oba propsy odpowiednio wytypuj.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// src/components/ClickableButton.tsx</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ClickableButtonProps</span> {\n  <span class=\"hljs-attr\">label</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">onClick</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">void</span>; <span class=\"hljs-comment\">// Funkcja, która nic nie przyjmuje i nic nie zwraca</span>\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ClickableButton</span> = (<span class=\"hljs-params\">{ label, onClick }: <span class=\"hljs-title class_\">ClickableButtonProps</span></span>) => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>></span>{label}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ClickableButton</span>;\n\n<span class=\"hljs-comment\">// src/App.tsx (przykładowe użycie)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ClickableButton</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/ClickableButton\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleButtonClick</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"Button clicked!\"</span>);\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ClickableButton</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"Click Me\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleButtonClick}</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-typowanie-obiektu-w-stanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-typowanie-obiektu-w-stanie\">>>></a>Zadanie 4: Typowanie obiektu w stanie</h3>\n<p>Zadeklaruj stan użytkownika w komponencie <code>UserProfile</code> jako obiekt z polami <code>firstName</code> (string), <code>lastName</code> (string) i <code>age</code> (number). Wyświetl te informacje.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// src/components/UserProfile.tsx</span>\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">UserProfile</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [user, setUser] = useState&#x3C;<span class=\"hljs-title class_\">User</span>>({\n    <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">\"Jane\"</span>,\n    <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">\"Doe\"</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>,\n  });\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>User Profile:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n        Name: {user.firstName} {user.lastName}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Age: {user.age}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setUser({ ...user, age: user.age + 1 })}>\n        Increment Age\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">UserProfile</span>;\n\n<span class=\"hljs-comment\">// src/App.tsx (przykładowe użycie)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">UserProfile</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/UserProfile\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">UserProfile</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-5-lista-komponentów-na-podstawie-tablicy-obiektów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-lista-komponentów-na-podstawie-tablicy-obiektów\">>>></a>Zadanie 5: Lista komponentów na podstawie tablicy obiektów</h3>\n<p>Zadeklaruj tablicę obiektów <code>Product</code> (z polami <code>id</code>: <code>number</code>, <code>name</code>: <code>string</code>, <code>price</code>: <code>number</code>) i wyświetl każdy produkt jako osobny element listy (<code>&#x3C;li></code>), korzystając z komponentu <code>ProductItem</code>. Pamiętaj o kluczu <code>key</code>!</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// src/components/ProductItem.tsx</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Product</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ProductItemProps</span> {\n  <span class=\"hljs-attr\">product</span>: <span class=\"hljs-title class_\">Product</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ProductItem</span> = (<span class=\"hljs-params\">{ product }: <span class=\"hljs-title class_\">ProductItemProps</span></span>) => (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>\n    {product.name} - ${product.price.toFixed(2)}\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span></span>\n);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ProductItem</span>;\n\n<span class=\"hljs-comment\">// src/components/ProductList.tsx</span>\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ProductItem</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./ProductItem\"</span>; <span class=\"hljs-comment\">// Importuj komponent ProductItem</span>\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Product</span> {\n  <span class=\"hljs-comment\">// Ponownie definiujemy interfejs, lub importujemy go z pliku typów, jeśli jest globalny</span>\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ProductList</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [products, setProducts] = useState&#x3C;<span class=\"hljs-title class_\">Product</span>[]>([\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Laptop\"</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">1200</span> },\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Mouse\"</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">25</span> },\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Keyboard\"</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">75</span> },\n  ]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Our Products:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n        {products.map((product) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProductItem</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{product.id}</span> <span class=\"hljs-attr\">product</span>=<span class=\"hljs-string\">{product}</span> /></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ProductList</span>;\n\n<span class=\"hljs-comment\">// src/App.tsx (przykładowe użycie)</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ProductList</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/ProductList\"</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProductList</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n</details>\n<hr>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p>Gratulacje! 🎉 Zrobiłeś właśnie pierwszy krok w świat TypeScript + React – połączenia, które sprawia, że kod staje się bardziej przewidywalny, czytelny i po prostu przyjemniejszy w pracy. Dzięki typowaniu szybciej łapiesz błędy, a Twoje komponenty są super czytelne nie tylko dla Ciebie, ale też dla całego zespołu.</p>\n<p>Nie bój się eksperymentować, zadawać pytań i sprawdzać rzeczy w praktyce. Każdy kod napisany z TypeScriptem to inwestycja w Twój rozwój jako programisty! 🚀</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/pierwsze-kroki-z-typescript-w-react.md","10 minut",{"_21":795,"_23":796,"_25":797,"_6":800,"_36":746,"_38":801,"_91":839,"_93":16,"_95":840,"_97":841,"_99":842},"Wzorce projektowe w praktyce","Kompleksowy przewodnik po wzorcach projektowych — od podstaw po praktyczne przykłady w kontekście frontendu i backendu.",[798,168,11,10,28,799,744,34],"wzorce projektowe","backend",[16,11],{"_21":802,"_41":803},"Quiz: Wzorce projektowe",[804,812,820,826,834],{"_44":805,"_46":806,"_52":89,"_54":811},"<p>Do której grupy należy wzorzec Singleton?</p>",[807,808,809,810],"Behawioralne","Funkcyjne","Kreacyjne","Strukturalne","Singleton to wzorzec kreacyjny – dotyczy sposobu tworzenia obiektów.",{"_44":813,"_46":814,"_52":89,"_54":819},"<p>Który wzorzec umożliwia zamianę jednego interfejsu na inny, by umożliwić współpracę niekompatybilnych klas?</p>",[815,816,817,818],"Builder","Facade","Adapter","Observer","Adapter tłumaczy jeden interfejs na inny.",{"_44":821,"_46":822,"_52":80,"_54":825},"<p>Który wzorzec pozwala powiadamiać wiele obiektów o zmianie stanu bez ścisłego powiązania?</p>",[823,818,816,824],"Factory","Strategy","Observer służy do powiadamiania wielu obiektów o zmianie stanu.",{"_44":827,"_46":828,"_52":71,"_54":833},"<p>Co umożliwia wzorzec Strategy?</p>",[829,830,831,832],"Dynamiczną zmianę algorytmu działania programu","Tworzenie jednej instancji klasy","Uproszczenie złożonego interfejsu","Budowanie złożonych obiektów krok po kroku","Strategy pozwala dynamicznie zmieniać algorytm działania programu.",{"_44":835,"_46":836,"_52":80,"_54":838},"<p>Który wzorzec stosujesz, by uprościć korzystanie z kilku skomplikowanych systemów przez jeden prosty interfejs?</p>",[815,816,837,817],"Singleton","Facade upraszcza złożone systemy przez prosty interfejs.","0f731c9d-08ad-4635-a249-d023e891767a","<p>Poznaj praktyczne zastosowania najważniejszych <strong>wzorców projektowych</strong> — prosto, przystępnie, z przykładami w <strong>TypeScript</strong> oraz z zadaniami do samodzielnego wykonania! 🏗️🚀</p>\n<p>Ten przewodnik to nie tylko teoria, ale również konkretne przykłady, wskazówki i gotowe rozwiązania do typowych problemów programistycznych, zarówno po stronie frontendu, jak i backendu.</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-s%C4%85-wzorce-projektowe\">Czym są wzorce projektowe?</a></li>\n<li><a href=\"#jak-je-dzielimy\">Jak je dzielimy?</a></li>\n<li><a href=\"#wzorce-kreacyjne\">Wzorce kreacyjne</a>\n<ul>\n<li><a href=\"#singleton\">Singleton</a></li>\n<li><a href=\"#factory-method\">Factory Method</a></li>\n<li><a href=\"#builder\">Builder</a></li>\n</ul>\n</li>\n<li><a href=\"#wzorce-strukturalne\">Wzorce strukturalne</a>\n<ul>\n<li><a href=\"#facade\">Facade</a></li>\n<li><a href=\"#adapter\">Adapter</a></li>\n</ul>\n</li>\n<li><a href=\"#wzorce-behawioralne\">Wzorce behawioralne</a>\n<ul>\n<li><a href=\"#observer\">Observer</a></li>\n<li><a href=\"#strategy\">Strategy</a></li>\n</ul>\n</li>\n<li><a href=\"#zastosowania-wzorc%C3%B3w-w-praktyce\">Zastosowania wzorców w praktyce</a></li>\n<li><a href=\"#przydatne-narz%C4%99dzia-i-materia%C5%82y\">Przydatne narzędzia i materiały</a></li>\n<li><a href=\"#zadania-do-wykonania\">Zadania do wykonania</a>\n<ul>\n<li><a href=\"#zadanie-1-singleton-w-praktyce\">Zadanie 1: Singleton w praktyce</a></li>\n<li><a href=\"#zadanie-2-factory-dla-przycisk%C3%B3w\">Zadanie 2: Factory dla przycisków</a></li>\n<li><a href=\"#zadanie-3-builder-do-pizzy\">Zadanie 3: Builder do pizzy</a></li>\n<li><a href=\"#zadanie-4-adapter--stare-i-nowe-api\">Zadanie 4: Adapter — stare i nowe API</a></li>\n<li><a href=\"#zadanie-5-strategy--wyb%C3%B3r-algorytmu-p%C5%82atno%C5%9Bci\">Zadanie 5: Strategy — wybór algorytmu płatności</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-są-wzorce-projektowe\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-są-wzorce-projektowe\">>></a>Czym są wzorce projektowe?</h2>\n<p><strong>Wzorce projektowe</strong> (Design Patterns) to sprawdzone, uniwersalne rozwiązania dla często spotykanych problemów w programowaniu. Możesz potraktować je jak gotowe \"przepisy\" — zamiast wymyślać wszystko od nowa, korzystasz z doświadczenia i najlepszych praktyk innych inżynierów oprogramowania. Są to abstrakcyjne koncepcje, które należy zaadaptować do konkretnego kontekstu problemu.</p>\n<h3 id=\"dlaczego-warto-ich-używać\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-warto-ich-używać\">>>></a>Dlaczego warto ich używać?</h3>\n<ul>\n<li>🤝 <strong>Ułatwiają komunikację w zespole:</strong> Kiedy używasz nazwy wzorca, wszyscy w zespole rozumieją intencje i strukturę danego rozwiązania.</li>\n<li>🏗️ <strong>Poprawiają strukturę, elastyczność i czytelność kodu:</strong> Wzorce promują modułowość, separację odpowiedzialności i otwarte na rozbudowę, ale zamknięte na modyfikację rozwiązania.</li>\n<li>⚡ <strong>Przyspieszają projektowanie i rozwój systemów:</strong> Nie musisz \"wynajdować koła na nowo\", możesz skupić się na unikalnych aspektach swojej aplikacji.</li>\n<li>🐞 <strong>Pozwalają unikać typowych błędów:</strong> Wzorce projektowe to rozwiązania, które przetrwały próbę czasu i zostały zoptymalizowane pod kątem stabilności i efektywności.</li>\n</ul>\n<hr>\n<h2 id=\"jak-je-dzielimy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-je-dzielimy\">>></a>Jak je dzielimy?</h2>\n<p>Wzorce projektowe są klasyfikowane na podstawie ich celu i problemu, który rozwiązują. Najpopularniejszy podział pochodzi z książki \"Design Patterns: Elements of Reusable Object-Oriented Software\" (tzw. Gang of Four - GoF):</p>\n<ol>\n<li><strong>Kreacyjne (Creational Patterns)</strong> — dotyczą sposobów tworzenia obiektów, zapewniając elastyczność i kontrolę nad procesem instancjonowania. Przykłady: Singleton, Factory Method, Builder.</li>\n<li><strong>Strukturalne (Structural Patterns)</strong> — pokazują, jak łączyć obiekty i klasy w większe struktury, zachowując ich elastyczność i efektywność. Przykłady: Facade, Adapter.</li>\n<li><strong>Behawioralne (Behavioral Patterns)</strong> — opisują interakcje i przepływ informacji między obiektami, ułatwiając komunikację i zarządzanie złożonym zachowaniem. Przykłady: Observer, Strategy.</li>\n</ol>\n<p>Każda kategoria rozwiązuje inne typy problemów, dlatego tak ważne jest, by znać przynajmniej po jednym wzorcu z każdej grupy.</p>\n<hr>\n<h2 id=\"wzorce-kreacyjne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wzorce-kreacyjne\">>></a>Wzorce kreacyjne</h2>\n<p>Wzorce kreacyjne koncentrują się na procesie tworzenia obiektów. Pozwalają na dynamiczne i elastyczne tworzenie instancji, oddzielając logikę tworzenia od klienta, który ich używa.</p>\n<h3 id=\"singleton\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#singleton\">>>></a>Singleton</h3>\n<p>Wzorzec <strong>Singleton</strong> zapewnia, że dana klasa posiada tylko jedną instancję w całej aplikacji i jednocześnie dostarcza globalny punkt dostępu do tej instancji. Jest to użyteczne w sytuacjach, gdy tylko jeden obiekt danego typu powinien istnieć.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Logger</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-attr\">instance</span>: <span class=\"hljs-title class_\">Logger</span>; <span class=\"hljs-comment\">// Statyczna zmienna przechowująca instancję</span>\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// Prywatny konstruktor zapobiega tworzeniu nowych instancji z zewnątrz</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Logger instance created!\"</span>);\n  }\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getInstance</span>(): <span class=\"hljs-title class_\">Logger</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-property\">instance</span>) {\n      <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-property\">instance</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Logger</span>();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-property\">instance</span>;\n  }\n\n  <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-keyword\">const</span> timestamp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">toISOString</span>();\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`[<span class=\"hljs-subst\">${timestamp}</span>] <span class=\"hljs-subst\">${message}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> logger1 = <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-title function_\">getInstance</span>();\nlogger1.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"First log message.\"</span>);\n\n<span class=\"hljs-keyword\">const</span> logger2 = <span class=\"hljs-title class_\">Logger</span>.<span class=\"hljs-title function_\">getInstance</span>();\nlogger2.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Second log message.\"</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(logger1 === logger2); <span class=\"hljs-comment\">// Output: true (obie referencje wskazują na tę samą instancję)</span>\n</code></pre>\n<p><strong>Zastosowania:</strong> Konfiguracja aplikacji, połączenie z bazą danych, menedżer sesji, system logowania, menedżery zasobów (np. bufor obrazów).</p>\n<hr>\n<h3 id=\"factory-method\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#factory-method\">>>></a>Factory Method</h3>\n<p>Wzorzec <strong>Factory Method</strong> (Metoda Wytwórcza) definiuje interfejs do tworzenia obiektów, ale pozwala podklasom decydować, którą klasę instancjonować. Klient nie musi znać dokładnych klas konkretnych produktów, operuje na wspólnym interfejsie.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Interfejs produktu</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(): <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-title function_\">onClick</span>(): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Konkretne produkty</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WindowsButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;button style='background-color: blue;'>Windows Button&#x3C;/button>\"</span>;\n  }\n  <span class=\"hljs-title function_\">onClick</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Windows button clicked!\"</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MacButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Button</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;button style='background-color: gray;'>Mac Button&#x3C;/button>\"</span>;\n  }\n  <span class=\"hljs-title function_\">onClick</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Mac button clicked!\"</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Klasa kreatora (fabryki)</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ButtonFactory</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-attr\">os</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">Button</span> {\n    <span class=\"hljs-keyword\">if</span> (os === <span class=\"hljs-string\">\"Windows\"</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WindowsButton</span>();\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (os === <span class=\"hljs-string\">\"Mac\"</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MacButton</span>();\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">\"Unknown OS type.\"</span>);\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> windowsBtn = <span class=\"hljs-title class_\">ButtonFactory</span>.<span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-string\">\"Windows\"</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(windowsBtn.<span class=\"hljs-title function_\">render</span>());\nwindowsBtn.<span class=\"hljs-title function_\">onClick</span>();\n\n<span class=\"hljs-keyword\">const</span> macBtn = <span class=\"hljs-title class_\">ButtonFactory</span>.<span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-string\">\"Mac\"</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(macBtn.<span class=\"hljs-title function_\">render</span>());\nmacBtn.<span class=\"hljs-title function_\">onClick</span>();\n</code></pre>\n<p><strong>Zastosowania:</strong> Dynamiczne tworzenie elementów UI (w zależności od platformy lub konfiguracji), obsługa wielu formatów danych (np. parsery JSON, XML), integracja z zewnętrznymi systemami, gdzie typ obiektu zależy od konfiguracji.</p>\n<hr>\n<h3 id=\"builder\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#builder\">>>></a>Builder</h3>\n<p>Wzorzec <strong>Builder</strong> (Budowniczy) pozwala na tworzenie złożonych obiektów krok po kroku. Oddziela konstrukcję obiektu od jego reprezentacji, co pozwala na tworzenie różnych reprezentacji tego samego procesu budowania. Jest szczególnie przydatny, gdy obiekt ma wiele opcjonalnych parametrów.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Produkt, który ma być budowany</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pizza</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">dough</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">sauce</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">toppings</span>: <span class=\"hljs-built_in\">string</span>[],\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">cheese</span>: <span class=\"hljs-built_in\">boolean</span>\n  </span>) {}\n\n  <span class=\"hljs-title function_\">describe</span>(): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Pizza with <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.dough}</span> dough, <span class=\"hljs-subst\">${\n      <span class=\"hljs-variable language_\">this</span>.sauce\n    }</span> sauce, toppings: <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.toppings.join(<span class=\"hljs-string\">\", \"</span>)}</span> and <span class=\"hljs-subst\">${\n      <span class=\"hljs-variable language_\">this</span>.cheese ? <span class=\"hljs-string\">\"with\"</span> : <span class=\"hljs-string\">\"without\"</span>\n    }</span> cheese.`</span>;\n  }\n}\n\n<span class=\"hljs-comment\">// Klasa Buildera</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PizzaBuilder</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_dough</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"classic\"</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_sauce</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"tomato\"</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_toppings</span>: <span class=\"hljs-built_in\">string</span>[] = [];\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_cheese</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>;\n\n  <span class=\"hljs-title function_\">setDough</span>(<span class=\"hljs-attr\">doughType</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">PizzaBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_dough</span> = doughType;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>; <span class=\"hljs-comment\">// Zwracanie 'this' pozwala na łańcuchowanie metod</span>\n  }\n\n  <span class=\"hljs-title function_\">setSauce</span>(<span class=\"hljs-attr\">sauceType</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">PizzaBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_sauce</span> = sauceType;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">addTopping</span>(<span class=\"hljs-attr\">topping</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">PizzaBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_toppings</span>.<span class=\"hljs-title function_\">push</span>(topping);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">hasCheese</span>(<span class=\"hljs-attr\">has</span>: <span class=\"hljs-built_in\">boolean</span>): <span class=\"hljs-title class_\">PizzaBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_cheese</span> = has;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">build</span>(): <span class=\"hljs-title class_\">Pizza</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Pizza</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_dough</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_sauce</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_toppings</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_cheese</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> margherita = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PizzaBuilder</span>()\n  .<span class=\"hljs-title function_\">setSauce</span>(<span class=\"hljs-string\">\"pomodoro\"</span>)\n  .<span class=\"hljs-title function_\">addTopping</span>(<span class=\"hljs-string\">\"basil\"</span>)\n  .<span class=\"hljs-title function_\">build</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(margherita.<span class=\"hljs-title function_\">describe</span>());\n\n<span class=\"hljs-keyword\">const</span> customPizza = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PizzaBuilder</span>()\n  .<span class=\"hljs-title function_\">setDough</span>(<span class=\"hljs-string\">\"thin crust\"</span>)\n  .<span class=\"hljs-title function_\">setSauce</span>(<span class=\"hljs-string\">\"pesto\"</span>)\n  .<span class=\"hljs-title function_\">addTopping</span>(<span class=\"hljs-string\">\"chicken\"</span>)\n  .<span class=\"hljs-title function_\">addTopping</span>(<span class=\"hljs-string\">\"onions\"</span>)\n  .<span class=\"hljs-title function_\">hasCheese</span>(<span class=\"hljs-literal\">false</span>)\n  .<span class=\"hljs-title function_\">build</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(customPizza.<span class=\"hljs-title function_\">describe</span>());\n</code></pre>\n<p><strong>Zastosowania:</strong> Konfiguratory, kreatory złożonych obiektów (np. raportów, dokumentów PDF), generatory formularzy, obiekty z wieloma opcjonalnymi parametrami, gdzie bezpośredni konstruktor byłby zbyt skomplikowany.</p>\n<hr>\n<h2 id=\"wzorce-strukturalne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wzorce-strukturalne\">>></a>Wzorce strukturalne</h2>\n<p>Wzorce strukturalne zajmują się kompozycją klas i obiektów. Pomagają w tworzeniu dużych struktur z mniejszych elementów, jednocześnie zachowując ich elastyczność i uporządkowanie.</p>\n<h3 id=\"facade\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#facade\">>>></a>Facade</h3>\n<p>Wzorzec <strong>Facade</strong> (Fasada) dostarcza uproszczony interfejs do złożonego zestawu klas, biblioteki lub podsystemu. Ukrywa wewnętrzną złożoność, czyniąc system łatwiejszym w użyciu.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Złożony podsystem audio</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AudioSystem</span> {\n  <span class=\"hljs-title function_\">turnOn</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Audio system: On\"</span>);\n  }\n  <span class=\"hljs-title function_\">turnOff</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Audio system: Off\"</span>);\n  }\n  <span class=\"hljs-title function_\">setVolume</span>(<span class=\"hljs-attr\">level</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Audio system: Volume set to <span class=\"hljs-subst\">${level}</span>`</span>);\n  }\n  <span class=\"hljs-title function_\">playMusic</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Audio system: Playing music\"</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Złożony podsystem wideo</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VideoSystem</span> {\n  <span class=\"hljs-title function_\">turnOn</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Video system: On\"</span>);\n  }\n  <span class=\"hljs-title function_\">turnOff</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Video system: Off\"</span>);\n  }\n  <span class=\"hljs-title function_\">setResolution</span>(<span class=\"hljs-attr\">resolution</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Video system: Resolution set to <span class=\"hljs-subst\">${resolution}</span>`</span>);\n  }\n  <span class=\"hljs-title function_\">showMovie</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Video system: Showing movie \"<span class=\"hljs-subst\">${title}</span>\"`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Fasada dla Home Theater</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HomeTheaterFacade</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">audio</span>: <span class=\"hljs-title class_\">AudioSystem</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AudioSystem</span>();\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">video</span>: <span class=\"hljs-title class_\">VideoSystem</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VideoSystem</span>();\n\n  <span class=\"hljs-title function_\">startMovie</span>(<span class=\"hljs-attr\">movieTitle</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"nStarting movie...\"</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">audio</span>.<span class=\"hljs-title function_\">turnOn</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">audio</span>.<span class=\"hljs-title function_\">setVolume</span>(<span class=\"hljs-number\">7</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">turnOn</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">setResolution</span>(<span class=\"hljs-string\">\"4K\"</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">showMovie</span>(movieTitle);\n  }\n\n  <span class=\"hljs-title function_\">endMovie</span>(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"nEnding movie...\"</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">video</span>.<span class=\"hljs-title function_\">turnOff</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">audio</span>.<span class=\"hljs-title function_\">turnOff</span>();\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> theater = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HomeTheaterFacade</span>();\ntheater.<span class=\"hljs-title function_\">startMovie</span>(<span class=\"hljs-string\">\"The Matrix\"</span>);\ntheater.<span class=\"hljs-title function_\">endMovie</span>();\n</code></pre>\n<p><strong>Zastosowania:</strong> Uproszczenie API dla skomplikowanych bibliotek, warstwy usług w architekturze (np. API gateway), integracja wielu zależności w jednym punkcie.</p>\n<hr>\n<h3 id=\"adapter\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#adapter\">>>></a>Adapter</h3>\n<p>Wzorzec <strong>Adapter</strong> (Adapter) pozwala na współpracę obiektom o niekompatybilnych interfejsach. Działa jak \"tłumacz\", który konwertuje interfejs jednej klasy na interfejs, którego oczekuje inna klasa.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Klasa ze starym, niekompatybilnym interfejsem</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OldLegacyPrinter</span> {\n  <span class=\"hljs-title function_\">printText</span>(<span class=\"hljs-attr\">text</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`[Old Legacy Printer] Printing text: \"<span class=\"hljs-subst\">${text}</span>\"`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Nowy, oczekiwany interfejs</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">NewModernPrinter</span> {\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Adapter, który dostosowuje stary interfejs do nowego</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PrinterAdapter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NewModernPrinter</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">oldPrinter</span>: <span class=\"hljs-title class_\">OldLegacyPrinter</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">printer</span>: <span class=\"hljs-title class_\">OldLegacyPrinter</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">oldPrinter</span> = printer;\n  }\n\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-comment\">// \"Tłumaczymy\" wywołanie z nowego interfejsu na stary</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">oldPrinter</span>.<span class=\"hljs-title function_\">printText</span>(content);\n  }\n}\n\n<span class=\"hljs-comment\">// Klient używający nowego interfejsu</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printDocument</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">printer</span>: <span class=\"hljs-title class_\">NewModernPrinter</span>, <span class=\"hljs-attr\">document</span>: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">void</span> {\n  printer.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-variable language_\">document</span>);\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> legacyPrinter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OldLegacyPrinter</span>();\n<span class=\"hljs-comment\">// printDocument(legacyPrinter, \"This will fail because interfaces don't match!\"); // Compile-time error</span>\n\n<span class=\"hljs-keyword\">const</span> adapter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PrinterAdapter</span>(legacyPrinter);\n<span class=\"hljs-title function_\">printDocument</span>(adapter, <span class=\"hljs-string\">\"Hello from the modern interface!\"</span>); <span class=\"hljs-comment\">// Działa!</span>\n</code></pre>\n<p><strong>Zastosowania:</strong> Integracja z zewnętrznymi bibliotekami o innym API, dostosowywanie starszego kodu do nowych standardów, migracje systemów, tworzenie warstw kompatybilności.</p>\n<hr>\n<h2 id=\"wzorce-behawioralne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wzorce-behawioralne\">>></a>Wzorce behawioralne</h2>\n<p>Wzorce behawioralne zajmują się algorytmami i przypisywaniem odpowiedzialności między obiektami. Opisują sposoby komunikacji i interakcji między obiektami.</p>\n<h3 id=\"observer\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#observer\">>>></a>Observer</h3>\n<p>Wzorzec <strong>Observer</strong> (Obserwator) definiuje mechanizm subskrypcji, dzięki któremu obiekt (tzw. <code>Subject</code> lub <code>Publisher</code>) może powiadamiać wiele innych obiektów (tzw. <code>Observers</code> lub <code>Subscribers</code>) o wszelkich zmianach stanu, bez ścisłego powiązania między nimi. Jest to kluczowy wzorzec w programowaniu reaktywnym i sterowanym zdarzeniami.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Interfejs Obserwatora</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Klasa Podmiotu (Subject)</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EventPublisher</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">observers</span>: <span class=\"hljs-title class_\">Observer</span>[] = [];\n\n  <span class=\"hljs-title function_\">addObserver</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">push</span>(observer);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Observer added.\"</span>);\n  }\n\n  <span class=\"hljs-title function_\">removeObserver</span>(<span class=\"hljs-attr\">observer</span>: <span class=\"hljs-title class_\">Observer</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs</span>) =></span> obs !== observer);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Observer removed.\"</span>);\n  }\n\n  <span class=\"hljs-title function_\">notifyObservers</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Notifying observers with data:\"</span>, data);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> obs <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">observers</span>) {\n      obs.<span class=\"hljs-title function_\">update</span>(data);\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// Konkretne klasy Obserwatorów</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoggerObserver</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`[Logger] Data received: <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(data)}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EmailSenderObserver</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`[EmailSender] Sending email about: <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(data)}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> publisher = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventPublisher</span>();\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggerObserver</span>();\n<span class=\"hljs-keyword\">const</span> emailSender = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EmailSenderObserver</span>();\n\npublisher.<span class=\"hljs-title function_\">addObserver</span>(logger);\npublisher.<span class=\"hljs-title function_\">addObserver</span>(emailSender);\n\npublisher.<span class=\"hljs-title function_\">notifyObservers</span>({ <span class=\"hljs-attr\">event</span>: <span class=\"hljs-string\">\"userLoggedIn\"</span>, <span class=\"hljs-attr\">userId</span>: <span class=\"hljs-number\">123</span> });\n\npublisher.<span class=\"hljs-title function_\">removeObserver</span>(emailSender);\npublisher.<span class=\"hljs-title function_\">notifyObservers</span>({ <span class=\"hljs-attr\">event</span>: <span class=\"hljs-string\">\"productAddedToCart\"</span>, <span class=\"hljs-attr\">productId</span>: <span class=\"hljs-number\">456</span> });\n</code></pre>\n<p><strong>Zastosowania:</strong> Systemy notyfikacji (np. powiadomienia email, SMS), reactive programming (np. RxJS), architektury event-driven (mikroserwisy), widoki UI reagujące na zmiany modelu danych (np. w frameworkach MVVM).</p>\n<hr>\n<h3 id=\"strategy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#strategy\">>>></a>Strategy</h3>\n<p>Wzorzec <strong>Strategy</strong> (Strategia) pozwala definiować rodzinę algorytmów, umieszczać każdy z nich w osobnej klasie i sprawiać, że są one wymienne. Klient może wybrać algorytm w trakcie działania aplikacji, bez zmiany struktury kodu.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Interfejs Strategii</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-comment\">// Konkretne Strategie</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PayPalStrategy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Paying <span class=\"hljs-subst\">${amount}</span> PLN using PayPal.`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CreditCardStrategy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Paying <span class=\"hljs-subst\">${amount}</span> PLN using Credit Card.`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BankTransferStrategy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Paying <span class=\"hljs-subst\">${amount}</span> PLN using Bank Transfer.`</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Kontekst, który używa strategii</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ShoppingCart</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">paymentStrategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span>;\n\n  <span class=\"hljs-title function_\">setPaymentStrategy</span>(<span class=\"hljs-attr\">strategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">paymentStrategy</span> = strategy;\n  }\n\n  <span class=\"hljs-title function_\">checkout</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">paymentStrategy</span>) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Payment strategy not set!\"</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`nProcessing payment for <span class=\"hljs-subst\">${amount}</span> PLN...`</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">paymentStrategy</span>.<span class=\"hljs-title function_\">pay</span>(amount);\n  }\n}\n\n<span class=\"hljs-comment\">// Użycie:</span>\n<span class=\"hljs-keyword\">const</span> cart = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ShoppingCart</span>();\n\ncart.<span class=\"hljs-title function_\">setPaymentStrategy</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PayPalStrategy</span>());\ncart.<span class=\"hljs-title function_\">checkout</span>(<span class=\"hljs-number\">150</span>);\n\ncart.<span class=\"hljs-title function_\">setPaymentStrategy</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CreditCardStrategy</span>());\ncart.<span class=\"hljs-title function_\">checkout</span>(<span class=\"hljs-number\">200</span>);\n\ncart.<span class=\"hljs-title function_\">setPaymentStrategy</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankTransferStrategy</span>());\ncart.<span class=\"hljs-title function_\">checkout</span>(<span class=\"hljs-number\">50</span>);\n</code></pre>\n<p><strong>Zastosowania:</strong> Algorytmy płatności, różne strategie walidacji danych, sortowania, eksportu danych, dynamiczna logika decyzyjna (np. AI), różne algorytmy kompresji plików.</p>\n<hr>\n<h2 id=\"zastosowania-wzorców-w-praktyce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zastosowania-wzorców-w-praktyce\">>></a>Zastosowania wzorców w praktyce</h2>\n<p>Wzorce projektowe nie są tylko teorią, ale są wszechobecne w realnych aplikacjach i frameworkach:</p>\n<ul>\n<li><strong>Frontend (React, Angular, Vue):</strong>\n<ul>\n<li><strong>Observer:</strong> Wiele bibliotek do zarządzania stanem (np. Redux, NgRx, Vuex) opiera się na idei obserwatorów. React Hooks (<code>useState</code>, <code>useEffect</code>) również w pewnym sensie korzystają z mechanizmów reaktywności podobnych do Observera.</li>\n<li><strong>Strategy:</strong> Dynamiczny wybór komponentów do renderowania na podstawie stanu aplikacji, różne strategie parsowania danych wejściowych.</li>\n<li><strong>Factory Method:</strong> Tworzenie instancji komponentów lub widżetów w zależności od konfiguracji.</li>\n<li><strong>Facade:</strong> Warstwa usług, która upraszcza komunikację z API backendowym lub złożonymi bibliotekami JS.</li>\n</ul>\n</li>\n<li><strong>Backend (Node.js, Java, .NET, Python):</strong>\n<ul>\n<li><strong>Singleton:</strong> Połączenia do bazy danych, menedżery konfiguracji, globalne instancje logowania.</li>\n<li><strong>Builder:</strong> Generowanie złożonych zapytań SQL, budowanie odpowiedzi HTTP, tworzenie obiektów z wieloma opcjonalnymi polami.</li>\n<li><strong>Adapter:</strong> Integracja z zewnętrznymi API (np. płatności, dostawcy SMS), dostosowywanie danych z legacy systemów.</li>\n<li><strong>Strategy:</strong> Różne algorytmy uwierzytelniania, polityki buforowania, procesy biznesowe.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"przydatne-narzędzia-i-materiały\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#przydatne-narzędzia-i-materiały\">>></a>Przydatne narzędzia i materiały</h2>\n<p>Aby pogłębić swoją wiedzę i lepiej zrozumieć wzorce projektowe, polecam następujące zasoby:</p>\n<ul>\n<li><strong><a href=\"https://refactoring.guru/pl/design-patterns\">Refactoring.guru – wzorce projektowe po polsku i angielsku</a></strong>: Prawdopodobnie najlepsze źródło online z klarownymi opisami i przykładami kodu w wielu językach.</li>\n<li><strong><a href=\"https://www.typescriptlang.org/play\">TypeScript Playground</a></strong>: Idealne narzędzie do szybkiego testowania i eksperymentowania z przykładami kodu w TypeScript, bez potrzeby konfiguracji lokalnego środowiska.</li>\n<li><strong><a href=\"https://pl.wikipedia.org/wiki/Wzorzec_projektowy\">Wzorce projektowe – Wikipedia</a></strong>: Dobre źródło do ogólnego przeglądu i definicji.</li>\n<li><strong>Książka „Wzorce projektowe. Elementy oprogramowania obiektowego” – Gamma, Helm, Johnson, Vlissides (tzw. Gang of Four)</strong>: Klasyka, która zapoczątkowała całą dyskusję o wzorcach. Obowiązkowa lektura dla każdego, kto chce dogłębnie zrozumieć temat.</li>\n</ul>\n<hr>\n<h2 id=\"zadania-do-wykonania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania\">>></a>Zadania do wykonania</h2>\n<p>Poniższe zadania pomogą Ci utrwalić wiedzę o wzorcach projektowych w praktyce. Spróbuj zaimplementować je w środowisku TypeScript, skupiając się na czystości kodu i poprawnym typowaniu.</p>\n<h3 id=\"zadanie-1-singleton-w-praktyce\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-singleton-w-praktyce\">>>></a>Zadanie 1: Singleton w praktyce</h3>\n<p>Zaimplementuj klasę <code>ConfigurationManager</code>, która realizuje wzorzec Singleton i umożliwia przechowywanie oraz pobieranie globalnych ustawień aplikacji. Upewnij się, że niezależnie od liczby wywołań <code>getInstance()</code>, zawsze używana jest ta sama instancja menedżera konfiguracji.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConfigurationManager</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-attr\">instance</span>: <span class=\"hljs-title class_\">ConfigurationManager</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">settings</span>: <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// Initialize default settings or load from a file</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">settings</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"apiUrl\"</span>, <span class=\"hljs-string\">\"https://api.example.com\"</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">settings</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"timeout\"</span>, <span class=\"hljs-string\">\"5000\"</span>);\n  }\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getInstance</span>(): <span class=\"hljs-title class_\">ConfigurationManager</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">ConfigurationManager</span>.<span class=\"hljs-property\">instance</span>) {\n      <span class=\"hljs-title class_\">ConfigurationManager</span>.<span class=\"hljs-property\">instance</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConfigurationManager</span>();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">ConfigurationManager</span>.<span class=\"hljs-property\">instance</span>;\n  }\n\n  <span class=\"hljs-title function_\">getSetting</span>(<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">settings</span>.<span class=\"hljs-title function_\">get</span>(key);\n  }\n\n  <span class=\"hljs-title function_\">setSetting</span>(<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">settings</span>.<span class=\"hljs-title function_\">set</span>(key, value);\n  }\n}\n\n<span class=\"hljs-comment\">// Usage:</span>\n<span class=\"hljs-keyword\">const</span> config1 = <span class=\"hljs-title class_\">ConfigurationManager</span>.<span class=\"hljs-title function_\">getInstance</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(config1.<span class=\"hljs-title function_\">getSetting</span>(<span class=\"hljs-string\">\"apiUrl\"</span>)); <span class=\"hljs-comment\">// https://api.example.com</span>\n\n<span class=\"hljs-keyword\">const</span> config2 = <span class=\"hljs-title class_\">ConfigurationManager</span>.<span class=\"hljs-title function_\">getInstance</span>();\nconfig2.<span class=\"hljs-title function_\">setSetting</span>(<span class=\"hljs-string\">\"timeout\"</span>, <span class=\"hljs-string\">\"10000\"</span>); <span class=\"hljs-comment\">// Change setting via second instance</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(config1.<span class=\"hljs-title function_\">getSetting</span>(<span class=\"hljs-string\">\"timeout\"</span>)); <span class=\"hljs-comment\">// 10000 (shows they are the same instance)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(config1 === config2); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-factory-dla-przycisków\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-factory-dla-przycisków\">>>></a>Zadanie 2: Factory dla przycisków</h3>\n<p>Zaimplementuj prostą fabrykę (Factory Method), która w zależności od przekazanego typu (<code>\"primary\"</code> lub <code>\"secondary\"</code>) zwróci obiekt reprezentujący przycisk z różnymi stylami (np. kolor tła, kolor tekstu). Zdefiniuj wspólny interfejs <code>IButton</code> dla wszystkich typów przycisków.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IButton</span> {\n  <span class=\"hljs-title function_\">render</span>(): <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-title function_\">getStyle</span>(): { <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-built_in\">string</span> };\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PrimaryButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IButton</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;button>Primary Button&#x3C;/button>\"</span>;\n  }\n  <span class=\"hljs-title function_\">getStyle</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"white\"</span> };\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecondaryButton</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IButton</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;button>Secondary Button&#x3C;/button>\"</span>;\n  }\n  <span class=\"hljs-title function_\">getStyle</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">\"gray\"</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"black\"</span> };\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ButtonFactory</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"primary\"</span> | <span class=\"hljs-string\">\"secondary\"</span>): <span class=\"hljs-title class_\">IButton</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">type</span> === <span class=\"hljs-string\">\"primary\"</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PrimaryButton</span>();\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">type</span> === <span class=\"hljs-string\">\"secondary\"</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SecondaryButton</span>();\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">\"Invalid button type\"</span>);\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// Usage:</span>\n<span class=\"hljs-keyword\">const</span> primaryBtn = <span class=\"hljs-title class_\">ButtonFactory</span>.<span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-string\">\"primary\"</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(primaryBtn.<span class=\"hljs-title function_\">render</span>(), primaryBtn.<span class=\"hljs-title function_\">getStyle</span>());\n\n<span class=\"hljs-keyword\">const</span> secondaryBtn = <span class=\"hljs-title class_\">ButtonFactory</span>.<span class=\"hljs-title function_\">createButton</span>(<span class=\"hljs-string\">\"secondary\"</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(secondaryBtn.<span class=\"hljs-title function_\">render</span>(), secondaryBtn.<span class=\"hljs-title function_\">getStyle</span>());\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-builder-do-pizzy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-builder-do-pizzy\">>>></a>Zadanie 3: Builder do pizzy</h3>\n<p>Stwórz klasę <code>OrderBuilder</code>, umożliwiającą budowanie złożonych zamówień w restauracji. Zamówienie może składać się z pizzy (z różnymi składnikami), napojów i deserów. Zaimplementuj metody do dodawania każdego elementu i budowania finalnego obiektu <code>Order</code>.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Order</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">pizzaDetails</span>: <span class=\"hljs-built_in\">string</span>[],\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">drinks</span>: <span class=\"hljs-built_in\">string</span>[],\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">desserts</span>: <span class=\"hljs-built_in\">string</span>[]\n  </span>) {}\n\n  <span class=\"hljs-title function_\">getTotalSummary</span>(): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Order Summary: Pizzas: [<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.pizzaDetails.join(\n      <span class=\"hljs-string\">\", \"</span>\n    )}</span>], Drinks: [<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.drinks.join(<span class=\"hljs-string\">\", \"</span>)}</span>], Desserts: [<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.desserts.join(\n      <span class=\"hljs-string\">\", \"</span>\n    )}</span>]`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderBuilder</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">pizzas</span>: <span class=\"hljs-built_in\">string</span>[] = [];\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">drinks</span>: <span class=\"hljs-built_in\">string</span>[] = [];\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">desserts</span>: <span class=\"hljs-built_in\">string</span>[] = [];\n\n  <span class=\"hljs-title function_\">addPizza</span>(<span class=\"hljs-attr\">pizzaDescription</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">OrderBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pizzas</span>.<span class=\"hljs-title function_\">push</span>(pizzaDescription);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">addDrink</span>(<span class=\"hljs-attr\">drinkName</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">OrderBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">drinks</span>.<span class=\"hljs-title function_\">push</span>(drinkName);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">addDessert</span>(<span class=\"hljs-attr\">dessertName</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">OrderBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">desserts</span>.<span class=\"hljs-title function_\">push</span>(dessertName);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">build</span>(): <span class=\"hljs-title class_\">Order</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Order</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pizzas</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">drinks</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">desserts</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Usage:</span>\n<span class=\"hljs-keyword\">const</span> customerOrder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OrderBuilder</span>()\n  .<span class=\"hljs-title function_\">addPizza</span>(<span class=\"hljs-string\">\"Pepperoni with extra cheese\"</span>)\n  .<span class=\"hljs-title function_\">addPizza</span>(<span class=\"hljs-string\">\"Veggie pizza\"</span>)\n  .<span class=\"hljs-title function_\">addDrink</span>(<span class=\"hljs-string\">\"Coca-Cola\"</span>)\n  .<span class=\"hljs-title function_\">addDessert</span>(<span class=\"hljs-string\">\"Cheesecake\"</span>)\n  .<span class=\"hljs-title function_\">build</span>();\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(customerOrder.<span class=\"hljs-title function_\">getTotalSummary</span>());\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-adapter--stare-i-nowe-api\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-adapter--stare-i-nowe-api\">>>></a>Zadanie 4: Adapter — stare i nowe API</h3>\n<p>Załóż, że masz starą klasę <code>LegacyUserService</code> z metodą <code>fetchUserById(id: string)</code>, która zwraca obiekt użytkownika w starym formacie (<code>{ uid: string; username: string }</code>). Chcesz korzystać z nowego interfejsu <code>NewUserApi</code> z metodą <code>getUser(id: string)</code> zwracającą nowy format (<code>{ id: string; name: string }</code>). Napisz <code>UserApiAdapter</code>.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// Old API format</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">LegacyUser</span> {\n  <span class=\"hljs-attr\">uid</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">username</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LegacyUserService</span> {\n  <span class=\"hljs-title function_\">fetchUserById</span>(<span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">LegacyUser</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Fetching user <span class=\"hljs-subst\">${id}</span> from legacy service.`</span>);\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">uid</span>: id, <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">`user-<span class=\"hljs-subst\">${id}</span>-legacy`</span> };\n  }\n}\n\n<span class=\"hljs-comment\">// New API format</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">NewUser</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">NewUserApi</span> {\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">NewUser</span>;\n}\n\n<span class=\"hljs-comment\">// Adapter</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserApiAdapter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NewUserApi</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">legacyService</span>: <span class=\"hljs-title class_\">LegacyUserService</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">service</span>: <span class=\"hljs-title class_\">LegacyUserService</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">legacyService</span> = service;\n  }\n\n  <span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">NewUser</span> {\n    <span class=\"hljs-keyword\">const</span> legacyUser = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">legacyService</span>.<span class=\"hljs-title function_\">fetchUserById</span>(id);\n    <span class=\"hljs-comment\">// Adapt the old format to the new format</span>\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">id</span>: legacyUser.<span class=\"hljs-property\">uid</span>,\n      <span class=\"hljs-attr\">name</span>: legacyUser.<span class=\"hljs-property\">username</span>,\n    };\n  }\n}\n\n<span class=\"hljs-comment\">// Usage:</span>\n<span class=\"hljs-keyword\">const</span> legacyService = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LegacyUserService</span>();\n<span class=\"hljs-keyword\">const</span> userAdapter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserApiAdapter</span>(legacyService);\n\n<span class=\"hljs-keyword\">const</span> newUser = userAdapter.<span class=\"hljs-title function_\">getUser</span>(<span class=\"hljs-string\">\"abc-123\"</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newUser); <span class=\"hljs-comment\">// { id: \"abc-123\", name: \"user-abc-123-legacy\" }</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-5-strategy--wybór-algorytmu-płatności\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-5-strategy--wybór-algorytmu-płatności\">>>></a>Zadanie 5: Strategy — wybór algorytmu płatności</h3>\n<p>Zaimplementuj trzy strategie płatności: <code>CreditCard</code>, <code>PayPal</code> i <code>CryptoPayment</code> (każda wypisuje w konsoli informację o metodzie płatności i kwocie). Stwórz klasę <code>PaymentProcessor</code> (kontekst), która umożliwi wybór i zmianę strategii w trakcie działania programu.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CreditCardPayment</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Payment via Credit Card: <span class=\"hljs-subst\">${amount}</span> units.`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PayPalPayment</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Payment via PayPal: <span class=\"hljs-subst\">${amount}</span> units.`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CryptoPayment</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n  <span class=\"hljs-title function_\">pay</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n      <span class=\"hljs-string\">`Payment via Cryptocurrency: <span class=\"hljs-subst\">${amount}</span> units (might fluctuate).`</span>\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PaymentProcessor</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">strategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">initialStrategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">strategy</span> = initialStrategy;\n  }\n\n  <span class=\"hljs-title function_\">setStrategy</span>(<span class=\"hljs-attr\">strategy</span>: <span class=\"hljs-title class_\">PaymentStrategy</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">strategy</span> = strategy;\n  }\n\n  <span class=\"hljs-title function_\">processPayment</span>(<span class=\"hljs-attr\">amount</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">strategy</span>.<span class=\"hljs-title function_\">pay</span>(amount);\n  }\n}\n\n<span class=\"hljs-comment\">// Usage:</span>\n<span class=\"hljs-keyword\">const</span> processor = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PaymentProcessor</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CreditCardPayment</span>());\nprocessor.<span class=\"hljs-title function_\">processPayment</span>(<span class=\"hljs-number\">100.5</span>);\n\nprocessor.<span class=\"hljs-title function_\">setStrategy</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PayPalPayment</span>());\nprocessor.<span class=\"hljs-title function_\">processPayment</span>(<span class=\"hljs-number\">250.0</span>);\n\nprocessor.<span class=\"hljs-title function_\">setStrategy</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CryptoPayment</span>());\nprocessor.<span class=\"hljs-title function_\">processPayment</span>(<span class=\"hljs-number\">75.2</span>);\n</code></pre>\n</details>\n<hr>\n<p>To dopiero początek! Każdy z tych wzorców ma swoje warianty, rozbudowane zastosowania i pułapki, których warto unikać. Kontynuuj eksplorację i pamiętaj, że najlepszym sposobem na naukę wzorców jest ich aktywne stosowanie w swoich projektach. Jakie są Twoje ulubione wzorce projektowe?</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wzorce-projektowe.md","13 minut",{"_21":844,"_23":845,"_25":846,"_6":857,"_36":858,"_38":859,"_91":902,"_93":903,"_95":904,"_97":905,"_99":288},"Wprowadzenie do Git i GitHub","Kompleksowy kurs wprowadzający do systemu kontroli wersji Git oraz platformy GitHub. Poznaj podstawowe pojęcia, komendy oraz narzędzia do pracy zespołowej i automatyzacji.",[847,848,849,850,851,852,853,854,855,856,34],"Git","GitHub","kontrola wersji","repozytorium","commit","branch","pull request","CI/CD","GitHub Actions","GitHub Pages",[17],"2025-06-05T00:00:00.000Z",{"_21":860,"_41":861},"Quiz: Podstawy Git i GitHub",[862,870,878,886,894],{"_44":863,"_46":864,"_52":80,"_54":869},"<p>Co oznacza skrót VCS?</p>",[865,866,867,868],"Versioned Coding System","Version Control System","Virtual Clone Service","Verified Commit Syntax","VCS to Version Control System, czyli system kontroli wersji.",{"_44":871,"_46":872,"_52":53,"_54":877},"<p>Co robi polecenie 'git clone'?</p>",[873,874,875,876],"Tworzy nową gałąź","Zatwierdza zmiany do historii","Łączy zmiany z innego repozytorium","Pobiera całe repozytorium zdalne na lokalny komputer","'git clone' kopiuje całe repozytorium wraz z historią na Twój komputer.",{"_44":879,"_46":880,"_52":71,"_54":885},"<p>Czym jest commit w Gicie?</p>",[881,882,883,884],"Zapis zmian w repozytorium z opisem","Automatyczne pobieranie zmian","Zdalne repozytorium","Nowa gałąź","Commit to zapis zmian, który trafia do historii projektu i ma komentarz.",{"_44":887,"_46":888,"_52":53,"_54":893},"<p>Jak nazywa się prośba o połączenie zmian na GitHubie?</p>",[889,890,891,892],"Push request","Branch request","Merge commit","Pull request","Pull request to prośba o połączenie zmian z inną gałęzią.",{"_44":895,"_46":896,"_52":71,"_54":901},"<p>Która platforma NIE jest alternatywą dla GitHub?</p>",[897,898,899,900],"Stack Overflow","Azure DevOps","GitLab","Bitbucket","Stack Overflow to portal Q&A, nie platforma hostingu repozytoriów.","81f8a075-d3bb-4720-98e6-c566dd55813b","wprowadzenie-do-git-i-github","<p>Witaj w świecie <strong>Git i GitHub</strong>! 🚀 Jeśli chcesz profesjonalnie zarządzać swoimi projektami kodowania, współpracować z innymi programistami i śledzić każdą zmianę, to trafiłeś/aś idealnie. Ten kurs to Twój przystępny przewodnik, który wprowadzi Cię w podstawy kontroli wersji, kluczowe komendy Git oraz możliwości, jakie oferuje platforma GitHub. Gotowy/a na nową, efektywną pracę z kodem? Zaczynajmy! ✨</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-system-kontroli-wersji\">Czym jest system kontroli wersji?</a></li>\n<li><a href=\"#co-to-jest-git\">Co to jest Git?</a></li>\n<li><a href=\"#repozytorium-branch-commit\">Repozytorium, branch, commit</a>\n<ul>\n<li><a href=\"#repozytorium\">Co to jest repozytorium?</a></li>\n<li><a href=\"#branch-ga%C5%82%C4%85%C5%BA\">Co to jest branch/gałąź?</a></li>\n<li><a href=\"#commit\">Co to jest commit?</a></li>\n</ul>\n</li>\n<li><a href=\"#fundamentalne-komendy-gita-commit-checkout-pull-push-clone\">Fundamentalne komendy Git’a</a>\n<ul>\n<li><a href=\"#git-clone\"><code>git clone</code></a></li>\n<li><a href=\"#git-checkout-oraz-git-switch\"><code>git checkout</code> oraz <code>git switch</code></a></li>\n<li><a href=\"#git-add\"><code>git add</code></a></li>\n<li><a href=\"#git-commit\"><code>git commit</code></a></li>\n<li><a href=\"#git-pull\"><code>git pull</code></a></li>\n<li><a href=\"#git-push\"><code>git push</code></a></li>\n<li><a href=\"#git-status\"><code>git status</code></a></li>\n<li><a href=\"#git-log\"><code>git log</code></a></li>\n</ul>\n</li>\n<li><a href=\"#czym-jest-github-przyk%C5%82adowe-alternatywy\">Czym jest Github? Przykładowe alternatywy</a></li>\n<li><a href=\"#pull-request---z-czym-to-si%C4%99-je\">Pull request - z czym to się je?</a></li>\n<li><a href=\"#github-actions---podstawy-cicd\">Github actions - podstawy CI/CD</a></li>\n<li><a href=\"#github-pages---mo%C5%BCliwo%C5%9B%C4%87-wystawienia-naszej-aplikacji-na-%C5%9Bwiat\">Github pages - możliwość wystawienia naszej aplikacji na świat</a></li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-system-kontroli-wersji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-system-kontroli-wersji\">>></a>Czym jest system kontroli wersji?</h2>\n<p>System kontroli wersji (VCS, czyli <strong>Version Control System</strong>) to narzędzie, które umożliwia śledzenie wszystkich zmian w projekcie, cofanie się do wcześniejszych wersji oraz bezpieczną współpracę z innymi osobami. Pozwala na zarządzanie historią plików i ułatwia organizację pracy nad kodem. To jak cofanie w czasie dla Twojego projektu! ⏳</p>\n<p><strong>Dlaczego warto używać systemu kontroli wersji?</strong> 🎯</p>\n<ul>\n<li>Pełna historia zmian w plikach.</li>\n<li>Możliwość powrotu do dowolnej wersji projektu. 🔙</li>\n<li>Praca zespołowa bez ryzyka nadpisania czyjejś pracy. 🤝</li>\n<li>Lepsza organizacja i bezpieczeństwo kodu. 🛡️</li>\n</ul>\n<hr>\n<h2 id=\"co-to-jest-git\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-git\">>></a>Co to jest Git?</h2>\n<p>Git to najpopularniejszy system kontroli wersji na świecie, stworzony przez Linusa Torvaldsa (twórcę Linuksa). Pozwala na pracę zarówno lokalną na komputerze, jak i w chmurze, zapewniając bezpieczeństwo i elastyczność zarządzania projektem. To Twój osobisty \"strażnik\" kodu. 🧑‍💻</p>\n<p><strong>Co wyróżnia Gita?</strong> 🏆</p>\n<ul>\n<li>Możliwość pracy offline.</li>\n<li>Łatwe cofanie się do poprzednich wersji. ↩️</li>\n<li>Wsparcie dla <strong>gałęzi (branches)</strong>, dzięki którym można testować nowe pomysły bez wpływu na główną wersję projektu. 🌱</li>\n</ul>\n<hr>\n<h2 id=\"repozytorium-branch-commit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#repozytorium-branch-commit\">>></a>Repozytorium, branch, commit</h2>\n<p>Te trzy pojęcia są podstawą pracy z Gitem i GitHubem. Zrozumienie ich znaczenia i działania pozwala sprawnie korzystać z systemu kontroli wersji. To fundamenty, na których zbudujesz swoją wiedzę. 🏗️</p>\n<h3 id=\"repozytorium\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#repozytorium\">>>></a>Repozytorium</h3>\n<p><strong>Repozytorium</strong> (ang. repository) to miejsce przechowywania całego projektu wraz z historią zmian. Może być lokalne (na komputerze) lub zdalne (np. na GitHubie). Pomyśl o nim jak o sejfie na Twój kod. 🔐</p>\n<p><strong>Co znajduje się w repozytorium?</strong></p>\n<ul>\n<li>Pliki projektu (kody źródłowe, dokumentacja) 📄</li>\n<li>Ukryty folder <code>.git</code> z historią zmian</li>\n<li>Informacje o commitach, gałęziach i tagach</li>\n</ul>\n<p><strong>Typowe operacje:</strong> 🛠️</p>\n<ul>\n<li>Tworzenie nowego repozytorium: <code>git init</code></li>\n<li>Pobranie repozytorium z internetu: <code>git clone &#x3C;adres_repo></code></li>\n</ul>\n<h3 id=\"branch-gałąź\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#branch-gałąź\">>>></a>Branch (gałąź)</h3>\n<p><strong>Gałąź</strong> pozwala pracować nad różnymi funkcjonalnościami równolegle. Dzięki gałęziom możesz eksperymentować i rozwijać nowe funkcje bez wpływu na główną wersję kodu. To jak równoległe wymiary dla Twojego projektu. 🌳</p>\n<p><strong>Dlaczego warto używać gałęzi?</strong></p>\n<ul>\n<li>Testowanie nowych funkcji bez ryzyka dla głównej wersji projektu (zazwyczaj gałąź <code>main</code> lub <code>master</code>). 🧪</li>\n<li>Każdy członek zespołu może pracować na własnej gałęzi. 🧑‍🤝‍🧑</li>\n<li>Możliwość łączenia (<strong>merge</strong>) zmian z różnych gałęzi.</li>\n</ul>\n<p><strong>Typowe operacje:</strong> 🌿</p>\n<ul>\n<li>Tworzenie gałęzi: <code>git branch &#x3C;nazwa_gałęzi></code></li>\n<li>Przełączanie się na gałąź: <code>git checkout &#x3C;nazwa_gałęzi></code> lub <code>git switch &#x3C;nazwa_gałęzi></code></li>\n<li>Łączenie gałęzi: <code>git merge &#x3C;nazwa_gałęzi></code></li>\n</ul>\n<h3 id=\"commit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#commit\">>>></a>Commit</h3>\n<p><strong>Commit</strong> to zapis zmian w projekcie wraz z opisem. Każdy commit jest jak punkt kontrolny w historii projektu. To Twój cyfrowy \"snapshot\" postępów. 📸</p>\n<p><strong>Cechy commitów:</strong></p>\n<ul>\n<li>Każdy commit ma unikalny identyfikator (<strong>hash</strong>).</li>\n<li>Opis commita powinien informować o dokonanych zmianach. 💬</li>\n<li>Możliwość powrotu do dowolnego commita.</li>\n</ul>\n<p><strong>Tworzenie commita:</strong> 💾</p>\n<ol>\n<li>Dodanie plików do obszaru staging:\n<code>git add &#x3C;plik></code> lub <code>git add .</code></li>\n<li>Zapisanie zmian:\n<code>git commit -m \"Opis zmian\"</code></li>\n</ol>\n<hr>\n<h2 id=\"fundamentalne-komendy-gita-commit-checkout-pull-push-clone\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#fundamentalne-komendy-gita-commit-checkout-pull-push-clone\">>></a>Fundamentalne komendy Git’a: commit, checkout, pull, push, clone</h2>\n<p>Poniżej znajdują się szczegółowe opisy najważniejszych komend Git'a wraz z zastosowaniem i przykładami. Przy każdej znajdziesz praktyczną instrukcję użycia. To Twój niezbędnik programisty! 📖</p>\n<h3 id=\"git-clone\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-clone\">>>></a><code>git clone</code></h3>\n<p>Klonuje istniejące repozytorium z internetu na komputer. Dzięki temu masz lokalną kopię projektu, nad którą możesz pracować. 📥</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/uzytkownik/projekt.git\n</code></pre>\n<p>Po tej komendzie otrzymujesz pełną kopię repozytorium z całą historią zmian.</p>\n<hr>\n<h3 id=\"git-checkout-oraz-git-switch\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-checkout-oraz-git-switch\">>>></a><code>git checkout</code> oraz <code>git switch</code></h3>\n<p>Służą do przełączania się między gałęziami lub do konkretnego commita. Pozwalają na łatwe poruszanie się po różnych wersjach projektu. ↔️</p>\n<ul>\n<li>Przełączenie na inną gałąź:\n<pre><code class=\"hljs language-bash\">git checkout nazwa_gałęzi\n<span class=\"hljs-comment\"># lub</span>\ngit switch nazwa_gałęzi\n</code></pre>\n</li>\n<li>Przełączenie do konkretnego commita (tylko do odczytu):\n<pre><code class=\"hljs language-bash\">git checkout hash_commita\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"git-add\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-add\">>>></a><code>git add</code></h3>\n<p>Dodaje zmienione pliki do obszaru staging, przygotowując je do commita. To jakbyś pakował/a pliki do paczki przed wysłaniem. 📦</p>\n<ul>\n<li>Dodanie pojedynczego pliku:\n<pre><code class=\"hljs language-bash\">git add index.html\n</code></pre>\n</li>\n<li>Dodanie wszystkich plików:\n<pre><code class=\"hljs language-bash\">git add .\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"git-commit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-commit\">>>></a><code>git commit</code></h3>\n<p>Zapisuje zmiany w repozytorium wraz z opisem. To \"zatwierdzenie\" Twoich zmian w historii projektu. ✅</p>\n<pre><code class=\"hljs language-bash\">git commit -m <span class=\"hljs-string\">\"Opis zmian\"</span>\n</code></pre>\n<p>Opis powinien być zwięzły i informować, co zostało zmienione. Pamiętaj o dobrych praktykach pisania commit messages! 📝</p>\n<hr>\n<h3 id=\"git-pull\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-pull\">>>></a><code>git pull</code></h3>\n<p>Pobiera najnowsze zmiany z repozytorium zdalnego do lokalnego i automatycznie je łączy. Zawsze używaj tej komendy przed rozpoczęciem pracy, aby mieć najaktualniejszą wersję! ⬇️⬆️</p>\n<pre><code class=\"hljs language-bash\">git pull\n</code></pre>\n<hr>\n<h3 id=\"git-push\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-push\">>>></a><code>git push</code></h3>\n<p>Wysyła lokalne zmiany (commity) do repozytorium zdalnego. Dzielisz się swoją pracą ze światem (lub z zespołem). 📤</p>\n<pre><code class=\"hljs language-bash\">git push\n</code></pre>\n<p>Możesz również wskazać nazwę zdalnego repozytorium i gałęzi:</p>\n<pre><code class=\"hljs language-bash\">git push origin nowa-funkcja\n</code></pre>\n<hr>\n<h3 id=\"git-status\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-status\">>>></a><code>git status</code></h3>\n<p>Pokazuje aktualny stan repozytorium: które pliki zostały zmienione, które są przygotowane do commita, a które nie. To Twój szybki podgląd sytuacji. 📊</p>\n<pre><code class=\"hljs language-bash\">git status\n</code></pre>\n<hr>\n<h3 id=\"git-log\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#git-log\">>>></a><code>git log</code></h3>\n<p>Pokazuje historię wszystkich commitów w repozytorium. Możesz zobaczyć, kto, kiedy i co zmieniał. 📜</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span>\n</code></pre>\n<hr>\n<h2 id=\"czym-jest-github-przykładowe-alternatywy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-github-przykładowe-alternatywy\">>></a>Czym jest Github? Przykładowe alternatywy</h2>\n<p>GitHub to platforma umożliwiająca przechowywanie projektów opartych o Git, dzielenie się kodem i współpracę w zespole. Umożliwia zarządzanie projektami, recenzowanie kodu i automatyzację procesów. To swoisty \"hub\" dla programistów i projektów open source. Bez wątpienia to najpopularniejsza platforma, ale są też inne. 🌐</p>\n<p><strong>Inne popularne platformy:</strong></p>\n<ul>\n<li>GitLab</li>\n<li>Bitbucket</li>\n<li>Azure DevOps</li>\n</ul>\n<hr>\n<h2 id=\"pull-request---z-czym-to-się-je\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pull-request---z-czym-to-się-je\">>></a>Pull request - z czym to się je?</h2>\n<p><strong>Pull request (PR)</strong> to prośba o akceptację i połączenie Twoich zmian z główną wersją projektu. Jest to podstawowy element pracy zespołowej na GitHubie, pozwalający na recenzowanie kodu i dyskusję przed włączeniem zmian. To Twoja prośba o \"wpuszczenie\" zmian do głównej linii rozwoju. 🙏</p>\n<p><strong>Proces pull request:</strong> 👥</p>\n<ol>\n<li>Tworzysz nową gałąź i wprowadzasz w niej zmiany. ✏️</li>\n<li>Otwierasz pull request na GitHubie.</li>\n<li>Inni członkowie zespołu sprawdzają kod i mogą komentować lub zgłaszać poprawki. 💬</li>\n<li>Po akceptacji zmiany są łączone z główną gałęzią projektu. 🤝</li>\n</ol>\n<hr>\n<h2 id=\"github-actions---podstawy-cicd\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#github-actions---podstawy-cicd\">>></a>Github actions - podstawy CI/CD</h2>\n<p>GitHub Actions to narzędzie do automatyzacji zadań takich jak testowanie, budowanie i wdrażanie aplikacji. Pozwala tworzyć workflowy, które wykonują się automatycznie po spełnieniu określonych warunków (np. po każdym commicie). To Twój osobisty robot do zadań specjalnych! 🤖</p>\n<p><strong>Główne pojęcia:</strong> ⚙️</p>\n<ul>\n<li><strong>Workflow</strong> – zestaw zadań wykonywanych automatycznie.</li>\n<li>Konfiguracja w plikach YAML w folderze <code>.github/workflows/</code>.</li>\n</ul>\n<hr>\n<h2 id=\"github-pages---możliwość-wystawienia-naszej-aplikacji-na-świat\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#github-pages---możliwość-wystawienia-naszej-aplikacji-na-świat\">>></a>Github pages - możliwość wystawienia naszej aplikacji na świat</h2>\n<p>GitHub Pages umożliwia publikowanie stron internetowych lub portfolio bez konieczności posiadania własnego serwera. Strona jest dostępna online bezpośrednio z repozytorium, co jest idealne dla projektów open source, dokumentacji czy portfolio dewelopera. Pokaż swój projekt światu! 🌍</p>\n<p><strong>Jak to zrobić?</strong> 🚀</p>\n<ol>\n<li>Utwórz repozytorium z plikami strony (HTML, CSS, JS).</li>\n<li>W ustawieniach repozytorium aktywuj GitHub Pages.</li>\n<li>Strona będzie dostępna pod adresem:\n<code>https://&#x3C;twoja-nazwa-użytkownika>.github.io/&#x3C;nazwa-repo></code></li>\n</ol>\n<hr>\n<p>To tylko wstęp – każdy z tych tematów można rozwinąć o praktyczne przykłady i ćwiczenia, które pozwolą lepiej zrozumieć narzędzia i procesy pracy z Git oraz GitHubem. Czy masz konkretne pytania dotyczące któregoś z tych aspektów, które chciałbyś/chciałabyś zgłębić? 🤔</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-git-i-github.md",{"_21":907,"_23":908,"_25":909,"_6":913,"_36":914,"_38":915,"_91":957,"_93":958,"_95":959,"_97":960,"_99":100},"Wprowadzenie do Semantycznego HTML","Semantyczny HTML polega na używaniu elementów HTML, które jednoznacznie opisują swoje znaczenie i cel. Elementy semantyczne nie tylko definiują strukturę dokumentu, ale również pomagają w interpretacji jego zawartości zarówno przez przeglądarki, jak i przez wyszukiwarki internetowe oraz technologie wspomagające (np. czytniki ekranowe).",[9,910,911,912,34],"semantyka","seo","dostępność",[9],"2024-07-05T00:00:00.000Z",{"_21":916,"_41":917},"Quiz: Semantyczny HTML",[918,926,934,942,949],{"_44":919,"_46":920,"_52":89,"_54":925},"<p>Który element HTML najlepiej nadaje się do oznaczenia głównej treści strony?</p>",[921,922,923,924],"<section>","<aside>","<main>","<header>","Element <main> służy do oznaczenia głównej, unikatowej treści dokumentu.",{"_44":927,"_46":928,"_52":53,"_54":933},"<p>Do czego służy element <code>&#x3C;nav></code>?</p>",[929,930,931,932],"Do wyświetlania stopki strony","Do osadzania obrazka z podpisem","Do oznaczania artykułu","Do grupowania linków nawigacyjnych na stronie","Element <nav> grupuje linki prowadzące do różnych części witryny lub innych stron.",{"_44":935,"_46":936,"_52":89,"_54":941},"<p>Gdzie możesz legalnie umieścić element <code>&#x3C;footer></code>?</p>",[937,938,939,940],"Wyłącznie w <aside>","Tylko w <main>","Na końcu całej strony lub na końcu sekcji/artykułu","Tylko na początku strony","<footer> może być użyty zarówno dla całej strony, jak i dla poszczególnych sekcji czy artykułów.",{"_44":943,"_46":944,"_52":80,"_54":948},"<p>Który element HTML semantyczny najlepiej nadaje się na poboczny panel z reklamami lub linkami powiązanymi?</p>",[945,922,946,947],"<figure>","<mark>","<time>","<aside> przeznaczony jest na treści poboczne, niezwiązane bezpośrednio z główną osią tematyczną.",{"_44":950,"_46":951,"_52":80,"_54":956},"<p>Jakiego atrybutu użyjesz z <code>&#x3C;time></code>, by data była czytelna dla maszyn?</p>",[952,953,954,955],"format","datetime","date","machine","Atrybut datetime pozwala maszynom poprawnie interpretować podaną datę/czas.","00841d4b-2bfc-44d5-b005-5d33bc3347d7","semantyczny-html","<p>Witaj w świecie Semantycznego HTML! 🌍 Jeśli tworzysz strony internetowe, to na pewno zależy Ci, by były one nie tylko ładne wizualnie, ale też dobrze \"rozumiane\" przez przeglądarki, wyszukiwarki i technologie wspomagające. Właśnie w tym pomoże Ci semantyka! Zamiast polegać tylko na generycznych elementach jak </p><div> czy <span>, nauczysz się używać znaczników, które jednoznacznie opisują swoje znaczenie i cel. Gotowy/a na budowanie stron, które są inteligentne i dostępne dla wszystkich? Zaczynamy! 🚀<p></p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#co-to-jest-semantyczny-html\">Co to jest Semantyczny HTML?</a></li>\n<li><a href=\"#dlaczego-warto-u%C5%BCywa%C4%87-semantycznego-html\">Dlaczego warto używać Semantycznego HTML?</a></li>\n<li><a href=\"#kluczowe-elementy-semantycznego-html\">Kluczowe elementy Semantycznego HTML</a>\n<ul>\n<li><a href=\"#doctype-html\"><code>&#x3C;!DOCTYPE html></code></a></li>\n<li><a href=\"#header\"><code>&#x3C;header></code></a></li>\n<li><a href=\"#nav\"><code>&#x3C;nav></code></a></li>\n<li><a href=\"#main\"><code>&#x3C;main></code></a></li>\n<li><a href=\"#article\"><code>&#x3C;article></code></a></li>\n<li><a href=\"#section\"><code>&#x3C;section></code></a></li>\n<li><a href=\"#aside\"><code>&#x3C;aside></code></a></li>\n<li><a href=\"#footer\"><code>&#x3C;footer></code></a></li>\n<li><a href=\"#figure-i-figcaption\"><code>&#x3C;figure></code> i <code>&#x3C;figcaption></code></a></li>\n<li><a href=\"#time\"><code>&#x3C;time></code></a></li>\n<li><a href=\"#mark\"><code>&#x3C;mark></code></a></li>\n<li><a href=\"#address\"><code>&#x3C;address></code></a></li>\n</ul>\n</li>\n<li><a href=\"#pu%C5%82apki-i-najlepsze-praktyki\">Pułapki i najlepsze praktyki</a></li>\n<li><a href=\"#podsumowanie\">Podsumowanie</a></li>\n<li><a href=\"#zadania-praktyczne\">Zadania praktyczne</a>\n<ul>\n<li><a href=\"#zadanie-1-podstawowa-struktura\">Zadanie 1: Podstawowa struktura</a></li>\n<li><a href=\"#zadanie-2-rozbudowa-o-tre%C5%9B%C4%87-i-sidebar\">Zadanie 2: Rozbudowa o treść i sidebar</a></li>\n<li><a href=\"#zadanie-3-ilustracja-z-opisem\">Zadanie 3: Ilustracja z opisem</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"co-to-jest-semantyczny-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-semantyczny-html\">>></a>Co to jest Semantyczny HTML?</h2>\n<p><strong>Semantyczny HTML</strong> to podejście do tworzenia struktury dokumentów HTML, które polega na używaniu odpowiednich tagów (elementów) do opisania znaczenia i roli poszczególnych części strony. Zamiast używać wszędzie generycznych <code>&#x3C;div></code> lub <code>&#x3C;span></code>, stosujemy elementy, które mają wbudowane znaczenie – tak, aby przeglądarka, silniki wyszukiwarek i technologie wspomagające (np. czytniki ekranowe dla osób niewidomych) mogły łatwo zrozumieć, co reprezentuje dany fragment kodu.</p>\n<p>Pomyśl o tym tak:</p>\n<ul>\n<li><strong>HTML bez semantyki</strong> jest jak książka, w której wszystkie rozdziały są po prostu zaznaczone pogrubionym tekstem – niby wiesz, że to rozdział, ale nie ma jasnego oznaczenia, że to <em>jest</em> rozdział.</li>\n<li><strong>HTML semantyczny</strong> jest jak książka z wyraźnie oznaczonymi tytułami rozdziałów, spisem treści, numeracją stron i indeksami. Wszystko jest na swoim miejscu i łatwo to znaleźć.</li>\n</ul>\n<h2 id=\"dlaczego-warto-używać-semantycznego-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dlaczego-warto-używać-semantycznego-html\">>></a>Dlaczego warto używać Semantycznego HTML?</h2>\n<p>Stosowanie semantycznych znaczników to nie tylko dobry styl kodowania, ale też przynosi realne korzyści:</p>\n<ol>\n<li><strong>Dostępność (Accessibility) 💪:</strong> Jest to absolutnie kluczowe dla osób korzystających z czytników ekranowych. Kiedy czytnik napotka <code>&#x3C;nav></code>, \"wie\", że to jest nawigacja i może poinformować o tym użytkownika, pozwalając mu szybko przejść do interesujących go sekcji. Bez semantyki, czytnik po prostu czyta \"div\", co nie daje żadnego kontekstu.</li>\n<li><strong>SEO (Search Engine Optimization) 📈:</strong> Wyszukiwarki, takie jak Google, wykorzystują semantyczne znaczniki do zrozumienia struktury i kontekstu treści na stronie. Lepsze zrozumienie = potencjalnie wyższe pozycje w wynikach wyszukiwania. Wyszukiwarka \"wie\", że to, co znajduje się w <code>&#x3C;main></code>, jest najważniejszą treścią, a to, co w <code>&#x3C;footer></code>, to stopka.</li>\n<li><strong>Łatwiejsza konserwacja i czytelność kodu 🧑‍💻:</strong> Ty (i inni deweloperzy) szybciej zrozumiecie, co dany blok kodu reprezentuje. Widząc <code>&#x3C;article></code> od razu wiesz, że to samodzielna treść, a nie przypadkowy <code>&#x3C;div></code>. To ułatwia rozbudowę i debugowanie.</li>\n<li><strong>Wsparcie dla przyszłych technologii:</strong> W miarę rozwoju sieci, nowe technologie i narzędzia będą w stanie lepiej wykorzystywać semantyczną strukturę dokumentu.</li>\n</ol>\n<h2 id=\"kluczowe-elementy-semantycznego-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#kluczowe-elementy-semantycznego-html\">>></a>Kluczowe elementy Semantycznego HTML</h2>\n<p>Poznajmy najważniejsze elementy semantyczne wprowadzone w HTML5, które pomogą Ci budować lepsze strony.</p>\n<h3 id=\"doctype-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#doctype-html\">>>></a><code>&#x3C;!DOCTYPE html></code></h3>\n<p>Chociaż nie jest to element HTML w ścisłym tego słowa znaczeniu, a raczej deklaracja, to właśnie od niej zaczynamy każdy nowoczesny dokument HTML. Informuje przeglądarkę, że ma do czynienia z HTML5. Jest to pierwszy krok do zapewnienia prawidłowej interpretacji całej reszty semantycznego kodu.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Moja Semantyczna Strona<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h3 id=\"header\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#header\">>>></a><code>&#x3C;header></code></h3>\n<p>Element <code>&#x3C;header></code> reprezentuje sekcję wprowadzającą lub grupę elementów nawigacyjnych. Zazwyczaj zawiera tytuł sekcji lub całej strony, logo, a także podstawową nawigację. Możesz mieć wiele elementów <code>&#x3C;header></code> na stronie, np. jeden dla całej strony, a drugi dla pojedynczego artykułu.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"logo.png\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Logo firmy\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Witaj na mojej stronie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>></span>Strona główna<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/o-nas\"</span>></span>O nas<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n</code></pre>\n<p><em>Pamiętaj, że <code>&#x3C;header></code> to nie to samo co nagłówki <code>&#x3C;h1></code> do <code>&#x3C;h6></code>! <code>&#x3C;header></code> to sekcja, w której nagłówki mogą się znajdować.</em></p>\n<h3 id=\"nav\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#nav\">>>></a><code>&#x3C;nav></code></h3>\n<p>Element <code>&#x3C;nav></code> służy do grupowania głównych linków nawigacyjnych na stronie. To oznacza, że nie każdy zestaw linków powinien być w <code>&#x3C;nav></code>, ale tylko te, które są kluczowe dla nawigacji po serwisie.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#produkty\"</span>></span>Produkty<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#uslugi\"</span>></span>Usługi<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#kontakt\"</span>></span>Kontakt<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n</code></pre>\n<p><em>Zestawy małych linków, np. w stopce, zazwyczaj nie wymagają umieszczania w <code>&#x3C;nav></code>, chyba że stanowią główną nawigację stopki.</em></p>\n<h3 id=\"main\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#main\">>>></a><code>&#x3C;main></code></h3>\n<p>Element <code>&#x3C;main></code> reprezentuje <strong>główną treść</strong> dokumentu. Jest to treść, która jest unikatowa dla danej strony, wyłączając powtarzalne bloki, takie jak nagłówki, stopki, sidebary czy nawigacje. Na stronie powinien znajdować się <strong>tylko jeden</strong> element <code>&#x3C;main></code>.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Nasza oferta<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Zapoznaj się z szerokim asortymentem naszych produktów...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"produkt.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Zdjęcie produktu\"</span> /></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n</code></pre>\n<h3 id=\"article\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#article\">>>></a><code>&#x3C;article></code></h3>\n<p>Element <code>&#x3C;article></code> reprezentuje <strong>niezależną, samodzielną jednostkę treści</strong>, która ma sens nawet poza kontekstem całej strony. Myśl o nim jak o pełnym artykule, wpisie na blogu, komentarzu, poście na forum czy widgetcie.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Tytuł artykułu na blogu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Przedstawiamy dziś innowacyjne podejście do web developmentu...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Autor: Jan Kowalski, <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">time</span> <span class=\"hljs-attr\">datetime</span>=<span class=\"hljs-string\">\"2024-07-05\"</span>></span>5 lipca 2024<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">time</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n</code></pre>\n<p><em>Na jednej stronie możesz mieć wiele <code>&#x3C;article></code>.</em></p>\n<h3 id=\"section\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#section\">>>></a><code>&#x3C;section></code></h3>\n<p>Element <code>&#x3C;section></code> służy do grupowania powiązanych tematycznie treści. Może być używany do dzielenia strony na logiczne sekcje, takie jak wprowadzenie, rozdziały, podsumowania, bloki tematyczne. Każda sekcja powinna mieć zazwyczaj swój własny nagłówek (np. <code>&#x3C;h1></code> do <code>&#x3C;h6></code>).</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>O nas<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Nasza firma istnieje na rynku od 2000 roku...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Kontakt<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Skontaktuj się z nami poprzez formularz lub dane poniżej.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n</code></pre>\n<p><em>Element <code>&#x3C;section></code> powinien grupować treści, które są ze sobą tematycznie powiązane. Jeśli blok treści nie ma logicznego nagłówka lub jest tylko kontenerem do stylizacji, lepiej użyć <code>&#x3C;div></code>.</em></p>\n<h3 id=\"aside\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#aside\">>>></a><code>&#x3C;aside></code></h3>\n<p>Element <code>&#x3C;aside></code> służy do oznaczania treści, która jest powiązana z główną treścią dokumentu, ale jest od niej <strong>niezależna i może być traktowana jako poboczna</strong>. Często używa się go do sidebarów, boksów z cytatami, reklam, linków powiązanych lub dodatkowych informacji.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Główna treść artykułu o historii motoryzacji.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">aside</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Ciekawostki historyczne<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Pierwszy samochód<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Znaczenie silnika parowego<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">aside</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Dalsza część artykułu...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n</code></pre>\n<h3 id=\"footer\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#footer\">>>></a><code>&#x3C;footer></code></h3>\n<p>Element <code>&#x3C;footer></code> reprezentuje stopkę dla jego najbliższego rodzica będącego elementem sekcjonującym (np. <code>&#x3C;body></code>, <code>&#x3C;article></code>, <code>&#x3C;section></code>). Zazwyczaj zawiera informacje o autorze, prawa autorskie, linki do polityki prywatności, dane kontaktowe czy linki do mediów społecznościowych.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-symbol\">&#x26;copy;</span> 2024 Twoja Firma. Wszelkie prawa zastrzeżone.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">address</span>></span>\n    Email: <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"mailto:info@twojafirma.com\"</span>></span>info@twojafirma.com<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">address</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n</code></pre>\n<p><em>Możesz mieć wiele stopek na stronie: jedną dla całego dokumentu i po jednej dla każdego <code>&#x3C;article></code> czy <code>&#x3C;section></code>.</em></p>\n<h3 id=\"figure-i-figcaption\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#figure-i-figcaption\">>>></a><code>&#x3C;figure></code> i <code>&#x3C;figcaption></code></h3>\n<p>Element <code>&#x3C;figure></code> służy do grupowania treści medialnych (takich jak obrazy, diagramy, kody, filmy) wraz z ich podpisami. <code>&#x3C;figcaption></code> to semantyczny podpis dla zawartości <code>&#x3C;figure></code>.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">figure</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"wykres-sprzedazy.png\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Wykres rocznej sprzedaży\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">figcaption</span>></span>Roczny wykres sprzedaży produktów A i B.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">figcaption</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">figure</span>></span>\n</code></pre>\n<p><em>Dzięki nim czytniki ekranowe wiedzą, że obrazek i tekst są ze sobą powiązane, co poprawia kontekst dla użytkowników.</em></p>\n<h3 id=\"time\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#time\">>>></a><code>&#x3C;time></code></h3>\n<p>Element <code>&#x3C;time></code> reprezentuje konkretny moment w czasie lub zakres dat. Kluczowy jest tutaj atrybut <code>datetime</code>, który pozwala podać datę/czas w formacie zrozumiałem dla maszyn, niezależnie od tego, jak jest sformatowany dla ludzi.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n  Wydarzenie miało miejsce\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">time</span> <span class=\"hljs-attr\">datetime</span>=<span class=\"hljs-string\">\"2024-06-29T19:00\"</span>></span>29 czerwca o 19:00<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">time</span>></span>.\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Artykuł opublikowano: <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">time</span> <span class=\"hljs-attr\">datetime</span>=<span class=\"hljs-string\">\"2024-07-05\"</span>></span>5 lipca 2024<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">time</span>></span>.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n</code></pre>\n<h3 id=\"mark\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#mark\">>>></a><code>&#x3C;mark></code></h3>\n<p>Element <code>&#x3C;mark></code> służy do wyróżnienia (podświetlenia) fragmentu tekstu, który jest ważny w danym kontekście. Często używa się go do zaznaczania wyników wyszukiwania.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Znaleziono wyniki dla frazy: <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">mark</span>></span>semantyczny HTML<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">mark</span>></span>.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n</code></pre>\n<h3 id=\"address\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#address\">>>></a><code>&#x3C;address></code></h3>\n<p>Element <code>&#x3C;address></code> reprezentuje dane kontaktowe dla najbliższego <code>&#x3C;article></code> lub <code>&#x3C;body></code>. Może zawierać imię i nazwisko autora/organizacji, adres fizyczny, numer telefonu, adres e-mail lub adres URL.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">address</span>></span>\n    Napisane przez: <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"mailto:jan@example.com\"</span>></span>Jan Kowalski<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>.<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n    Odwiedź nas na: ul. Prosta 123, 00-001 Warszawa.\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">address</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n</code></pre>\n<h2 id=\"pułapki-i-najlepsze-praktyki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#pułapki-i-najlepsze-praktyki\">>></a>Pułapki i najlepsze praktyki</h2>\n<ul>\n<li><strong>Nie używaj semantycznych tagów do stylizacji:</strong> Elementy semantyczne mają znaczenie strukturalne i kontekstowe, a nie wizualne. Do stylizacji używaj CSS. Nie używaj <code>&#x3C;section></code> tylko dlatego, że chcesz grupować elementy do stylizacji – do tego służy <code>&#x3C;div></code>.</li>\n<li><strong>Nagłówki w <code>&#x3C;section></code> i <code>&#x3C;article></code>:</strong> Każdy <code>&#x3C;section></code> i <code>&#x3C;article></code> powinien mieć swój własny nagłówek (np. <code>&#x3C;h1></code>, <code>&#x3C;h2></code> itd.), który opisuje zawartość tej sekcji/artykułu.</li>\n<li><strong>Tylko jeden <code>&#x3C;main></code>:</strong> Pamiętaj, że na stronę może być tylko jeden element <code>&#x3C;main></code>.</li>\n<li><strong>Nie zmuszaj się:</strong> Czasem <code>&#x3C;div></code> jest po prostu najlepszym wyborem. Nie próbuj na siłę stosować semantycznych tagów, jeśli nie pasują do znaczenia treści. Na przykład, do prostego grupowania elementów w celu zastosowania do nich stylów CSS, <code>&#x3C;div></code> jest idealny.</li>\n<li><strong>HTML to struktura, CSS to wygląd:</strong> To kluczowa zasada. HTML powinien opisywać, czym jest treść, a CSS – jak wygląda.</li>\n</ul>\n<h2 id=\"podsumowanie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podsumowanie\">>></a>Podsumowanie</h2>\n<p><strong>Semantyczny HTML</strong> to podstawa tworzenia nowoczesnych, dostępnych i wydajnych stron internetowych. Używając odpowiednich tagów, takich jak <code>&#x3C;header></code>, <code>&#x3C;nav></code>, <code>&#x3C;main></code>, <code>&#x3C;article></code>, <code>&#x3C;section></code>, <code>&#x3C;aside></code>, <code>&#x3C;footer></code>, <code>&#x3C;figure></code>, <code>&#x3C;figcaption></code>, <code>&#x3C;time></code>, <code>&#x3C;mark></code> i <code>&#x3C;address></code>, dostarczasz przeglądarkom i wyszukiwarkom cenne informacje o strukturze i znaczeniu Twojej treści. To nie tylko poprawia <strong>SEO</strong> i <strong>dostępność</strong>, ale także sprawia, że Twój kod jest bardziej <strong>czytelny i łatwiejszy w utrzymaniu</strong>. Inwestycja w semantykę to inwestycja w jakość Twoich projektów! 🌟</p>\n<h2 id=\"zadania-praktyczne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-praktyczne\">>></a>Zadania praktyczne</h2>\n<p>Poniższe zadania pomogą Ci utrwalić wiedzę o semantycznych elementach HTML. Spróbuj napisać kod HTML samodzielnie, a następnie sprawdź swoje rozwiązanie!</p>\n<h3 id=\"zadanie-1-podstawowa-struktura\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-podstawowa-struktura\">>>></a>Zadanie 1: Podstawowa struktura</h3>\n<p>Stwórz prostą stronę HTML, która zawiera wszystkie kluczowe sekcje semantyczne, tworzące ogólny układ strony:</p>\n<ul>\n<li>nagłówek całej strony (<code>&#x3C;header></code>)</li>\n<li>główną treść strony (<code>&#x3C;main></code>)</li>\n<li>nawigację w nagłówku (<code>&#x3C;nav></code>)</li>\n<li>stopkę strony (<code>&#x3C;footer></code>)</li>\n</ul>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 1 - Podstawowa Struktura<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n      <span class=\"hljs-comment\">/* Proste style dla wizualizacji */</span>\n      <span class=\"hljs-selector-tag\">body</span> {\n        <span class=\"hljs-attribute\">font-family</span>: Arial, sans-serif;\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-attribute\">display</span>: flex;\n        <span class=\"hljs-attribute\">flex-direction</span>: column;\n        <span class=\"hljs-attribute\">min-height</span>: <span class=\"hljs-number\">100vh</span>;\n      }\n      <span class=\"hljs-selector-tag\">header</span>,\n      <span class=\"hljs-selector-tag\">nav</span>,\n      <span class=\"hljs-selector-tag\">main</span>,\n      <span class=\"hljs-selector-tag\">footer</span> {\n        <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">15px</span>;\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>;\n        <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n      }\n      <span class=\"hljs-selector-tag\">header</span> {\n        <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>;\n        <span class=\"hljs-attribute\">text-align</span>: center;\n      }\n      <span class=\"hljs-selector-tag\">nav</span> <span class=\"hljs-selector-tag\">ul</span> {\n        <span class=\"hljs-attribute\">list-style</span>: none;\n        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-attribute\">display</span>: flex;\n        <span class=\"hljs-attribute\">justify-content</span>: center;\n      }\n      <span class=\"hljs-selector-tag\">nav</span> <span class=\"hljs-selector-tag\">li</span> {\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span>;\n      }\n      <span class=\"hljs-selector-tag\">main</span> {\n        <span class=\"hljs-attribute\">flex-grow</span>: <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f9f9f9</span>;\n      }\n      <span class=\"hljs-selector-tag\">footer</span> {\n        <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>;\n        <span class=\"hljs-attribute\">text-align</span>: center;\n        <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">0.9em</span>;\n        <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#555</span>;\n      }\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Witamy na naszej semantycznej stronie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#home\"</span>></span>Strona główna<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#about\"</span>></span>O nas<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#contact\"</span>></span>Kontakt<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Główna zawartość<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Tutaj znajdzie się unikalna i najważniejsza treść tej strony.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n        Jest to miejsce na artykuły, produkty, usługi lub inne kluczowe\n        informacje.\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-symbol\">&#x26;copy;</span> 2024 Moja Semantyczna Strona. Wszystkie prawa zastrzeżone.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">address</span>></span>\n        Skontaktuj się z nami:\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"mailto:info@mojastrona.pl\"</span>></span>info@mojastrona.pl<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">address</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-2-rozbudowa-o-treść-i-sidebar\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-rozbudowa-o-treść-i-sidebar\">>>></a>Zadanie 2: Rozbudowa o treść i sidebar</h3>\n<p>Rozbuduj swoją stronę z Zadania 1. Wewnątrz elementu <code>&#x3C;main></code>, dodaj:</p>\n<ul>\n<li>Jedną sekcję (<code>&#x3C;section></code>) z nagłówkiem <code>&#x3C;h2></code> (np. \"Najnowsze wpisy\").</li>\n<li>Wewnątrz tej sekcji, umieść jeden artykuł (<code>&#x3C;article></code>) z nagłówkiem <code>&#x3C;h3></code> i kilkoma akapitami tekstu.</li>\n<li>Dodaj również blok poboczny (<code>&#x3C;aside></code>) obok artykułu (lub w tej samej sekcji), zawierający krótkie informacje lub linki powiązane (np. \"Popularne tagi\" lub \"Powiązane artykuły\").</li>\n</ul>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 2 - Rozbudowana Struktura<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n        <span class=\"hljs-comment\">/* Proste style dla wizualizacji */</span>\n        <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-family</span>: Arial, sans-serif; <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-attribute\">flex-direction</span>: column; <span class=\"hljs-attribute\">min-height</span>: <span class=\"hljs-number\">100vh</span>; }\n        <span class=\"hljs-selector-tag\">header</span>, <span class=\"hljs-selector-tag\">nav</span>, <span class=\"hljs-selector-tag\">main</span>, <span class=\"hljs-selector-tag\">footer</span> { <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">15px</span>; <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>; }\n        <span class=\"hljs-selector-tag\">header</span> { <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>; <span class=\"hljs-attribute\">text-align</span>: center; }\n        <span class=\"hljs-selector-tag\">nav</span> <span class=\"hljs-selector-tag\">ul</span> { <span class=\"hljs-attribute\">list-style</span>: none; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-attribute\">justify-content</span>: center; }\n        <span class=\"hljs-selector-tag\">nav</span> <span class=\"hljs-selector-tag\">li</span> { <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span>; }\n        <span class=\"hljs-selector-tag\">main</span> { <span class=\"hljs-attribute\">flex-grow</span>: <span class=\"hljs-number\">1</span>; <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f9f9f9</span>; <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-attribute\">flex-wrap</span>: wrap; }\n        <span class=\"hljs-selector-tag\">section</span> { <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">3</span>; <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">10px</span>; } <span class=\"hljs-comment\">/* Sekcja zajmuje więcej miejsca */</span>\n        <span class=\"hljs-selector-tag\">aside</span> { <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>; <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#e9ecef</span>; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">15px</span>; <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>; } <span class=\"hljs-comment\">/* Sidebar */</span>\n        <span class=\"hljs-selector-tag\">article</span> { <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">15px</span>; <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">15px</span>; <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>; <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>; }\n        <span class=\"hljs-selector-tag\">footer</span> { <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>; <span class=\"hljs-attribute\">text-align</span>: center; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">0.9em</span>; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#555</span>; }\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Witamy na naszej semantycznej stronie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#home\"</span>></span>Strona główna<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#about\"</span>></span>O nas<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#contact\"</span>></span>Kontakt<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Najnowsze wpisy<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Wprowadzenie do Semantycznego HTML<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Dzisiejszy wpis dotyczy znaczenia używania odpowiednich tagów w HTML dla lepszej struktury i dostępności. Dowiedz się, dlaczego `<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>` i `<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>` są tak ważne!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Opublikowano: <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">time</span> <span class=\"hljs-attr\">datetime</span>=<span class=\"hljs-string\">\"2024-07-05\"</span>></span>5 lipca 2024<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">time</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Korzyści z używania CSS Grid<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Poznaj potężne narzędzie do tworzenia elastycznych układów stron. CSS Grid to przyszłość layoutów webowych!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Opublikowano: <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">time</span> <span class=\"hljs-attr\">datetime</span>=<span class=\"hljs-string\">\"2024-07-01\"</span>></span>1 lipca 2024<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">time</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">aside</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Popularne tagi<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#html\"</span>></span>#HTML<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#css\"</span>></span>#CSS<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#javascript\"</span>></span>#JavaScript<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#seo\"</span>></span>#SEO<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Subskrybuj newsletter!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Bądź na bieżąco z nowościami w świecie web developmentu.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">aside</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-symbol\">&#x26;copy;</span> 2024 Moja Semantyczna Strona. Wszystkie prawa zastrzeżone.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">address</span>></span>\n            Skontaktuj się z nami: <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"mailto:info@mojastrona.pl\"</span>></span>info@mojastrona.pl<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">address</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<h3 id=\"zadanie-3-ilustracja-z-opisem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-ilustracja-z-opisem\">>>></a>Zadanie 3: Ilustracja z opisem</h3>\n<p>Do jednej z sekcji (np. do tej z najnowszymi wpisami z Zadania 2) dodaj ilustrację wraz z jej podpisem, używając semantycznych elementów:</p>\n<ul>\n<li><code>&#x3C;img></code></li>\n<li><code>&#x3C;figure></code></li>\n<li><code>&#x3C;figcaption></code></li>\n</ul>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 3 - Ilustracja z Opisem<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n        <span class=\"hljs-comment\">/* Proste style dla wizualizacji */</span>\n        <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-family</span>: Arial, sans-serif; <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-attribute\">flex-direction</span>: column; <span class=\"hljs-attribute\">min-height</span>: <span class=\"hljs-number\">100vh</span>; }\n        <span class=\"hljs-selector-tag\">header</span>, <span class=\"hljs-selector-tag\">nav</span>, <span class=\"hljs-selector-tag\">main</span>, <span class=\"hljs-selector-tag\">footer</span> { <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">15px</span>; <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>; }\n        <span class=\"hljs-selector-tag\">header</span> { <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>; <span class=\"hljs-attribute\">text-align</span>: center; }\n        <span class=\"hljs-selector-tag\">nav</span> <span class=\"hljs-selector-tag\">ul</span> { <span class=\"hljs-attribute\">list-style</span>: none; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-attribute\">justify-content</span>: center; }\n        <span class=\"hljs-selector-tag\">nav</span> <span class=\"hljs-selector-tag\">li</span> { <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span>; }\n        <span class=\"hljs-selector-tag\">main</span> { <span class=\"hljs-attribute\">flex-grow</span>: <span class=\"hljs-number\">1</span>; <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f9f9f9</span>; <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-attribute\">flex-wrap</span>: wrap; }\n        <span class=\"hljs-selector-tag\">section</span> { <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">3</span>; <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">10px</span>; }\n        <span class=\"hljs-selector-tag\">aside</span> { <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>; <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#e9ecef</span>; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">15px</span>; <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>; }\n        <span class=\"hljs-selector-tag\">article</span> { <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">15px</span>; <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">15px</span>; <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>; <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>; }\n        <span class=\"hljs-selector-tag\">footer</span> { <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>; <span class=\"hljs-attribute\">text-align</span>: center; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">0.9em</span>; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#555</span>; }\n\n        <span class=\"hljs-comment\">/* Style dla figure i figcaption */</span>\n        <span class=\"hljs-selector-tag\">figure</span> {\n            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#eee</span>;\n            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">15px</span> <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;\n            <span class=\"hljs-attribute\">text-align</span>: center;\n        }\n        <span class=\"hljs-selector-tag\">figure</span> <span class=\"hljs-selector-tag\">img</span> {\n            <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">height</span>: auto;\n            <span class=\"hljs-attribute\">display</span>: block;\n            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto <span class=\"hljs-number\">10px</span>; <span class=\"hljs-comment\">/* Wyśrodkowanie i odstęp */</span>\n        }\n        <span class=\"hljs-selector-tag\">figcaption</span> {\n            <span class=\"hljs-attribute\">font-style</span>: italic;\n            <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#777</span>;\n            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">0.9em</span>;\n        }\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Witamy na naszej semantycznej stronie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#home\"</span>></span>Strona główna<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#about\"</span>></span>O nas<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#contact\"</span>></span>Kontakt<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Najnowsze wpisy<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Wprowadzenie do Semantycznego HTML<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Dzisiejszy wpis dotyczy znaczenia używania odpowiednich tagów w HTML dla lepszej struktury i dostępności. Dowiedz się, dlaczego `<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>` i `<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>` są tak ważne!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Opublikowano: <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">time</span> <span class=\"hljs-attr\">datetime</span>=<span class=\"hljs-string\">\"2024-07-05\"</span>></span>5 lipca 2024<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">time</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">figure</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://via.placeholder.com/600x300/ADD8E6/000000?text=Semantyczny+Web\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Ilustracja przedstawiająca koncepcję Semantycznego Web\"</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">figcaption</span>></span>Rys. 1. Wizualizacja idei Semantycznego Web, gdzie dane są wzajemnie powiązane.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">figcaption</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">figure</span>></span>\n\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Korzyści z używania CSS Grid<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Poznaj potężne narzędzie do tworzenia elastycznych układów stron. CSS Grid to przyszłość layoutów webowych!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Opublikowano: <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">time</span> <span class=\"hljs-attr\">datetime</span>=<span class=\"hljs-string\">\"2024-07-01\"</span>></span>1 lipca 2024<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">time</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">aside</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Popularne tagi<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#html\"</span>></span>#HTML<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#css\"</span>></span>#CSS<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#javascript\"</span>></span>#JavaScript<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#seo\"</span>></span>#SEO<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Subskrybuj newsletter!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Bądź na bieżąco z nowościami w świecie web developmentu.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">aside</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-symbol\">&#x26;copy;</span> 2024 Moja Semantyczna Strona. Wszystkie prawa zastrzeżone.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">address</span>></span>\n            Skontaktuj się z nami: <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"mailto:info@mojastrona.pl\"</span>></span>info@mojastrona.pl<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">address</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<p>To tyle na temat podstaw Semantycznego HTML! Pamiętaj, że konsekwentne stosowanie tych zasad jest kluczem do tworzenia lepszych i bardziej dostępnych stron. Masz jakieś pytania dotyczące konkretnych zastosowań lub chcesz dowiedzieć się więcej o innych elementach semantycznych? Daj znać! 😊</p></span></div>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/semantyczny-html.md",{"_21":962,"_23":963,"_25":964,"_6":966,"_36":967,"_38":968,"_91":1008,"_93":1009,"_95":1010,"_97":1011,"_99":1012},"Renesans w JS, czyli nowoczesny JavaScript","JavaScript jest językiem programowania, który jest powszechnie stosowany do tworzenia dynamicznych i interaktywnych stron internetowych. W ciągu ostatnich lat JavaScript znacznie ewoluował, wprowadzając nowe funkcje i poprawiając istniejące mechanizmy. W tym kursie omówimy najważniejsze elementy nowoczesnego JavaScript, w tym ES6 i nowsze.",[10,744,531,171,965,28,34],"web",[10],"2024-06-30T00:00:00.000Z",{"_21":969,"_41":970},"Quiz: Podstawy nowoczesnego JavaScript",[971,979,987,995,1002],{"_44":972,"_46":973,"_52":53,"_54":978},"<p>Jaką główną różnicę między <code>let</code> a <code>var</code> podkreśla się w nowoczesnym JavaScript?</p>",[974,975,976,977],"`let` nie pozwala na przyjmowanie wartości domyślnej","`var` nie istnieje w nowoczesnym JS","Obie są identyczne","Zakres blokowy (`block scope`) w `let`","`let` posiada zakres blokowy, podczas gdy `var` ma zakres funkcyjny.",{"_44":980,"_46":981,"_52":53,"_54":986},"<p>Co zwróci poniższy kod?</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> [a, , b] = arr;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a, b);\n</code></pre>",[982,983,984,985],"1 2","undefined 3","2 3","1 3","Drugi element jest pomijany. Wynik to 1 i 3.",{"_44":988,"_46":989,"_52":80,"_54":994},"<p>Co robi operator spread (<code>...</code>)?</p>",[990,991,992,993],"Łączy Promise'y","Rozwija elementy tablicy lub właściwości obiektu","Deklaruje zmienną stałą","Tworzy nowy Promise","Spread operator służy do rozwijania/skopiowania elementów tablicy lub obiektu.",{"_44":996,"_46":997,"_52":71,"_54":1001},"<p>Czym różni się funkcja strzałkowa od zwykłej funkcji pod względem <code>this</code>?</p>",[998,999,440,1000],"Funkcja strzałkowa nie ma własnego `this`","Funkcje strzałkowe nie działają w JS","Funkcja strzałkowa tworzy nowy kontekst `this`","Funkcje strzałkowe nie posiadają własnego `this` — dziedziczą go z otoczenia.",{"_44":1003,"_46":1004,"_52":53,"_54":1007},"<p>Jaką wartość zwróci poniższy kod?</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span>; }\n<span class=\"hljs-title function_\">test</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>);\n</code></pre>",[156,1005,1006,155],"Promise {<fulfilled>: 5}","Błąd","Funkcja async zawsze zwraca Promise, ale `then` wypisze wartość 5.","f442e8d1-7684-4fa3-b267-e88b6c09273d","nowoczesny-javascript","<p>Witaj w świecie <strong>nowoczesnego JavaScriptu</strong>! 🚀 Jeśli HTML to szkielet strony, a CSS to jej wygląd, to JavaScript jest sercem i mózgiem – sprawia, że strona ożywa, staje się interaktywna i dynamiczna. W ciągu ostatnich lat JavaScript przeszedł prawdziwy \"renesans\". Dzięki wprowadzeniu standardu <strong>ES6</strong> (ECMAScript 2015) i kolejnych aktualizacji, pisanie kodu w JS stało się znacznie przyjemniejsze, bezpieczniejsze i bardziej efektywne.</p>\n<p>Ten przewodnik zabierze Cię w podróż po najważniejszych nowościach, które musisz znać, aby pisać <strong>nowoczesny JavaScript</strong>. Nie martw się, jeśli jesteś początkujący/a – wszystko wyjaśnimy krok po kroku, z przykładami i analogiami, byś mógł/mogła od razu zastosować nową wiedzę w praktyce. Czas unowocześnić swoje umiejętności! ✨</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#zmienne-let-const-i-zakresy-blokowe--po%C5%BCegnanie-z-var\">Zmienne: <code>let</code>, <code>const</code> i zakresy blokowe – pożegnanie z <code>var</code>?</a></li>\n<li><a href=\"#funkcje-strza%C5%82kowe-arrow-functions-i-ich-zastosowania--kr%C3%B3cej-i-czytelniej\">Funkcje strzałkowe (Arrow Functions) i ich zastosowania – krócej i czytelniej</a></li>\n<li><a href=\"#szablony-string%C3%B3w-template-literals--%C5%82atwiejsza-praca-z-tekstem\">Szablony stringów (Template Literals) – łatwiejsza praca z tekstem</a></li>\n<li><a href=\"#destrukturyzacja-tablic-i-obiekt%C3%B3w--wyci%C4%85gnij-to-czego-potrzebujesz\">Destrukturyzacja tablic i obiektów – wyciągnij to, czego potrzebujesz</a></li>\n<li><a href=\"#spread-i-rest-operator---elastyczno%C5%9B%C4%87-w-manipulacji-danymi\">Spread i Rest Operator (<code>...</code>) – elastyczność w manipulacji danymi</a></li>\n<li><a href=\"#promise-api-i-obs%C5%82uga-asynchroniczno%C5%9Bci--opowiadaj-historie-o-przysz%C5%82o%C5%9Bci\">Promise API i obsługa asynchroniczności – opowiadaj historie o przyszłości</a></li>\n<li><a href=\"#asyncawait--nowoczesna-obs%C5%82uga-kodu-asynchronicznego--pisz-asynchronicznie-my%C5%9Bl-synchronicznie\">Async/await – nowoczesna obsługa kodu asynchronicznego – pisz asynchronicznie, myśl synchronicznie</a></li>\n<li><a href=\"#zadania-do-wykonania-sprawd%C5%BA-swoj%C4%85-wiedz%C4%99\">Zadania do wykonania: Sprawdź swoją wiedzę!</a></li>\n</ol>\n<hr>\n<h2 id=\"zmienne-let-const-i-zakresy-blokowe--pożegnanie-z-var\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zmienne-let-const-i-zakresy-blokowe--pożegnanie-z-var\">>></a>Zmienne: <code>let</code>, <code>const</code> i zakresy blokowe – pożegnanie z <code>var</code>?</h2>\n<p>W starszych wersjach JavaScriptu zmienne deklarowaliśmy wyłącznie za pomocą słowa kluczowego <code>var</code>. Często prowadziło to do pomyłek i trudnych do wykrycia błędów. Nowoczesny JavaScript wprowadza dwa nowe sposoby deklarowania zmiennych: <strong><code>let</code></strong> i <strong><code>const</code></strong>, które znacznie poprawiają bezpieczeństwo i przewidywalność kodu.</p>\n<h3 id=\"zakres-blokowy-block-scope\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zakres-blokowy-block-scope\">>>></a>Zakres blokowy (<code>block scope</code>)</h3>\n<p>To kluczowa różnica! Zmienne zadeklarowane za pomocą <code>let</code> i <code>const</code> mają <strong>zakres blokowy</strong>. Co to znaczy? Oznaczają, że zmienna istnieje tylko w obrębie najbliższego <strong>bloku kodu</strong>, czyli wszystko, co znajduje się między klamrowymi nawiasami <code>{ ... }</code>.</p>\n<p>Pomyśl o tym jak o specjalnej, prywatnej przestrzeni. Jeśli zmienna <code>x</code> jest zadeklarowana wewnątrz bloku <code>if</code>, będzie dostępna tylko w tym bloku. Próba użycia jej poza nim spowoduje błąd. To chroni Cię przed przypadkowym nadpisaniem zmiennych o tej samej nazwie w innej części kodu.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n  <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// x istnieje tylko wewnątrz tego bloku if</span>\n  <span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">// y również istnieje tylko wewnątrz tego bloku</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// Wyświetli: 5 (dostępne, bo jesteśmy w bloku)</span>\n}\n<span class=\"hljs-comment\">// console.log(x); // WYWOŁA BŁĄD! ReferenceError: x is not defined</span>\n<span class=\"hljs-comment\">// console.log(y); // WYWOŁA BŁĄD! ReferenceError: y is not defined</span>\n</code></pre>\n<p>Dla porównania, <code>var</code> ma <strong>zakres funkcyjny</strong> (function scope), co oznacza, że zmienna zadeklarowana w funkcji jest dostępna w całej funkcji, ale poza funkcją jest dostępna globalnie, co jest źródłem wielu problemów. Dlatego w nowoczesnym kodzie <strong>zdecydowanie unikamy <code>var</code></strong>.</p>\n<h3 id=\"różnice-między-let-const-i-var\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#różnice-między-let-const-i-var\">>>></a>Różnice między <code>let</code>, <code>const</code> i <code>var</code></h3>\n<ul>\n<li>\n<p><strong><code>let</code></strong>:</p>\n<ul>\n<li><strong>Deklaruje zmienną</strong>, której wartość może być <strong>zmieniana</strong> w dowolnym momencie.</li>\n<li>Ma <strong>zakres blokowy</strong>.</li>\n<li>Nie można jej ponownie zadeklarować w tym samym bloku (np. <code>let x = 5; let x = 10;</code> to błąd), ale można zmienić jej wartość (<code>x = 10;</code>).</li>\n<li>Używaj <code>let</code>, gdy wiesz, że wartość zmiennej będzie się zmieniać (np. licznik w pętli).</li>\n</ul>\n</li>\n<li>\n<p><strong><code>const</code></strong>:</p>\n<ul>\n<li>Deklaruje <strong>stałą</strong>, której wartość musi być <strong>przypisana od razu</strong> i <strong>nie może być zmieniana</strong> później.</li>\n<li>Ma <strong>zakres blokowy</strong>.</li>\n<li>Jeśli przypiszesz do <code>const</code> obiekt lub tablicę, nie możesz przypisać do niej <em>nowego</em> obiektu/tablicy, ale możesz <strong>modyfikować zawartość</strong> tego obiektu/tablicy (np. dodawać lub usuwać elementy). <code>const</code> gwarantuje, że referencja (wskaźnik) do obiektu pozostaje taka sama, ale nie \"zamraża\" samego obiektu.</li>\n<li>Używaj <code>const</code>, gdy wartość zmiennej nie powinna się zmieniać. To jest domyślny wybór w nowoczesnym JS, chyba że potrzebujesz <code>let</code>.</li>\n</ul>\n</li>\n<li>\n<p><strong><code>var</code></strong>:</p>\n<ul>\n<li><strong>Ma zakres funkcyjny</strong> (lub globalny, jeśli jest poza funkcją).</li>\n<li>Jest podatny na <strong>hoisting</strong> (podnoszenie deklaracji), co oznacza, że deklaracja zmiennej jest \"przenoszona\" na początek zakresu, co może prowadzić do nieintuicyjnych zachowań.</li>\n<li>Można go <strong>wielokrotnie deklarować</strong> w tym samym zakresie, co łatwo prowadzi do przypadkowych nadpisań.</li>\n<li><strong>Unikaj używania <code>var</code> w nowym kodzie!</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>Przykład <code>const</code> z obiektem/tablicą:</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> tablica = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\ntablica.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// DOZWOLONE! Zmieniamy zawartość tablicy, nie przypisujemy nowej tablicy.</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(tablica); <span class=\"hljs-comment\">// Wyświetli: [1, 2, 3, 4]</span>\n\n<span class=\"hljs-comment\">// tablica = [5, 6]; // WYWOŁA BŁĄD! TypeError: Assignment to constant variable.</span>\n<span class=\"hljs-comment\">// Próbujesz przypisać zupełnie nową tablicę do stałej referencji.</span>\n\n<span class=\"hljs-keyword\">const</span> osoba = { <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Anna\"</span>, <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">28</span> };\nosoba.<span class=\"hljs-property\">wiek</span> = <span class=\"hljs-number\">29</span>; <span class=\"hljs-comment\">// DOZWOLONE! Zmieniamy właściwość obiektu, nie przypisujemy nowego obiektu.</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(osoba); <span class=\"hljs-comment\">// Wyświetli: { imie: \"Anna\", wiek: 29 }</span>\n\n<span class=\"hljs-comment\">// osoba = { nazwisko: \"Nowak\" }; // WYWOŁA BŁĄD!</span>\n</code></pre>\n<hr>\n<h2 id=\"funkcje-strzałkowe-arrow-functions-i-ich-zastosowania--krócej-i-czytelniej\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-strzałkowe-arrow-functions-i-ich-zastosowania--krócej-i-czytelniej\">>></a>Funkcje strzałkowe (Arrow Functions) i ich zastosowania – krócej i czytelniej</h2>\n<p>Funkcje strzałkowe to zwięzła alternatywa dla tradycyjnych funkcji JavaScript, która została wprowadzona w ES6. Są nie tylko krótsze, ale także rozwiązują pewien problem z kontekstem <code>this</code>, który często mylił początkujących programistów.</p>\n<h3 id=\"składnia-funkcji-strzałkowej\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#składnia-funkcji-strzałkowej\">>>></a>Składnia funkcji strzałkowej</h3>\n<p>Największą zaletą funkcji strzałkowych jest ich zwięzła składnia, zwłaszcza dla prostych funkcji.</p>\n<ul>\n<li>\n<p><strong>Szybszy zapis (szczególnie dla funkcji jedno-liniowych):</strong>\nJeśli funkcja składa się tylko z jednej instrukcji, która zwraca wartość, możesz pominąć nawiasy klamrowe <code>{}</code> i słowo kluczowe <code>return</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Tradycyjna funkcja</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dodajStara</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n\n<span class=\"hljs-comment\">// Funkcja strzałkowa (krótszy zapis)</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dodaj</span> = (<span class=\"hljs-params\">a, b</span>) => a + b;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">dodaj</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// Wyświetli: 8</span>\n\n<span class=\"hljs-comment\">// Funkcja z jednym argumentem (można pominąć nawiasy wokół argumentu)</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">powitanie</span> = (<span class=\"hljs-params\">imie</span>) => <span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie}</span>!`</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">powitanie</span>(<span class=\"hljs-string\">\"Ola\"</span>)); <span class=\"hljs-comment\">// Wyświetli: Cześć, Ola!</span>\n\n<span class=\"hljs-comment\">// Funkcja bez argumentów (konieczne puste nawiasy)</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">powiedzHello</span> = (<span class=\"hljs-params\"></span>) => <span class=\"hljs-string\">\"Hello!\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">powiedzHello</span>()); <span class=\"hljs-comment\">// Wyświetli: Hello!</span>\n</code></pre>\n</li>\n<li>\n<p><strong>Brak własnego obiektu <code>arguments</code>:</strong> Funkcje strzałkowe nie mają własnego obiektu <code>arguments</code> (który zawiera wszystkie argumenty przekazane do funkcji). Jeśli go potrzebujesz, użyj <strong>rest operatora</strong> (<code>...</code>), o którym powiemy później.</p>\n</li>\n<li>\n<p><strong>Brak możliwości użycia jako konstruktor:</strong> Nie możesz użyć funkcji strzałkowej do tworzenia nowych obiektów za pomocą słowa kluczowego <code>new</code>.</p>\n</li>\n</ul>\n<h3 id=\"funkcje-strzałkowe-a-kontekst-this\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#funkcje-strzałkowe-a-kontekst-this\">>>></a>Funkcje strzałkowe a kontekst <code>this</code></h3>\n<p>To jest jeden z najważniejszych powodów, dla których wprowadzono funkcje strzałkowe. W tradycyjnych funkcjach, wartość <code>this</code> zależy od tego, jak funkcja jest wywoływana. To prowadziło do częstych błędów, zwłaszcza w callbackach (funkcjach wywoływanych przez inne funkcje, np. w <code>setTimeout</code> czy w obsłudze zdarzeń).</p>\n<p>Funkcje strzałkowe rozwiązują ten problem: <strong>nie mają własnego <code>this</code></strong>. Zamiast tego, <strong>dziedziczą <code>this</code> z otoczenia, w którym zostały zadeklarowane</strong> (tzw. leksykalny <code>this</code>).</p>\n<p><strong>Przykład problemu ze <code>this</code> w tradycyjnych funkcjach:</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Tradycyjna funkcja, która \"gubi\" kontekst this</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TimerProblem</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sekundy</span> = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// Tutaj 'this' nie odnosi się do obiektu TimerProblem,</span>\n    <span class=\"hljs-comment\">// ale do obiektu globalnego (np. window w przeglądarce) lub jest undefined w trybie 'strict mode'</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sekundy</span>++; <span class=\"hljs-comment\">// To nie zadziała tak, jak byśmy chcieli!</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sekundy</span>);\n  }, <span class=\"hljs-number\">1000</span>);\n}\n<span class=\"hljs-comment\">// new TimerProblem(); // W konsoli prawdopodobnie zobaczysz NaN lub błąd</span>\n</code></pre>\n<p><strong>Rozwiązanie z funkcją strzałkową:</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TimerPoprawny</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sekundy</span> = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-comment\">// Funkcja strzałkowa dziedziczy 'this' z TimerPoprawny (czyli z obiektu TimerPoprawny)</span>\n  <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sekundy</span>++;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Sekundy: <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.sekundy}</span>`</span>);\n  }, <span class=\"hljs-number\">1000</span>);\n}\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TimerPoprawny</span>(); <span class=\"hljs-comment\">// Będzie poprawnie liczyć sekundy: Sekundy: 1, Sekundy: 2, itd.</span>\n</code></pre>\n<p>Dzięki temu funkcje strzałkowe są idealne do użycia w callbackach, metodach obiektów (choć nie jako metody obiektów najwyższego poziomu, bo wtedy <code>this</code> wskazałoby na <code>window</code>), czy w sytuacjach, gdzie chcesz, aby <code>this</code> zachowało kontekst nadrzędny.</p>\n<hr>\n<h2 id=\"szablony-stringów-template-literals--łatwiejsza-praca-z-tekstem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#szablony-stringów-template-literals--łatwiejsza-praca-z-tekstem\">>></a>Szablony stringów (Template Literals) – łatwiejsza praca z tekstem</h2>\n<p>Szablony stringów, wprowadzone w ES6, to potężne narzędzie do tworzenia ciągów znaków (stringów). Zastępują tradycyjne łączenie stringów za pomocą operatora <code>+</code> i oferują znacznie większą elastyczność i czytelność. Używamy ich, otaczając tekst <strong>backtickami</strong> (apostrofami wstecznymi) <code> </code> zamiast pojedynczych lub podwójnych cudzysłowów.</p>\n<h3 id=\"interpolacja-i-wielolinijkowość\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#interpolacja-i-wielolinijkowość\">>>></a>Interpolacja i wielolinijkowość</h3>\n<ul>\n<li>\n<p><strong>Interpolacja zmiennych i wyrażeń:</strong>\nMożesz łatwo osadzać zmienne lub dowolne wyrażenia JavaScript bezpośrednio w stringu, używając składni <code>${...}</code>. To znacznie ułatwia budowanie dynamicznych komunikatów.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> imie = <span class=\"hljs-string\">\"Alicja\"</span>;\n<span class=\"hljs-keyword\">const</span> wiek = <span class=\"hljs-number\">30</span>;\n\n<span class=\"hljs-comment\">// Stary sposób: męczące łączenie stringów</span>\n<span class=\"hljs-keyword\">const</span> infoStare = <span class=\"hljs-string\">\"Mam na imię \"</span> + imie + <span class=\"hljs-string\">\" i mam \"</span> + wiek + <span class=\"hljs-string\">\" lat.\"</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(infoStare); <span class=\"hljs-comment\">// Wyświetli: Mam na imię Alicja i mam 30 lat.</span>\n\n<span class=\"hljs-comment\">// Nowy sposób z szablonami stringów: czytelniej i prościej!</span>\n<span class=\"hljs-keyword\">const</span> infoNowe = <span class=\"hljs-string\">`Mam na imię <span class=\"hljs-subst\">${imie}</span> i mam <span class=\"hljs-subst\">${wiek}</span> lat.`</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(infoNowe); <span class=\"hljs-comment\">// Wyświetli: Mam na imię Alicja i mam 30 lat.</span>\n\n<span class=\"hljs-comment\">// Możesz umieszczać dowolne wyrażenia JavaScript:</span>\n<span class=\"hljs-keyword\">const</span> cena = <span class=\"hljs-number\">10.5</span>;\n<span class=\"hljs-keyword\">const</span> ilosc = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">const</span> rachunek = <span class=\"hljs-string\">`Koszt zakupu: <span class=\"hljs-subst\">${cena * ilosc}</span> zł.`</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(rachunek); <span class=\"hljs-comment\">// Wyświetli: Koszt zakupu: 21 zł.</span>\n</code></pre>\n</li>\n<li>\n<p><strong>Łatwe tworzenie tekstów wielolinijkowych:</strong>\nKoniec z dodawaniem <code>n</code> do każdej linii! W szablonach stringów możesz po prostu nacisnąć Enter, a tekst zachowa formatowanie z nowymi liniami. Jest to szczególnie przydatne przy generowaniu fragmentów HTML bezpośrednio w JavaScript.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Stary sposób: brzydkie i niewygodne</span>\n<span class=\"hljs-keyword\">const</span> htmlStare =\n  <span class=\"hljs-string\">\"&#x3C;div>\\n  &#x3C;h1>Witaj!&#x3C;/h1>\\n  &#x3C;p>To jest wielolinijkowy tekst.&#x3C;/p>\\n&#x3C;/div>\"</span>;\n\n<span class=\"hljs-comment\">// Nowy sposób: super czytelne!</span>\n<span class=\"hljs-keyword\">const</span> htmlNowe = <span class=\"hljs-string\">`\n  &#x3C;div>\n    &#x3C;h1>Witaj!&#x3C;/h1>\n    &#x3C;p>To jest wielolinijkowy tekst. I kolejna linia w tym samym akapicie.&#x3C;/p>\n  &#x3C;/div>\n`</span>;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(htmlNowe);\n</code></pre>\n</li>\n</ul>\n<h3 id=\"dodatkowe-możliwości\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dodatkowe-możliwości\">>>></a>Dodatkowe możliwości</h3>\n<p>Szablony stringów wspierają także tzw. <strong>tagowane szablony</strong> (<code>tagged templates</code>), które pozwalają na zaawansowaną manipulację tekstem przed jego finalnym utworzeniem. Możesz zdefiniować funkcję (\"tag\"), która będzie przetwarzać części stringu i wartości zmiennych. Jest to bardziej zaawansowana funkcja, używana np. do tłumaczeń, walidacji, bezpiecznego generowania HTML (zapobieganie XSS) czy formatowania danych.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Przykład funkcji \"tagującej\"</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">upper</span>(<span class=\"hljs-params\">strings, ...values</span>) {\n  <span class=\"hljs-comment\">// 'strings' to tablica tekstów, 'values' to tablica zmiennych</span>\n  <span class=\"hljs-keyword\">let</span> wynik = strings[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; values.<span class=\"hljs-property\">length</span>; i++) {\n    wynik += values[i].<span class=\"hljs-title function_\">toUpperCase</span>() + strings[i + <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// Zamienia zmienne na duże litery</span>\n  }\n  <span class=\"hljs-keyword\">return</span> wynik;\n}\n\n<span class=\"hljs-keyword\">const</span> imie = <span class=\"hljs-string\">\"Kasia\"</span>;\n<span class=\"hljs-keyword\">const</span> wiek = <span class=\"hljs-number\">20</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(upper<span class=\"hljs-string\">`Cześć, <span class=\"hljs-subst\">${imie}</span>! Masz <span class=\"hljs-subst\">${wiek}</span> lat?`</span>); <span class=\"hljs-comment\">// Wyświetli: Cześć, KASIA! Masz 20 lat?</span>\n</code></pre>\n<p>W tym przykładzie funkcja <code>upper</code> została \"przypięta\" do szablonu stringu i zmodyfikowała zmienną <code>imie</code> na wielkie litery.</p>\n<hr>\n<h2 id=\"destrukturyzacja-tablic-i-obiektów--wyciągnij-to-czego-potrzebujesz\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#destrukturyzacja-tablic-i-obiektów--wyciągnij-to-czego-potrzebujesz\">>></a>Destrukturyzacja tablic i obiektów – wyciągnij to, czego potrzebujesz</h2>\n<p>Destrukturyzacja to potężna i bardzo często używana funkcja w nowoczesnym JavaScript. Pozwala na \"rozpakowanie\" wartości z tablic lub właściwości z obiektów do oddzielnych zmiennych w bardzo zwięzły i czytelny sposób. Upraszcza kod i czyni go bardziej deklaratywnym.</p>\n<h3 id=\"destrukturyzacja-tablic\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#destrukturyzacja-tablic\">>>></a>Destrukturyzacja tablic</h3>\n<p>Pozwala na szybkie przypisanie wartości z tablicy do zmiennych, bazując na ich pozycji.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> kolory = [<span class=\"hljs-string\">\"czerwony\"</span>, <span class=\"hljs-string\">\"zielony\"</span>, <span class=\"hljs-string\">\"niebieski\"</span>];\n\n<span class=\"hljs-comment\">// Stary sposób:</span>\n<span class=\"hljs-comment\">// const kolor1 = kolory[0];</span>\n<span class=\"hljs-comment\">// const kolor2 = kolory[1];</span>\n\n<span class=\"hljs-comment\">// Nowy sposób z destrukturyzacją tablic:</span>\n<span class=\"hljs-keyword\">const</span> [pierwszyKolor, drugiKolor, trzeciKolor] = kolory;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pierwszyKolor); <span class=\"hljs-comment\">// Wyświetli: czerwony</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(drugiKolor); <span class=\"hljs-comment\">// Wyświetli: zielony</span>\n\n<span class=\"hljs-comment\">// Można pomijać niektóre elementy (używając przecinków):</span>\n<span class=\"hljs-keyword\">const</span> [a, , b] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]; <span class=\"hljs-comment\">// Pomijamy drugi element (2)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a, b); <span class=\"hljs-comment\">// Wyświetli: 1 3</span>\n\n<span class=\"hljs-comment\">// Można przypisać wartości domyślne, jeśli element nie istnieje:</span>\n<span class=\"hljs-keyword\">const</span> [x, y, z = <span class=\"hljs-string\">\"domyślny\"</span>] = [<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-string\">\"B\"</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x, y, z); <span class=\"hljs-comment\">// Wyświetli: A B domyślny</span>\n\n<span class=\"hljs-comment\">// Można zbierać pozostałe elementy do nowej tablicy (rest operator - patrz dalej):</span>\n<span class=\"hljs-keyword\">const</span> [pierwszy, ...resztaKolorow] = kolory;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pierwszy); <span class=\"hljs-comment\">// Wyświetli: czerwony</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(resztaKolorow); <span class=\"hljs-comment\">// Wyświetli: [\"zielony\", \"niebieski\"]</span>\n</code></pre>\n<h3 id=\"destrukturyzacja-obiektów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#destrukturyzacja-obiektów\">>>></a>Destrukturyzacja obiektów</h3>\n<p>Pozwala na przypisanie wartości z obiektu do zmiennych na podstawie nazw ich <strong>kluczy (właściwości)</strong>. Kolejność nie ma znaczenia, liczy się nazwa klucza.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> samochod = { <span class=\"hljs-attr\">marka</span>: <span class=\"hljs-string\">\"Ford\"</span>, <span class=\"hljs-attr\">model</span>: <span class=\"hljs-string\">\"Focus\"</span>, <span class=\"hljs-attr\">rok</span>: <span class=\"hljs-number\">2018</span> };\n\n<span class=\"hljs-comment\">// Stary sposób:</span>\n<span class=\"hljs-comment\">// const markaSamochodu = samochod.marka;</span>\n<span class=\"hljs-comment\">// const modelSamochodu = samochod.model;</span>\n\n<span class=\"hljs-comment\">// Nowy sposób z destrukturyzacją obiektów:</span>\n<span class=\"hljs-keyword\">const</span> { marka, model } = samochod;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(marka); <span class=\"hljs-comment\">// Wyświetli: Ford</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(model); <span class=\"hljs-comment\">// Wyświetli: Focus</span>\n\n<span class=\"hljs-comment\">// Można przypisać wartości domyślne, jeśli właściwość nie istnieje:</span>\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">marka</span>: m, kolor = <span class=\"hljs-string\">\"czarny\"</span> } = samochod; <span class=\"hljs-comment\">// 'kolor' nie istnieje w obiekcie 'samochod'</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(m, kolor); <span class=\"hljs-comment\">// Wyświetli: Ford czarny</span>\n\n<span class=\"hljs-comment\">// Można zmienić nazwę zmiennej, do której przypisujemy wartość:</span>\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">marka</span>: nazwaMarki, <span class=\"hljs-attr\">model</span>: typModelu } = samochod;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(nazwaMarki, typModelu); <span class=\"hljs-comment\">// Wyświetli: Ford Focus</span>\n\n<span class=\"hljs-comment\">// Można też zbierać pozostałe właściwości do nowego obiektu (rest operator - patrz dalej):</span>\n<span class=\"hljs-keyword\">const</span> { rok, ...resztaSamochodu } = samochod;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(rok); <span class=\"hljs-comment\">// Wyświetli: 2018</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(resztaSamochodu); <span class=\"hljs-comment\">// Wyświetli: { marka: \"Ford\", model: \"Focus\" }</span>\n</code></pre>\n<p>Destrukturyzacja jest szczególnie przydatna w funkcjach, gdy chcesz łatwo wyciągnąć konkretne dane z obiektów konfiguracyjnych lub z wyników API.</p>\n<hr>\n<h2 id=\"spread-i-rest-operator---elastyczność-w-manipulacji-danymi\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spread-i-rest-operator---elastyczność-w-manipulacji-danymi\">>></a>Spread i Rest Operator (<code>...</code>) – elastyczność w manipulacji danymi</h2>\n<p>Operator <code>...</code> (trzy kropki) jest jednym z najbardziej uniwersalnych i potężnych narzędzi w nowoczesnym JavaScript. Nazywany jest <strong>operatorem spread</strong> lub <strong>operatorem rest</strong>, w zależności od kontekstu, w jakim jest używany.</p>\n<h3 id=\"spread-operator-operator-rozproszenia\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spread-operator-operator-rozproszenia\">>>></a>Spread Operator (operator rozproszenia)</h3>\n<p>Gdy używasz <code>...</code> do <strong>rozbicia</strong> elementów tablicy lub właściwości obiektu na pojedyncze elementy, mówimy o <strong>operatorze spread</strong>. Jest to jak \"rozłożenie\" zawartości kolekcji. 🌐</p>\n<p><strong>Zastosowania Spread Operatora:</strong></p>\n<ul>\n<li>\n<p><strong>Kopiowanie i łączenie tablic:</strong> Tworzenie płytkich kopii tablic lub łączenie ich bez modyfikowania oryginalnych.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> cyfry = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> noweCyfry = [...cyfry, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]; <span class=\"hljs-comment\">// Rozwija [1, 2, 3] do 1, 2, 3, a potem dodaje 4, 5</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(noweCyfry); <span class=\"hljs-comment\">// Wyświetli: [1, 2, 3, 4, 5]</span>\n\n<span class=\"hljs-keyword\">const</span> tablica1 = [<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>];\n<span class=\"hljs-keyword\">const</span> tablica2 = [<span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"d\"</span>];\n<span class=\"hljs-keyword\">const</span> polaczoneTablice = [...tablica1, ...tablica2];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(polaczoneTablice); <span class=\"hljs-comment\">// Wyświetli: [\"a\", \"b\", \"c\", \"d\"]</span>\n</code></pre>\n</li>\n<li>\n<p><strong>Kopiowanie i łączenie obiektów:</strong> Podobnie jak z tablicami, możesz tworzyć kopie obiektów i łączyć ich właściwości.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> osoba = { <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Anna\"</span>, <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">28</span> };\n<span class=\"hljs-keyword\">const</span> osobaZZawodem = { ...osoba, <span class=\"hljs-attr\">zawod</span>: <span class=\"hljs-string\">\"Programista\"</span> };\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(osobaZZawodem); <span class=\"hljs-comment\">// Wyświetli: { imie: \"Anna\", wiek: 28, zawod: \"Programista\" }</span>\n\n<span class=\"hljs-keyword\">const</span> daneKontaktowe = { <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"a@example.com\"</span>, <span class=\"hljs-attr\">telefon</span>: <span class=\"hljs-string\">\"123-456-789\"</span> };\n<span class=\"hljs-keyword\">const</span> pelneDane = { ...osoba, ...daneKontaktowe };\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pelneDane); <span class=\"hljs-comment\">// Wyświetli: { imie: \"Anna\", wiek: 28, email: \"a@example.com\", telefon: \"123-456-789\" }</span>\n</code></pre>\n<p>Jeśli klucze się powtarzają, ostatnia wartość nadpisuje poprzednią.</p>\n</li>\n<li>\n<p><strong>Przekazywanie argumentów funkcji:</strong> Możesz rozwijać tablicę jako argumenty funkcji.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sumuj</span>(<span class=\"hljs-params\">a, b, c</span>) {\n  <span class=\"hljs-keyword\">return</span> a + b + c;\n}\n<span class=\"hljs-keyword\">const</span> liczby = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sumuj</span>(...liczby)); <span class=\"hljs-comment\">// Rozwija [10, 20, 30] do sumuj(10, 20, 30), wyświetli: 60</span>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"rest-operator-operator-reszty\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#rest-operator-operator-reszty\">>>></a>Rest Operator (operator reszty)</h3>\n<p>Gdy używasz <code>...</code> do <strong>zbierania</strong> wielu elementów w jedną tablicę (lub właściwości w obiekt), mówimy o <strong>operatorze rest</strong>. Jest to jak \"zbieranie\" luźnych elementów w jedną kolekcję. 🧺</p>\n<p><strong>Zastosowania Rest Operatora:</strong></p>\n<ul>\n<li>\n<p><strong>Zbieranie argumentów funkcji:</strong> Pozwala funkcji przyjmować nieokreśloną liczbę argumentów i traktować je jako tablicę.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">suma</span>(<span class=\"hljs-params\">...liczby</span>) {\n  <span class=\"hljs-comment\">// 'liczby' zbiera wszystkie przekazane argumenty w tablicę</span>\n  <span class=\"hljs-keyword\">return</span> liczby.<span class=\"hljs-title function_\">reduce</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">akumulator, aktualnaLiczba</span>) =></span> akumulator + aktualnaLiczba,\n    <span class=\"hljs-number\">0</span>\n  );\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">suma</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// Wyświetli: 6</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">suma</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>)); <span class=\"hljs-comment\">// Wyświetli: 100</span>\n</code></pre>\n</li>\n<li>\n<p><strong>W destrukturyzacji (jak widzieliśmy wcześniej):</strong> Zbieranie pozostałych elementów do nowej tablicy lub obiektu.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> [pierwszy, drugi, ...resztaTablicy] = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pierwszy); <span class=\"hljs-comment\">// Wyświetli: 10</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(drugi); <span class=\"hljs-comment\">// Wyświetli: 20</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(resztaTablicy); <span class=\"hljs-comment\">// Wyświetli: [30, 40, 50]</span>\n\n<span class=\"hljs-keyword\">const</span> { imie, ...resztaOsoby } = {\n  <span class=\"hljs-attr\">imie</span>: <span class=\"hljs-string\">\"Ola\"</span>,\n  <span class=\"hljs-attr\">wiek</span>: <span class=\"hljs-number\">25</span>,\n  <span class=\"hljs-attr\">miasto</span>: <span class=\"hljs-string\">\"Warszawa\"</span>,\n};\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(imie); <span class=\"hljs-comment\">// Wyświetli: Ola</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(resztaOsoby); <span class=\"hljs-comment\">// Wyświetli: { wiek: 25, miasto: \"Warszawa\" }</span>\n</code></pre>\n</li>\n</ul>\n<p>Zarówno spread, jak i rest operator są niezwykle przydatne i sprawiają, że kod jest znacznie bardziej zwięzły i czytelny, szczególnie podczas pracy z tablicami i obiektami.</p>\n<hr>\n<h2 id=\"promise-api-i-obsługa-asynchroniczności--opowiadaj-historie-o-przyszłości\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#promise-api-i-obsługa-asynchroniczności--opowiadaj-historie-o-przyszłości\">>></a>Promise API i obsługa asynchroniczności – opowiadaj historie o przyszłości</h2>\n<p>JavaScript jest językiem <strong>jednowątkowym</strong>, co oznacza, że może wykonywać tylko jedną operację w danym momencie. Jednak wiele operacji, takich jak pobieranie danych z internetu, odczyt plików, czy operacje na bazie danych, trwa pewien czas. Gdyby JavaScript musiał czekać na ich zakończenie, strona internetowa by się \"zawiesiła\" (nie reagowałaby na kliknięcia, przewijanie itp.).</p>\n<p>Tutaj wkracza <strong>asynchroniczność</strong>. Pozwala ona na rozpoczęcie operacji, a następnie przejście do kolejnych zadań, nie czekając na zakończenie tej pierwszej. Kiedy asynchroniczna operacja się zakończy, JavaScript wróci do niej i wykona dalsze kroki.</p>\n<p>Starszym sposobem obsługi asynchroniczności były <strong>callbacki</strong> (funkcje zwrotne), które jednak często prowadziły do tzw. \"callback hell\" (piekła callbacków) – zagnieżdżonego, trudnego do czytania i utrzymania kodu.</p>\n<h3 id=\"czym-jest-promise\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-promise\">>>></a>Czym jest Promise?</h3>\n<p><strong>Promise (Obietnica)</strong> to obiekt w JavaScript, który reprezentuje ostateczne zakończenie (lub niepowodzenie) operacji asynchronicznej. Możesz myśleć o Promise jako o \"przyszłej wartości\". Składasz obietnicę, że w przyszłości otrzymasz wynik – albo sukces, albo błąd. 📦</p>\n<p>Promise może znajdować się w jednym z trzech stanów:</p>\n<ol>\n<li><strong><code>pending</code> (oczekujący)</strong>: Początkowy stan; ani spełniony, ani odrzucony. Operacja asynchroniczna nadal trwa.</li>\n<li><strong><code>fulfilled</code> (spełniony)</strong>: Operacja asynchroniczna zakończyła się sukcesem i zwróciła wartość.</li>\n<li><strong><code>rejected</code> (odrzucony)</strong>: Operacja asynchroniczna zakończyła się błędem.</li>\n</ol>\n<p>Możesz \"podpiąć\" funkcje, które zostaną wywołane, gdy Promise zmieni swój stan:</p>\n<ul>\n<li><strong><code>.then()</code></strong>: Wywoływany, gdy Promise zostanie <code>fulfilled</code> (operacja zakończy się sukcesem). Otrzymuje wartość zwróconą przez Promise.</li>\n<li><strong><code>.catch()</code></strong>: Wywoływany, gdy Promise zostanie <code>rejected</code> (wystąpi błąd). Otrzymuje obiekt błędu.</li>\n<li><strong><code>.finally()</code></strong>: Wywoływany zawsze, niezależnie od tego, czy Promise zakończył się sukcesem, czy błędem. Idealny do czyszczenia zasobów.</li>\n</ul>\n<p><strong>Przykład tworzenia i używania Promise:</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> obietnica = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-comment\">// Symulujemy operację asynchroniczną (np. pobieranie danych)</span>\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> sukces = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() > <span class=\"hljs-number\">0.5</span>; <span class=\"hljs-comment\">// Losowo decydujemy o sukcesie lub błędzie</span>\n\n    <span class=\"hljs-keyword\">if</span> (sukces) {\n      <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">\"Dane pobrane pomyślnie!\"</span>); <span class=\"hljs-comment\">// Jeśli sukces, wywołujemy resolve z wynikiem</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">\"Nie udało się pobrać danych.\"</span>)); <span class=\"hljs-comment\">// Jeśli błąd, wywołujemy reject z błędem</span>\n    }\n  }, <span class=\"hljs-number\">2000</span>); <span class=\"hljs-comment\">// Operacja trwa 2 sekundy</span>\n});\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Rozpoczęto operację...\"</span>);\n\nobietnica\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">wiadomosc</span>) =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"SUKCES:\"</span>, wiadomosc); <span class=\"hljs-comment\">// Wykona się, jeśli obietnica się spełni</span>\n  })\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">blad</span>) =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"BŁĄD:\"</span>, blad.<span class=\"hljs-property\">message</span>); <span class=\"hljs-comment\">// Wykona się, jeśli obietnica zostanie odrzucona</span>\n  })\n  .<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Operacja zakończona (niezależnie od wyniku).\"</span>); <span class=\"hljs-comment\">// Wykona się zawsze</span>\n  });\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Kod po obietnicy nadal się wykonuje...\"</span>); <span class=\"hljs-comment\">// Pokazuje asynchroniczność</span>\n</code></pre>\n<h3 id=\"łańcuchy-promise-promise-chaining\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#łańcuchy-promise-promise-chaining\">>>></a>Łańcuchy Promise (<code>Promise Chaining</code>)</h3>\n<p>Jedną z największych zalet Promise jest możliwość łączenia wielu operacji asynchronicznych w jeden czytelny \"łańcuch\". Każdy <code>.then()</code> zwraca nowy Promise, co pozwala na kolejne <code>.then()</code> wywołane po sobie. Jest to idealne, gdy jedna operacja asynchroniczna zależy od wyniku poprzedniej.</p>\n<p><strong>Przykład łańcucha Promise (pobieranie danych z API):</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// fetch() to wbudowana funkcja JS, która zwraca Promise</span>\n<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"https://jsonplaceholder.typicode.com/users/1\"</span>) <span class=\"hljs-comment\">// Pobierz dane użytkownika o ID 1</span>\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> {\n    <span class=\"hljs-comment\">// Pierwsze .then: sprawdź, czy odpowiedź jest OK i sparsuj ją jako JSON</span>\n    <span class=\"hljs-keyword\">if</span> (!response.<span class=\"hljs-property\">ok</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`Błąd HTTP! Status: <span class=\"hljs-subst\">${response.status}</span>`</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-title function_\">json</span>(); <span class=\"hljs-comment\">// Zwróć kolejny Promise z danymi JSON</span>\n  })\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">user</span>) =></span> {\n    <span class=\"hljs-comment\">// Drugie .then: otrzymaj sparsowane dane użytkownika</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Pobrany użytkownik:\"</span>, user.<span class=\"hljs-property\">name</span>, user.<span class=\"hljs-property\">email</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fetch</span>(\n      <span class=\"hljs-string\">`https://jsonplaceholder.typicode.com/posts?userId=<span class=\"hljs-subst\">${user.id}</span>`</span>\n    ); <span class=\"hljs-comment\">// Pobierz posty tego użytkownika</span>\n  })\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =></span> {\n    <span class=\"hljs-comment\">// Trzecie .then: sprawdź odpowiedź i sparsuj posty</span>\n    <span class=\"hljs-keyword\">if</span> (!response.<span class=\"hljs-property\">ok</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`Błąd HTTP! Status: <span class=\"hljs-subst\">${response.status}</span>`</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-title function_\">json</span>();\n  })\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">posts</span>) =></span> {\n    <span class=\"hljs-comment\">// Czwarte .then: otrzymaj posty</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Liczba postów użytkownika:\"</span>, posts.<span class=\"hljs-property\">length</span>);\n  })\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =></span> {\n    <span class=\"hljs-comment\">// .catch: Obsłuż każdy błąd, który wystąpił na dowolnym etapie łańcucha</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Wystąpił błąd w łańcuchu Promise:\"</span>, error);\n  })\n  .<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Pobieranie danych zakończone.\"</span>);\n  });\n</code></pre>\n<p>Promise to podstawa nowoczesnego JS w obsłudze asynchroniczności, a kolejny rozdział pokaże Ci, jak jeszcze bardziej uprościć ich użycie.</p>\n<hr>\n<h2 id=\"asyncawait--nowoczesna-obsługa-kodu-asynchronicznego--pisz-asynchronicznie-myśl-synchronicznie\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#asyncawait--nowoczesna-obsługa-kodu-asynchronicznego--pisz-asynchronicznie-myśl-synchronicznie\">>></a>Async/await – nowoczesna obsługa kodu asynchronicznego – pisz asynchronicznie, myśl synchronicznie</h2>\n<p>Mimo że Promise są ogromnym krokiem naprzód w porównaniu do callbacków, kod z długimi łańcuchami <code>.then().then().catch()</code> może wciąż być trudny do czytania. Standard ES2017 wprowadził słowa kluczowe <strong><code>async</code></strong> i <strong><code>await</code></strong>, które pozwalają pisać kod asynchroniczny w sposób, który wygląda i zachowuje się niemal identycznie jak kod synchroniczny, jednocześnie zachowując asynchroniczną naturę. To game changer! 🎮</p>\n<h3 id=\"uproszczenie-pracy-z-promise\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#uproszczenie-pracy-z-promise\">>>></a>Uproszczenie pracy z Promise</h3>\n<ul>\n<li><strong><code>async</code></strong>: Musisz oznaczyć funkcję słowem kluczowym <code>async</code>, aby móc używać w niej <code>await</code>. Funkcja <code>async</code> <strong>zawsze zwraca Promise</strong>, nawet jeśli zwrócisz w niej zwykłą wartość – JavaScript automatycznie opakuje ją w Promise.</li>\n<li><strong><code>await</code></strong>: Słowo kluczowe <code>await</code> może być użyte <strong>tylko wewnątrz funkcji <code>async</code></strong>. Powoduje ono, że wykonanie funkcji <code>async</code> zostaje <strong>wstrzymane</strong>, dopóki Promise, na który czeka <code>await</code>, nie zostanie <strong>spełniony (fulfilled)</strong>. Kiedy Promise się spełni, <code>await</code> \"rozpakowuje\" jego wartość i przypisuje ją do zmiennej. Jeśli Promise zostanie odrzucony (rejected), <code>await</code> \"wyrzuci\" błąd, który możesz obsłużyć za pomocą <code>try...catch</code>.</li>\n</ul>\n<p><strong>Przykład użycia <code>async/await</code> (porównaj z przykładem z Promise Chaining):</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pobierzDaneUzytkownikaIPosty</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Rozpoczynam pobieranie danych...\"</span>);\n\n    <span class=\"hljs-comment\">// Krok 1: Pobierz dane użytkownika</span>\n    <span class=\"hljs-keyword\">const</span> userResponse = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(\n      <span class=\"hljs-string\">\"https://jsonplaceholder.typicode.com/users/1\"</span>\n    );\n    <span class=\"hljs-keyword\">if</span> (!userResponse.<span class=\"hljs-property\">ok</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(\n        <span class=\"hljs-string\">`Błąd HTTP przy pobieraniu użytkownika! Status: <span class=\"hljs-subst\">${userResponse.status}</span>`</span>\n      );\n    }\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> userResponse.<span class=\"hljs-title function_\">json</span>(); <span class=\"hljs-comment\">// Poczekaj na parsowanie JSON</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Pobrany użytkownik:\"</span>, user.<span class=\"hljs-property\">name</span>, user.<span class=\"hljs-property\">email</span>);\n\n    <span class=\"hljs-comment\">// Krok 2: Pobierz posty tego użytkownika</span>\n    <span class=\"hljs-keyword\">const</span> postsResponse = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(\n      <span class=\"hljs-string\">`https://jsonplaceholder.typicode.com/posts?userId=<span class=\"hljs-subst\">${user.id}</span>`</span>\n    );\n    <span class=\"hljs-keyword\">if</span> (!postsResponse.<span class=\"hljs-property\">ok</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(\n        <span class=\"hljs-string\">`Błąd HTTP przy pobieraniu postów! Status: <span class=\"hljs-subst\">${postsResponse.status}</span>`</span>\n      );\n    }\n    <span class=\"hljs-keyword\">const</span> posts = <span class=\"hljs-keyword\">await</span> postsResponse.<span class=\"hljs-title function_\">json</span>(); <span class=\"hljs-comment\">// Poczekaj na parsowanie JSON</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Liczba postów użytkownika:\"</span>, posts.<span class=\"hljs-property\">length</span>);\n\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Wszystkie dane zostały pobrane pomyślnie.\"</span>);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-comment\">// Obsługa każdego błędu, który wystąpił na dowolnym etapie</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Wystąpił błąd w funkcji async:\"</span>, error.<span class=\"hljs-property\">message</span>);\n  } <span class=\"hljs-keyword\">finally</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Operacja pobierania danych zakończona.\"</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Wywołanie funkcji async</span>\n<span class=\"hljs-title function_\">pobierzDaneUzytkownikaIPosty</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Kod poza funkcją async nadal się wykonuje...\"</span>); <span class=\"hljs-comment\">// Pokazuje asynchroniczność</span>\n</code></pre>\n<p>Widzisz, jak kod stał się znacznie bardziej liniowy i czytelny? Wygląda to prawie jak tradycyjny kod synchroniczny, mimo że w tle nadal działają Promise i cała magia asynchroniczności.</p>\n<h3 id=\"zwracanie-wartości-i-obsługa-błędów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zwracanie-wartości-i-obsługa-błędów\">>>></a>Zwracanie wartości i obsługa błędów</h3>\n<ul>\n<li>\n<p><strong>Zwracanie wartości z funkcji <code>async</code></strong>:\nJeśli funkcja <code>async</code> zwraca jakąś wartość, ta wartość jest automatycznie opakowywana w Promise, który zostanie spełniony z tą wartością.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">zwrocLiczbe</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Możesz też użyć await, np. await Promise.resolve(42);</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>;\n}\n<span class=\"hljs-title function_\">zwrocLiczbe</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(val)); <span class=\"hljs-comment\">// Wyświetli: 42</span>\n</code></pre>\n</li>\n<li>\n<p><strong>Obsługa błędów z <code>try...catch</code></strong>:\nNajwiększą zaletą <code>async/await</code> jest to, że pozwala na używanie standardowych bloków <code>try...catch</code> do obsługi błędów w kodzie asynchronicznym. Jeśli Promise, na który czeka <code>await</code>, zostanie odrzucony (rejected), <code>await</code> \"rzuci\" błąd, który zostanie przechwycony przez blok <code>catch</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">symulujBlad</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n      <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">\"Coś poszło nie tak!\"</span>)), <span class=\"hljs-number\">1000</span>);\n    });\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result); <span class=\"hljs-comment\">// To się nie wykona</span>\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Złapano błąd:\"</span>, error.<span class=\"hljs-property\">message</span>); <span class=\"hljs-comment\">// Wyświetli: Złapano błąd: Coś poszło nie tak!</span>\n  }\n}\n<span class=\"hljs-title function_\">symulujBlad</span>();\n</code></pre>\n</li>\n</ul>\n<p><code>async/await</code> to obecnie <strong>najczęściej rekomendowany</strong> sposób pracy z asynchronicznością w JavaScript, ponieważ znacząco poprawia czytelność i łatwość utrzymania kodu, sprawiając, że złożone operacje asynchroniczne stają się bardziej przejrzyste.</p>\n<hr>\n<h2 id=\"zadania-do-wykonania-sprawdź-swoją-wiedzę\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania-sprawdź-swoją-wiedzę\">>></a>Zadania do wykonania: Sprawdź swoją wiedzę!</h2>\n<p>Czas na praktykę! Rozwiąż te zadania, aby utrwalić to, czego się nauczyłeś/aś. Po każdym zadaniu możesz rozwinąć sekcję <code>Pokaż rozwiązanie</code>, aby sprawdzić swój kod. Powodzenia! 💪</p>\n<h3 id=\"zadanie-1\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1\">>>></a>Zadanie 1</h3>\n<p>Napisz <strong>funkcję strzałkową</strong>, która przyjmuje dowolną liczbę argumentów numerycznych i zwraca ich sumę. Użyj <strong>rest operatora</strong> do zebrania argumentów.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sumaWszystkichLiczb</span> = (<span class=\"hljs-params\">...liczby</span>) => {\n  <span class=\"hljs-keyword\">return</span> liczby.<span class=\"hljs-title function_\">reduce</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">akumulator, aktualnaLiczba</span>) =></span> akumulator + aktualnaLiczba,\n    <span class=\"hljs-number\">0</span>\n  );\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sumaWszystkichLiczb</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// Oczekiwany wynik: 6</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sumaWszystkichLiczb</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>)); <span class=\"hljs-comment\">// Oczekiwany wynik: 100</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sumaWszystkichLiczb</span>()); <span class=\"hljs-comment\">// Oczekiwany wynik: 0</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2\">>>></a>Zadanie 2</h3>\n<p>Utwórz obiekt reprezentujący produkt z kluczami: <code>nazwa</code>, <code>cena</code>, <code>dostepny</code>. Następnie użyj <strong>destrukturyzacji obiektu</strong>, aby wyodrębnić te wartości do osobnych zmiennych i wyświetlić je w konsoli. Dodaj również zmienną <code>producent</code> z wartością domyślną \"Nieznany\", na wypadek gdyby nie było jej w obiekcie.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> produkt = { <span class=\"hljs-attr\">nazwa</span>: <span class=\"hljs-string\">\"Książka JS\"</span>, <span class=\"hljs-attr\">cena</span>: <span class=\"hljs-number\">49.99</span>, <span class=\"hljs-attr\">dostepny</span>: <span class=\"hljs-literal\">true</span> };\n\n<span class=\"hljs-keyword\">const</span> { nazwa, cena, dostepny, producent = <span class=\"hljs-string\">\"Nieznany\"</span> } = produkt;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Nazwa: <span class=\"hljs-subst\">${nazwa}</span>`</span>); <span class=\"hljs-comment\">// Oczekiwany wynik: Nazwa: Książka JS</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Cena: <span class=\"hljs-subst\">${cena}</span> zł`</span>); <span class=\"hljs-comment\">// Oczekiwany wynik: Cena: 49.99 zł</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Dostępny: <span class=\"hljs-subst\">${dostepny}</span>`</span>); <span class=\"hljs-comment\">// Oczekiwany wynik: Dostępny: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Producent: <span class=\"hljs-subst\">${producent}</span>`</span>); <span class=\"hljs-comment\">// Oczekiwany wynik: Producent: Nieznany</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3\">>>></a>Zadanie 3</h3>\n<p>Stwórz tablicę ulubionych filmów. Następnie użyj <strong>operatora spread</strong> do utworzenia nowej tablicy, która będzie zawierać wszystkie te filmy plus dwa dodatkowe filmy na końcu. Wyświetl nową tablicę w konsoli.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> ulubioneFilmy = [<span class=\"hljs-string\">\"Incepcja\"</span>, <span class=\"hljs-string\">\"Matrix\"</span>, <span class=\"hljs-string\">\"Interstellar\"</span>];\n\n<span class=\"hljs-keyword\">const</span> nowaListaFilmow = [...ulubioneFilmy, <span class=\"hljs-string\">\"Pulp Fiction\"</span>, <span class=\"hljs-string\">\"Forrest Gump\"</span>];\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(nowaListaFilmow);\n<span class=\"hljs-comment\">// Oczekiwany wynik: [\"Incepcja\", \"Matrix\", \"Interstellar\", \"Pulp Fiction\", \"Forrest Gump\"]</span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4\">>>></a>Zadanie 4</h3>\n<p>Napisz <strong>funkcję asynchroniczną</strong> o nazwie <code>pobierzWiadomosc</code>, która symuluje pobieranie wiadomości z serwera. Funkcja powinna używać <code>setTimeout</code>, aby po 3 sekundach zwrócić tekst \"Wiadomość pobrana!\". Użyj <code>async/await</code> do wywołania tej funkcji i wyświetlenia jej wyniku w konsoli. Dodaj również blok <code>try...catch</code> do obsługi potencjalnych błędów.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Funkcja symulująca pobieranie danych (zwraca Promise)</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">pobierzWiadomoscAPI</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-comment\">// Możesz zmienić to na reject, aby przetestować obsługę błędów</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() > <span class=\"hljs-number\">0.1</span>) {\n        <span class=\"hljs-comment\">// 90% szans na sukces, 10% na błąd</span>\n        <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">\"Wiadomość pobrana pomyślnie!\"</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">\"Błąd podczas pobierania wiadomości!\"</span>));\n      }\n    }, <span class=\"hljs-number\">3000</span>); <span class=\"hljs-comment\">// Symulujemy 3 sekundy oczekiwania</span>\n  });\n};\n\n<span class=\"hljs-comment\">// Funkcja asynchroniczna używająca async/await</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pobierzWiadomosc</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Rozpoczynam pobieranie wiadomości...\"</span>);\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> wiadomosc = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">pobierzWiadomoscAPI</span>(); <span class=\"hljs-comment\">// Czekaj, aż Promise się spełni</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Sukces:\"</span>, wiadomosc);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Wystąpił błąd:\"</span>, error.<span class=\"hljs-property\">message</span>); <span class=\"hljs-comment\">// Złap i wyświetl błąd</span>\n  } <span class=\"hljs-keyword\">finally</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Zakończono próbę pobierania wiadomości.\"</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// Wywołaj funkcję asynchroniczną</span>\n<span class=\"hljs-title function_\">pobierzWiadomosc</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n  <span class=\"hljs-string\">\"Ten tekst wyświetli się natychmiast po uruchomieniu programu, zanim wiadomość zostanie pobrana.\"</span>\n);\n</code></pre>\n</details>\n<hr>\n<p>Gratulacje! 🎉 Dotarłeś/aś do końca kursu wprowadzającego w nowoczesny JavaScript. Masz teraz solidne podstawy do dalszego rozwoju. Pamiętaj, że kluczem jest praktyka – im więcej będziesz kodować, tym lepiej zrozumiesz te koncepcje.</p>\n<p>Co chciałbyś/chciałabyś zgłębić dalej? Może:</p>\n<ul>\n<li><strong>Moduły ES6</strong> (import/export)?</li>\n<li><strong>Klasy</strong> w JavaScript (obiektowość)?</li>\n<li><strong>Metody tablicowe</strong> (map, filter, reduce)?</li>\n<li>Głębsze nurkowanie w <strong>asynchroniczność</strong> i Web API?</li>\n</ul>\n<p>Daj znać! 😊</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/nowoczesny-javascript.md","18 minut",{"_21":1014,"_23":1015,"_25":1016,"_6":1021,"_36":967,"_38":1022,"_91":1065,"_93":1066,"_95":1067,"_97":1068,"_99":1069},"Wprowadzenie do metodyki BEM","Czym jest BEM? BEM (Block, Element, Modifier) to metodyka nazewnictwa klas CSS, która pomaga tworzyć komponenty interfejsu użytkownika w sposób modularny i łatwy do utrzymania. BEM dzieli interfejs na bloki, elementy i modyfikatory, co pozwala na lepszą organizację kodu CSS.",[744,14,1017,1018,1019,1020,9,34],"bem","metodyka","metodyki","stylowanie",[14,9],{"_21":1023,"_41":1024},"Quiz: Podstawy metodyki BEM",[1025,1033,1041,1049,1057],{"_44":1026,"_46":1027,"_52":71,"_54":1032},"<p>Co oznaczają skróty BEM w kontekście CSS?</p>",[1028,1029,1030,1031],"Block, Element, Modifier","Block, Example, Method","Base, Extension, Model","Basic, Element, Main","BEM to skrót od Block, Element, Modifier.",{"_44":1034,"_46":1035,"_52":89,"_54":1040},"<p>Jaką klasę powinien mieć element będący częścią bloku 'menu' według BEM?</p>",[1036,1037,1038,1039],"menu-item","item__menu","menu__item","menu--item","Element w BEM zapisujemy jako blok__element, np. ```menu__item```.",{"_44":1042,"_46":1043,"_52":53,"_54":1048},"<p>W jaki sposób w BEM zapisuje się modyfikator bloku 'button'?</p>",[1044,1045,1046,1047],"button:primary","button-primary","button__primary","button--primary","Modyfikator zapisujemy jako blok--modyfikator, np. button--primary.",{"_44":1050,"_46":1051,"_52":89,"_54":1056},"<p>Które z poniższych NIE jest zgodne z zasadami BEM?</p>",[1052,1053,1054,1055],"form--login","form__input--active","form__input__label","form__group","form__input__label łamie zasadę: nie zagnieżdżamy elementów w elementach.",{"_44":1058,"_46":1059,"_52":71,"_54":1064},"<p>Dlaczego warto stosować BEM?</p>",[1060,1061,1062,1063],"Bo ułatwia modularność i unikanie konfliktów nazw klas","Bo jest wymagane przez wszystkie przeglądarki","Bo wymusza używanie tylko jednego pliku CSS","Bo pozwala pisać CSS wyłącznie w JavaScript","BEM zwiększa modularność, czytelność i pomaga unikać konfliktów w nazwach klas.","6a9117bd-a027-4ae5-bb47-a11768215417","szybszy-css-czyli-wprowadzenie-do-bem","<p>Witaj w świecie <strong>BEM</strong>! 🚀 Jeśli pracujesz nad coraz większymi i bardziej złożonymi projektami webowymi, z pewnością zauważasz, jak łatwo kod CSS może stać się chaotyczny i trudny do zarządzania. Właśnie tutaj z pomocą przychodzi <strong>BEM</strong> – metodyka, która wprowadza porządek i logikę do Twoich stylów, sprawiając, że są one <strong>modułowe, skalowalne i łatwe do utrzymania</strong>. Gotowy/a na rewolucję w sposobie pisania CSS? Zaczynamy! 💡</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-bem-i-dlaczego-warto-go-stosowa%C4%87\">Czym jest BEM i dlaczego warto go stosować?</a></li>\n<li><a href=\"#trzy-filary-bem-blok-element-modyfikator\">Trzy filary BEM: Blok, Element, Modyfikator</a>\n<ul>\n<li><a href=\"#blok-block\">Blok (Block)</a></li>\n<li><a href=\"#element-element\">Element (Element)</a></li>\n<li><a href=\"#modyfikator-modifier\">Modyfikator (Modifier)</a></li>\n</ul>\n</li>\n<li><a href=\"#konwencje-nazewnictwa-w-bem\">Konwencje nazewnictwa w BEM</a></li>\n<li><a href=\"#praktyczny-przyk%C5%82ad-kodu-z-bem\">Praktyczny przykład kodu z BEM</a></li>\n<li><a href=\"#zasady-i-najlepsze-praktyki-bem\">Zasady i najlepsze praktyki BEM</a></li>\n<li><a href=\"#zaawansowane-przyk%C5%82ady-zastosowania-bem\">Zaawansowane przykłady zastosowania BEM</a>\n<ul>\n<li><a href=\"#formularz-logowania\">Formularz logowania</a></li>\n</ul>\n</li>\n<li><a href=\"#zadania-do-wykonania-sprawd%C5%BA-swoje-umiej%C4%99tno%C5%9Bci\">Zadania do wykonania: Sprawdź swoje umiejętności!</a>\n<ul>\n<li><a href=\"#zadanie-1-karta-produktu\">Zadanie 1: Karta produktu</a></li>\n<li><a href=\"#zadanie-2-nawigacja\">Zadanie 2: Nawigacja</a></li>\n<li><a href=\"#zadanie-3-artyku%C5%82-na-blogu\">Zadanie 3: Artykuł na blogu</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-bem-i-dlaczego-warto-go-stosować\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-bem-i-dlaczego-warto-go-stosować\">>></a>Czym jest BEM i dlaczego warto go stosować?</h2>\n<p><strong>BEM</strong> to skrót od <strong>Block, Element, Modifier</strong> (Blok, Element, Modyfikator). To nie jest język programowania ani framework CSS, lecz <strong>metodyka nazewnictwa klas CSS</strong>. Jej głównym celem jest uporządkowanie i ustandaryzowanie sposobu, w jaki nadajesz nazwy swoim klasom w HTML i CSS, co prowadzi do:</p>\n<ul>\n<li><strong>Modularności:</strong> Każdy komponent jest niezależny i może być ponownie użyty w różnych miejscach projektu bez obawy o konflikty stylów.</li>\n<li><strong>Łatwości utrzymania:</strong> Dzięki jasnym i przewidywalnym nazwom klas, Ty (lub inni deweloperzy) możecie szybko zrozumieć strukturę i przeznaczenie każdego elementu, co ułatwia debugowanie i wprowadzanie zmian.</li>\n<li><strong>Skalowalności:</strong> Metodyka BEM świetnie sprawdza się w dużych projektach z wieloma deweloperami, zapewniając spójność i minimalizując ryzyko regresji.</li>\n<li><strong>Unikania konfliktów:</strong> Unikalne nazwy klas dla bloków, elementów i modyfikatorów znacznie zmniejszają szansę na niepożądane nadpisywanie stylów.</li>\n<li><strong>Jasności kodu:</strong> Nazwa klasy od razu mówi, co dany element reprezentuje i jaką ma rolę w kontekście bloku.</li>\n</ul>\n<p>Wyobraź sobie budowanie domu z klocków LEGO. HTML to Twoje klocki, a CSS to farby i dekoracje. Bez BEM, każdy deweloper mógłby nazwać czerwony klocek \"czerwony\", \"blok-kolor\", \"rzecz-czerwona\", co szybko prowadziłoby do bałaganu. BEM zapewnia, że wszyscy nazywają ten klocek \"budynek__ściana--czerwona\", od razu wiedząc, że to ściana należąca do budynku, w wariancie czerwonym.</p>\n<hr>\n<h2 id=\"trzy-filary-bem-blok-element-modyfikator\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#trzy-filary-bem-blok-element-modyfikator\">>></a>Trzy filary BEM: Blok, Element, Modyfikator</h2>\n<p>Podstawą metodyki BEM są trzy kluczowe koncepty, które określają sposób organizacji i nazewnictwa klas CSS.</p>\n<h3 id=\"blok-block\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#blok-block\">>>></a>Blok (Block)</h3>\n<p><strong>Blok</strong> to niezależny, samodzielny komponent interfejsu użytkownika. Możesz go myśleć jako o „funkcjonalnej” i „wizualnej” całości, którą można przenieść i użyć w dowolnym miejscu strony. Blok może zawierać w sobie inne bloki lub elementy.</p>\n<p><strong>Cechy bloku:</strong></p>\n<ul>\n<li>Jest niezależny i może być umieszczony w dowolnym miejscu.</li>\n<li>Ma unikalną nazwę, która opisuje jego przeznaczenie (np. <code>header</code>, <code>menu</code>, <code>button</code>, <code>form</code>, <code>card</code>).</li>\n<li>Nie powinien mieć marginesów zewnętrznych (margin) ani pozycji (position), które mogłyby wpłynąć na jego umiejscowienie w innym kontekście. Te style powinny być zarządzane przez jego rodzica lub inny blok.</li>\n</ul>\n<p><strong>Przykłady nazw bloków:</strong></p>\n<ul>\n<li><code>.header</code></li>\n<li><code>.button</code></li>\n<li><code>.search</code></li>\n<li><code>.product-card</code></li>\n</ul>\n<p><strong>Przykład HTML:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"header\"</span>></span>...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button\"</span>></span>...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"search\"</span>></span>...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n</code></pre>\n<h3 id=\"element-element\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#element-element\">>>></a>Element (Element)</h3>\n<p><strong>Element</strong> to część bloku, która <strong>nie ma samodzielnego znaczenia</strong> poza kontekstem swojego bloku. Jest funkcjonalnie zależny od bloku, do którego należy.</p>\n<p><strong>Cechy elementu:</strong></p>\n<ul>\n<li>Nie można go używać samodzielnie poza blokiem.</li>\n<li>Nazwa elementu jest związana z nazwą bloku za pomocą <strong>dwóch podkreślników (<code>__</code>)</strong>.</li>\n<li>Nazwa opisuje jego przeznaczenie w kontekście bloku (np. <code>menu__item</code>, <code>button__icon</code>, <code>form__input</code>).</li>\n<li>Element może zawierać w sobie inne elementy, ale w nazewnictwie BEM zawsze odwołujemy się do <strong>bloku rodzica</strong>, a nie do elementu, który jest jego bezpośrednim rodzicem. Dzięki temu struktura nazewnictwa jest \"płaska\" i czytelna.</li>\n</ul>\n<p><strong>Przykłady nazw elementów:</strong></p>\n<ul>\n<li><code>.menu__item</code> (element <code>item</code> bloku <code>menu</code>)</li>\n<li><code>.button__icon</code> (element <code>icon</code> bloku <code>button</code>)</li>\n<li><code>.search__field</code> (element <code>field</code> bloku <code>search</code>)</li>\n</ul>\n<p><strong>Przykład HTML:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"menu\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"menu__item\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Strona główna<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"menu__item\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>O nas<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button__icon\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button__text\"</span>></span>Wyślij<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n</code></pre>\n<h3 id=\"modyfikator-modifier\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#modyfikator-modifier\">>>></a>Modyfikator (Modifier)</h3>\n<p><strong>Modyfikator</strong> to flaga lub atrybut, który definiuje <strong>wygląd, stan lub zachowanie</strong> bloku lub elementu. Modyfikatory służą do tworzenia wariantów komponentów bez konieczności duplikowania kodu CSS.</p>\n<p><strong>Cechy modyfikatora:</strong></p>\n<ul>\n<li>Zawsze występuje obok nazwy bloku lub elementu, do którego się odnosi.</li>\n<li>Nazwa modyfikatora jest związana z nazwą bloku lub elementu za pomocą <strong>dwóch myślników (<code>--</code>)</strong>.</li>\n<li>Opisuje cechę lub stan (np. <code>button--primary</code>, <code>button--disabled</code>, <code>menu__item--active</code>).</li>\n<li>Element może mieć wiele modyfikatorów.</li>\n</ul>\n<p><strong>Przykłady nazw modyfikatorów:</strong></p>\n<ul>\n<li><code>.button--primary</code> (blok <code>button</code> w wariancie <code>primary</code>)</li>\n<li><code>.button--disabled</code> (blok <code>button</code> w stanie <code>disabled</code>)</li>\n<li><code>.menu__item--active</code> (element <code>item</code> bloku <code>menu</code> w stanie <code>active</code>)</li>\n</ul>\n<p><strong>Przykład HTML:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button button--primary\"</span>></span>Główny przycisk<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button button--disabled\"</span>></span>Wyłączony przycisk<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"menu\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"menu__item menu__item--active\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Aktywna pozycja menu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"menu__item\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Inna pozycja menu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<p><strong>Ważne:</strong> Zauważ, że modyfikator <strong>zawsze jest dodawany jako dodatkowa klasa</strong> do istniejącej klasy bloku lub elementu, a nie zastępuje jej.</p>\n<hr>\n<h2 id=\"konwencje-nazewnictwa-w-bem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#konwencje-nazewnictwa-w-bem\">>></a>Konwencje nazewnictwa w BEM</h2>\n<p>Konwencje nazewnictwa w BEM są rygorystyczne, co pomaga utrzymać spójność i czytelność:</p>\n<ul>\n<li><strong>Nazwy klas powinny być pisane małymi literami.</strong></li>\n<li><strong>Słowa w nazwach oddzielamy pojedynczym myślnikiem <code>-</code>.</strong> (np. <code>product-card</code>, <code>search-field</code>)</li>\n<li><strong>Blok</strong>\n<ul>\n<li>Samo nazwa, np. <code>.</code><strong><code>block</code></strong></li>\n<li>Przykład: <code>.button</code>, <code>.header</code>, <code>.form</code></li>\n</ul>\n</li>\n<li><strong>Element</strong>\n<ul>\n<li>Nazwa bloku, po której następują dwa podkreślniki <code>__</code>, a następnie nazwa elementu, np. <code>.</code><strong><code>block__element</code></strong></li>\n<li>Przykład: <code>.button__icon</code>, <code>.header__logo</code>, <code>.form__input</code></li>\n</ul>\n</li>\n<li><strong>Modyfikator</strong>\n<ul>\n<li>Nazwa bloku lub elementu, po której następują dwa myślniki <code>--</code>, a następnie nazwa modyfikatora, np. <code>.</code><strong><code>block--modifier</code></strong> lub <code>.</code><strong><code>block__element--modifier</code></strong></li>\n<li>Przykład: <code>.button--primary</code>, <code>.button--disabled</code>, <code>.form__input--error</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>Poprawne vs. Niepoprawne:</strong></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Kategoria</th><th align=\"left\">Poprawne użycie BEM</th><th align=\"left\">Niepoprawne użycie BEM</th><th align=\"left\">Dlaczego?</th></tr></thead><tbody><tr><td align=\"left\"><strong>Blok</strong></td><td align=\"left\"><code>.card</code>, <code>.profile</code>, <code>.button</code></td><td align=\"left\"><code>.my_card</code>, <code>.profile-widget</code></td><td align=\"left\">Używaj myślników dla rozdzielenia słów, nie podkreślników. Nazwa powinna być zwięzła.</td></tr><tr><td align=\"left\"><strong>Element</strong></td><td align=\"left\"><code>.card__title</code>, <code>.profile__avatar</code></td><td align=\"left\"><code>.card-title</code>, <code>.profile_avatar</code>, <code>.card__header__title</code></td><td align=\"left\">Zawsze <code>__</code>. Nie zagnieżdżaj elementów w nazwach (np. <code>__header__title</code> jest błędem).</td></tr><tr><td align=\"left\"><strong>Modyfikator</strong></td><td align=\"left\"><code>.button--primary</code>, <code>.card--disabled</code></td><td align=\"left\"><code>.button-primary</code>, <code>.card_disabled</code></td><td align=\"left\">Zawsze <code>--</code>.</td></tr><tr><td align=\"left\"><strong>Zagnieżdżanie</strong></td><td align=\"left\"><code>&#x3C;div class=\"card\">&#x3C;h2 class=\"card__title\">&#x3C;/h2>&#x3C;/div></code></td><td align=\"left\"><code>&#x3C;div class=\"card\">&#x3C;h2 class=\"card-title\">&#x3C;/h2>&#x3C;/div></code></td><td align=\"left\"><code>card-title</code> nie jest zgodnie z konwencją BEM.</td></tr></tbody></table>\n<hr>\n<h2 id=\"praktyczny-przykład-kodu-z-bem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#praktyczny-przykład-kodu-z-bem\">>></a>Praktyczny przykład kodu z BEM</h2>\n<p>Spójrzmy na prosty przykład komponentu <strong>Przycisku</strong> w podejściu BEM.</p>\n<p><strong>HTML (plik <code>index.html</code>):</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Przykład BEM - Przycisk<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Przyciski BEM<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button__text\"</span>></span>Zwykły przycisk<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button button--primary\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button__text\"</span>></span>Główny przycisk<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button__icon\"</span>></span>🚀<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button button--danger\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button__text\"</span>></span>Usuń<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button button--primary button--disabled\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button__text\"</span>></span>Wyłączony<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><strong>CSS (plik <code>style.css</code>):</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* style.css */</span>\n\n<span class=\"hljs-comment\">/* --- BLOK: button --- */</span>\n<span class=\"hljs-selector-class\">.button</span> {\n  <span class=\"hljs-attribute\">display</span>: inline-flex; <span class=\"hljs-comment\">/* Ułatwia wyrównanie tekstu i ikony */</span>\n  <span class=\"hljs-attribute\">align-items</span>: center;\n  <span class=\"hljs-attribute\">justify-content</span>: center;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>;\n  <span class=\"hljs-attribute\">cursor</span>: pointer;\n  <span class=\"hljs-attribute\">font-family</span>: Arial, sans-serif;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;\n  <span class=\"hljs-attribute\">transition</span>: background-color <span class=\"hljs-number\">0.3s</span> ease; <span class=\"hljs-comment\">/* Płynne przejście */</span>\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-comment\">/* Tylko do celów demonstracyjnych, bloki nie powinny mieć marginu domyślnie */</span>\n}\n\n<span class=\"hljs-selector-class\">.button</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#e0e0e0</span>;\n}\n\n<span class=\"hljs-comment\">/* --- ELEMENTY: button__text, button__icon --- */</span>\n<span class=\"hljs-selector-class\">.button__text</span> {\n  <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">5px</span>; <span class=\"hljs-comment\">/* Odstęp między tekstem a ikoną */</span>\n}\n\n<span class=\"hljs-selector-class\">.button__icon</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.2em</span>;\n}\n\n<span class=\"hljs-comment\">/* --- MODYFIKATORY BLOKU: button--primary, button--danger, button--disabled --- */</span>\n<span class=\"hljs-selector-class\">.button--primary</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#007bff</span>;\n  <span class=\"hljs-attribute\">color</span>: white;\n  <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#007bff</span>;\n}\n\n<span class=\"hljs-selector-class\">.button--primary</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#0056b3</span>;\n}\n\n<span class=\"hljs-selector-class\">.button--danger</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#dc3545</span>;\n  <span class=\"hljs-attribute\">color</span>: white;\n  <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#dc3545</span>;\n}\n\n<span class=\"hljs-selector-class\">.button--danger</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#c82333</span>;\n}\n\n<span class=\"hljs-selector-class\">.button--disabled</span> {\n  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0.6</span>; <span class=\"hljs-comment\">/* Lekka przezroczystość */</span>\n  <span class=\"hljs-attribute\">cursor</span>: not-allowed; <span class=\"hljs-comment\">/* Kursor \"zakaz\" */</span>\n  <span class=\"hljs-attribute\">pointer-events</span>: none; <span class=\"hljs-comment\">/* Blokuje interakcje z myszą */</span>\n}\n</code></pre>\n<p>W tym przykładzie widać, jak BEM pomaga w jasny sposób zdefiniować:</p>\n<ul>\n<li><strong><code>.button</code></strong>: Podstawowy styl dla każdego przycisku.</li>\n<li><strong><code>.button__text</code></strong>, <strong><code>.button__icon</code></strong>: Style dla wewnętrznych części przycisku.</li>\n<li><strong><code>.button--primary</code></strong>, <strong><code>.button--danger</code></strong>, <strong><code>.button--disabled</code></strong>: Specyficzne warianty lub stany przycisku, które nadpisują lub dodają style do podstawowego bloku <code>.button</code>.</li>\n</ul>\n<hr>\n<h2 id=\"zasady-i-najlepsze-praktyki-bem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zasady-i-najlepsze-praktyki-bem\">>></a>Zasady i najlepsze praktyki BEM</h2>\n<p>Aby w pełni wykorzystać potencjał BEM, warto przestrzegać kilku kluczowych zasad:</p>\n<ol>\n<li><strong>Struktura klas jest płaska:</strong> Każdy element odnosi się bezpośrednio do swojego bloku (np. <code>block__element</code>), a nie do zagnieżdżonego elementu (<code>block__element__nested-element</code> jest błędem). To zapobiega zbyt długim i nieczytelnym nazwom.</li>\n<li><strong>Unikaj selektorów tagów i ID w CSS:</strong> Style powinny być przypisywane tylko do klas BEM. Użycie selektorów tagów (np. <code>div {}</code>) lub ID (np. <code>#my-id {}</code>) sprawia, że style są mniej modularne i trudniejsze do ponownego użycia.</li>\n<li><strong>Modyfikatory nie zmieniają struktury:</strong> Modyfikatory powinny zmieniać wygląd lub zachowanie, a nie strukturę bloku czy elementu. Jeśli potrzebujesz fundamentalnie innej struktury, rozważ stworzenie nowego bloku.</li>\n<li><strong>Nazwy są opisowe:</strong> Nazwy powinny jasno wskazywać, co dany blok, element lub modyfikator robi lub reprezentuje.</li>\n<li><strong>Modularność ponad wszystko:</strong> Myśl o każdym bloku jako o samodzielnym, przenośnym komponencie.</li>\n<li><strong>Używaj preprocesorów CSS:</strong> Takie narzędzia jak Sass/Less mogą znacznie ułatwić pisanie CSS w oparciu o BEM dzięki możliwościom zagnieżdżania i zmiennych.</li>\n</ol>\n<p><strong>Kiedy NIE stosować BEM?</strong></p>\n<ul>\n<li>W bardzo małych projektach (jedna, dwie strony), gdzie narzut na nazewnictwo może być większy niż korzyści.</li>\n<li>Gdy preferujesz inne metodyki (np. CSS Modules, styled-components w React, Utility-First CSS jak Tailwind).</li>\n</ul>\n<hr>\n<h2 id=\"zaawansowane-przykłady-zastosowania-bem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zaawansowane-przykłady-zastosowania-bem\">>></a>Zaawansowane przykłady zastosowania BEM</h2>\n<h3 id=\"formularz-logowania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#formularz-logowania\">>>></a>Formularz logowania</h3>\n<p>Zobaczmy, jak BEM pomaga zorganizować bardziej złożony komponent, taki jak formularz logowania.</p>\n<p><strong>HTML:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Formularz Logowania BEM<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"form-styles.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"login-form\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"login-form__title\"</span>></span>Logowanie<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"login-form__group\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"username\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"login-form__label\"</span>\n          ></span>Nazwa użytkownika:&#x3C;/label\n        >\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n          <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n          <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"username\"</span>\n          <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"login-form__input\"</span>\n          <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Wpisz nazwę użytkownika\"</span>\n        /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"login-form__group\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"login-form__label\"</span>></span>Hasło:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n          <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span>\n          <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"password\"</span>\n          <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"login-form__input\"</span>\n          <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Wpisz hasło\"</span>\n        /></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"login-form__error login-form__error--visible\"</span>></span>\n          Błędne dane logowania!\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"login-form__button login-form__button--primary\"</span>></span>\n        Zaloguj się\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"login-form__button login-form__button--secondary\"</span>></span>\n        Zarejestruj\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><strong>CSS (<code>form-styles.css</code>):</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* form-styles.css */</span>\n\n<span class=\"hljs-comment\">/* --- BLOK: login-form --- */</span>\n<span class=\"hljs-selector-class\">.login-form</span> {\n  <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">380px</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">50px</span> auto;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">30px</span>;\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#e0e0e0</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">8px</span>;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">15px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>);\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;\n  <span class=\"hljs-attribute\">font-family</span>: Arial, sans-serif;\n}\n\n<span class=\"hljs-selector-class\">.login-form__title</span> {\n  <span class=\"hljs-attribute\">text-align</span>: center;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">25px</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">24px</span>;\n}\n\n<span class=\"hljs-comment\">/* --- ELEMENTY: login-form__group, login-form__label, login-form__input, login-form__button, login-form__error --- */</span>\n<span class=\"hljs-selector-class\">.login-form__group</span> {\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">20px</span>;\n}\n\n<span class=\"hljs-selector-class\">.login-form__label</span> {\n  <span class=\"hljs-attribute\">display</span>: block;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">8px</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#555</span>;\n  <span class=\"hljs-attribute\">font-weight</span>: bold;\n}\n\n<span class=\"hljs-selector-class\">.login-form__input</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">12px</span>;\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n  <span class=\"hljs-attribute\">box-sizing</span>: border-box; <span class=\"hljs-comment\">/* Upewnia się, że padding nie zwiększa szerokości */</span>\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;\n  <span class=\"hljs-attribute\">transition</span>: border-color <span class=\"hljs-number\">0.3s</span> ease;\n}\n\n<span class=\"hljs-selector-class\">.login-form__input</span><span class=\"hljs-selector-pseudo\">:focus</span> {\n  <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#007bff</span>;\n  <span class=\"hljs-attribute\">outline</span>: none; <span class=\"hljs-comment\">/* Usuwa domyślne obramowanie focusu */</span>\n}\n\n<span class=\"hljs-selector-class\">.login-form__button</span> {\n  <span class=\"hljs-attribute\">display</span>: block;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">12px</span>;\n  <span class=\"hljs-attribute\">border</span>: none;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n  <span class=\"hljs-attribute\">cursor</span>: pointer;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">18px</span>;\n  <span class=\"hljs-attribute\">font-weight</span>: bold;\n  <span class=\"hljs-attribute\">text-align</span>: center;\n  <span class=\"hljs-attribute\">transition</span>: background-color <span class=\"hljs-number\">0.3s</span> ease;\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">15px</span>;\n}\n\n<span class=\"hljs-selector-class\">.login-form__error</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#dc3545</span>; <span class=\"hljs-comment\">/* Czerwony kolor dla błędów */</span>\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">13px</span>;\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">5px</span>;\n  <span class=\"hljs-attribute\">display</span>: none; <span class=\"hljs-comment\">/* Domyślnie ukryty */</span>\n}\n\n<span class=\"hljs-comment\">/* --- MODYFIKATORY: login-form__button--primary, login-form__button--secondary, login-form__error--visible --- */</span>\n<span class=\"hljs-selector-class\">.login-form__button--primary</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#007bff</span>;\n  <span class=\"hljs-attribute\">color</span>: white;\n}\n\n<span class=\"hljs-selector-class\">.login-form__button--primary</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#0056b3</span>;\n}\n\n<span class=\"hljs-selector-class\">.login-form__button--secondary</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#6c757d</span>;\n  <span class=\"hljs-attribute\">color</span>: white;\n}\n\n<span class=\"hljs-selector-class\">.login-form__button--secondary</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#5a6268</span>;\n}\n\n<span class=\"hljs-selector-class\">.login-form__error--visible</span> {\n  <span class=\"hljs-attribute\">display</span>: block; <span class=\"hljs-comment\">/* Pokazuje komunikat błędu */</span>\n}\n</code></pre>\n<hr>\n<h2 id=\"zadania-do-wykonania-sprawdź-swoje-umiejętności\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania-sprawdź-swoje-umiejętności\">>></a>Zadania do wykonania: Sprawdź swoje umiejętności!</h2>\n<p>Pora na praktykę! Użyj wiedzy o BEM, aby stworzyć poniższe komponenty. Pamiętaj o użyciu osobnego pliku CSS i połączeniu go z HTML.</p>\n<h3 id=\"zadanie-1-karta-produktu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-karta-produktu\">>>></a>Zadanie 1: Karta produktu</h3>\n<p>Utwórz komponent karty produktu (<code>product-card</code>). Powinien zawierać:</p>\n<ul>\n<li>Element dla tytułu produktu (<code>product-card__title</code>).</li>\n<li>Element dla opisu produktu (<code>product-card__description</code>).</li>\n<li>Element dla ceny produktu (<code>product-card__price</code>).</li>\n<li>Modyfikator <code>product-card--featured</code> dla karty wyróżnionej (np. z inną ramką lub tłem).</li>\n</ul>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<p><strong><code>index.html</code>:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 1 - Karta Produktu BEM<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"product-card.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product-card\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product-card__title\"</span>></span>Stylowy T-shirt<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product-card__description\"</span>></span>\n        Wygodny bawełniany T-shirt w kolorze morskim, idealny na lato.\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product-card__price\"</span>></span>59.99 zł<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product-card product-card--featured\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product-card__title\"</span>></span>Super Promocja! Laptop X500<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product-card__description\"</span>></span>\n        Wydajny laptop do pracy i rozrywki. Ograniczona oferta!\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product-card__price\"</span>></span>2999.00 zł<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><strong><code>product-card.css</code>:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* product-card.css */</span>\n\n<span class=\"hljs-comment\">/* --- BLOK: product-card --- */</span>\n<span class=\"hljs-selector-class\">.product-card</span> {\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">8px</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">300px</span>;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">8px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>);\n  <span class=\"hljs-attribute\">font-family</span>: sans-serif;\n  <span class=\"hljs-attribute\">display</span>: inline-block; <span class=\"hljs-comment\">/* Aby karty były obok siebie */</span>\n  <span class=\"hljs-attribute\">vertical-align</span>: top;\n}\n\n<span class=\"hljs-comment\">/* --- ELEMENTY: product-card__title, product-card__description, product-card__price --- */</span>\n<span class=\"hljs-selector-class\">.product-card__title</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">10px</span>;\n}\n\n<span class=\"hljs-selector-class\">.product-card__description</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#666</span>;\n  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">1.5</span>;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">15px</span>;\n}\n\n<span class=\"hljs-selector-class\">.product-card__price</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">18px</span>;\n  <span class=\"hljs-attribute\">font-weight</span>: bold;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#007bff</span>;\n}\n\n<span class=\"hljs-comment\">/* --- MODYFIKATOR BLOKU: product-card--featured --- */</span>\n<span class=\"hljs-selector-class\">.product-card--featured</span> {\n  <span class=\"hljs-attribute\">border-color</span>: gold;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">15px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">215</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.4</span>);\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fffaf0</span>;\n}\n\n<span class=\"hljs-selector-class\">.product-card--featured</span> <span class=\"hljs-selector-class\">.product-card__title</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#d4af37</span>; <span class=\"hljs-comment\">/* Złoty kolor dla tytułu wyróżnionej karty */</span>\n}\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-nawigacja\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-nawigacja\">>>></a>Zadanie 2: Nawigacja</h3>\n<p>Stwórz komponent nawigacji (<code>site-nav</code>). Powinien zawierać:</p>\n<ul>\n<li>Elementy pozycji nawigacji (<code>site-nav__item</code>).</li>\n<li>Elementy linków w nawigacji (<code>site-nav__link</code>).</li>\n<li>Modyfikator <code>site-nav__link--active</code> dla aktywnego linku.</li>\n</ul>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<p><strong><code>index.html</code>:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 2 - Nawigacja BEM<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"nav-styles.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"site-nav\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"site-nav__list\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"site-nav__item\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"site-nav__link site-nav__link--active\"</span>\n            ></span>Strona główna&#x3C;/a\n          >\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"site-nav__item\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"site-nav__link\"</span>></span>O nas<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"site-nav__item\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"site-nav__link\"</span>></span>Usługi<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"site-nav__item\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"site-nav__link\"</span>></span>Kontakt<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><strong><code>nav-styles.css</code>:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* nav-styles.css */</span>\n\n<span class=\"hljs-comment\">/* --- BLOK: site-nav --- */</span>\n<span class=\"hljs-selector-class\">.site-nav</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#343a40</span>; <span class=\"hljs-comment\">/* Ciemne tło nawigacji */</span>\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">15px</span> <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">font-family</span>: Arial, sans-serif;\n  <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">3px</span> solid <span class=\"hljs-number\">#007bff</span>;\n}\n\n<span class=\"hljs-comment\">/* --- ELEMENTY: site-nav__list, site-nav__item, site-nav__link --- */</span>\n<span class=\"hljs-selector-class\">.site-nav__list</span> {\n  <span class=\"hljs-attribute\">list-style</span>: none; <span class=\"hljs-comment\">/* Usuwa domyślne punktorzy */</span>\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-comment\">/* Elementy obok siebie */</span>\n  <span class=\"hljs-attribute\">justify-content</span>: center; <span class=\"hljs-comment\">/* Wyśrodkowanie */</span>\n}\n\n<span class=\"hljs-selector-class\">.site-nav__item</span> {\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">15px</span>; <span class=\"hljs-comment\">/* Odstęp między elementami menu */</span>\n}\n\n<span class=\"hljs-selector-class\">.site-nav__link</span> {\n  <span class=\"hljs-attribute\">color</span>: white;\n  <span class=\"hljs-attribute\">text-decoration</span>: none; <span class=\"hljs-comment\">/* Usuwa podkreślenie linków */</span>\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">8px</span> <span class=\"hljs-number\">12px</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n  <span class=\"hljs-attribute\">transition</span>: background-color <span class=\"hljs-number\">0.3s</span> ease;\n}\n\n<span class=\"hljs-selector-class\">.site-nav__link</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#495057</span>;\n}\n\n<span class=\"hljs-comment\">/* --- MODYFIKATOR ELEMENTU: site-nav__link--active --- */</span>\n<span class=\"hljs-selector-class\">.site-nav__link--active</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#007bff</span>; <span class=\"hljs-comment\">/* Niebieskie tło dla aktywnego linku */</span>\n  <span class=\"hljs-attribute\">font-weight</span>: bold;\n  <span class=\"hljs-attribute\">color</span>: white; <span class=\"hljs-comment\">/* Upewniamy się, że tekst jest biały */</span>\n}\n\n<span class=\"hljs-selector-class\">.site-nav__link--active</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#0056b3</span>; <span class=\"hljs-comment\">/* Ciemniejszy niebieski na hover */</span>\n}\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-artykuł-na-blogu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-artykuł-na-blogu\">>>></a>Zadanie 3: Artykuł na blogu</h3>\n<p>Utwórz sekcję artykułu (<code>blog-article</code>). Powinna zawierać:</p>\n<ul>\n<li>Element dla nagłówka artykułu (<code>blog-article__header</code>).</li>\n<li>Element dla treści artykułu (<code>blog-article__content</code>).</li>\n<li>Element dla stopki artykułu (<code>blog-article__footer</code>).</li>\n<li>Modyfikator <code>blog-article__header--with-image</code> dla nagłówka, który zawiera obrazek.</li>\n</ul>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<p><strong><code>index.html</code>:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 3 - Artykuł BEM<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"article-styles.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__header\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__title\"</span>></span>Pierwszy wpis na blogu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__meta\"</span>></span>Opublikowano: 07.07.2025<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__content\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n          To jest treść mojego pierwszego artykułu na blogu. Skupia się na\n          podstawach CSS i metodyce BEM. Mam nadzieję, że jest pomocny dla\n          wszystkich początkujących!\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n          Dzięki zastosowaniu BEM, kod CSS jest czystszy i łatwiejszy do\n          zarządzania, nawet przy rosnącej liczbie komponentów.\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__footer\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Kategoria: Web Development<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__read-more\"</span>></span>Czytaj więcej <span class=\"hljs-symbol\">&#x26;raquo;</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__header blog-article__header--with-image\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__title\"</span>></span>Piękne widoki z podróży<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span>\n          <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://via.placeholder.com/600x200\"</span>\n          <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Krajobraz\"</span>\n          <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__image\"</span>\n        /></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__meta\"</span>></span>Opublikowano: 01.07.2025<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__content\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n          Ostatnio wybrałem się w podróż do Norwegii. Widoki były niesamowite!\n          Gorąco polecam każdemu.\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__footer\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Kategoria: Podróże<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blog-article__read-more\"</span>></span>Czytaj więcej <span class=\"hljs-symbol\">&#x26;raquo;</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><strong><code>article-styles.css</code>:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* article-styles.css */</span>\n\n<span class=\"hljs-comment\">/* --- BLOK: blog-article --- */</span>\n<span class=\"hljs-selector-class\">.blog-article</span> {\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">8px</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">25px</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">30px</span> auto;\n  <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">700px</span>;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">6px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.08</span>);\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;\n  <span class=\"hljs-attribute\">font-family</span>: Georgia, serif;\n}\n\n<span class=\"hljs-comment\">/* --- ELEMENTY: blog-article__header, blog-article__title, blog-article__meta, blog-article__content, blog-article__footer, blog-article__read-more, blog-article__image --- */</span>\n<span class=\"hljs-selector-class\">.blog-article__header</span> {\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">text-align</span>: center;\n}\n\n<span class=\"hljs-selector-class\">.blog-article__title</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">28px</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#2c3e50</span>;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">8px</span>;\n}\n\n<span class=\"hljs-selector-class\">.blog-article__meta</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#7f8c8d</span>;\n}\n\n<span class=\"hljs-selector-class\">.blog-article__content</span> {\n  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">1.7</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#34495e</span>;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">25px</span>;\n}\n\n<span class=\"hljs-selector-class\">.blog-article__content</span> <span class=\"hljs-selector-tag\">p</span> {\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">15px</span>; <span class=\"hljs-comment\">/* Odstęp między akapitami w treści */</span>\n}\n\n<span class=\"hljs-selector-class\">.blog-article__footer</span> {\n  <span class=\"hljs-attribute\">text-align</span>: right;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">13px</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#95a5a6</span>;\n  <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">1px</span> dashed <span class=\"hljs-number\">#ecf0f1</span>;\n  <span class=\"hljs-attribute\">padding-top</span>: <span class=\"hljs-number\">15px</span>;\n}\n\n<span class=\"hljs-selector-class\">.blog-article__read-more</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#007bff</span>;\n  <span class=\"hljs-attribute\">text-decoration</span>: none;\n  <span class=\"hljs-attribute\">font-weight</span>: bold;\n}\n\n<span class=\"hljs-selector-class\">.blog-article__read-more</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">text-decoration</span>: underline;\n}\n\n<span class=\"hljs-selector-class\">.blog-article__image</span> {\n  <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">height</span>: auto;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">15px</span>; <span class=\"hljs-comment\">/* Odstęp od tytułu */</span>\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>);\n}\n\n<span class=\"hljs-comment\">/* --- MODYFIKATOR: blog-article__header--with-image --- */</span>\n<span class=\"hljs-selector-class\">.blog-article__header--with-image</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f8f8f8</span>; <span class=\"hljs-comment\">/* Lekkie tło dla nagłówka z obrazkiem */</span>\n  <span class=\"hljs-attribute\">padding-bottom</span>: <span class=\"hljs-number\">15px</span>; <span class=\"hljs-comment\">/* Dodatkowy padding na dole */</span>\n}\n\n<span class=\"hljs-selector-class\">.blog-article__header--with-image</span> <span class=\"hljs-selector-class\">.blog-article__title</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#007bff</span>; <span class=\"hljs-comment\">/* Inny kolor dla tytułu w nagłówku z obrazkiem */</span>\n}\n</code></pre>\n</details>\n<hr>\n<p>To wszystko na temat podstaw metodyki BEM! Gratulacje, że poświęciłeś/aś czas na naukę tego wartościowego narzędzia. BEM znacząco poprawi czytelność, modularność i utrzymanie Twojego kodu CSS. Pamiętaj, że kluczem jest konsekwencja w stosowaniu tych zasad.</p>\n<p>Masz pytania dotyczące zastosowania BEM w konkretnym przypadku, a może chcesz porównać ją z innymi metodykami? Daj znać!</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/szybszy-css-czyli-wprowadzenie-do-bem.md","12 minut",{"_21":1071,"_23":1072,"_25":1073,"_6":1074,"_36":967,"_38":1075,"_91":1118,"_93":1119,"_95":1120,"_97":1121,"_99":842},"Wprowadzenie do CSS","CSS (Cascading Style Sheets) to język służący do opisywania wyglądu i formatu dokumentu HTML. CSS pozwala na oddzielenie treści od prezentacji, co umożliwia tworzenie estetycznych i spójnych stron internetowych. W tym kursie omówimy podstawy CSS, w tym selektory, właściwości, sposoby załączania CSS do HTML oraz JavaScript, a także przedstawimy kilka zadań do wykonania.",[14,9,744,531,171,965,28,34],[14],{"_21":1076,"_41":1077},"Quiz: Podstawy CSS",[1078,1086,1094,1102,1110],{"_44":1079,"_46":1080,"_52":89,"_54":1085},"<p>Co oznacza skrót CSS?</p>",[1081,1082,1083,1084],"Cascaded Sheet System","Creative Style Syntax","Cascading Style Sheets","Coded Style System","CSS to Cascading Style Sheets, czyli kaskadowe arkusze stylów.",{"_44":1087,"_46":1088,"_52":80,"_54":1093},"<p>Który sposób załączania stylów CSS do strony jest najbardziej zalecany dla większych projektów?</p>",[1089,1090,1091,1092],"JavaScript","External CSS (zewnętrzny plik .css)","Internal CSS","Inline CSS","External CSS pozwala na lepszą organizację i ponowne wykorzystanie stylów.",{"_44":1095,"_46":1096,"_52":89,"_54":1101},"<p>Jak wygląda selektor klasy w CSS?</p>",[1097,1098,1099,1100],"#nazwa-klasy","*nazwa-klasy",".nazwa-klasy","nazwa-klasy","Selektor klasy zapisujemy z kropką, np. .header.",{"_44":1103,"_46":1104,"_52":80,"_54":1109},"<p>Jak ustawić kolor tła elementu na żółty?</p>",[1105,1106,1107,1108],"color: yellow;","background-color: yellow;","background: yellow-text;","border-color: yellow;","Do ustawienia koloru tła służy background-color.",{"_44":1111,"_46":1112,"_52":71,"_54":1117},"<p>Za co odpowiada właściwość 'border-radius'?</p>",[1113,1114,1115,1116],"Zaokrąglenie rogów elementu","Ustawienie tła obrazkowego","Zmiana koloru ramki","Zmiana rozmiaru czcionki","border-radius pozwala na zaokrąglenie rogów elementu.","8b9de2a1-514d-4077-94b7-df878188764a","wprowadzenie-do-css","<p>Witaj w świecie <strong>CSS</strong>! 🎨 Jeśli HTML to szkielet Twojej strony, to CSS jest niczym jej garderoba – nadaje jej styl, kolory, układ i całą estetykę. Bez CSS strony internetowe byłyby po prostu nagim tekstem bez żadnej wizualnej atrakcyjności. Ten przewodnik wprowadzi Cię w podstawy CSS, pokazując, jak sprawić, by Twoje strony wyglądały profesjonalnie i były przyjemne dla oka. Gotowy/a, by nadać styl swoim kreacjom webowym? Zaczynamy! 🖌️</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#czym-jest-css-i-dlaczego-jest-tak-wa%C5%BCny\">Czym jest CSS i dlaczego jest tak ważny?</a></li>\n<li><a href=\"#jak-dzia%C5%82a-css-deklaracje-i-regu%C5%82y\">Jak działa CSS? Deklaracje i reguły</a></li>\n<li><a href=\"#sposoby-za%C5%82%C4%85czania-css-do-html--gdzie-umie%C5%9Bci%C4%87-style\">Sposoby załączania CSS do HTML – gdzie umieścić style?</a>\n<ul>\n<li><a href=\"#inline-css-style-w-linii\">Inline CSS (style w linii)</a></li>\n<li><a href=\"#internal-css-style-wewn%C4%99trzne\">Internal CSS (style wewnętrzne)</a></li>\n<li><a href=\"#external-css-zewn%C4%99trzny-arkusz-styl%C3%B3w\">External CSS (zewnętrzny arkusz stylów)</a></li>\n</ul>\n</li>\n<li><a href=\"#podstawowe-selektory-css--jak-wybiera%C4%87-elementy-do-stylowania\">Podstawowe selektory CSS – jak wybierać elementy do stylowania?</a>\n<ul>\n<li><a href=\"#selektory-element%C3%B3w-type-selectors\">Selektory elementów (Type Selectors)</a></li>\n<li><a href=\"#selektory-klas-class-selectors\">Selektory klas (Class Selectors)</a></li>\n<li><a href=\"#selektory-identyfikator%C3%B3w-id-selectors\">Selektory identyfikatorów (ID Selectors)</a></li>\n</ul>\n</li>\n<li><a href=\"#podstawowe-w%C5%82a%C5%9Bciwo%C5%9Bci-css--tw%C3%B3j-zestaw-narz%C4%99dzi-do-stylizacji\">Podstawowe właściwości CSS – Twój zestaw narzędzi do stylizacji</a>\n<ul>\n<li><a href=\"#kolory-colors--nadaj-barw%C4%99-tekstowi\">Kolory (Colors) – nadaj barwę tekstowi</a></li>\n<li><a href=\"#t%C5%82o-background--pokoloruj-przestrze%C5%84\">Tło (Background) – pokoloruj przestrzeń</a></li>\n<li><a href=\"#marginesy-i-wype%C5%82nienia-margin--padding--kontroluj-odst%C4%99py\">Marginesy i wypełnienia (Margin &#x26; Padding) – kontroluj odstępy</a></li>\n<li><a href=\"#ramki-borders--obramuj-i-zaokr%C4%85glaj\">Ramki (Borders) – obramuj i zaokrąglaj</a></li>\n</ul>\n</li>\n<li><a href=\"#zadania-do-wykonania-sprawd%C5%BA-swoje-umiej%C4%99tno%C5%9Bci\">Zadania do wykonania: Sprawdź swoje umiejętności!</a>\n<ul>\n<li><a href=\"#zadanie-1-czerwony-nag%C5%82%C3%B3wek\">Zadanie 1: Czerwony nagłówek</a></li>\n<li><a href=\"#zadanie-2-kolorowy-akapit\">Zadanie 2: Kolorowy akapit</a></li>\n<li><a href=\"#zadanie-3-stylowy-div\">Zadanie 3: Stylowy <code>div</code></a></li>\n<li><a href=\"#zadanie-4-r%C3%B3%C5%BCnokolorowe-nag%C5%82%C3%B3wki\">Zadanie 4: Różnokolorowe nagłówki</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"czym-jest-css-i-dlaczego-jest-tak-ważny\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#czym-jest-css-i-dlaczego-jest-tak-ważny\">>></a>Czym jest CSS i dlaczego jest tak ważny?</h2>\n<p><strong>CSS</strong> to skrót od <strong>Cascading Style Sheets</strong>, co po polsku oznacza <strong>Kaskadowe Arkusze Stylów</strong>. Jest to język, który daje Ci pełną kontrolę nad <strong>wyglądem i formatowaniem</strong> dokumentów HTML. Pomyśl o tym w ten sposób:</p>\n<ul>\n<li><strong>HTML</strong> (HyperText Markup Language) to <strong>struktura</strong> i <strong>treść</strong> strony. Określa, co jest nagłówkiem, co akapitem, gdzie jest obrazek. To jak plan architektoniczny domu z opisem, gdzie są ściany i okna.</li>\n<li><strong>CSS</strong> to <strong>styl i dekoracja</strong>. To on decyduje o kolorze ścian, rodzaju mebli, zasłonach, a nawet o tym, jak przestrzeń jest zagospodarowana.</li>\n</ul>\n<p>Główna idea CSS to <strong>oddzielenie treści od prezentacji</strong>. Zamiast umieszczać informacje o kolorze tekstu czy rozmiarze czcionki bezpośrednio w kodzie HTML (co jest nieefektywne i utrudnia zmiany), umieszczasz je w osobnym pliku CSS. Dzięki temu:</p>\n<ul>\n<li><strong>Łatwość zmian:</strong> Chcesz zmienić kolor wszystkich nagłówków <code>&#x3C;h1></code> na swojej stronie? Wystarczy jedna zmiana w pliku CSS, zamiast przeszukiwania każdego <code>&#x3C;h1></code> w HTML.</li>\n<li><strong>Spójność:</strong> Wszystkie elementy o tym samym stylu wyglądają identycznie, zapewniając profesjonalny i ujednolicony wygląd.</li>\n<li><strong>Szybsze ładowanie:</strong> Przeglądarka może raz pobrać plik CSS i używać go na wielu podstronach, co przyspiesza ładowanie witryny.</li>\n<li><strong>Responsywność:</strong> CSS jest kluczowy do tworzenia stron, które wyglądają dobrze na różnych urządzeniach (komputery, tablety, smartfony).</li>\n</ul>\n<p>Podsumowując, CSS jest niezbędny, jeśli chcesz, aby Twoja strona internetowa była nie tylko funkcjonalna, ale też estetyczna i przyjemna w odbiorze.</p>\n<hr>\n<h2 id=\"jak-działa-css-deklaracje-i-reguły\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-działa-css-deklaracje-i-reguły\">>></a>Jak działa CSS? Deklaracje i reguły</h2>\n<p>CSS działa na zasadzie <strong>reguł stylowania</strong>, które składają się z dwóch głównych części:</p>\n<ol>\n<li><strong>Selektor</strong>: Wskazuje, który element (lub elementy) HTML ma zostać ostylowany. To jak \"adres\", pod który wysyłasz instrukcje.</li>\n<li><strong>Blok deklaracji</strong>: Zawiera jedną lub więcej <strong>deklaracji</strong>, które określają, jak element ma wyglądać. Każda deklaracja składa się z <strong>właściwości</strong> i jej <strong>wartości</strong>, oddzielonych dwukropkiem, a zakończona średnikiem.</li>\n</ol>\n<p><strong>Przykład reguły CSS:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">p</span> {\n  <span class=\"hljs-comment\">/* Selektor - wybiera wszystkie elementy &#x3C;p> */</span>\n  <span class=\"hljs-attribute\">color</span>: blue; <span class=\"hljs-comment\">/* Deklaracja: właściwość 'color', wartość 'blue' */</span>\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>; <span class=\"hljs-comment\">/* Deklaracja: właściwość 'font-size', wartość '16px' */</span>\n}\n</code></pre>\n<p>W tym przykładzie:</p>\n<ul>\n<li><code>p</code> to <strong>selektor</strong>, który wybierze wszystkie akapity (<code>&#x3C;p></code>) w Twoim dokumencie HTML.</li>\n<li><code>{ ... }</code> to <strong>blok deklaracji</strong>.</li>\n<li><code>color: blue;</code> to jedna <strong>deklaracja</strong>. <code>color</code> to <strong>właściwość</strong> (określa kolor tekstu), a <code>blue</code> to jej <strong>wartość</strong>.</li>\n<li><code>font-size: 16px;</code> to kolejna <strong>deklaracja</strong>. <code>font-size</code> to właściwość (rozmiar czcionki), a <code>16px</code> to jej wartość.</li>\n</ul>\n<p>Kiedy przeglądarka napotka taką regułę, zastosuje podane style do wszystkich pasujących elementów HTML.</p>\n<hr>\n<h2 id=\"sposoby-załączania-css-do-html--gdzie-umieścić-style\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#sposoby-załączania-css-do-html--gdzie-umieścić-style\">>></a>Sposoby załączania CSS do HTML – gdzie umieścić style?</h2>\n<p>Istnieją trzy główne sposoby na połączenie stylów CSS z dokumentem HTML. Każdy z nich ma swoje zastosowanie i zalety.</p>\n<h3 id=\"inline-css-style-w-linii\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#inline-css-style-w-linii\">>>></a>Inline CSS (style w linii)</h3>\n<p>To najprostszy, ale <strong>najmniej zalecany</strong> sposób. Polega na umieszczeniu stylów bezpośrednio w atrybucie <code>style</code> konkretnego elementu HTML.</p>\n<p><strong>Kiedy używać?</strong></p>\n<ul>\n<li>Do <strong>bardzo prostych, pojedynczych</strong> zmian, które dotyczą tylko jednego elementu i nigdy się nie powtórzą.</li>\n<li>Do szybkiego testowania.</li>\n<li><strong>Unikaj w większości przypadków</strong>, ponieważ miesza HTML z CSS, utrudnia zarządzanie stylami i sprawia, że kod jest nieczytelny.</li>\n</ul>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Inline CSS<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: blue; font-family: Arial;\"</span>></span>Witaj, świecie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background-color: lightgray;\"</span>></span>\n      To jest akapit ze stylami inline.\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h3 id=\"internal-css-style-wewnętrzne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#internal-css-style-wewnętrzne\">>>></a>Internal CSS (style wewnętrzne)</h3>\n<p>Polega na umieszczeniu wszystkich reguł CSS w sekcji <code>&#x3C;head></code> dokumentu HTML, wewnątrz tagu <code>&#x3C;style></code>.</p>\n<p><strong>Kiedy używać?</strong></p>\n<ul>\n<li>Dla <strong>małych stron internetowych</strong> lub pojedynczych plików HTML, które nie będą rozwijane.</li>\n<li>Dla prototypów lub demo, gdzie wszystkie style są potrzebne tylko w jednym miejscu.</li>\n<li><strong>Unikaj w dużych projektach</strong>, bo jeśli masz wiele stron, musisz kopiować i utrzymywać te same style w każdym pliku HTML.</li>\n</ul>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Internal CSS<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n      <span class=\"hljs-comment\">/* Tutaj umieszczamy reguły CSS */</span>\n      <span class=\"hljs-selector-tag\">body</span> {\n        <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">\"Segoe UI\"</span>, Tahoma, Geneva, Verdana, sans-serif;\n        <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f4f4f4</span>;\n      }\n\n      <span class=\"hljs-selector-tag\">h1</span> {\n        <span class=\"hljs-attribute\">color</span>: darkorange;\n        <span class=\"hljs-attribute\">text-align</span>: center;\n      }\n\n      <span class=\"hljs-selector-tag\">p</span> {\n        <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;\n        <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">1.6</span>;\n      }\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Moja strona z Internal CSS<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n      Ten akapit jest ostylowany za pomocą wewnętrznych stylów. Cała strona ma\n      też ustawioną czcionkę i tło.\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h3 id=\"external-css-zewnętrzny-arkusz-stylów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#external-css-zewnętrzny-arkusz-stylów\">>>></a>External CSS (zewnętrzny arkusz stylów)</h3>\n<p>To <strong>najbardziej zalecany i profesjonalny sposób</strong>. Tworzysz osobny plik z rozszerzeniem <code>.css</code> (np. <code>style.css</code>), a następnie dołączasz go do swojego dokumentu HTML za pomocą tagu <code>&#x3C;link></code> umieszczonego w sekcji <code>&#x3C;head></code>.</p>\n<p><strong>Kiedy używać?</strong></p>\n<ul>\n<li><strong>Zawsze w większych projektach</strong> i tam, gdzie planujesz rozwijać stronę.</li>\n<li>Gdy style mają być używane na wielu stronach w witrynie.</li>\n<li>Gdy chcesz zachować <strong>czysty i zorganizowany kod</strong>.</li>\n</ul>\n<p><strong>Jak to działa?</strong></p>\n<ol>\n<li>Tworzysz plik CSS, np. <code>style.css</code>, w tym samym folderze co Twój plik HTML (lub w podfolderze, np. <code>css/style.css</code>).</li>\n<li>W pliku <code>style.css</code> piszesz tylko czyste reguły CSS.</li>\n<li>W pliku HTML, w sekcji <code>&#x3C;head></code>, dodajesz znacznik <code>&#x3C;link></code>:</li>\n</ol>\n<p><strong><code>index.html</code>:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>External CSS<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Moja strona z External CSS<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Ten akapit również jest ostylowany. Style są w osobnym pliku!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>Kliknij mnie<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><strong><code>style.css</code> (tworzysz osobny plik):</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* To jest plik style.css */</span>\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#e0f2f7</span>; <span class=\"hljs-comment\">/* Jasnoniebieskie tło dla całej strony */</span>\n  <span class=\"hljs-attribute\">font-family</span>: Georgia, serif;\n}\n\n<span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#0056b3</span>; <span class=\"hljs-comment\">/* Ciemnoniebieski nagłówek */</span>\n  <span class=\"hljs-attribute\">text-decoration</span>: underline; <span class=\"hljs-comment\">/* Podkreślony tekst */</span>\n}\n\n<span class=\"hljs-selector-tag\">p</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">15px</span>; <span class=\"hljs-comment\">/* Odstęp pod akapitem */</span>\n}\n\n<span class=\"hljs-selector-tag\">button</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#28a745</span>; <span class=\"hljs-comment\">/* Zielony przycisk */</span>\n  <span class=\"hljs-attribute\">color</span>: white;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">border</span>: none;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n  <span class=\"hljs-attribute\">cursor</span>: pointer;\n}\n</code></pre>\n<p><strong>Zalety External CSS:</strong></p>\n<ul>\n<li><strong>Łatwość zarządzania:</strong> Wszystkie style są w jednym miejscu.</li>\n<li><strong>Ponowne użycie:</strong> Ten sam plik CSS może być używany przez wiele stron HTML, zapewniając spójny wygląd całej witryny.</li>\n<li><strong>Szybsze ładowanie:</strong> Przeglądarka buforuje plik CSS, więc nie musi go pobierać ponownie przy każdej wizycie na nowej podstronie.</li>\n</ul>\n<hr>\n<h2 id=\"podstawowe-selektory-css--jak-wybierać-elementy-do-stylowania\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-selektory-css--jak-wybierać-elementy-do-stylowania\">>></a>Podstawowe selektory CSS – jak wybierać elementy do stylowania?</h2>\n<p>Selektory to najważniejsza część reguł CSS. Mówią przeglądarce, <strong>które elementy HTML</strong> mają otrzymać konkretne style. Bez selektorów nie wiedziałbyś/wiedziałabyś, do czego przypisać dany kolor czy rozmiar czcionki.</p>\n<h3 id=\"selektory-elementów-type-selectors\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#selektory-elementów-type-selectors\">>>></a>Selektory elementów (Type Selectors)</h3>\n<p>To najprostszy typ selektora. Wybiera <strong>wszystkie wystąpienia danego typu elementu HTML</strong> (np. wszystkie <code>&#x3C;p></code>, wszystkie <code>&#x3C;h1></code>, wszystkie <code>&#x3C;div></code>).</p>\n<p><strong>Składnia:</strong> po prostu nazwa elementu.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Ostyluje wszystkie nagłówki h1 na stronie */</span>\n<span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: darkred;\n  <span class=\"hljs-attribute\">font-family</span>: sans-serif;\n}\n\n<span class=\"hljs-comment\">/* Ostyluje wszystkie akapity p na stronie */</span>\n<span class=\"hljs-selector-tag\">p</span> {\n  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">1.5</span>; <span class=\"hljs-comment\">/* Wysokość linii tekstu */</span>\n  <span class=\"hljs-attribute\">text-align</span>: justify; <span class=\"hljs-comment\">/* Wyrównanie tekstu */</span>\n}\n\n<span class=\"hljs-comment\">/* Ostyluje wszystkie przyciski button na stronie */</span>\n<span class=\"hljs-selector-tag\">button</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>;\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid gray;\n}\n</code></pre>\n<h3 id=\"selektory-klas-class-selectors\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#selektory-klas-class-selectors\">>>></a>Selektory klas (Class Selectors)</h3>\n<p>To bardzo często używane selektory. Pozwalają na stylowanie elementów, które mają przypisaną określoną <strong>klasę</strong>. Klasy są definiowane w HTML za pomocą atrybutu <code>class=\"nazwa-klasy\"</code>. Jedna klasa może być użyta <strong>wielokrotnie</strong> na różnych elementach, a jeden element może mieć <strong>wiele klas</strong>.</p>\n<p><strong>Składnia w CSS:</strong> kropka <code>.</code> przed nazwą klasy.</p>\n<p><strong>HTML:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tytul-strony\"</span>></span>Witaj, na mojej stronie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tekst-wazny\"</span>></span>Ten tekst jest szczególnie istotny.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tekst-wazny\"</span>></span>To jest inny ważny akapit.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"przycisk-glowny\"</span>></span>Naciśnij mnie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"karta produkt\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Produkt A<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Opis produktu A.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<p><strong>CSS:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.tytul-strony</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">48px</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#4caf50</span>; <span class=\"hljs-comment\">/* Zielony */</span>\n}\n\n<span class=\"hljs-selector-class\">.tekst-wazny</span> {\n  <span class=\"hljs-attribute\">font-weight</span>: bold; <span class=\"hljs-comment\">/* Pogrubiony tekst */</span>\n  <span class=\"hljs-attribute\">color</span>: purple;\n}\n\n<span class=\"hljs-selector-class\">.przycisk-glowny</span> {\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">12px</span> <span class=\"hljs-number\">25px</span>;\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#007bff</span>; <span class=\"hljs-comment\">/* Niebieski */</span>\n  <span class=\"hljs-attribute\">color</span>: white;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">8px</span>;\n}\n\n<span class=\"hljs-comment\">/* Możesz też łączyć klasy w selektorze: styluj element, który ma OBYDWIE klasy */</span>\n<span class=\"hljs-selector-class\">.karta</span><span class=\"hljs-selector-class\">.produkt</span> {\n  <span class=\"hljs-comment\">/* Ostyluje tylko div, który ma klasy \"karta\" ORAZ \"produkt\" */</span>\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">5px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.2</span>);\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">15px</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>;\n}\n</code></pre>\n<h3 id=\"selektory-identyfikatorów-id-selectors\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#selektory-identyfikatorów-id-selectors\">>>></a>Selektory identyfikatorów (ID Selectors)</h3>\n<p>Selektory ID pozwalają na stylowanie elementu z unikalnym identyfikatorem (<code>id</code>). W przeciwieństwie do klas, każdy <strong><code>id</code> musi być unikalny</strong> na całej stronie HTML! Oznacza to, że nie możesz mieć dwóch elementów o tym samym <code>id</code>. ID jest często używane do stylowania bardzo specyficznych, pojedynczych elementów lub jako \"kotwica\" dla JavaScript.</p>\n<p><strong>Składnia w CSS:</strong> hash <code>#</code> przed nazwą ID.</p>\n<p><strong>HTML:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"naglowek-glowny\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Moja Super Strona<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"stopka-strony\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-symbol\">&#x26;copy;</span> 2024 Wszystkie prawa zastrzeżone.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n</code></pre>\n<p><strong>CSS:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-id\">#naglowek-glowny</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#333</span>; <span class=\"hljs-comment\">/* Ciemne tło */</span>\n  <span class=\"hljs-attribute\">color</span>: white;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">text-align</span>: center;\n}\n\n<span class=\"hljs-selector-id\">#stopka-strony</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#eee</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#555</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n  <span class=\"hljs-attribute\">text-align</span>: center;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">0.9em</span>;\n}\n</code></pre>\n<p><strong>Wskazówka:</strong> W większości przypadków do stylowania elementów używaj <strong>klas</strong>. ID rezerwuj dla bardzo unikalnych elementów, które będą wymagały bezpośredniego odwoływania się przez JavaScript lub jako kotwice nawigacyjne.</p>\n<hr>\n<h2 id=\"podstawowe-właściwości-css--twój-zestaw-narzędzi-do-stylizacji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-właściwości-css--twój-zestaw-narzędzi-do-stylizacji\">>></a>Podstawowe właściwości CSS – Twój zestaw narzędzi do stylizacji</h2>\n<p>Poznałeś/aś, jak wybrać elementy (selektory) i gdzie umieścić style. Teraz czas na naukę <strong>właściwości CSS</strong>, które faktycznie zmieniają wygląd Twoich elementów. Poniżej przedstawiamy kilka najważniejszych i najczęściej używanych.</p>\n<h3 id=\"kolory-colors--nadaj-barwę-tekstowi\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#kolory-colors--nadaj-barwę-tekstowi\">>>></a>Kolory (Colors) – nadaj barwę tekstowi</h3>\n<p>Właściwość <code>color</code> służy do ustawiania <strong>koloru tekstu</strong> w elemencie.\nMożesz definiować kolory na kilka sposobów:</p>\n<ul>\n<li><strong>Nazwy kolorów:</strong> <code>red</code>, <code>blue</code>, <code>green</code>, <code>yellow</code>, <code>orange</code>, <code>black</code>, <code>white</code>, <code>lightgray</code>, <code>darkblue</code> itp. (istnieje wiele predefiniowanych nazw).</li>\n<li><strong>Wartości szesnastkowe (Hexadecimal)</strong>: Zaczynają się od <code>#</code>, po których następuje 6 cyfr/liter (0-9, A-F). Każde dwie cyfry reprezentują natężenie koloru czerwonego, zielonego i niebieskiego (RGB). Np. <code>#FF0000</code> to czysty czerwony, <code>#000000</code> to czarny, <code>#FFFFFF</code> to biały.</li>\n<li><strong>RGB (Red, Green, Blue)</strong>: <code>rgb(czerwony, zielony, niebieski)</code>. Wartości od 0 do 255. Np. <code>rgb(255, 0, 0)</code> to czerwony. Możesz też dodać kanał alfa dla przezroczystości: <code>rgba(czerwony, zielony, niebieski, alfa)</code>. <code>alfa</code> to wartość od 0 (całkowicie przezroczysty) do 1 (całkowicie nieprzezroczysty). Np. <code>rgba(0, 0, 0, 0.5)</code> to półprzezroczysty czarny.</li>\n<li><strong>HSL (Hue, Saturation, Lightness)</strong>: <code>hsl(odcień, nasycenie, jasność)</code>. Odcień (Hue) to kąt na kole barw (0-360 stopni), nasycenie (Saturation) i jasność (Lightness) to procenty (0-100%). Np. <code>hsl(0, 100%, 50%)</code> to czerwony. Możesz też dodać kanał alfa: <code>hsla(odcień, nasycenie, jasność, alfa)</code>.</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Różne sposoby definiowania koloru tekstu */</span>\n<span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: red; <span class=\"hljs-comment\">/* Nazwa koloru */</span>\n}\n\n<span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-class\">.info</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#008080</span>; <span class=\"hljs-comment\">/* Ciemny turkus (szesnastkowo) */</span>\n}\n\n<span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">130</span>); <span class=\"hljs-comment\">/* Indygo (RGB) */</span>\n}\n\n<span class=\"hljs-selector-tag\">span</span><span class=\"hljs-selector-class\">.highlight</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">hsl</span>(<span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">100%</span>, <span class=\"hljs-number\">25%</span>); <span class=\"hljs-comment\">/* Ciemnozielony (HSL) */</span>\n}\n\n<span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-class\">.overlay</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.7</span>); <span class=\"hljs-comment\">/* Półprzezroczysty czarny (RGBA) */</span>\n  <span class=\"hljs-attribute\">color</span>: white;\n}\n</code></pre>\n<h3 id=\"tło-background--pokoloruj-przestrzeń\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tło-background--pokoloruj-przestrzeń\">>>></a>Tło (Background) – pokoloruj przestrzeń</h3>\n<p>Właściwości z prefiksem <code>background-</code> służą do stylowania tła elementów.</p>\n<ul>\n<li><strong><code>background-color</code></strong>: Ustawia kolor tła elementu. Możesz użyć dowolnego formatu koloru (nazwa, hex, RGB, HSL).</li>\n<li><strong><code>background-image</code></strong>: Ustawia obrazek jako tło elementu. Podaj ścieżkę do pliku obrazu za pomocą <code>url()</code>.</li>\n<li><strong><code>background-repeat</code></strong>: Określa, czy i jak obrazek tła ma się powtarzać.\n<ul>\n<li><code>no-repeat</code>: Obrazek nie powtarza się.</li>\n<li><code>repeat</code>: Obrazek powtarza się wzdłuż osi X i Y.</li>\n<li><code>repeat-x</code>: Powtarza się tylko poziomo.</li>\n<li><code>repeat-y</code>: Powtarza się tylko pionowo.</li>\n</ul>\n</li>\n<li><strong><code>background-position</code></strong>: Określa początkową pozycję obrazka tła. Możesz użyć słów kluczowych (<code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>, <code>center</code>) lub wartości procentowych/pikselowych.</li>\n<li><strong><code>background-size</code></strong>: Określa rozmiar obrazka tła.\n<ul>\n<li><code>auto</code>: Domyślny rozmiar.</li>\n<li><code>cover</code>: Skaluje obrazek tak, aby pokrył całą powierzchnię elementu, przycinając go w razie potrzeby.</li>\n<li><code>contain</code>: Skaluje obrazek tak, aby był w pełni widoczny wewnątrz elementu, bez przycinania (mogą pojawić się puste przestrzenie).</li>\n<li>Wartości pikselowe/procentowe (np. <code>100px 200px</code>, <code>50% 100%</code>).</li>\n</ul>\n</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f8f8f8</span>; <span class=\"hljs-comment\">/* Bardzo jasnoszare tło dla całej strony */</span>\n}\n\n<span class=\"hljs-selector-tag\">header</span> {\n  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">\"header-bg.jpg\"</span>); <span class=\"hljs-comment\">/* Obrazek tła w nagłówku */</span>\n  <span class=\"hljs-attribute\">background-repeat</span>: no-repeat; <span class=\"hljs-comment\">/* Bez powtarzania */</span>\n  <span class=\"hljs-attribute\">background-position</span>: center top; <span class=\"hljs-comment\">/* Na środku, u góry */</span>\n  <span class=\"hljs-attribute\">background-size</span>: cover; <span class=\"hljs-comment\">/* Pokryj całą powierzchnię */</span>\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">50px</span>;\n  <span class=\"hljs-attribute\">color</span>: white;\n  <span class=\"hljs-attribute\">text-align</span>: center;\n}\n\n<span class=\"hljs-selector-class\">.card</span> {\n  <span class=\"hljs-attribute\">background-color</span>: white;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">8px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>); <span class=\"hljs-comment\">/* Delikatny cień */</span>\n}\n</code></pre>\n<h3 id=\"marginesy-i-wypełnienia-margin--padding--kontroluj-odstępy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#marginesy-i-wypełnienia-margin--padding--kontroluj-odstępy\">>>></a>Marginesy i wypełnienia (Margin &#x26; Padding) – kontroluj odstępy</h3>\n<p>Właściwości <code>margin</code> i <code>padding</code> są kluczowe do kontrolowania odstępów między elementami i wewnątrz nich. Aby to dobrze zrozumieć, wyobraź sobie każdy element HTML jako pudełko. 📦</p>\n<ul>\n<li><strong><code>padding</code> (wypełnienie)</strong>: To przestrzeń <strong>wewnątrz</strong> pudełka, między jego zawartością (tekstem, obrazem) a krawędzią ramki. Powiększa rozmiar wizualny elementu, ale nie dodaje odstępu od innych elementów.</li>\n<li><strong><code>margin</code> (margines)</strong>: To przestrzeń <strong>na zewnątrz</strong> pudełka, między krawędzią ramki a innymi elementami. Tworzy odstęp między jednym elementem a drugim.</li>\n</ul>\n<p>Obie właściwości można ustawić dla wszystkich czterech stron elementu (góra, prawo, dół, lewo) jednocześnie lub indywidualnie.</p>\n<p><strong>Składnia:</strong></p>\n<ul>\n<li><strong>Jedna wartość:</strong> <code>padding: 20px;</code> (20px ze wszystkich stron).</li>\n<li><strong>Dwie wartości:</strong> <code>padding: 10px 20px;</code> (10px góra/dół, 20px lewo/prawo).</li>\n<li><strong>Cztery wartości:</strong> <code>padding: 10px 20px 30px 40px;</code> (góra, prawo, dół, lewo – zgodnie z ruchem wskazówek zegara).</li>\n<li><strong>Indywidualne właściwości:</strong> <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, <code>padding-left</code> (analogicznie dla <code>margin</code>).</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.box</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#cfe2f3</span>; <span class=\"hljs-comment\">/* Jasnoniebieski */</span>\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#a9d0ed</span>;\n}\n\n<span class=\"hljs-selector-class\">.content-box</span> {\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>; <span class=\"hljs-comment\">/* 20px wypełnienia z każdej strony */</span>\n}\n\n<span class=\"hljs-selector-class\">.spaced-element</span> {\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">15px</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/* 15px marginesu góra/dół, 0px lewo/prawo */</span>\n}\n\n<span class=\"hljs-selector-class\">.specific-margins</span> {\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">50px</span>;\n  <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">25px</span>;\n}\n</code></pre>\n<h3 id=\"ramki-borders--obramuj-i-zaokrąglaj\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#ramki-borders--obramuj-i-zaokrąglaj\">>>></a>Ramki (Borders) – obramuj i zaokrąglaj</h3>\n<p>Właściwości z prefiksem <code>border-</code> pozwalają na dodanie obramowania wokół elementu.</p>\n<ul>\n<li><strong><code>border</code></strong>: Skrócona właściwość do ustawienia szerokości, stylu i koloru ramki.\n<ul>\n<li><strong><code>border: 1px solid black;</code></strong>\n<ul>\n<li><code>1px</code>: szerokość ramki.</li>\n<li><code>solid</code>: styl ramki (inne to np. <code>dashed</code>, <code>dotted</code>, <code>double</code>).</li>\n<li><code>black</code>: kolor ramki.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>border-width</code></strong>: Szerokość ramki (np. <code>2px</code>, <code>medium</code>, <code>thick</code>).</li>\n<li><strong><code>border-style</code></strong>: Styl ramki (np. <code>solid</code>, <code>dotted</code>, <code>dashed</code>, <code>double</code>, <code>groove</code>, <code>ridge</code>, <code>inset</code>, <code>outset</code>, <code>none</code>, <code>hidden</code>).</li>\n<li><strong><code>border-color</code></strong>: Kolor ramki.</li>\n<li><strong><code>border-radius</code></strong>: <strong>Zaokrągla rogi</strong> elementu. Podajesz wartość promienia zaokrąglenia (np. <code>5px</code>, <code>1em</code>, <code>50%</code> dla idealnego koła/elipsy).</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.card</span> {\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">2px</span> solid <span class=\"hljs-number\">#5cb85c</span>; <span class=\"hljs-comment\">/* Zielona, ciągła ramka o grubości 2px */</span>\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">8px</span>; <span class=\"hljs-comment\">/* Zaokrąglone rogi na 8 pikseli */</span>\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">15px</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>;\n}\n\n<span class=\"hljs-selector-class\">.profile-picture</span> {\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">3px</span> dotted purple; <span class=\"hljs-comment\">/* Fioletowa, kropkowana ramka */</span>\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>; <span class=\"hljs-comment\">/* Idealne koło (dla kwadratowego obrazka) */</span>\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;\n  <span class=\"hljs-attribute\">object-fit</span>: cover; <span class=\"hljs-comment\">/* Dopasuj obrazek do kształtu */</span>\n}\n\n<span class=\"hljs-selector-class\">.notification</span> {\n  <span class=\"hljs-attribute\">border</span>: none; <span class=\"hljs-comment\">/* Brak ramki */</span>\n  <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">5px</span> solid <span class=\"hljs-number\">#ffc107</span>; <span class=\"hljs-comment\">/* Tylko lewa ramka */</span>\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff3cd</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n}\n</code></pre>\n<p>Powyższe właściwości to absolutna podstawa. CSS oferuje setki właściwości do kontrolowania typografii (czcionki, rozmiar, waga), układu (Flexbox, Grid), animacji i wielu innych. To świetny początek!</p>\n<hr>\n<h2 id=\"zadania-do-wykonania-sprawdź-swoje-umiejętności\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania-sprawdź-swoje-umiejętności\">>></a>Zadania do wykonania: Sprawdź swoje umiejętności!</h2>\n<p>Czas na praktykę! Rozwiąż te zadania, aby utrwalić to, czego się nauczyłeś/aś. Utwórz dla każdego zadania plik HTML i osobny plik <code>style.css</code>, a następnie połącz je za pomocą <code>&#x3C;link rel=\"stylesheet\" href=\"style.css\" /></code>. Po każdym zadaniu możesz rozwinąć sekcję <code>Pokaż rozwiązanie</code>, aby sprawdzić swój kod. Powodzenia! 💪</p>\n<h3 id=\"zadanie-1-czerwony-nagłówek\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-czerwony-nagłówek\">>>></a>Zadanie 1: Czerwony nagłówek</h3>\n<p>Stwórz stronę HTML z nagłówkiem <code>&#x3C;h1></code>. Nadaj mu kolor <strong>czerwony</strong> za pomocą <strong>External CSS</strong>, używając selektora klasy.</p>\n<p>&#x3C;details>\n&#x3C;summary>\n&#x3C;span>Pokaż rozwiązanie&#x3C;/span>\n&#x3C;/summary></p>\n<p><strong><code>index.html</code>:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 1 - Czerwony Nagłówek<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"czerwony-tekst\"</span>></span>Witaj, świecie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><strong><code>style.css</code>:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* style.css */</span>\n<span class=\"hljs-selector-class\">.czerwony-tekst</span> {\n  <span class=\"hljs-attribute\">color</span>: red; <span class=\"hljs-comment\">/* Ustawienie koloru tekstu na czerwony */</span>\n}\n</code></pre>\n<p>&#x3C;/details></p>\n<hr>\n<h3 id=\"zadanie-2-kolorowy-akapit\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-kolorowy-akapit\">>>></a>Zadanie 2: Kolorowy akapit</h3>\n<p>Utwórz na nowej stronie HTML akapit (<code>&#x3C;p></code>). Nadaj mu <strong>zielone tło</strong>, <strong>20 pikseli wypełnienia</strong> (<code>padding</code>) ze wszystkich stron oraz <strong>zaokrąglone rogi</strong> o promieniu <strong>10 pikseli</strong>. Użyj selektora klasy w External CSS.</p>\n<p>&#x3C;details>\n&#x3C;summary>\n&#x3C;span>Pokaż rozwiązanie&#x3C;/span>\n&#x3C;/summary></p>\n<p><strong><code>index.html</code>:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 2 - Kolorowy Akapit<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"zielony-akapit\"</span>></span>\n      Ten akapit ma zielone tło, wypełnienie i zaokrąglone rogi. Wygląda super!\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><strong><code>style.css</code>:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* style.css */</span>\n<span class=\"hljs-selector-class\">.zielony-akapit</span> {\n  <span class=\"hljs-attribute\">background-color</span>: lightgreen; <span class=\"hljs-comment\">/* Kolor tła */</span>\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>; <span class=\"hljs-comment\">/* Wypełnienie wewnątrz elementu */</span>\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-comment\">/* Zaokrąglenie rogów */</span>\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>; <span class=\"hljs-comment\">/* Kolor tekstu, żeby był czytelny */</span>\n}\n</code></pre>\n<p>&#x3C;/details></p>\n<hr>\n<h3 id=\"zadanie-3-stylowy-div\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-stylowy-div\">>>></a>Zadanie 3: Stylowy <code>div</code></h3>\n<p>Stwórz na nowej stronie HTML element <code>&#x3C;div></code>. Wewnątrz niego umieść tekst \"To jest div z ramką.\". Nadaj mu <strong>niebieską ramkę</strong> o grubości <strong>2 pikseli</strong> i stylu <code>solid</code> (ciągła linia). Użyj selektora elementu dla <code>div</code> w External CSS.</p>\n<p>&#x3C;details>\n&#x3C;summary>\n&#x3C;span>Pokaż rozwiązanie&#x3C;/span>\n&#x3C;/summary></p>\n<p><strong><code>index.html</code>:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 3 - Div z Ramką<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>To jest div z ramką.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><strong><code>style.css</code>:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* style.css */</span>\n<span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">2px</span> solid blue; <span class=\"hljs-comment\">/* Niebieska, ciągła ramka o grubości 2 pikseli */</span>\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-comment\">/* Dodajemy trochę wypełnienia, żeby tekst nie stykał się z ramką */</span>\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">20px</span>; <span class=\"hljs-comment\">/* Dodajemy trochę marginesu, żeby div nie był przyklejony do krawędzi */</span>\n}\n</code></pre>\n<p>&#x3C;/details></p>\n<hr>\n<h3 id=\"zadanie-4-różnokolorowe-nagłówki\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-różnokolorowe-nagłówki\">>>></a>Zadanie 4: Różnokolorowe nagłówki</h3>\n<p>Utwórz stronę HTML z trzema nagłówkami: <code>&#x3C;h1></code>, <code>&#x3C;h2></code> i <code>&#x3C;h3></code>. Każdemu nagłówkowi nadaj inną klasę (np. <code>pierwszy-kolor</code>, <code>drugi-kolor</code>, <code>trzeci-kolor</code>) i za pomocą External CSS ustaw dla nich odpowiednio kolory: <strong>zielony</strong>, <strong>pomarańczowy</strong> i <strong>fioletowy</strong>.</p>\n<p>&#x3C;details>\n&#x3C;summary>\n&#x3C;span>Pokaż rozwiązanie&#x3C;/span>\n&#x3C;/summary></p>\n<p><strong><code>index.html</code>:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 4 - Różne Nagłówki<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"zielony-naglowek\"</span>></span>Pierwszy Nagłówek (H1)<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"pomaranczowy-naglowek\"</span>></span>Drugi Nagłówek (H2)<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fioletowy-naglowek\"</span>></span>Trzeci Nagłówek (H3)<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><strong><code>style.css</code>:</strong></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* style.css */</span>\n<span class=\"hljs-selector-class\">.zielony-naglowek</span> {\n  <span class=\"hljs-attribute\">color</span>: green;\n}\n\n<span class=\"hljs-selector-class\">.pomaranczowy-naglowek</span> {\n  <span class=\"hljs-attribute\">color</span>: orange;\n}\n\n<span class=\"hljs-selector-class\">.fioletowy-naglowek</span> {\n  <span class=\"hljs-attribute\">color</span>: purple;\n}\n</code></pre>\n<p>&#x3C;/details></p>\n<hr>\n<p>Brawo! 🎉 Ukończyłeś/aś kurs podstaw CSS. Masz już solidne fundamenty, by zacząć stylować swoje strony internetowe. Pamiętaj, że praktyka jest kluczem do mistrzostwa. Eksperymentuj z różnymi właściwościami i selektorami, a zobaczysz, jak wiele możesz zdziałać z CSS!</p>\n<p>Co dalej? Może zainteresuje Cię:</p>\n<ul>\n<li><strong>Flexbox i Grid</strong> – nowoczesne techniki układania elementów na stronie.</li>\n<li><strong>Responsywny design</strong> – jak sprawić, by strona wyglądała dobrze na każdym urządzeniu.</li>\n<li><strong>Animacje i transformacje CSS</strong> – dodawanie efektów wizualnych.</li>\n</ul>\n<p>Daj znać, co Cię interesuje! 😊</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-css.md",{"_21":1123,"_23":1124,"_25":1125,"_6":1128,"_36":967,"_38":1129,"_91":1172,"_93":1173,"_95":1174,"_97":1175,"_99":100},"Czym jest DOM?","Czym jest DOM? DOM (Document Object Model) to interfejs programistyczny dla dokumentów HTML i XML. Umożliwia dynamiczne manipulowanie strukturą, stylem i treścią dokumentów. DOM reprezentuje dokument jako drzewo obiektów, gdzie każdy element, atrybut i tekst w dokumencie jest węzłem drzewa.",[744,9,1126,1127,531,34],"dom","struktura",[9],{"_21":1130,"_41":1131},"Quiz: Podstawy DOM",[1132,1140,1148,1156,1164],{"_44":1133,"_46":1134,"_52":80,"_54":1139},"<p>Co oznacza skrót DOM w kontekście stron internetowych?</p>",[1135,1136,1137,1138],"Data Oriented Module","Document Object Model","Document Option Method","Dynamic Output Mapper","DOM to Document Object Model – model obiektowy dokumentu HTML lub XML.",{"_44":1141,"_46":1142,"_52":71,"_54":1147},"<p>Jaką strukturę prezentuje DOM?</p>",[1143,1144,1145,1146],"Drzewiastą (hierarchiczną)","Listową","Tablicową","Płaską","DOM przedstawia dokument jako drzewo obiektów (węzłów).",{"_44":1149,"_46":1150,"_52":89,"_54":1155},"<p>Która metoda pozwala pobrać element o określonym identyfikatorze?</p>",[1151,1152,1153,1154],"document.querySelectorAll","document.getElementsByClassName","document.getElementById","document.createElement","document.getElementById pobiera element o podanym id.",{"_44":1157,"_46":1158,"_52":80,"_54":1163},"<p>Jak za pomocą DOM dodać nowy element do listy <code>ul</code>?</p>",[1159,1160,1161,1162],"Użyć metody getElementsByTagName","Utworzyć element przez createElement i dołączyć przez appendChild","Zmienić atrybut src","Użyć innerHTML na ul","Tworzymy element createElement i dołączamy przez appendChild.",{"_44":1165,"_46":1166,"_52":71,"_54":1171},"<p>Co umożliwia metoda <code>querySelectorAll?</code></p>",[1167,1168,1169,1170],"Wybór wielu elementów za pomocą selektora CSS","Usunięcie elementu","Zmianę tekstu elementu","Zmianę atrybutu id","querySelectorAll wybiera wszystkie pasujące elementy zgodnie z selektorem CSS.","d17e37c1-98f6-4864-a3ee-69fa629e5518","wprowadzenie-do-dom","<p>Witaj w świecie <strong>DOM</strong>! 🌐 Jeśli HTML to struktura Twojej strony, a CSS to jej styl, to <strong>DOM</strong> jest niczym most, który pozwala Ci komunikować się z nimi za pomocą JavaScriptu. Dzięki DOM Twoje statyczne strony internetowe mogą ożyć, reagować na interakcje użytkownika i dynamicznie zmieniać swoją zawartość. Gotowy/a, by dowiedzieć się, jak JavaScript \"widzi\" Twoją stronę i jak możesz ją programowo modyfikować? Zaczynamy! 💻</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#wprowadzenie-czym-jest-dom\">Wprowadzenie: Czym jest DOM?</a></li>\n<li><a href=\"#struktura-dom-drzewo-w%C4%99z%C5%82%C3%B3w\">Struktura DOM: Drzewo węzłów</a></li>\n<li><a href=\"#podstawowe-operacje-na-dom-za-pomoc%C4%85-javascriptu\">Podstawowe operacje na DOM za pomocą JavaScriptu</a>\n<ul>\n<li><a href=\"#wybieranie-element%C3%B3w\">Wybieranie elementów</a>\n<ul>\n<li><code>getElementById()</code></li>\n<li><code>getElementsByClassName()</code></li>\n<li><code>querySelector()</code> i <code>querySelectorAll()</code></li>\n</ul>\n</li>\n<li><a href=\"#manipulowanie-elementami\">Manipulowanie elementami</a>\n<ul>\n<li>Zmiana tekstu: <code>textContent</code> i <code>innerHTML</code></li>\n<li>Zmiana atrybutów: <code>setAttribute()</code>, <code>removeAttribute()</code>, <code>getAttribute()</code></li>\n<li>Zmiana stylów CSS: <code>style</code></li>\n<li>Dodawanie i usuwanie klas CSS: <code>classList</code></li>\n</ul>\n</li>\n<li><a href=\"#tworzenie-i-dodawanie-nowych-element%C3%B3w\">Tworzenie i dodawanie nowych elementów</a>\n<ul>\n<li><code>createElement()</code></li>\n<li><code>appendChild()</code> i <code>prepend()</code></li>\n<li><code>insertBefore()</code></li>\n</ul>\n</li>\n<li><a href=\"#usuwanie-element%C3%B3w\">Usuwanie elementów</a>\n<ul>\n<li><code>remove()</code></li>\n<li><code>removeChild()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#zadania-do-wykonania-sprawd%C5%BA-swoje-umiej%C4%99tno%C5%9Bci\">Zadania do wykonania: Sprawdź swoje umiejętności!</a>\n<ul>\n<li><a href=\"#zadanie-1-dynamiczna-lista\">Zadanie 1: Dynamiczna lista</a></li>\n<li><a href=\"#zadanie-2-interaktywny-przycisk\">Zadanie 2: Interaktywny przycisk</a></li>\n<li><a href=\"#zadanie-3-zmieniaj%C4%85cy-si%C4%99-obrazek\">Zadanie 3: Zmieniający się obrazek</a></li>\n<li><a href=\"#zadanie-4-masowa-zmiana-stylu\">Zadanie 4: Masowa zmiana stylu</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"wprowadzenie-czym-jest-dom\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wprowadzenie-czym-jest-dom\">>></a>Wprowadzenie: Czym jest DOM?</h2>\n<p><strong>DOM</strong> (ang. <strong>Document Object Model</strong>, czyli Model Obiektowy Dokumentu) to <strong>interfejs programistyczny (API)</strong>, który pozwala na interakcję z dokumentami HTML i XML za pomocą języków skryptowych, takich jak <strong>JavaScript</strong>.</p>\n<p>Wyobraź sobie przeglądarkę internetową, która ładuje stronę HTML. Kiedy to się dzieje, przeglądarka nie widzi tylko surowego tekstu kodu. Zamiast tego, tworzy w pamięci <strong>obiektową reprezentację</strong> tego dokumentu – właśnie to jest DOM.</p>\n<p>DOM przedstawia cały dokument jako <strong>strukturę drzewiastą</strong>, gdzie każdy element HTML (jak <code>&#x3C;p></code>, <code>&#x3C;h1></code>, <code>&#x3C;div></code>), każdy atrybut (jak <code>href</code>, <code>src</code>, <code>id</code>, <code>class</code>) i każdy fragment tekstu (nawet komentarze) jest oddzielnym <strong>węzłem (node)</strong>. Te węzły są ze sobą powiązane relacjami rodzic-dziecko-rodzeństwo, tworząc hierarchiczne \"drzewo\".</p>\n<p><strong>Dlaczego to takie ważne?</strong>\nBez DOM, strony internetowe byłyby statyczne. Nie moglibyśmy:</p>\n<ul>\n<li>Zmieniać tekstu na stronie po jej załadowaniu.</li>\n<li>Dodawać lub usuwać nowych elementów (np. pozycji na liście zakupów).</li>\n<li>Modyfikować stylów CSS dynamicznie (np. zmienić kolor tła po kliknięciu przycisku).</li>\n<li>Reagować na akcje użytkownika (kliknięcia, ruchy myszy, wprowadzanie danych).</li>\n</ul>\n<p>Dzięki DOM, JavaScript może \"widzieć\" i \"dotykać\" każdy element na stronie, umożliwiając tworzenie dynamicznych i interaktywnych aplikacji webowych. To most między Twoim kodem HTML/CSS a logiką po stronie klienta, którą piszesz w JavaScripcie.</p>\n<hr>\n<h2 id=\"struktura-dom-drzewo-węzłów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#struktura-dom-drzewo-węzłów\">>></a>Struktura DOM: Drzewo węzłów</h2>\n<p>Jak wspomniano, DOM reprezentuje dokument HTML jako <strong>hierarchiczne drzewo węzłów</strong>. Na samym szczycie znajduje się obiekt <code>document</code>, który jest punktem wejścia do całego drzewa. Każdy element HTML, tekst wewnątrz niego, a nawet atrybuty, stają się odrębnymi węzłami.</p>\n<p><strong>Przykładowy dokument HTML:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Moja Strona<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"main-title\"</span>></span>Witaj na stronie!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"intro-text\"</span>></span>To jest pierwszy akapit.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://example.com\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"intro-text\"</span>></span>Link<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><strong>Reprezentacja tego dokumentu w DOM (uproszczony widok drzewa):</strong></p>\n<pre><code>document (cały dokument)\n└── html (element HTML)\n    ├── head (element HTML)\n    │   └── title (element HTML)\n    │       └── \"Moja Strona\" (węzeł tekstowy)\n    └── body (element HTML)\n        ├── h1 (element HTML)\n        │   ├── id=\"main-title\" (węzeł atrybutu)\n        │   └── \"Witaj na stronie!\" (węzeł tekstowy)\n        ├── p (element HTML)\n        │   ├── class=\"intro-text\" (węzeł atrybutu)\n        │   └── \"To jest pierwszy akapit.\" (węzeł tekstowy)\n        └── a (element HTML)\n            ├── href=\"https://example.com\" (węzeł atrybutu)\n            ├── class=\"intro-text\" (węzeł atrybutu)\n            └── \"Link\" (węzeł tekstowy)\n</code></pre>\n<p>W tym drzewie:</p>\n<ul>\n<li><code>document</code> jest <strong>korzeniem</strong> drzewa.</li>\n<li><code>html</code> jest <strong>dzieckiem</strong> <code>document</code>.</li>\n<li><code>head</code> i <code>body</code> to <strong>dzieci</strong> <code>html</code> i jednocześnie <strong>rodzeństwo</strong> względem siebie.</li>\n<li><code>title</code> jest <strong>dzieckiem</strong> <code>head</code>.</li>\n<li>Tekst (\"Moja Strona\") jest <strong>dzieckiem</strong> <code>title</code>.</li>\n<li><code>h1</code>, <code>p</code>, <code>a</code> są <strong>dziećmi</strong> <code>body</code>.</li>\n<li>Każdy węzeł może mieć swoje własne dzieci.</li>\n<li>Atrybuty są również traktowane jako węzły.</li>\n</ul>\n<p>Zrozumienie tej struktury jest kluczowe, ponieważ wszystkie operacje DOM polegają na nawigowaniu po tym drzewie (np. znajdowanie rodziców, dzieci, rodzeństwa) i manipulowaniu jego węzłami.</p>\n<hr>\n<h2 id=\"podstawowe-operacje-na-dom-za-pomocą-javascriptu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-operacje-na-dom-za-pomocą-javascriptu\">>></a>Podstawowe operacje na DOM za pomocą JavaScriptu</h2>\n<p>Aby manipulować DOM, JavaScript oferuje szereg wbudowanych metod dostępnych poprzez globalny obiekt <code>document</code>. Oto najważniejsze z nich:</p>\n<h3 id=\"wybieranie-elementów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wybieranie-elementów\">>>></a>Wybieranie elementów</h3>\n<p>Zanim zmienisz cokolwiek na stronie, musisz najpierw <strong>wybrać</strong> element(y), które chcesz zmodyfikować.</p>\n<h4 id=\"getelementbyid\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#getelementbyid\">>>>></a><code>getElementById()</code></h4>\n<p>Ta metoda pozwala pobrać <strong>pojedynczy element</strong> o konkretnym atrybucie <code>id</code>. Ponieważ <code>id</code> powinno być unikalne na stronie, zawsze zwróci tylko jeden element lub <code>null</code>, jeśli nie znajdzie pasującego ID.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"mojAkapit\"</span>></span>Cześć, jestem akapit!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"zmienPrzycisk\"</span>></span>Zmień ten tekst<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> akapit = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"mojAkapit\"</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(akapit.<span class=\"hljs-property\">textContent</span>); <span class=\"hljs-comment\">// \"Cześć, jestem akapit!\"</span>\n\n  <span class=\"hljs-keyword\">const</span> przycisk = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"zmienPrzycisk\"</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(przycisk.<span class=\"hljs-property\">tagName</span>); <span class=\"hljs-comment\">// \"BUTTON\"</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h4 id=\"getelementsbyclassname\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#getelementsbyclassname\">>>>></a><code>getElementsByClassName()</code></h4>\n<p>Ta metoda zwraca <strong>HTMLCollection</strong> (podobną do tablicy) wszystkich elementów, które mają określoną klasę CSS.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item\"</span>></span>Jabłko<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item\"</span>></span>Gruszka<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item active\"</span>></span>Banan<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> elementyListy = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByClassName</span>(<span class=\"hljs-string\">\"item\"</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(elementyListy.<span class=\"hljs-property\">length</span>); <span class=\"hljs-comment\">// 3</span>\n\n  <span class=\"hljs-comment\">// Możesz iterować po kolekcji:</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; elementyListy.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(elementyListy[i].<span class=\"hljs-property\">textContent</span>);\n  }\n  <span class=\"hljs-comment\">// Wynik: \"Jabłko\", \"Gruszka\", \"Banan\"</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h4 id=\"queryselector-i-queryselectorall\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#queryselector-i-queryselectorall\">>>>></a><code>querySelector()</code> i <code>querySelectorAll()</code></h4>\n<p>To są nowoczesne i bardzo elastyczne metody. Pozwalają wybierać elementy za pomocą <strong>dowolnego selektora CSS</strong>, tak jakbyś pisał/a reguły w pliku <code>.css</code>.</p>\n<ul>\n<li><strong><code>querySelector()</code></strong>: Zwraca <strong>pierwszy element</strong>, który pasuje do podanego selektora.</li>\n<li><strong><code>querySelectorAll()</code></strong>: Zwraca <strong>NodeList</strong> (również podobną do tablicy) wszystkich elementów, które pasują do podanego selektora.</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text\"</span>></span>Pierwszy akapit w kontenerze.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text highlight\"</span>></span>Drugi akapit w kontenerze.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"test-span\"</span>></span>Test Span<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-comment\">// Wybierz pierwszy akapit z klasą \"text\"</span>\n  <span class=\"hljs-keyword\">const</span> pierwszyTekst = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\".text\"</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pierwszyTekst.<span class=\"hljs-property\">textContent</span>); <span class=\"hljs-comment\">// \"Pierwszy akapit w kontenerze.\"</span>\n\n  <span class=\"hljs-comment\">// Wybierz element o ID \"test-span\"</span>\n  <span class=\"hljs-keyword\">const</span> mojSpan = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\"#test-span\"</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(mojSpan.<span class=\"hljs-property\">tagName</span>); <span class=\"hljs-comment\">// \"SPAN\"</span>\n\n  <span class=\"hljs-comment\">// Wybierz wszystkie akapity wewnątrz diva z klasą \"container\"</span>\n  <span class=\"hljs-keyword\">const</span> wszystkieTekstyWKontenerze = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">\".container p\"</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(wszystkieTekstyWKontenerze.<span class=\"hljs-property\">length</span>); <span class=\"hljs-comment\">// 2</span>\n\n  <span class=\"hljs-comment\">// Możesz użyć forEach na NodeList (czego nie zrobisz bezpośrednio na HTMLCollection)</span>\n  wszystkieTekstyWKontenerze.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(p.<span class=\"hljs-property\">textContent</span>);\n  });\n  <span class=\"hljs-comment\">// Wynik: \"Pierwszy akapit w kontenerze.\", \"Drugi akapit w kontenerze.\"</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<p><strong>Wskazówka:</strong> <code>querySelector</code> i <code>querySelectorAll</code> są najbardziej uniwersalne i często preferowane ze względu na ich elastyczność w użyciu selektorów CSS.</p>\n<hr>\n<h3 id=\"manipulowanie-elementami\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#manipulowanie-elementami\">>>></a>Manipulowanie elementami</h3>\n<p>Po wybraniu elementu możesz zmieniać jego zawartość, atrybuty i styl.</p>\n<h4 id=\"zmiana-tekstu-textcontent-i-innerhtml\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zmiana-tekstu-textcontent-i-innerhtml\">>>>></a>Zmiana tekstu: <code>textContent</code> i <code>innerHTML</code></h4>\n<ul>\n<li><strong><code>textContent</code></strong>: Zmienia lub pobiera tylko <strong>tekstową zawartość</strong> elementu, ignorując wszelkie tagi HTML wewnątrz niego. Jest bezpieczniejszy, ponieważ nie interpretuje HTML.</li>\n<li><strong><code>innerHTML</code></strong>: Zmienia lub pobiera <strong>całą zawartość HTML</strong> wewnątrz elementu. Pozwala na wstawienie pełnego kodu HTML, ale jest mniej bezpieczny (ryzyko XSS), jeśli używasz danych od użytkownika.</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"mojDiv\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Stary akapit<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> mojDiv = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"mojDiv\"</span>);\n\n  <span class=\"hljs-comment\">// Zmiana tekstu (bezpiecznie)</span>\n  mojDiv.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">\"Tylko tekst\"</span>;\n\n  <span class=\"hljs-comment\">// Zmiana zawartości HTML (mniej bezpiecznie, ale elastycznie)</span>\n  mojDiv.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">\"&#x3C;h2>Nowy nagłówek&#x3C;/h2>&#x3C;p>Z nowym akapitem.&#x3C;/p>\"</span>;\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h4 id=\"zmiana-atrybutów-setattribute-removeattribute-getattribute\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zmiana-atrybutów-setattribute-removeattribute-getattribute\">>>>></a>Zmiana atrybutów: <code>setAttribute()</code>, <code>removeAttribute()</code>, <code>getAttribute()</code></h4>\n<ul>\n<li><strong><code>setAttribute(nazwaAtrybutu, wartosc)</code></strong>: Ustawia nową wartość dla atrybutu.</li>\n<li><strong><code>removeAttribute(nazwaAtrybutu)</code></strong>: Usuwa atrybut.</li>\n<li><strong><code>getAttribute(nazwaAtrybutu)</code></strong>: Pobiera aktualną wartość atrybutu.</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"logo\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"stare-logo.png\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Stare logo firmy\"</span> /></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> logo = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"logo\"</span>);\n\n  <span class=\"hljs-comment\">// Zmień src i alt</span>\n  logo.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">\"src\"</span>, <span class=\"hljs-string\">\"nowe-logo.png\"</span>);\n  logo.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">\"alt\"</span>, <span class=\"hljs-string\">\"Nowe logo firmy\"</span>);\n\n  <span class=\"hljs-comment\">// Pobierz src</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(logo.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">\"src\"</span>)); <span class=\"hljs-comment\">// \"nowe-logo.png\"</span>\n\n  <span class=\"hljs-comment\">// Usuń atrybut alt</span>\n  logo.<span class=\"hljs-title function_\">removeAttribute</span>(<span class=\"hljs-string\">\"alt\"</span>);\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h4 id=\"zmiana-stylów-css-style\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zmiana-stylów-css-style\">>>>></a>Zmiana stylów CSS: <code>style</code></h4>\n<p>Bezpośrednio manipuluje stylami inline elementu.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"przyciskStyl\"</span>></span>Kliknij mnie<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> przyciskStyl = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"przyciskStyl\"</span>);\n\n  przyciskStyl.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = <span class=\"hljs-string\">\"blue\"</span>;\n  przyciskStyl.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">\"white\"</span>;\n  przyciskStyl.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">padding</span> = <span class=\"hljs-string\">\"10px 20px\"</span>;\n  przyciskStyl.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">borderRadius</span> = <span class=\"hljs-string\">\"5px\"</span>; <span class=\"hljs-comment\">// Właściwości z myślnikami w CSS są w CamelCase w JS</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<p><strong>Wskazówka:</strong> Często lepszym podejściem niż bezpośrednia manipulacja <code>style</code> jest dodawanie/usuwanie klas CSS, ponieważ to oddziela style od logiki JS.</p>\n<h4 id=\"dodawanie-i-usuwanie-klas-css-classlist\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#dodawanie-i-usuwanie-klas-css-classlist\">>>>></a>Dodawanie i usuwanie klas CSS: <code>classList</code></h4>\n<p>Właściwość <code>classList</code> obiektu elementu pozwala na łatwe zarządzanie klasami CSS.</p>\n<ul>\n<li><strong><code>classList.add('nazwa-klasy')</code></strong>: Dodaje jedną lub więcej klas.</li>\n<li><strong><code>classList.remove('nazwa-klasy')</code></strong>: Usuwa jedną lub więcej klas.</li>\n<li><strong><code>classList.toggle('nazwa-klasy')</code></strong>: Dodaje klasę, jeśli jej nie ma, lub usuwa, jeśli jest (przełącza).</li>\n<li><strong><code>classList.contains('nazwa-klasy')</code></strong>: Sprawdza, czy element ma daną klasę.</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"komunikat\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"message\"</span>></span>To jest komunikat.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.message</span> {\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n    <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid gray;\n  }\n  <span class=\"hljs-selector-class\">.error</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f8d7da</span>;\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#721c24</span>;\n    <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#f5c6cb</span>;\n  }\n  <span class=\"hljs-selector-class\">.hidden</span> {\n    <span class=\"hljs-attribute\">display</span>: none;\n  }\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> komunikat = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"komunikat\"</span>);\n\n  komunikat.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">\"error\"</span>); <span class=\"hljs-comment\">// Dodaj klasę \"error\"</span>\n  <span class=\"hljs-comment\">// Teraz div ma klasy \"message error\"</span>\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(komunikat.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">contains</span>(<span class=\"hljs-string\">\"message\"</span>)); <span class=\"hljs-comment\">// true</span>\n\n  komunikat.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">\"message\"</span>); <span class=\"hljs-comment\">// Usuń klasę \"message\"</span>\n  <span class=\"hljs-comment\">// Teraz div ma tylko klasę \"error\"</span>\n\n  komunikat.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">toggle</span>(<span class=\"hljs-string\">\"hidden\"</span>); <span class=\"hljs-comment\">// Dodaj klasę \"hidden\" (div zniknie)</span>\n  <span class=\"hljs-comment\">// Teraz div ma klasy \"error hidden\"</span>\n\n  komunikat.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">toggle</span>(<span class=\"hljs-string\">\"hidden\"</span>); <span class=\"hljs-comment\">// Usuń klasę \"hidden\" (div ponownie się pojawi)</span>\n  <span class=\"hljs-comment\">// Teraz div ma tylko klasę \"error\"</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<hr>\n<h3 id=\"tworzenie-i-dodawanie-nowych-elementów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#tworzenie-i-dodawanie-nowych-elementów\">>>></a>Tworzenie i dodawanie nowych elementów</h3>\n<p>Możesz dynamicznie budować całe fragmenty HTML za pomocą JavaScriptu.</p>\n<h4 id=\"createelement\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#createelement\">>>>></a><code>createElement()</code></h4>\n<p>Tworzy nowy węzeł elementu o podanej nazwie tagu. Nie dodaje go automatycznie do DOM; musisz to zrobić ręcznie.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> nowyDiv = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"div\"</span>);\n<span class=\"hljs-keyword\">const</span> nowyAkapit = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"p\"</span>);\n<span class=\"hljs-keyword\">const</span> nowyObrazek = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"img\"</span>);\n</code></pre>\n<h4 id=\"appendchild-i-prepend\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#appendchild-i-prepend\">>>>></a><code>appendChild()</code> i <code>prepend()</code></h4>\n<ul>\n<li><strong><code>elementRodzic.appendChild(elementDziecko)</code></strong>: Dodaje <code>elementDziecko</code> na <strong>koniec</strong> listy dzieci <code>elementRodzic</code>.</li>\n<li><strong><code>elementRodzic.prepend(elementDziecko)</code></strong>: Dodaje <code>elementDziecko</code> na <strong>początek</strong> listy dzieci <code>elementRodzic</code>.</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"listaZakupow\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Mleko<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Chleb<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> lista = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"listaZakupow\"</span>);\n\n  <span class=\"hljs-comment\">// Dodaj na koniec</span>\n  <span class=\"hljs-keyword\">const</span> platki = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"li\"</span>);\n  platki.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">\"Płatki\"</span>;\n  lista.<span class=\"hljs-title function_\">appendChild</span>(platki); <span class=\"hljs-comment\">// HTML: ... &#x3C;li>Chleb&#x3C;/li> &#x3C;li>Płatki&#x3C;/li>&#x3C;/ul></span>\n\n  <span class=\"hljs-comment\">// Dodaj na początek</span>\n  <span class=\"hljs-keyword\">const</span> jajka = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"li\"</span>);\n  jajka.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">\"Jajka\"</span>;\n  lista.<span class=\"hljs-title function_\">prepend</span>(jajka); <span class=\"hljs-comment\">// HTML: ... &#x3C;li>Jajka&#x3C;/li> &#x3C;li>Mleko&#x3C;/li> ...</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h4 id=\"insertbefore\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#insertbefore\">>>>></a><code>insertBefore()</code></h4>\n<p>Umożliwia wstawienie nowego elementu <strong>przed</strong> istniejącym elementem referencyjnym.</p>\n<p><code>elementRodzic.insertBefore(nowyElement, referencyjnyElement)</code></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"listaZakupow2\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Mleko<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chleb\"</span>></span>Chleb<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Płatki<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> lista2 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"listaZakupow2\"</span>);\n  <span class=\"hljs-keyword\">const</span> chleb = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"chleb\"</span>);\n\n  <span class=\"hljs-keyword\">const</span> maslo = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"li\"</span>);\n  maslo.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">\"Masło\"</span>;\n\n  <span class=\"hljs-comment\">// Wstaw \"Masło\" przed \"Chleb\"</span>\n  lista2.<span class=\"hljs-title function_\">insertBefore</span>(maslo, chleb);\n  <span class=\"hljs-comment\">// HTML: ... &#x3C;li>Mleko&#x3C;/li> &#x3C;li>Masło&#x3C;/li> &#x3C;li>Chleb&#x3C;/li> &#x3C;li>Płatki&#x3C;/li>&#x3C;/ul></span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<hr>\n<h3 id=\"usuwanie-elementów\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#usuwanie-elementów\">>>></a>Usuwanie elementów</h3>\n<h4 id=\"remove\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#remove\">>>>></a><code>remove()</code></h4>\n<p>Nowoczesna i prosta metoda do usuwania elementu bezpośrednio z DOM.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"doUsuniecia\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Ten div zostanie usunięty.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> divDoUsuniecia = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"doUsuniecia\"</span>);\n  divDoUsuniecia.<span class=\"hljs-title function_\">remove</span>(); <span class=\"hljs-comment\">// Element znika z DOM</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h4 id=\"removechild\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#removechild\">>>>></a><code>removeChild()</code></h4>\n<p>Starsza metoda, która usuwa określone dziecko z rodzica. Musisz mieć referencję do rodzica i do dziecka.</p>\n<p><code>elementRodzic.removeChild(elementDziecko)</code></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"listaDoModyfikacji\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Item 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"item2\"</span>></span>Item 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Item 3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> listaModyfikacji = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"listaDoModyfikacji\"</span>);\n  <span class=\"hljs-keyword\">const</span> item2 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"item2\"</span>);\n\n  listaModyfikacji.<span class=\"hljs-title function_\">removeChild</span>(item2); <span class=\"hljs-comment\">// Usuwa \"Item 2\"</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<hr>\n<h2 id=\"zadania-do-wykonania-sprawdź-swoje-umiejętności\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania-sprawdź-swoje-umiejętności\">>></a>Zadania do wykonania: Sprawdź swoje umiejętności!</h2>\n<p>Czas na praktykę! Użyj JavaScriptu do manipulacji DOM w poniższych zadaniach. Pamiętaj, aby cały kod JavaScript umieścić wewnątrz tagu <code>&#x3C;script></code> najlepiej na końcu <code>&#x3C;body></code> (przed <code>&#x3C;/body></code>), aby mieć pewność, że HTML jest już załadowany, zanim skrypt spróbuje nim manipulować.</p>\n<h3 id=\"zadanie-1-dynamiczna-lista\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-dynamiczna-lista\">>>></a>Zadanie 1: Dynamiczna lista</h3>\n<p>Stwórz stronę HTML z nagłówkiem <code>&#x3C;h1></code> i pustą listą nieuporządkowaną (<code>&#x3C;ul></code>) z atrybutem <code>id=\"mojaLista\"</code>. Następnie, za pomocą JavaScriptu:</p>\n<ol>\n<li>Dodaj trzy nowe elementy listy (<code>&#x3C;li></code>) do tej listy. Każdy element powinien zawierać inny tekst (np. \"Pierwszy element\", \"Drugi element\", \"Trzeci element\").</li>\n</ol>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 1 - Dynamiczna Lista<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Moja lista zakupów<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"mojaLista\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n      <span class=\"hljs-comment\">// 1. Pobierz referencję do listy</span>\n      <span class=\"hljs-keyword\">const</span> lista = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"mojaLista\"</span>);\n\n      <span class=\"hljs-comment\">// 2. Utwórz i dodaj trzy nowe elementy listy</span>\n      <span class=\"hljs-keyword\">const</span> element1 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"li\"</span>);\n      element1.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">\"Mleko\"</span>;\n      lista.<span class=\"hljs-title function_\">appendChild</span>(element1);\n\n      <span class=\"hljs-keyword\">const</span> element2 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"li\"</span>);\n      element2.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">\"Chleb\"</span>;\n      lista.<span class=\"hljs-title function_\">appendChild</span>(element2);\n\n      <span class=\"hljs-keyword\">const</span> element3 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"li\"</span>);\n      element3.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">\"Jajka\"</span>;\n      lista.<span class=\"hljs-title function_\">appendChild</span>(element3);\n\n      <span class=\"hljs-comment\">// Opcjonalnie: możesz dodać do listy z tablicy</span>\n      <span class=\"hljs-comment\">/*\n        const itemsToAdd = [\"Kawa\", \"Cukier\", \"Mąka\"];\n        itemsToAdd.forEach(itemText => {\n            const newItem = document.createElement(\"li\");\n            newItem.textContent = itemText;\n            lista.appendChild(newItem);\n        });\n        */</span>\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-interaktywny-przycisk\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-interaktywny-przycisk\">>>></a>Zadanie 2: Interaktywny przycisk</h3>\n<p>Utwórz formularz HTML z jednym polem tekstowym (<code>&#x3C;input type=\"text\"></code>) i jednym przyciskiem (<code>&#x3C;button id=\"przyciskAkcji\">Kliknij mnie&#x3C;/button></code>). Za pomocą JavaScriptu:</p>\n<ol>\n<li>Dodaj <strong>nasłuchiwanie zdarzenia kliknięcia</strong> na przycisk.</li>\n<li>Po kliknięciu, <strong>zmień tekst przycisku</strong> na \"Wysłano!\"</li>\n<li>Dodatkowo, <strong>zmień kolor tła</strong> pola tekstowego na jasnoszary (<code>#f0f0f0</code>).</li>\n</ol>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 2 - Interaktywny Przycisk<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n      <span class=\"hljs-selector-tag\">body</span> {\n        <span class=\"hljs-attribute\">font-family</span>: sans-serif;\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">20px</span>;\n      }\n      <span class=\"hljs-selector-tag\">form</span> {\n        <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">20px</span>;\n        <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n        <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">8px</span>;\n        <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">300px</span>;\n      }\n      <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">\"text\"</span>]</span> {\n        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n        <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">10px</span>;\n        <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>;\n        <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">4px</span>;\n        <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-built_in\">calc</span>(<span class=\"hljs-number\">100%</span> - <span class=\"hljs-number\">22px</span>);\n      }\n      <span class=\"hljs-selector-tag\">button</span> {\n        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">15px</span>;\n        <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#007bff</span>;\n        <span class=\"hljs-attribute\">color</span>: white;\n        <span class=\"hljs-attribute\">border</span>: none;\n        <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">4px</span>;\n        <span class=\"hljs-attribute\">cursor</span>: pointer;\n      }\n      <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n        <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#0056b3</span>;\n      }\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Formularz<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"mojePoleTekstowe\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Wpisz coś...\"</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"przyciskAkcji\"</span>></span>Wyślij<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n      <span class=\"hljs-comment\">// 1. Pobierz referencje do elementów</span>\n      <span class=\"hljs-keyword\">const</span> przycisk = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"przyciskAkcji\"</span>);\n      <span class=\"hljs-keyword\">const</span> poleTekstowe = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"mojePoleTekstowe\"</span>);\n\n      <span class=\"hljs-comment\">// 2. Dodaj nasłuchiwanie zdarzenia \"click\"</span>\n      przycisk.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-comment\">// 3. Zmień tekst przycisku</span>\n        przycisk.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">\"Wysłano!\"</span>;\n\n        <span class=\"hljs-comment\">// 4. Zmień kolor tła pola tekstowego</span>\n        poleTekstowe.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = <span class=\"hljs-string\">\"#f0f0f0\"</span>;\n        <span class=\"hljs-comment\">// Możesz też opcjonalnie wyłączyć pole tekstowe po wysłaniu</span>\n        poleTekstowe.<span class=\"hljs-property\">disabled</span> = <span class=\"hljs-literal\">true</span>;\n        przycisk.<span class=\"hljs-property\">disabled</span> = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Wyłącz przycisk, żeby nie klikać ponownie</span>\n      });\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-zmieniający-się-obrazek\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-zmieniający-się-obrazek\">>>></a>Zadanie 3: Zmieniający się obrazek</h3>\n<p>Napisz kod HTML z jednym obrazkiem (<code>&#x3C;img></code>) z atrybutem <code>id=\"mojObrazek\"</code> i początkowym <code>src</code> (może to być dowolny obrazek z internetu lub lokalny plik). Za pomocą JavaScriptu:</p>\n<ol>\n<li>Dodaj <strong>nasłuchiwanie zdarzenia kliknięcia</strong> na obrazek.</li>\n<li>Po kliknięciu, <strong>zmień atrybut <code>src</code> obrazka</strong> na inny URL (inną grafikę).</li>\n</ol>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 3 - Zmieniający się Obrazek<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n      <span class=\"hljs-selector-tag\">body</span> {\n        <span class=\"hljs-attribute\">font-family</span>: sans-serif;\n        <span class=\"hljs-attribute\">text-align</span>: center;\n        <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">50px</span>;\n      }\n      <span class=\"hljs-selector-tag\">img</span> {\n        <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">400px</span>;\n        <span class=\"hljs-attribute\">height</span>: auto;\n        <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">2px</span> solid <span class=\"hljs-number\">#ccc</span>;\n        <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">8px</span>;\n        <span class=\"hljs-attribute\">cursor</span>: pointer;\n        <span class=\"hljs-attribute\">transition</span>: transform <span class=\"hljs-number\">0.3s</span> ease;\n      }\n      <span class=\"hljs-selector-tag\">img</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n        <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.02</span>);\n      }\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Kliknij na obrazek!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span>\n      <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"mojObrazek\"</span>\n      <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://via.placeholder.com/400x200/FF5733/FFFFFF?text=Obrazek+1\"</span>\n      <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Pierwszy obrazek\"</span>\n    /></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n      <span class=\"hljs-comment\">// 1. Pobierz referencję do obrazka</span>\n      <span class=\"hljs-keyword\">const</span> obrazek = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"mojObrazek\"</span>);\n\n      <span class=\"hljs-comment\">// Lista URL-i obrazków do przełączania</span>\n      <span class=\"hljs-keyword\">const</span> obrazki = [\n        <span class=\"hljs-string\">\"https://via.placeholder.com/400x200/FF5733/FFFFFF?text=Obrazek+1\"</span>,\n        <span class=\"hljs-string\">\"https://via.placeholder.com/400x200/33FF57/FFFFFF?text=Obrazek+2\"</span>,\n        <span class=\"hljs-string\">\"https://via.placeholder.com/400x200/3357FF/FFFFFF?text=Obrazek+3\"</span>,\n      ];\n      <span class=\"hljs-keyword\">let</span> currentIndex = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Aktualny indeks obrazka</span>\n\n      <span class=\"hljs-comment\">// 2. Dodaj nasłuchiwanie zdarzenia \"click\"</span>\n      obrazek.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-comment\">// Zwiększ indeks, a jeśli przekroczysz długość tablicy, wróć na początek</span>\n        currentIndex = (currentIndex + <span class=\"hljs-number\">1</span>) % obrazki.<span class=\"hljs-property\">length</span>;\n\n        <span class=\"hljs-comment\">// Zmień atrybut src na nowy obrazek</span>\n        obrazek.<span class=\"hljs-property\">src</span> = obrazki[currentIndex];\n        obrazek.<span class=\"hljs-property\">alt</span> = <span class=\"hljs-string\">`Obrazek <span class=\"hljs-subst\">${currentIndex + <span class=\"hljs-number\">1</span>}</span>`</span>; <span class=\"hljs-comment\">// Zmień też tekst alternatywny</span>\n      });\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-masowa-zmiana-stylu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-masowa-zmiana-stylu\">>>></a>Zadanie 4: Masowa zmiana stylu</h3>\n<p>Utwórz stronę HTML z pięcioma akapitami (<code>&#x3C;p></code>). Nadaj im wszystkim tę samą klasę, np. <code>tekst-do-zmiany</code>. Za pomocą JavaScriptu:</p>\n<ol>\n<li>Pobierz <strong>wszystkie</strong> akapity o tej klasie.</li>\n<li>Używając pętli (np. <code>forEach</code>), <strong>zmień kolor tekstu</strong> każdego z nich na niebieski (<code>blue</code>) i <strong>rozmiar czcionki</strong> na <code>18px</code>.</li>\n</ol>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Zadanie 4 - Masowa Zmiana Stylu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n      <span class=\"hljs-selector-tag\">body</span> {\n        <span class=\"hljs-attribute\">font-family</span>: sans-serif;\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">20px</span>;\n      }\n      <span class=\"hljs-selector-class\">.tekst-do-zmiany</span> {\n        <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#eee</span>;\n        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n        <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">8px</span>;\n        <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f9f9f9</span>;\n      }\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Akapity do ostylowania<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tekst-do-zmiany\"</span>></span>To jest pierwszy akapit. Zmienimy jego styl!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tekst-do-zmiany\"</span>></span>Drugi akapit, również do modyfikacji.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tekst-do-zmiany\"</span>></span>Trzeci akapit. Poćwicz DOM!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tekst-do-zmiany\"</span>></span>Czwarty akapit. Świetnie sobie radzisz!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tekst-do-zmiany\"</span>></span>Piąty akapit. Ostatni do zmiany.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n      <span class=\"hljs-comment\">// 1. Pobierz wszystkie akapity o klasie \"tekst-do-zmiany\"</span>\n      <span class=\"hljs-keyword\">const</span> akapityDoZmiany = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">\".tekst-do-zmiany\"</span>);\n\n      <span class=\"hljs-comment\">// 2. Iteruj po kolekcji i zmień styl każdego akapitu</span>\n      akapityDoZmiany.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) {\n        p.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">\"blue\"</span>;\n        p.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontSize</span> = <span class=\"hljs-string\">\"18px\"</span>;\n        p.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontWeight</span> = <span class=\"hljs-string\">\"bold\"</span>; <span class=\"hljs-comment\">// Dodajmy też pogrubienie dla efektu</span>\n      });\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<p>Gratulacje! 🎉 Ukończyłeś/aś kurs podstaw DOM. Masz teraz narzędzia, by sprawić, że Twoje strony będą dynamiczne i interaktywne. Pamiętaj, że manipulowanie DOM to serce wielu operacji frontendowych w JavaScripcie.</p>\n<p>Co dalej? Możesz zgłębić temat:</p>\n<ul>\n<li><strong>Obsługa zdarzeń (Event Handling)</strong> w DOM (np. <code>click</code>, <code>mouseover</code>, <code>submit</code>).</li>\n<li><strong>Delegowanie zdarzeń (Event Delegation)</strong> dla optymalizacji.</li>\n<li>Interakcje z <strong>formularzami</strong> i walidacja danych wejściowych.</li>\n<li>Wykorzystanie DOM w połączeniu z <strong>bibliotekami/frameworkami JavaScript</strong> (np. React, Vue, Angular), które często abstrakcyjnie podchodzą do bezpośredniej manipulacji DOM.</li>\n</ul>\n<p>Masz pytania dotyczące konkretnych scenariuszy z DOM? Chcesz dowiedzieć się więcej o interakcjach użytkownika? Daj znać! 😊</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-dom.md",{"_21":1177,"_23":1178,"_25":1179,"_6":1180,"_36":967,"_38":1181,"_91":1223,"_93":1224,"_95":1225,"_97":1226,"_99":793},"Wprowadzenie do HTML","Co to jest HTML? HTML (HyperText Markup Language) to podstawowy język wykorzystywany do tworzenia i strukturyzowania stron internetowych. HTML używa elementów, które definiują różne części dokumentu, takie jak nagłówki, akapity, linki, obrazy, i wiele innych.",[744,9,1126,1127,531,34],[9],{"_21":1182,"_41":1183},"Quiz: Podstawy HTML",[1184,1192,1200,1208,1215],{"_44":1185,"_46":1186,"_52":80,"_54":1191},"<p>Co oznacza skrót HTML?</p>",[1187,1188,1189,1190],"Home Tool Markup Language","HyperText Markup Language","HyperTool Marked Language","Hyperlink Text Management Language","HTML to HyperText Markup Language – język znaczników hipertekstowych.",{"_44":1193,"_46":1194,"_52":89,"_54":1199},"<p>Który znacznik służy do tworzenia akapitu?</p>",[1195,1196,1197,1198],"<li>","<a>","<p>","<h1>","<p> służy do oznaczania akapitów tekstu.",{"_44":1201,"_46":1202,"_52":53,"_54":1207},"<p>Jak poprawnie dodać obrazek do strony?</p>",[1203,1204,1205,1206],"<image src=\"obrazek.jpg\">","<picture href=\"obrazek.jpg\">","<src img=\"obrazek.jpg\">","<img src=\"obrazek.jpg\" alt=\"Opis\" />","Poprawny sposób to <img src=\"adres\" alt=\"opis\" />.",{"_44":1209,"_46":1210,"_52":71,"_54":1214},"<p>Który element tworzy nieuporządkowaną listę?</p>",[1211,1212,1195,1213],"<ul>","<ol>","<dl>","<ul> to lista nieuporządkowana, <ol> – uporządkowana.",{"_44":1216,"_46":1217,"_52":53,"_54":1222},"<p>Za co odpowiada atrybut 'action' w tagu <code>&#x3C;form></code>?</p>",[1218,1219,1220,1221],"Definiuje typ przesyłanych danych","Włącza walidację formularza","Dodaje pole tekstowe","Określa adres, pod który zostaną przesłane dane formularza","Atrybut action określa adres, pod który zostaną wysłane dane formularza.","80dc9e02-1b05-4980-9ed4-cd301a90445a","wprowadzenie-do-html","<p>Witaj w świecie tworzenia stron internetowych! 👋 Jeśli kiedykolwiek zastanawiałeś/aś się, jak powstają strony, które codziennie przeglądasz, ten kurs jest dla Ciebie. Nauczysz się podstaw <strong>HTML</strong>, języka, który jest fundamentem każdej witryny. Nie musisz mieć żadnego wcześniejszego doświadczenia – wszystko wytłumaczymy krok po kroku! Gotowy/a, aby zacząć tworzyć swoje pierwsze strony? Zaczynamy! 🚀</p>\n<h2 id=\"spis-treści\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#spis-treści\">>></a>Spis treści</h2>\n<ol>\n<li><a href=\"#co-to-jest-html\">Co to jest HTML?</a></li>\n<li><a href=\"#jak-dzia%C5%82a-html-znaczniki-i-elementy\">Jak działa HTML? Znaczniki i elementy</a></li>\n<li><a href=\"#podstawowa-struktura-dokumentu-html\">Podstawowa struktura dokumentu HTML</a>\n<ul>\n<li><a href=\"#wyja%C5%9Bnienie-struktury-krok-po-kroku\">Wyjaśnienie struktury krok po kroku</a></li>\n</ul>\n</li>\n<li><a href=\"#podstawowe-elementy-html--tw%C3%B3j-zestaw-narz%C4%99dzi\">Podstawowe elementy HTML – Twój zestaw narzędzi</a>\n<ul>\n<li><a href=\"#nag%C5%82%C3%B3wki-od-najwa%C5%BCniejszych-do-najmniej-wa%C5%BCnych\">Nagłówki: Od najważniejszych do najmniej ważnych</a></li>\n<li><a href=\"#akapity-tworzenie-blok%C3%B3w-tekstu\">Akapity: Tworzenie bloków tekstu</a></li>\n<li><a href=\"#linki-%C5%82%C4%85czenie-stron-ze-sob%C4%85\">Linki: Łączenie stron ze sobą</a></li>\n<li><a href=\"#obrazy-dodawanie-grafiki-do-strony\">Obrazy: Dodawanie grafiki do strony</a></li>\n<li><a href=\"#listy-uporz%C4%85dkowanie-informacji\">Listy: Uporządkowanie informacji</a></li>\n</ul>\n</li>\n<li><a href=\"#formularze-zbieranie-danych-od-u%C5%BCytkownik%C3%B3w\">Formularze: Zbieranie danych od użytkowników</a>\n<ul>\n<li><a href=\"#elementy-formularza-pola-tekstowe-przyciski-i-inne\">Elementy formularza: Pola tekstowe, przyciski i inne</a></li>\n</ul>\n</li>\n<li><a href=\"#zadania-do-wykonania-sprawd%C5%BA-swoj%C4%85-wiedz%C4%99\">Zadania do wykonania: Sprawdź swoją wiedzę!</a>\n<ul>\n<li><a href=\"#zadanie-1-twoja-pierwsza-strona\">Zadanie 1: Twoja pierwsza strona</a></li>\n<li><a href=\"#zadanie-2-strona-z-obrazkiem\">Zadanie 2: Strona z obrazkiem</a></li>\n<li><a href=\"#zadanie-3-listy-smak%C3%B3w-i-krok%C3%B3w\">Zadanie 3: Listy smaków i kroków</a></li>\n<li><a href=\"#zadanie-4-prosty-formularz\">Zadanie 4: Prosty formularz</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"co-to-jest-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#co-to-jest-html\">>></a>Co to jest HTML?</h2>\n<p><strong>HTML</strong> to skrót od <strong>HyperText Markup Language</strong>, czyli <strong>Hypertekstowy Język Znaczników</strong>. Co to oznacza w praktyce? To język, który służy do tworzenia szkieletu i struktury każdej strony internetowej. Pomyśl o nim jak o planie architektonicznym domu – określa, gdzie będą ściany, okna, drzwi i podłogi, zanim jeszcze zajmiesz się dekoracją. 🏠</p>\n<p>HTML nie jest językiem programowania (nie wykonuje skomplikowanych operacji ani obliczeń), ale językiem znaczników. Oznacza to, że używa specjalnych kodów, zwanych <strong>znacznikami</strong> (ang. <em>tags</em>), aby opisać różne części dokumentu. Dzięki nim przeglądarka internetowa (taka jak Chrome, Firefox czy Safari) wie, co jest nagłówkiem, co akapitem, gdzie znajduje się obrazek, a gdzie link. Bez HTML-a strony internetowe byłyby po prostu blokiem niezrozumiałego tekstu.</p>\n<hr>\n<h2 id=\"jak-działa-html-znaczniki-i-elementy\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#jak-działa-html-znaczniki-i-elementy\">>></a>Jak działa HTML? Znaczniki i elementy</h2>\n<p>HTML działa na zasadzie <strong>elementów</strong>, które są tworzone za pomocą <strong>znaczników</strong>.</p>\n<p>Najprościej mówiąc, znacznik to słowo kluczowe ujęte w nawiasy kątowe, np. <code>&#x3C;p></code> lub <code>&#x3C;h1></code>.</p>\n<p>Większość znaczników występuje w parach:</p>\n<ul>\n<li><strong>Znacznik otwierający:</strong> np. <code>&#x3C;p></code></li>\n<li><strong>Znacznik zamykający:</strong> np. <code>&#x3C;/p></code> (z ukośnikiem!)</li>\n</ul>\n<p>Pomiędzy tymi dwoma znacznikami umieszczamy zawartość, którą chcemy oznaczyć. Całość – znacznik otwierający, zawartość i znacznik zamykający – tworzy <strong>element HTML</strong>.</p>\n<p><strong>Przykład:</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>To jest mój pierwszy akapit!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n</code></pre>\n<p>Tutaj:</p>\n<ul>\n<li><code>&#x3C;p></code> to znacznik otwierający,</li>\n<li><code>&#x3C;/p></code> to znacznik zamykający,</li>\n<li>\"To jest mój pierwszy akapit!\" to zawartość,</li>\n<li>Całość to <strong>element akapitu</strong>.</li>\n</ul>\n<p>Są też znaczniki, które nie potrzebują znacznika zamykającego, ponieważ nie zawierają żadnej zawartości między znacznikami. Nazywamy je <strong>znacznikami pustymi</strong> lub <strong>samozamykającymi się</strong>. Przykładem jest znacznik obrazka <code>&#x3C;img></code> lub przejścia do nowej linii <code>&#x3C;br></code>.</p>\n<hr>\n<h2 id=\"podstawowa-struktura-dokumentu-html\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowa-struktura-dokumentu-html\">>></a>Podstawowa struktura dokumentu HTML</h2>\n<p>Każdy plik HTML powinien mieć podstawową, określoną strukturę, która informuje przeglądarkę, jak ma interpretować i wyświetlać zawartość. To jak szkielet, na którym zbudujemy całą resztę. 💀</p>\n<p>Oto standardowy szablon, który zawsze będzie punktem wyjścia:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Tytuł mojej wspaniałej strony<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Witaj, świecie HTML!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n      To jest moja pierwsza prawdziwa strona internetowa. Jestem\n      podekscytowany/a!\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h3 id=\"wyjaśnienie-struktury-krok-po-kroku\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#wyjaśnienie-struktury-krok-po-kroku\">>>></a>Wyjaśnienie struktury krok po kroku</h3>\n<p>Rozbierzmy ten kod na części, aby dokładnie zrozumieć, co oznacza każdy element:</p>\n<ul>\n<li>\n<p><strong><code>&#x3C;!DOCTYPE html></code></strong></p>\n<ul>\n<li>To pierwsza linia w każdym dokumencie HTML. Mówi przeglądarce, że używasz <strong>HTML5</strong>, najnowszej wersji HTML. To ważne, bo pomaga przeglądarce prawidłowo renderować stronę.</li>\n</ul>\n</li>\n<li>\n<p><strong><code>&#x3C;html lang=\"pl\">...&#x3C;/html></code></strong></p>\n<ul>\n<li>To jest <strong>korzeń</strong> całego dokumentu HTML. Wszystkie inne elementy strony muszą znajdować się wewnątrz tego znacznika. Atrybut <code>lang=\"pl\"</code> informuje przeglądarkę i wyszukiwarki, że język treści na stronie to <strong>polski</strong>. To jest ważne dla dostępności i SEO (pozycjonowania w wyszukiwarkach).</li>\n</ul>\n</li>\n<li>\n<p><strong><code>&#x3C;head>...&#x3C;/head></code></strong></p>\n<ul>\n<li>\n<p>Sekcja <code>&#x3C;head></code> zawiera <strong>meta dane</strong> – informacje o stronie, które nie są widoczne bezpośrednio dla użytkownika na stronie, ale są kluczowe dla przeglądarki, wyszukiwarek i mediów społecznościowych. To tak, jakbyś przygotowywał/a brief dla kogoś, kto ma zobaczyć Twoją pracę. 📋</p>\n</li>\n<li>\n<p><strong><code>&#x3C;meta charset=\"UTF-8\" /></code></strong></p>\n<ul>\n<li>Ten znacznik ustawia <strong>kodowanie znaków</strong> na <strong>UTF-8</strong>. UTF-8 to standardowe kodowanie, które obsługuje wszystkie języki świata, w tym polskie znaki (ą, ę, ć, ł, itd.). Bez tego znacznika polskie litery mogłyby wyświetlać się jako \"krzaczki\". 🐛</li>\n</ul>\n</li>\n<li>\n<p><strong><code>&#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /></code></strong></p>\n<ul>\n<li>Ten meta tag jest niezwykle ważny dla <strong>responsywności</strong> strony. Mówi przeglądarce na urządzeniach mobilnych (smartfonach, tabletach), aby strona była wyświetlana z odpowiednią szerokością (<code>width=device-width</code>) i początkowym skalowaniem (<code>initial-scale=1.0</code>). Dzięki temu Twoja strona będzie wyglądać dobrze zarówno na dużym ekranie komputera, jak i na małym ekranie telefonu. 📱🖥️</li>\n</ul>\n</li>\n<li>\n<p><strong><code>&#x3C;title>Tytuł mojej wspaniałej strony&#x3C;/title></code></strong></p>\n<ul>\n<li>Tekst wewnątrz znacznika <code>&#x3C;title></code> to <strong>tytuł strony</strong>, który pojawia się na karcie przeglądarki lub w zakładkach. Jest to również to, co widzą użytkownicy w wynikach wyszukiwania Google. Wybierz chwytliwy i opisowy tytuł! 🔖</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong><code>&#x3C;body>...&#x3C;/body></code></strong></p>\n<ul>\n<li>Sekcja <code>&#x3C;body></code> zawiera całą <strong>widoczną treść strony</strong> – to, co użytkownik faktycznie zobaczy w oknie przeglądarki. Wszystkie Twoje nagłówki, akapity, obrazy, linki, listy i formularze znajdą się tutaj. Pomyśl o tym jako o głównym \"ciele\" Twojej strony. 🖼️</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"podstawowe-elementy-html--twój-zestaw-narzędzi\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#podstawowe-elementy-html--twój-zestaw-narzędzi\">>></a>Podstawowe elementy HTML – Twój zestaw narzędzi</h2>\n<p>Teraz, gdy znasz podstawową strukturę, przejdźmy do konkretnych elementów, których będziesz używać najczęściej do tworzenia treści. To jak Twoje klocki LEGO do budowania strony! 🧱</p>\n<h3 id=\"nagłówki-od-najważniejszych-do-najmniej-ważnych\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#nagłówki-od-najważniejszych-do-najmniej-ważnych\">>>></a>Nagłówki: Od najważniejszych do najmniej ważnych</h3>\n<p>Nagłówki (<code>&#x3C;h1></code> do <code>&#x3C;h6></code>) służą do definiowania tytułów i podtytułów na stronie. Są kluczowe dla struktury treści i pomagają użytkownikom (i wyszukiwarkom) zrozumieć hierarchię informacji. <code>&#x3C;h1></code> to najważniejszy nagłówek, a <code>&#x3C;h6></code> najmniej ważny. Używaj ich logicznie, jak w książce: <code>&#x3C;h1></code> dla tytułu rozdziału, <code>&#x3C;h2></code> dla podrozdziału itd. 📚</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>To jest główny tytuł strony (najważniejszy)<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>To jest podtytuł drugiego poziomu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>To jest podtytuł trzeciego poziomu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h4</span>></span>Podtytuł czwartego poziomu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h4</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h5</span>></span>Podtytuł piątego poziomu<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h5</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h6</span>></span>Podtytuł szóstego poziomu (najmniej ważny)<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h6</span>></span>\n</code></pre>\n<h3 id=\"akapity-tworzenie-bloków-tekstu\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#akapity-tworzenie-bloków-tekstu\">>>></a>Akapity: Tworzenie bloków tekstu</h3>\n<p>Akapity tekstu oznacza się elementem <code>&#x3C;p></code>. Służą one do grupowania zwykłego tekstu. Każdy akapit zaczyna się w nowej linii i ma pewne marginesy, które oddzielają go od innych elementów.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n  To jest pierwszy akapit mojej strony. Tutaj mogę pisać o czym tylko zechcę.\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n  A to jest drugi akapit. Widzisz, jak przeglądarka automatycznie dodaje odstęp\n  między nimi?\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n</code></pre>\n<h3 id=\"linki-łączenie-stron-ze-sobą\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#linki-łączenie-stron-ze-sobą\">>>></a>Linki: Łączenie stron ze sobą</h3>\n<p>Linki (<code>&#x3C;a></code>, od ang. <em>anchor</em>) to serce internetu! Pozwalają użytkownikom nawigować między stronami internetowymi. Aby stworzyć link, użyj znacznika <code>&#x3C;a></code> i atrybutu <strong><code>href</code></strong> (Hypertext Reference), który wskazuje adres docelowy.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://www.example.com\"</span>\n  ></span>Kliknij tutaj, aby przejść do strony Example.com&#x3C;/a\n>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n  Odwiedź również <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://www.google.com\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span>></span>Google<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>,\n  aby szukać informacji (otworzy się w nowej karcie).\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n</code></pre>\n<ul>\n<li><strong><code>href</code></strong>: Ten atrybut jest najważniejszy – określa adres URL, na który link prowadzi.</li>\n<li><strong><code>target=\"_blank\"</code></strong>: Jeśli dodasz ten atrybut, link otworzy się w nowej karcie przeglądarki, co jest często przydatne, gdy nie chcesz, by użytkownik opuścił Twoją stronę.</li>\n</ul>\n<h3 id=\"obrazy-dodawanie-grafiki-do-strony\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#obrazy-dodawanie-grafiki-do-strony\">>>></a>Obrazy: Dodawanie grafiki do strony</h3>\n<p>Element <code>&#x3C;img></code> służy do wstawiania obrazów na stronę. Jest to <strong>znacznik pusty</strong>, co oznacza, że nie ma znacznika zamykającego, ponieważ obrazek \"nie zawiera\" tekstu między znacznikami, a jedynie odwołuje się do pliku graficznego.</p>\n<p>Wymaga dwóch kluczowych atrybutów:</p>\n<ul>\n<li><strong><code>src</code></strong> (source): Określa ścieżkę do pliku obrazu (adres URL lub ścieżka do pliku na Twoim komputerze/serwerze).</li>\n<li><strong><code>alt</code></strong> (alternative text): Jest to <strong>niezwykle ważny</strong> tekst alternatywny, który wyświetla się, jeśli obrazek się nie załaduje, lub jest odczytywany przez czytniki ekranowe dla osób niewidomych. Zawsze dodawaj sensowny <code>alt</code>!</li>\n</ul>\n<!-- end list -->\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span>\n  <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://via.placeholder.com/300x200\"</span>\n  <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Przykładowy obrazek prostokątny o wymiarach 300x200 pikseli\"</span>\n/></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span>\n  <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"moj-pies.jpg\"</span>\n  <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Zdjęcie mojego psa rasy golden retriever leżącego na trawie\"</span>\n/></span>\n</code></pre>\n<h3 id=\"listy-uporządkowanie-informacji\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#listy-uporządkowanie-informacji\">>>></a>Listy: Uporządkowanie informacji</h3>\n<p>Listy to świetny sposób na uporządkowanie informacji na stronie. HTML oferuje dwa główne typy list:</p>\n<ol>\n<li>\n<p><strong>Listy nieuporządkowane (<code>&#x3C;ul></code> - unordered list)</strong>: Elementy listy są oznaczane punktami (kropkami, kwadratami itp.). Idealne do wyliczania rzeczy, gdzie kolejność nie ma znaczenia.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Moje ulubione owoce:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Jabłka<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Banany<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Pomarańcze<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n</code></pre>\n</li>\n<li>\n<p><strong>Listy uporządkowane (<code>&#x3C;ol></code> - ordered list)</strong>: Elementy listy są numerowane (1, 2, 3...). Idealne do kroków, instrukcji, czy rankingu, gdzie kolejność jest ważna.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span>></span>Kroki do ugotowania kawy:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ol</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Zagotuj wodę.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Wsyp kawę do kubka.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Zalej kawę gorącą wodą.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Dodaj cukier i mleko (opcjonalnie).<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ol</span>></span>\n</code></pre>\n</li>\n</ol>\n<p>W obu przypadkach, każdy pojedynczy element listy jest umieszczany w znaczniku <strong><code>&#x3C;li></code></strong> (list item).</p>\n<hr>\n<h2 id=\"formularze-zbieranie-danych-od-użytkowników\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#formularze-zbieranie-danych-od-użytkowników\">>></a>Formularze: Zbieranie danych od użytkowników</h2>\n<p>Formularze to interaktywne elementy, które pozwalają użytkownikom wprowadzać dane, takie jak imię, adres e-mail, hasło, czy wybierać opcje. Są podstawą każdego interaktywnego serwisu internetowego – od logowania, przez kontakt, po koszyki zakupowe. 🛒</p>\n<p>Głównym elementem jest znacznik <strong><code>&#x3C;form></code></strong>, który zawiera wszystkie pola formularza.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"/submit-data\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"username\"</span>></span>Nazwa użytkownika:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n    <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n    <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"username\"</span>\n    <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"username\"</span>\n    <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Wpisz swoje imię\"</span>\n  /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"email\"</span>></span>Adres e-mail:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">required</span> /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Wybierz swój ulubiony kolor:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"radio\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"red\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"fav_color\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"red\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"red\"</span>></span>Czerwony<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"radio\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"blue\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"fav_color\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"blue\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"blue\"</span>></span>Niebieski<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"newsletter\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"newsletter\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"yes\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"newsletter\"</span>></span>Zapisz się do newslettera<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Wyślij formularz\"</span> /></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n</code></pre>\n<h3 id=\"elementy-formularza-pola-tekstowe-przyciski-i-inne\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#elementy-formularza-pola-tekstowe-przyciski-i-inne\">>>></a>Elementy formularza: Pola tekstowe, przyciski i inne</h3>\n<ul>\n<li>\n<p><strong><code>action</code></strong>: Ten atrybut w tagu <code>&#x3C;form></code> określa <strong>adres URL</strong>, na który zostaną wysłane dane z formularza po jego zatwierdzeniu. Zazwyczaj jest to adres skryptu na serwerze, który przetworzy te dane.</p>\n</li>\n<li>\n<p><strong><code>method</code></strong>: Określa <strong>metodę HTTP</strong>, jaką dane zostaną wysłane. Najczęściej używa się:</p>\n<ul>\n<li><strong><code>\"post\"</code></strong>: Dane są wysyłane \"za kulisami\" i nie są widoczne w adresie URL. Używane do przesyłania wrażliwych danych (np. haseł) lub dużych ilości danych.</li>\n<li><strong><code>\"get\"</code></strong>: Dane są dodawane do adresu URL. Dobre dla prostych zapytań (np. wyszukiwanie).</li>\n</ul>\n</li>\n<li>\n<p><strong><code>&#x3C;label for=\"id_pola\">Etykieta:&#x3C;/label></code></strong>: Element <code>&#x3C;label></code> tworzy etykietę (opis) dla pola formularza. Atrybut <code>for</code> powinien mieć tę samą wartość co atrybut <code>id</code> w powiązanym polu <code>&#x3C;input></code>. Dzięki temu kliknięcie etykiety aktywuje pole, co poprawia dostępność.</p>\n</li>\n<li>\n<p><strong><code>&#x3C;input type=\"...\"></code></strong>: To najbardziej wszechstronny element formularza. Atrybut <code>type</code> definiuje rodzaj pola:</p>\n<ul>\n<li><strong><code>type=\"text\"</code></strong>: Standardowe pole do wprowadzania krótkiego tekstu (np. imię, nazwisko).\n<ul>\n<li><code>placeholder</code>: Tekst podpowiedzi widoczny w polu, zanim użytkownik zacznie pisać.</li>\n</ul>\n</li>\n<li><strong><code>type=\"email\"</code></strong>: Pole do wprowadzania adresu e-mail. Przeglądarka może sprawdzić, czy format adresu jest poprawny.\n<ul>\n<li><code>required</code>: Atrybut, który sprawia, że pole jest obowiązkowe do wypełnienia przed wysłaniem formularza.</li>\n</ul>\n</li>\n<li><strong><code>type=\"password\"</code></strong>: Pole do wprowadzania hasła. Wpisywany tekst jest maskowany (np. kropkami).</li>\n<li><strong><code>type=\"radio\"</code></strong>: Przyciski wyboru. Pozwalają wybrać <strong>tylko jedną</strong> opcję z grupy. Opcje w tej samej grupie muszą mieć tę samą wartość atrybutu <code>name</code>.</li>\n<li><strong><code>type=\"checkbox\"</code></strong>: Pola wyboru. Pozwalają wybrać <strong>jedną lub więcej</strong> opcji z listy.</li>\n<li><strong><code>type=\"submit\"</code></strong>: Przycisk służący do wysłania danych formularza. Atrybut <code>value</code> określa tekst wyświetlany na przycisku.</li>\n</ul>\n</li>\n<li>\n<p><strong><code>id=\"nazwa_id\"</code></strong>: Unikalny identyfikator dla każdego elementu HTML na stronie. Jest używany do łączenia etykiet z polami formularza oraz do stylizacji (CSS) i interakcji (JavaScript).</p>\n</li>\n<li>\n<p><strong><code>name=\"nazwa_pola\"</code></strong>: To kluczowy atrybut dla formularzy! Określa nazwę pola, pod którą jego wartość zostanie wysłana na serwer. Bez <code>name</code> dane z pola nie zostaną przesłane.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"zadania-do-wykonania-sprawdź-swoją-wiedzę\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadania-do-wykonania-sprawdź-swoją-wiedzę\">>></a>Zadania do wykonania: Sprawdź swoją wiedzę!</h2>\n<p>Czas na praktykę! Wykonaj poniższe zadania, aby utrwalić zdobytą wiedzę. Po każdym zadaniu możesz rozwinąć sekcję <code>Pokaż rozwiązanie</code>, aby sprawdzić swój kod. Pamiętaj, że nauka przez działanie jest najskuteczniejsza! 💪</p>\n<h3 id=\"zadanie-1-twoja-pierwsza-strona\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-1-twoja-pierwsza-strona\">>>></a>Zadanie 1: Twoja pierwsza strona</h3>\n<p>Utwórz nowy plik HTML (np. <code>moja_strona.html</code>) i dodaj do niego:</p>\n<ul>\n<li>Deklarację <code>&#x3C;!DOCTYPE html></code>.</li>\n<li>Podstawową strukturę <code>&#x3C;html></code>, <code>&#x3C;head></code> i <code>&#x3C;body></code>.</li>\n<li>W sekcji <code>&#x3C;head></code> dodaj tytuł strony: \"Moja wspaniała strona o HTML\".</li>\n<li>W sekcji <code>&#x3C;body></code> dodaj:\n<ul>\n<li>Nagłówek <code>&#x3C;h1></code> z tytułem \"Witaj w świecie HTML!\".</li>\n<li>Akapit z krótkim opisem o tym, co właśnie się uczysz.</li>\n<li>Link do strony głównej Google ( <code>https://www.google.com</code> ), który otworzy się w nowej karcie.</li>\n</ul>\n</li>\n</ul>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Moja wspaniała strona o HTML<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Witaj w świecie HTML!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n      Właśnie uczę się podstaw języka HTML, który jest fundamentem każdej strony\n      internetowej. Jest to naprawdę fascynujące!\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n      Możesz\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://www.google.com\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span>></span>odwiedzić Google<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>, aby\n      znaleźć więcej informacji.\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-2-strona-z-obrazkiem\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-2-strona-z-obrazkiem\">>>></a>Zadanie 2: Strona z obrazkiem</h3>\n<p>Stwórz nową stronę HTML o nazwie <code>obrazki.html</code>, która zawiera:</p>\n<ul>\n<li>Nagłówek <code>&#x3C;h2></code> o treści \"Galeria obrazków\".</li>\n<li>Obrazek z internetu (możesz użyć dowolnego publicznego adresu URL obrazka, np. <code>https://picsum.photos/400/300</code>).</li>\n<li>Upewnij się, że obrazek ma sensowny tekst alternatywny (<code>alt</code>).</li>\n</ul>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Galeria obrazków<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Galeria obrazków<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span>\n      <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://picsum.photos/400/300\"</span>\n      <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Losowy obrazek przedstawiający krajobraz lub architekturę\"</span>\n    /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>To jest przykładowy obrazek pobrany z serwisu Picsum Photos.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-3-listy-smaków-i-kroków\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-3-listy-smaków-i-kroków\">>>></a>Zadanie 3: Listy smaków i kroków</h3>\n<p>Utwórz plik <code>listy.html</code>, w którym znajdą się:</p>\n<ul>\n<li>Nagłówek <code>&#x3C;h1></code> o treści \"Moje ulubione rzeczy\".</li>\n<li><strong>Lista nieuporządkowana</strong> z trzema ulubionymi kolorami.</li>\n<li><strong>Lista uporządkowana</strong> z trzema krokami, jak zrobić kanapkę.</li>\n</ul>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Listy w HTML<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Moje ulubione rzeczy<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Ulubione kolory:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Niebieski<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Zielony<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Czerwony<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Jak zrobić kanapkę:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ol</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Weź dwie kromki chleba.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Posmaruj jedną kromkę masłem lub innym smarowidłem.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Dodaj ulubione składniki (ser, szynka, warzywa).<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Przykryj drugą kromką chleba.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ol</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<h3 id=\"zadanie-4-prosty-formularz\" class=\"scroll-mt-20 lg:scroll-mt-10\"><a class=\"mr-2 no-underline hover:underline focus-visible:underline select-none\" href=\"#zadanie-4-prosty-formularz\">>>></a>Zadanie 4: Prosty formularz</h3>\n<p>Stwórz plik <code>formularz.html</code>, w którym umieścisz prosty formularz kontaktowy. Formularz powinien zawierać:</p>\n<ul>\n<li>Nagłówek <code>&#x3C;h2></code> o treści \"Formularz kontaktowy\".</li>\n<li>Pole tekstowe na <strong>imię i nazwisko</strong> (<code>type=\"text\"</code>).</li>\n<li>Pole tekstowe na <strong>adres e-mail</strong> (<code>type=\"email\"</code>, obowiązkowe do wypełnienia).</li>\n<li>Pole typu <strong>checkbox</strong> z napisem \"Zgadzam się na otrzymywanie newslettera\".</li>\n<li>Przycisk do <strong>wysłania formularza</strong> z napisem \"Wyślij wiadomość\".</li>\n</ul>\n<p>Pamiętaj o użyciu etykiet <code>&#x3C;label></code> dla każdego pola i nadaniu odpowiednich <code>id</code> oraz <code>name</code>.</p>\n<details>\n<summary>\n<span>Pokaż rozwiązanie</span>\n</summary>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"pl\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Mój formularz<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Formularz kontaktowy<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"/submit-contact\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"full_name\"</span>></span>Imię i nazwisko:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"full_name\"</span>\n        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"full_name\"</span>\n        <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Jan Kowalski\"</span>\n      /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"email_contact\"</span>></span>Adres e-mail:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\"</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"email_contact\"</span>\n        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"email_contact\"</span>\n        <span class=\"hljs-attr\">required</span>\n        <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"twoj.email@example.com\"</span>\n      /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"newsletter_consent\"</span>\n        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"newsletter_consent\"</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"yes\"</span>\n      /></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"newsletter_consent\"</span>\n        ></span>Zgadzam się na otrzymywanie newslettera&#x3C;/label\n      ><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Wyślij wiadomość\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n</details>\n<hr>\n<p>To koniec Twojej pierwszej lekcji HTML! 🎉 Masz teraz solidne podstawy, aby zacząć budować swoje własne strony internetowe. Pamiętaj, że praktyka czyni mistrza – im więcej będziesz kodować, tym lepiej zrozumiesz ten język.</p>\n<p>Co chciałbyś/chciałabyś poznać dalej? Może stylowanie stron za pomocą CSS, albo interaktywność dzięki JavaScript? Daj znać! 😊</p>","https://github.com/jakubszpil/jakubszpil.github.io/edit/main/app/content/courses/wprowadzenie-do-html.md"]
